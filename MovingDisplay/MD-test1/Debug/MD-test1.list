
MD-test1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e38  080000b8  080000b8  000010b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  08004ef0  08004ef0  00005ef0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004fcc  08004fcc  00006018  2**0
                  CONTENTS
  4 .ARM          00000000  08004fcc  08004fcc  00006018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004fcc  08004fcc  00006018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004fcc  08004fcc  00005fcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004fd0  08004fd0  00005fd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  20000000  08004fd4  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000370  20000018  08004fec  00006018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000388  08004fec  00006388  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00006018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010995  00000000  00000000  00006040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023b0  00000000  00000000  000169d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e28  00000000  00000000  00018d88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b40  00000000  00000000  00019bb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015a3b  00000000  00000000  0001a6f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011829  00000000  00000000  0003012b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008aa47  00000000  00000000  00041954  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000086  00000000  00000000  000cc39b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000333c  00000000  00000000  000cc424  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  000cf760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000018 	.word	0x20000018
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08004ed8 	.word	0x08004ed8

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	2000001c 	.word	0x2000001c
 80000fc:	08004ed8 	.word	0x08004ed8

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	@ 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f8f0 	bl	80003e8 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			@ (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__divsi3>:
 8000214:	4603      	mov	r3, r0
 8000216:	430b      	orrs	r3, r1
 8000218:	d47f      	bmi.n	800031a <__divsi3+0x106>
 800021a:	2200      	movs	r2, #0
 800021c:	0843      	lsrs	r3, r0, #1
 800021e:	428b      	cmp	r3, r1
 8000220:	d374      	bcc.n	800030c <__divsi3+0xf8>
 8000222:	0903      	lsrs	r3, r0, #4
 8000224:	428b      	cmp	r3, r1
 8000226:	d35f      	bcc.n	80002e8 <__divsi3+0xd4>
 8000228:	0a03      	lsrs	r3, r0, #8
 800022a:	428b      	cmp	r3, r1
 800022c:	d344      	bcc.n	80002b8 <__divsi3+0xa4>
 800022e:	0b03      	lsrs	r3, r0, #12
 8000230:	428b      	cmp	r3, r1
 8000232:	d328      	bcc.n	8000286 <__divsi3+0x72>
 8000234:	0c03      	lsrs	r3, r0, #16
 8000236:	428b      	cmp	r3, r1
 8000238:	d30d      	bcc.n	8000256 <__divsi3+0x42>
 800023a:	22ff      	movs	r2, #255	@ 0xff
 800023c:	0209      	lsls	r1, r1, #8
 800023e:	ba12      	rev	r2, r2
 8000240:	0c03      	lsrs	r3, r0, #16
 8000242:	428b      	cmp	r3, r1
 8000244:	d302      	bcc.n	800024c <__divsi3+0x38>
 8000246:	1212      	asrs	r2, r2, #8
 8000248:	0209      	lsls	r1, r1, #8
 800024a:	d065      	beq.n	8000318 <__divsi3+0x104>
 800024c:	0b03      	lsrs	r3, r0, #12
 800024e:	428b      	cmp	r3, r1
 8000250:	d319      	bcc.n	8000286 <__divsi3+0x72>
 8000252:	e000      	b.n	8000256 <__divsi3+0x42>
 8000254:	0a09      	lsrs	r1, r1, #8
 8000256:	0bc3      	lsrs	r3, r0, #15
 8000258:	428b      	cmp	r3, r1
 800025a:	d301      	bcc.n	8000260 <__divsi3+0x4c>
 800025c:	03cb      	lsls	r3, r1, #15
 800025e:	1ac0      	subs	r0, r0, r3
 8000260:	4152      	adcs	r2, r2
 8000262:	0b83      	lsrs	r3, r0, #14
 8000264:	428b      	cmp	r3, r1
 8000266:	d301      	bcc.n	800026c <__divsi3+0x58>
 8000268:	038b      	lsls	r3, r1, #14
 800026a:	1ac0      	subs	r0, r0, r3
 800026c:	4152      	adcs	r2, r2
 800026e:	0b43      	lsrs	r3, r0, #13
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x64>
 8000274:	034b      	lsls	r3, r1, #13
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x70>
 8000280:	030b      	lsls	r3, r1, #12
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0ac3      	lsrs	r3, r0, #11
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x7c>
 800028c:	02cb      	lsls	r3, r1, #11
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0a83      	lsrs	r3, r0, #10
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x88>
 8000298:	028b      	lsls	r3, r1, #10
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0a43      	lsrs	r3, r0, #9
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x94>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a03      	lsrs	r3, r0, #8
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0xa0>
 80002b0:	020b      	lsls	r3, r1, #8
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	d2cd      	bcs.n	8000254 <__divsi3+0x40>
 80002b8:	09c3      	lsrs	r3, r0, #7
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d301      	bcc.n	80002c2 <__divsi3+0xae>
 80002be:	01cb      	lsls	r3, r1, #7
 80002c0:	1ac0      	subs	r0, r0, r3
 80002c2:	4152      	adcs	r2, r2
 80002c4:	0983      	lsrs	r3, r0, #6
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d301      	bcc.n	80002ce <__divsi3+0xba>
 80002ca:	018b      	lsls	r3, r1, #6
 80002cc:	1ac0      	subs	r0, r0, r3
 80002ce:	4152      	adcs	r2, r2
 80002d0:	0943      	lsrs	r3, r0, #5
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xc6>
 80002d6:	014b      	lsls	r3, r1, #5
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0903      	lsrs	r3, r0, #4
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xd2>
 80002e2:	010b      	lsls	r3, r1, #4
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	08c3      	lsrs	r3, r0, #3
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xde>
 80002ee:	00cb      	lsls	r3, r1, #3
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0883      	lsrs	r3, r0, #2
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xea>
 80002fa:	008b      	lsls	r3, r1, #2
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0843      	lsrs	r3, r0, #1
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xf6>
 8000306:	004b      	lsls	r3, r1, #1
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	1a41      	subs	r1, r0, r1
 800030e:	d200      	bcs.n	8000312 <__divsi3+0xfe>
 8000310:	4601      	mov	r1, r0
 8000312:	4152      	adcs	r2, r2
 8000314:	4610      	mov	r0, r2
 8000316:	4770      	bx	lr
 8000318:	e05d      	b.n	80003d6 <__divsi3+0x1c2>
 800031a:	0fca      	lsrs	r2, r1, #31
 800031c:	d000      	beq.n	8000320 <__divsi3+0x10c>
 800031e:	4249      	negs	r1, r1
 8000320:	1003      	asrs	r3, r0, #32
 8000322:	d300      	bcc.n	8000326 <__divsi3+0x112>
 8000324:	4240      	negs	r0, r0
 8000326:	4053      	eors	r3, r2
 8000328:	2200      	movs	r2, #0
 800032a:	469c      	mov	ip, r3
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d32d      	bcc.n	800038e <__divsi3+0x17a>
 8000332:	0a03      	lsrs	r3, r0, #8
 8000334:	428b      	cmp	r3, r1
 8000336:	d312      	bcc.n	800035e <__divsi3+0x14a>
 8000338:	22fc      	movs	r2, #252	@ 0xfc
 800033a:	0189      	lsls	r1, r1, #6
 800033c:	ba12      	rev	r2, r2
 800033e:	0a03      	lsrs	r3, r0, #8
 8000340:	428b      	cmp	r3, r1
 8000342:	d30c      	bcc.n	800035e <__divsi3+0x14a>
 8000344:	0189      	lsls	r1, r1, #6
 8000346:	1192      	asrs	r2, r2, #6
 8000348:	428b      	cmp	r3, r1
 800034a:	d308      	bcc.n	800035e <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d304      	bcc.n	800035e <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	d03a      	beq.n	80003ce <__divsi3+0x1ba>
 8000358:	1192      	asrs	r2, r2, #6
 800035a:	e000      	b.n	800035e <__divsi3+0x14a>
 800035c:	0989      	lsrs	r1, r1, #6
 800035e:	09c3      	lsrs	r3, r0, #7
 8000360:	428b      	cmp	r3, r1
 8000362:	d301      	bcc.n	8000368 <__divsi3+0x154>
 8000364:	01cb      	lsls	r3, r1, #7
 8000366:	1ac0      	subs	r0, r0, r3
 8000368:	4152      	adcs	r2, r2
 800036a:	0983      	lsrs	r3, r0, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d301      	bcc.n	8000374 <__divsi3+0x160>
 8000370:	018b      	lsls	r3, r1, #6
 8000372:	1ac0      	subs	r0, r0, r3
 8000374:	4152      	adcs	r2, r2
 8000376:	0943      	lsrs	r3, r0, #5
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x16c>
 800037c:	014b      	lsls	r3, r1, #5
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0903      	lsrs	r3, r0, #4
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x178>
 8000388:	010b      	lsls	r3, r1, #4
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	08c3      	lsrs	r3, r0, #3
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x184>
 8000394:	00cb      	lsls	r3, r1, #3
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0883      	lsrs	r3, r0, #2
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x190>
 80003a0:	008b      	lsls	r3, r1, #2
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	d2d9      	bcs.n	800035c <__divsi3+0x148>
 80003a8:	0843      	lsrs	r3, r0, #1
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d301      	bcc.n	80003b2 <__divsi3+0x19e>
 80003ae:	004b      	lsls	r3, r1, #1
 80003b0:	1ac0      	subs	r0, r0, r3
 80003b2:	4152      	adcs	r2, r2
 80003b4:	1a41      	subs	r1, r0, r1
 80003b6:	d200      	bcs.n	80003ba <__divsi3+0x1a6>
 80003b8:	4601      	mov	r1, r0
 80003ba:	4663      	mov	r3, ip
 80003bc:	4152      	adcs	r2, r2
 80003be:	105b      	asrs	r3, r3, #1
 80003c0:	4610      	mov	r0, r2
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x1b4>
 80003c4:	4240      	negs	r0, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d500      	bpl.n	80003cc <__divsi3+0x1b8>
 80003ca:	4249      	negs	r1, r1
 80003cc:	4770      	bx	lr
 80003ce:	4663      	mov	r3, ip
 80003d0:	105b      	asrs	r3, r3, #1
 80003d2:	d300      	bcc.n	80003d6 <__divsi3+0x1c2>
 80003d4:	4240      	negs	r0, r0
 80003d6:	b501      	push	{r0, lr}
 80003d8:	2000      	movs	r0, #0
 80003da:	f000 f805 	bl	80003e8 <__aeabi_idiv0>
 80003de:	bd02      	pop	{r1, pc}

080003e0 <__aeabi_idivmod>:
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d0f8      	beq.n	80003d6 <__divsi3+0x1c2>
 80003e4:	e716      	b.n	8000214 <__divsi3>
 80003e6:	4770      	bx	lr

080003e8 <__aeabi_idiv0>:
 80003e8:	4770      	bx	lr
 80003ea:	46c0      	nop			@ (mov r8, r8)

080003ec <HAL_TIM_PeriodElapsedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b082      	sub	sp, #8
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	6078      	str	r0, [r7, #4]
    if (htim == &htim3){
 80003f4:	687a      	ldr	r2, [r7, #4]
 80003f6:	4b06      	ldr	r3, [pc, #24]	@ (8000410 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80003f8:	429a      	cmp	r2, r3
 80003fa:	d104      	bne.n	8000406 <HAL_TIM_PeriodElapsedCallback+0x1a>
        u10_counter++;
 80003fc:	4b05      	ldr	r3, [pc, #20]	@ (8000414 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	1c5a      	adds	r2, r3, #1
 8000402:	4b04      	ldr	r3, [pc, #16]	@ (8000414 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000404:	601a      	str	r2, [r3, #0]
    }
}
 8000406:	46c0      	nop			@ (mov r8, r8)
 8000408:	46bd      	mov	sp, r7
 800040a:	b002      	add	sp, #8
 800040c:	bd80      	pop	{r7, pc}
 800040e:	46c0      	nop			@ (mov r8, r8)
 8000410:	20000034 	.word	0x20000034
 8000414:	200002ac 	.word	0x200002ac

08000418 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000418:	b590      	push	{r4, r7, lr}
 800041a:	b08b      	sub	sp, #44	@ 0x2c
 800041c:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800041e:	f000 ffa7 	bl	8001370 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000422:	f000 f9a7 	bl	8000774 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000426:	f000 fb7d 	bl	8000b24 <MX_GPIO_Init>
  MX_DMA_Init();
 800042a:	f000 fb55 	bl	8000ad8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800042e:	f000 fb1f 	bl	8000a70 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000432:	f000 f9f3 	bl	800081c <MX_TIM3_Init>
  MX_TIM16_Init();
 8000436:	f000 fa45 	bl	80008c4 <MX_TIM16_Init>
  MX_USART1_UART_Init();
 800043a:	f000 facb 	bl	80009d4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 800043e:	4bb1      	ldr	r3, [pc, #708]	@ (8000704 <main+0x2ec>)
 8000440:	0018      	movs	r0, r3
 8000442:	f002 fb87 	bl	8002b54 <HAL_TIM_Base_Start_IT>

  HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 8000446:	4bb0      	ldr	r3, [pc, #704]	@ (8000708 <main+0x2f0>)
 8000448:	2100      	movs	r1, #0
 800044a:	0018      	movs	r0, r3
 800044c:	f002 fc30 	bl	8002cb0 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim16, TIM_CHANNEL_1);
 8000450:	4bad      	ldr	r3, [pc, #692]	@ (8000708 <main+0x2f0>)
 8000452:	2100      	movs	r1, #0
 8000454:	0018      	movs	r0, r3
 8000456:	f003 fbd7 	bl	8003c08 <HAL_TIMEx_PWMN_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint16_t dutyCyc = 50;
 800045a:	1cbb      	adds	r3, r7, #2
 800045c:	2232      	movs	r2, #50	@ 0x32
 800045e:	801a      	strh	r2, [r3, #0]

  uint32_t Ltika_pcounter = u10_counter;
 8000460:	4baa      	ldr	r3, [pc, #680]	@ (800070c <main+0x2f4>)
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	60fb      	str	r3, [r7, #12]
  uint32_t duty_pcounter = u10_counter;
 8000466:	4ba9      	ldr	r3, [pc, #676]	@ (800070c <main+0x2f4>)
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	60bb      	str	r3, [r7, #8]
  uint32_t d_pcounter = u10_counter;
 800046c:	4ba7      	ldr	r3, [pc, #668]	@ (800070c <main+0x2f4>)
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	607b      	str	r3, [r7, #4]

  uint8_t ID;

  if(readID() < 4){
 8000472:	f000 fcfd 	bl	8000e70 <readID>
 8000476:	0003      	movs	r3, r0
 8000478:	2b03      	cmp	r3, #3
 800047a:	d81e      	bhi.n	80004ba <main+0xa2>
	  ID = readID();//自身のID
 800047c:	1c7c      	adds	r4, r7, #1
 800047e:	f000 fcf7 	bl	8000e70 <readID>
 8000482:	0003      	movs	r3, r0
 8000484:	7023      	strb	r3, [r4, #0]
	    	Ltika_pcounter = u10_counter;
		  }else{}
	  }
  }

  HAL_UART_Receive_DMA(&huart1,rxBufA,64);
 8000486:	49a2      	ldr	r1, [pc, #648]	@ (8000710 <main+0x2f8>)
 8000488:	4ba2      	ldr	r3, [pc, #648]	@ (8000714 <main+0x2fc>)
 800048a:	2240      	movs	r2, #64	@ 0x40
 800048c:	0018      	movs	r0, r3
 800048e:	f003 fde3 	bl	8004058 <HAL_UART_Receive_DMA>
  HAL_UART_Receive_DMA(&huart2,rxBufB,128);
 8000492:	49a1      	ldr	r1, [pc, #644]	@ (8000718 <main+0x300>)
 8000494:	4ba1      	ldr	r3, [pc, #644]	@ (800071c <main+0x304>)
 8000496:	2280      	movs	r2, #128	@ 0x80
 8000498:	0018      	movs	r0, r3
 800049a:	f003 fddd 	bl	8004058 <HAL_UART_Receive_DMA>

  HAL_GPIO_WritePin(SHDN_GPIO_Port, SHDN_Pin, 0);
 800049e:	23a0      	movs	r3, #160	@ 0xa0
 80004a0:	05db      	lsls	r3, r3, #23
 80004a2:	2200      	movs	r2, #0
 80004a4:	2120      	movs	r1, #32
 80004a6:	0018      	movs	r0, r3
 80004a8:	f001 fc99 	bl	8001dde <HAL_GPIO_WritePin>
  __HAL_TIM_SET_COMPARE(&htim16, TIM_CHANNEL_1, duty);
 80004ac:	4b9c      	ldr	r3, [pc, #624]	@ (8000720 <main+0x308>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	5e9a      	ldrsh	r2, [r3, r2]
 80004b2:	4b95      	ldr	r3, [pc, #596]	@ (8000708 <main+0x2f0>)
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	635a      	str	r2, [r3, #52]	@ 0x34
 80004b8:	e00f      	b.n	80004da <main+0xc2>
		  if(u10_counter - Ltika_pcounter > 10000){
 80004ba:	4b94      	ldr	r3, [pc, #592]	@ (800070c <main+0x2f4>)
 80004bc:	681a      	ldr	r2, [r3, #0]
 80004be:	68fb      	ldr	r3, [r7, #12]
 80004c0:	1ad3      	subs	r3, r2, r3
 80004c2:	4a98      	ldr	r2, [pc, #608]	@ (8000724 <main+0x30c>)
 80004c4:	4293      	cmp	r3, r2
 80004c6:	d9f8      	bls.n	80004ba <main+0xa2>
		  	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80004c8:	4b97      	ldr	r3, [pc, #604]	@ (8000728 <main+0x310>)
 80004ca:	2180      	movs	r1, #128	@ 0x80
 80004cc:	0018      	movs	r0, r3
 80004ce:	f001 fca3 	bl	8001e18 <HAL_GPIO_TogglePin>
	    	Ltika_pcounter = u10_counter;
 80004d2:	4b8e      	ldr	r3, [pc, #568]	@ (800070c <main+0x2f4>)
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	60fb      	str	r3, [r7, #12]
		  if(u10_counter - Ltika_pcounter > 10000){
 80004d8:	e7ef      	b.n	80004ba <main+0xa2>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  dtime = u10_counter - d_pcounter;
 80004da:	4b8c      	ldr	r3, [pc, #560]	@ (800070c <main+0x2f4>)
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	b29a      	uxth	r2, r3
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	b29b      	uxth	r3, r3
 80004e4:	1ad3      	subs	r3, r2, r3
 80004e6:	b29a      	uxth	r2, r3
 80004e8:	4b90      	ldr	r3, [pc, #576]	@ (800072c <main+0x314>)
 80004ea:	801a      	strh	r2, [r3, #0]
	  d_pcounter = u10_counter;
 80004ec:	4b87      	ldr	r3, [pc, #540]	@ (800070c <main+0x2f4>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	607b      	str	r3, [r7, #4]
//if value did not update, alert by LED and motor sound.
//対策 against DMA did not start correctly
//bus=0つまりwhen MD does not communicate with Mother,STOP(起動直後のがたつきと通信線繋いでないときの動作)

//speed算出
	  readBuf(&huart1, rxBufA, 64, rxDataA, 2, 0, &p_wrtptA, &p_rdptA, &stop_counterA, &error_counterA);
 80004f2:	4a8f      	ldr	r2, [pc, #572]	@ (8000730 <main+0x318>)
 80004f4:	4986      	ldr	r1, [pc, #536]	@ (8000710 <main+0x2f8>)
 80004f6:	4887      	ldr	r0, [pc, #540]	@ (8000714 <main+0x2fc>)
 80004f8:	4b8e      	ldr	r3, [pc, #568]	@ (8000734 <main+0x31c>)
 80004fa:	9305      	str	r3, [sp, #20]
 80004fc:	4b8e      	ldr	r3, [pc, #568]	@ (8000738 <main+0x320>)
 80004fe:	9304      	str	r3, [sp, #16]
 8000500:	4b8e      	ldr	r3, [pc, #568]	@ (800073c <main+0x324>)
 8000502:	9303      	str	r3, [sp, #12]
 8000504:	4b8e      	ldr	r3, [pc, #568]	@ (8000740 <main+0x328>)
 8000506:	9302      	str	r3, [sp, #8]
 8000508:	2300      	movs	r3, #0
 800050a:	9301      	str	r3, [sp, #4]
 800050c:	2302      	movs	r3, #2
 800050e:	9300      	str	r3, [sp, #0]
 8000510:	0013      	movs	r3, r2
 8000512:	2240      	movs	r2, #64	@ 0x40
 8000514:	f000 fba2 	bl	8000c5c <readBuf>
	  readBuf(&huart2, rxBufB, 128, rxDataB, 2, ID, &p_wrtptB, &p_rdptB, &stop_counterB, &error_counterB);
 8000518:	4a8a      	ldr	r2, [pc, #552]	@ (8000744 <main+0x32c>)
 800051a:	497f      	ldr	r1, [pc, #508]	@ (8000718 <main+0x300>)
 800051c:	487f      	ldr	r0, [pc, #508]	@ (800071c <main+0x304>)
 800051e:	4b8a      	ldr	r3, [pc, #552]	@ (8000748 <main+0x330>)
 8000520:	9305      	str	r3, [sp, #20]
 8000522:	4b8a      	ldr	r3, [pc, #552]	@ (800074c <main+0x334>)
 8000524:	9304      	str	r3, [sp, #16]
 8000526:	4b8a      	ldr	r3, [pc, #552]	@ (8000750 <main+0x338>)
 8000528:	9303      	str	r3, [sp, #12]
 800052a:	4b8a      	ldr	r3, [pc, #552]	@ (8000754 <main+0x33c>)
 800052c:	9302      	str	r3, [sp, #8]
 800052e:	1c7b      	adds	r3, r7, #1
 8000530:	781b      	ldrb	r3, [r3, #0]
 8000532:	9301      	str	r3, [sp, #4]
 8000534:	2302      	movs	r3, #2
 8000536:	9300      	str	r3, [sp, #0]
 8000538:	0013      	movs	r3, r2
 800053a:	2280      	movs	r2, #128	@ 0x80
 800053c:	f000 fb8e 	bl	8000c5c <readBuf>

	  goal_speed = rxDataB[0] + rxDataB[1]*100;
 8000540:	4b80      	ldr	r3, [pc, #512]	@ (8000744 <main+0x32c>)
 8000542:	781b      	ldrb	r3, [r3, #0]
 8000544:	001a      	movs	r2, r3
 8000546:	4b7f      	ldr	r3, [pc, #508]	@ (8000744 <main+0x32c>)
 8000548:	785b      	ldrb	r3, [r3, #1]
 800054a:	0019      	movs	r1, r3
 800054c:	2364      	movs	r3, #100	@ 0x64
 800054e:	434b      	muls	r3, r1
 8000550:	b29b      	uxth	r3, r3
 8000552:	18d3      	adds	r3, r2, r3
 8000554:	b29a      	uxth	r2, r3
 8000556:	4b80      	ldr	r3, [pc, #512]	@ (8000758 <main+0x340>)
 8000558:	801a      	strh	r2, [r3, #0]
	  	  if(goal_speed > 20200){stop_flag = 0;}//stop command detect
 800055a:	4b7f      	ldr	r3, [pc, #508]	@ (8000758 <main+0x340>)
 800055c:	881b      	ldrh	r3, [r3, #0]
 800055e:	4a7f      	ldr	r2, [pc, #508]	@ (800075c <main+0x344>)
 8000560:	4293      	cmp	r3, r2
 8000562:	d902      	bls.n	800056a <main+0x152>
 8000564:	4b7e      	ldr	r3, [pc, #504]	@ (8000760 <main+0x348>)
 8000566:	2200      	movs	r2, #0
 8000568:	701a      	strb	r2, [r3, #0]
	  	  else{}

	  now_speed = rxDataA[0] + rxDataA[1]*100;
 800056a:	4b71      	ldr	r3, [pc, #452]	@ (8000730 <main+0x318>)
 800056c:	781b      	ldrb	r3, [r3, #0]
 800056e:	001a      	movs	r2, r3
 8000570:	4b6f      	ldr	r3, [pc, #444]	@ (8000730 <main+0x318>)
 8000572:	785b      	ldrb	r3, [r3, #1]
 8000574:	0019      	movs	r1, r3
 8000576:	2364      	movs	r3, #100	@ 0x64
 8000578:	434b      	muls	r3, r1
 800057a:	b29b      	uxth	r3, r3
 800057c:	18d3      	adds	r3, r2, r3
 800057e:	b29a      	uxth	r2, r3
 8000580:	4b78      	ldr	r3, [pc, #480]	@ (8000764 <main+0x34c>)
 8000582:	801a      	strh	r2, [r3, #0]

	  dif_speed = abs(goal_speed - now_speed);
 8000584:	4b74      	ldr	r3, [pc, #464]	@ (8000758 <main+0x340>)
 8000586:	881b      	ldrh	r3, [r3, #0]
 8000588:	001a      	movs	r2, r3
 800058a:	4b76      	ldr	r3, [pc, #472]	@ (8000764 <main+0x34c>)
 800058c:	881b      	ldrh	r3, [r3, #0]
 800058e:	1ad3      	subs	r3, r2, r3
 8000590:	17da      	asrs	r2, r3, #31
 8000592:	189b      	adds	r3, r3, r2
 8000594:	4053      	eors	r3, r2
 8000596:	b29a      	uxth	r2, r3
 8000598:	4b73      	ldr	r3, [pc, #460]	@ (8000768 <main+0x350>)
 800059a:	801a      	strh	r2, [r3, #0]
	  d_duty = dif_speed / 50;
 800059c:	4b72      	ldr	r3, [pc, #456]	@ (8000768 <main+0x350>)
 800059e:	881b      	ldrh	r3, [r3, #0]
 80005a0:	2132      	movs	r1, #50	@ 0x32
 80005a2:	0018      	movs	r0, r3
 80005a4:	f7ff fdac 	bl	8000100 <__udivsi3>
 80005a8:	0003      	movs	r3, r0
 80005aa:	b29b      	uxth	r3, r3
 80005ac:	b21a      	sxth	r2, r3
 80005ae:	4b6f      	ldr	r3, [pc, #444]	@ (800076c <main+0x354>)
 80005b0:	801a      	strh	r2, [r3, #0]

//P制御
	  if((u10_counter - duty_pcounter) > dutyCyc){
 80005b2:	4b56      	ldr	r3, [pc, #344]	@ (800070c <main+0x2f4>)
 80005b4:	681a      	ldr	r2, [r3, #0]
 80005b6:	68bb      	ldr	r3, [r7, #8]
 80005b8:	1ad2      	subs	r2, r2, r3
 80005ba:	1cbb      	adds	r3, r7, #2
 80005bc:	881b      	ldrh	r3, [r3, #0]
 80005be:	429a      	cmp	r2, r3
 80005c0:	d929      	bls.n	8000616 <main+0x1fe>
		  if(goal_speed < now_speed){duty -= d_duty;}
 80005c2:	4b65      	ldr	r3, [pc, #404]	@ (8000758 <main+0x340>)
 80005c4:	881a      	ldrh	r2, [r3, #0]
 80005c6:	4b67      	ldr	r3, [pc, #412]	@ (8000764 <main+0x34c>)
 80005c8:	881b      	ldrh	r3, [r3, #0]
 80005ca:	429a      	cmp	r2, r3
 80005cc:	d20d      	bcs.n	80005ea <main+0x1d2>
 80005ce:	4b54      	ldr	r3, [pc, #336]	@ (8000720 <main+0x308>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	5e9b      	ldrsh	r3, [r3, r2]
 80005d4:	b29a      	uxth	r2, r3
 80005d6:	4b65      	ldr	r3, [pc, #404]	@ (800076c <main+0x354>)
 80005d8:	2100      	movs	r1, #0
 80005da:	5e5b      	ldrsh	r3, [r3, r1]
 80005dc:	b29b      	uxth	r3, r3
 80005de:	1ad3      	subs	r3, r2, r3
 80005e0:	b29b      	uxth	r3, r3
 80005e2:	b21a      	sxth	r2, r3
 80005e4:	4b4e      	ldr	r3, [pc, #312]	@ (8000720 <main+0x308>)
 80005e6:	801a      	strh	r2, [r3, #0]
 80005e8:	e012      	b.n	8000610 <main+0x1f8>
		  else if(goal_speed > now_speed){duty += d_duty;}
 80005ea:	4b5b      	ldr	r3, [pc, #364]	@ (8000758 <main+0x340>)
 80005ec:	881a      	ldrh	r2, [r3, #0]
 80005ee:	4b5d      	ldr	r3, [pc, #372]	@ (8000764 <main+0x34c>)
 80005f0:	881b      	ldrh	r3, [r3, #0]
 80005f2:	429a      	cmp	r2, r3
 80005f4:	d90c      	bls.n	8000610 <main+0x1f8>
 80005f6:	4b4a      	ldr	r3, [pc, #296]	@ (8000720 <main+0x308>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	5e9b      	ldrsh	r3, [r3, r2]
 80005fc:	b29a      	uxth	r2, r3
 80005fe:	4b5b      	ldr	r3, [pc, #364]	@ (800076c <main+0x354>)
 8000600:	2100      	movs	r1, #0
 8000602:	5e5b      	ldrsh	r3, [r3, r1]
 8000604:	b29b      	uxth	r3, r3
 8000606:	18d3      	adds	r3, r2, r3
 8000608:	b29b      	uxth	r3, r3
 800060a:	b21a      	sxth	r2, r3
 800060c:	4b44      	ldr	r3, [pc, #272]	@ (8000720 <main+0x308>)
 800060e:	801a      	strh	r2, [r3, #0]
		  else{}
		  duty_pcounter = u10_counter;
 8000610:	4b3e      	ldr	r3, [pc, #248]	@ (800070c <main+0x2f4>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	60bb      	str	r3, [r7, #8]
	  }else{}

//出力リミット
	  if(duty > 3120){duty = 3120;}
 8000616:	4b42      	ldr	r3, [pc, #264]	@ (8000720 <main+0x308>)
 8000618:	2200      	movs	r2, #0
 800061a:	5e9a      	ldrsh	r2, [r3, r2]
 800061c:	23c3      	movs	r3, #195	@ 0xc3
 800061e:	011b      	lsls	r3, r3, #4
 8000620:	429a      	cmp	r2, r3
 8000622:	dd04      	ble.n	800062e <main+0x216>
 8000624:	4b3e      	ldr	r3, [pc, #248]	@ (8000720 <main+0x308>)
 8000626:	22c3      	movs	r2, #195	@ 0xc3
 8000628:	0112      	lsls	r2, r2, #4
 800062a:	801a      	strh	r2, [r3, #0]
 800062c:	e00d      	b.n	800064a <main+0x232>
	  else if(duty < 80){duty = 80;}
 800062e:	4b3c      	ldr	r3, [pc, #240]	@ (8000720 <main+0x308>)
 8000630:	2200      	movs	r2, #0
 8000632:	5e9b      	ldrsh	r3, [r3, r2]
 8000634:	2b4f      	cmp	r3, #79	@ 0x4f
 8000636:	dc03      	bgt.n	8000640 <main+0x228>
 8000638:	4b39      	ldr	r3, [pc, #228]	@ (8000720 <main+0x308>)
 800063a:	2250      	movs	r2, #80	@ 0x50
 800063c:	801a      	strh	r2, [r3, #0]
 800063e:	e004      	b.n	800064a <main+0x232>
	  else{duty = duty;}
 8000640:	4b37      	ldr	r3, [pc, #220]	@ (8000720 <main+0x308>)
 8000642:	2200      	movs	r2, #0
 8000644:	5e9a      	ldrsh	r2, [r3, r2]
 8000646:	4b36      	ldr	r3, [pc, #216]	@ (8000720 <main+0x308>)
 8000648:	801a      	strh	r2, [r3, #0]

//stop_flag
	  if(stop_counterA > 1000){stop_flag = 0;}
 800064a:	4b3b      	ldr	r3, [pc, #236]	@ (8000738 <main+0x320>)
 800064c:	881a      	ldrh	r2, [r3, #0]
 800064e:	23fa      	movs	r3, #250	@ 0xfa
 8000650:	009b      	lsls	r3, r3, #2
 8000652:	429a      	cmp	r2, r3
 8000654:	d903      	bls.n	800065e <main+0x246>
 8000656:	4b42      	ldr	r3, [pc, #264]	@ (8000760 <main+0x348>)
 8000658:	2200      	movs	r2, #0
 800065a:	701a      	strb	r2, [r3, #0]
 800065c:	e019      	b.n	8000692 <main+0x27a>
	  else if(stop_counterB > 1000){stop_flag = 0;}
 800065e:	4b3b      	ldr	r3, [pc, #236]	@ (800074c <main+0x334>)
 8000660:	881a      	ldrh	r2, [r3, #0]
 8000662:	23fa      	movs	r3, #250	@ 0xfa
 8000664:	009b      	lsls	r3, r3, #2
 8000666:	429a      	cmp	r2, r3
 8000668:	d903      	bls.n	8000672 <main+0x25a>
 800066a:	4b3d      	ldr	r3, [pc, #244]	@ (8000760 <main+0x348>)
 800066c:	2200      	movs	r2, #0
 800066e:	701a      	strb	r2, [r3, #0]
 8000670:	e00f      	b.n	8000692 <main+0x27a>
	  else if(HAL_GPIO_ReadPin(SLSW_GPIO_Port, SLSW_Pin) != 1){stop_flag = 0;}
 8000672:	23a0      	movs	r3, #160	@ 0xa0
 8000674:	05db      	lsls	r3, r3, #23
 8000676:	2102      	movs	r1, #2
 8000678:	0018      	movs	r0, r3
 800067a:	f001 fb93 	bl	8001da4 <HAL_GPIO_ReadPin>
 800067e:	0003      	movs	r3, r0
 8000680:	2b01      	cmp	r3, #1
 8000682:	d003      	beq.n	800068c <main+0x274>
 8000684:	4b36      	ldr	r3, [pc, #216]	@ (8000760 <main+0x348>)
 8000686:	2200      	movs	r2, #0
 8000688:	701a      	strb	r2, [r3, #0]
 800068a:	e002      	b.n	8000692 <main+0x27a>
	  else{stop_flag = 1;}
 800068c:	4b34      	ldr	r3, [pc, #208]	@ (8000760 <main+0x348>)
 800068e:	2201      	movs	r2, #1
 8000690:	701a      	strb	r2, [r3, #0]

//出力部
	  if(stop_flag == 1){
 8000692:	4b33      	ldr	r3, [pc, #204]	@ (8000760 <main+0x348>)
 8000694:	781b      	ldrb	r3, [r3, #0]
 8000696:	b25b      	sxtb	r3, r3
 8000698:	2b01      	cmp	r3, #1
 800069a:	d111      	bne.n	80006c0 <main+0x2a8>
		  HAL_GPIO_WritePin(SHDN_GPIO_Port, SHDN_Pin, 1);
 800069c:	23a0      	movs	r3, #160	@ 0xa0
 800069e:	05db      	lsls	r3, r3, #23
 80006a0:	2201      	movs	r2, #1
 80006a2:	2120      	movs	r1, #32
 80006a4:	0018      	movs	r0, r3
 80006a6:	f001 fb9a 	bl	8001dde <HAL_GPIO_WritePin>
		  __HAL_TIM_SET_COMPARE(&htim16, TIM_CHANNEL_1, 3200-duty);
 80006aa:	4b1d      	ldr	r3, [pc, #116]	@ (8000720 <main+0x308>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	5e9b      	ldrsh	r3, [r3, r2]
 80006b0:	001a      	movs	r2, r3
 80006b2:	23c8      	movs	r3, #200	@ 0xc8
 80006b4:	011b      	lsls	r3, r3, #4
 80006b6:	1a9a      	subs	r2, r3, r2
 80006b8:	4b13      	ldr	r3, [pc, #76]	@ (8000708 <main+0x2f0>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	635a      	str	r2, [r3, #52]	@ 0x34
 80006be:	e00f      	b.n	80006e0 <main+0x2c8>
	  }else{
		  HAL_GPIO_WritePin(SHDN_GPIO_Port, SHDN_Pin, 0);
 80006c0:	23a0      	movs	r3, #160	@ 0xa0
 80006c2:	05db      	lsls	r3, r3, #23
 80006c4:	2200      	movs	r2, #0
 80006c6:	2120      	movs	r1, #32
 80006c8:	0018      	movs	r0, r3
 80006ca:	f001 fb88 	bl	8001dde <HAL_GPIO_WritePin>
		  duty = 1600;
 80006ce:	4b14      	ldr	r3, [pc, #80]	@ (8000720 <main+0x308>)
 80006d0:	22c8      	movs	r2, #200	@ 0xc8
 80006d2:	00d2      	lsls	r2, r2, #3
 80006d4:	801a      	strh	r2, [r3, #0]
		  __HAL_TIM_SET_COMPARE(&htim16, TIM_CHANNEL_1, 1600);
 80006d6:	4b0c      	ldr	r3, [pc, #48]	@ (8000708 <main+0x2f0>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	22c8      	movs	r2, #200	@ 0xc8
 80006dc:	00d2      	lsls	r2, r2, #3
 80006de:	635a      	str	r2, [r3, #52]	@ 0x34
	  }


//Lチカ部
	  if(u10_counter - Ltika_pcounter > 100000){
 80006e0:	4b0a      	ldr	r3, [pc, #40]	@ (800070c <main+0x2f4>)
 80006e2:	681a      	ldr	r2, [r3, #0]
 80006e4:	68fb      	ldr	r3, [r7, #12]
 80006e6:	1ad3      	subs	r3, r2, r3
 80006e8:	4a21      	ldr	r2, [pc, #132]	@ (8000770 <main+0x358>)
 80006ea:	4293      	cmp	r3, r2
 80006ec:	d800      	bhi.n	80006f0 <main+0x2d8>
 80006ee:	e6f4      	b.n	80004da <main+0xc2>
	  	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80006f0:	4b0d      	ldr	r3, [pc, #52]	@ (8000728 <main+0x310>)
 80006f2:	2180      	movs	r1, #128	@ 0x80
 80006f4:	0018      	movs	r0, r3
 80006f6:	f001 fb8f 	bl	8001e18 <HAL_GPIO_TogglePin>
    	Ltika_pcounter = u10_counter;
 80006fa:	4b04      	ldr	r3, [pc, #16]	@ (800070c <main+0x2f4>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	60fb      	str	r3, [r7, #12]
	  dtime = u10_counter - d_pcounter;
 8000700:	e6eb      	b.n	80004da <main+0xc2>
 8000702:	46c0      	nop			@ (mov r8, r8)
 8000704:	20000034 	.word	0x20000034
 8000708:	20000080 	.word	0x20000080
 800070c:	200002ac 	.word	0x200002ac
 8000710:	200002b0 	.word	0x200002b0
 8000714:	200000cc 	.word	0x200000cc
 8000718:	200002f0 	.word	0x200002f0
 800071c:	20000160 	.word	0x20000160
 8000720:	2000000a 	.word	0x2000000a
 8000724:	00002710 	.word	0x00002710
 8000728:	50000400 	.word	0x50000400
 800072c:	20000374 	.word	0x20000374
 8000730:	20000000 	.word	0x20000000
 8000734:	2000037e 	.word	0x2000037e
 8000738:	2000037a 	.word	0x2000037a
 800073c:	20000378 	.word	0x20000378
 8000740:	20000376 	.word	0x20000376
 8000744:	20000004 	.word	0x20000004
 8000748:	20000380 	.word	0x20000380
 800074c:	2000037c 	.word	0x2000037c
 8000750:	20000379 	.word	0x20000379
 8000754:	20000377 	.word	0x20000377
 8000758:	20000006 	.word	0x20000006
 800075c:	00004ee8 	.word	0x00004ee8
 8000760:	20000382 	.word	0x20000382
 8000764:	20000008 	.word	0x20000008
 8000768:	20000370 	.word	0x20000370
 800076c:	20000372 	.word	0x20000372
 8000770:	000186a0 	.word	0x000186a0

08000774 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000774:	b590      	push	{r4, r7, lr}
 8000776:	b093      	sub	sp, #76	@ 0x4c
 8000778:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800077a:	2414      	movs	r4, #20
 800077c:	193b      	adds	r3, r7, r4
 800077e:	0018      	movs	r0, r3
 8000780:	2334      	movs	r3, #52	@ 0x34
 8000782:	001a      	movs	r2, r3
 8000784:	2100      	movs	r1, #0
 8000786:	f004 fb7b 	bl	8004e80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800078a:	1d3b      	adds	r3, r7, #4
 800078c:	0018      	movs	r0, r3
 800078e:	2310      	movs	r3, #16
 8000790:	001a      	movs	r2, r3
 8000792:	2100      	movs	r1, #0
 8000794:	f004 fb74 	bl	8004e80 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000798:	2380      	movs	r3, #128	@ 0x80
 800079a:	009b      	lsls	r3, r3, #2
 800079c:	0018      	movs	r0, r3
 800079e:	f001 fb57 	bl	8001e50 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007a2:	193b      	adds	r3, r7, r4
 80007a4:	2201      	movs	r2, #1
 80007a6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80007a8:	193b      	adds	r3, r7, r4
 80007aa:	22a0      	movs	r2, #160	@ 0xa0
 80007ac:	02d2      	lsls	r2, r2, #11
 80007ae:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007b0:	0021      	movs	r1, r4
 80007b2:	187b      	adds	r3, r7, r1
 80007b4:	2202      	movs	r2, #2
 80007b6:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007b8:	187b      	adds	r3, r7, r1
 80007ba:	2203      	movs	r2, #3
 80007bc:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80007be:	187b      	adds	r3, r7, r1
 80007c0:	2200      	movs	r2, #0
 80007c2:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 80007c4:	187b      	adds	r3, r7, r1
 80007c6:	2208      	movs	r2, #8
 80007c8:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007ca:	187b      	adds	r3, r7, r1
 80007cc:	2280      	movs	r2, #128	@ 0x80
 80007ce:	0292      	lsls	r2, r2, #10
 80007d0:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007d2:	187b      	adds	r3, r7, r1
 80007d4:	2280      	movs	r2, #128	@ 0x80
 80007d6:	0592      	lsls	r2, r2, #22
 80007d8:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007da:	187b      	adds	r3, r7, r1
 80007dc:	0018      	movs	r0, r3
 80007de:	f001 fb83 	bl	8001ee8 <HAL_RCC_OscConfig>
 80007e2:	1e03      	subs	r3, r0, #0
 80007e4:	d001      	beq.n	80007ea <SystemClock_Config+0x76>
  {
    Error_Handler();
 80007e6:	f000 fb95 	bl	8000f14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ea:	1d3b      	adds	r3, r7, #4
 80007ec:	2207      	movs	r2, #7
 80007ee:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007f0:	1d3b      	adds	r3, r7, #4
 80007f2:	2202      	movs	r2, #2
 80007f4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007f6:	1d3b      	adds	r3, r7, #4
 80007f8:	2200      	movs	r2, #0
 80007fa:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007fc:	1d3b      	adds	r3, r7, #4
 80007fe:	2200      	movs	r2, #0
 8000800:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000802:	1d3b      	adds	r3, r7, #4
 8000804:	2102      	movs	r1, #2
 8000806:	0018      	movs	r0, r3
 8000808:	f001 fe7e 	bl	8002508 <HAL_RCC_ClockConfig>
 800080c:	1e03      	subs	r3, r0, #0
 800080e:	d001      	beq.n	8000814 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000810:	f000 fb80 	bl	8000f14 <Error_Handler>
  }
}
 8000814:	46c0      	nop			@ (mov r8, r8)
 8000816:	46bd      	mov	sp, r7
 8000818:	b013      	add	sp, #76	@ 0x4c
 800081a:	bd90      	pop	{r4, r7, pc}

0800081c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b088      	sub	sp, #32
 8000820:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000822:	2310      	movs	r3, #16
 8000824:	18fb      	adds	r3, r7, r3
 8000826:	0018      	movs	r0, r3
 8000828:	2310      	movs	r3, #16
 800082a:	001a      	movs	r2, r3
 800082c:	2100      	movs	r1, #0
 800082e:	f004 fb27 	bl	8004e80 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000832:	1d3b      	adds	r3, r7, #4
 8000834:	0018      	movs	r0, r3
 8000836:	230c      	movs	r3, #12
 8000838:	001a      	movs	r2, r3
 800083a:	2100      	movs	r1, #0
 800083c:	f004 fb20 	bl	8004e80 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000840:	4b1e      	ldr	r3, [pc, #120]	@ (80008bc <MX_TIM3_Init+0xa0>)
 8000842:	4a1f      	ldr	r2, [pc, #124]	@ (80008c0 <MX_TIM3_Init+0xa4>)
 8000844:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 8000846:	4b1d      	ldr	r3, [pc, #116]	@ (80008bc <MX_TIM3_Init+0xa0>)
 8000848:	223f      	movs	r2, #63	@ 0x3f
 800084a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800084c:	4b1b      	ldr	r3, [pc, #108]	@ (80008bc <MX_TIM3_Init+0xa0>)
 800084e:	2200      	movs	r2, #0
 8000850:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9;
 8000852:	4b1a      	ldr	r3, [pc, #104]	@ (80008bc <MX_TIM3_Init+0xa0>)
 8000854:	2209      	movs	r2, #9
 8000856:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000858:	4b18      	ldr	r3, [pc, #96]	@ (80008bc <MX_TIM3_Init+0xa0>)
 800085a:	2200      	movs	r2, #0
 800085c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800085e:	4b17      	ldr	r3, [pc, #92]	@ (80008bc <MX_TIM3_Init+0xa0>)
 8000860:	2200      	movs	r2, #0
 8000862:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000864:	4b15      	ldr	r3, [pc, #84]	@ (80008bc <MX_TIM3_Init+0xa0>)
 8000866:	0018      	movs	r0, r3
 8000868:	f002 f91c 	bl	8002aa4 <HAL_TIM_Base_Init>
 800086c:	1e03      	subs	r3, r0, #0
 800086e:	d001      	beq.n	8000874 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000870:	f000 fb50 	bl	8000f14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000874:	2110      	movs	r1, #16
 8000876:	187b      	adds	r3, r7, r1
 8000878:	2280      	movs	r2, #128	@ 0x80
 800087a:	0152      	lsls	r2, r2, #5
 800087c:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800087e:	187a      	adds	r2, r7, r1
 8000880:	4b0e      	ldr	r3, [pc, #56]	@ (80008bc <MX_TIM3_Init+0xa0>)
 8000882:	0011      	movs	r1, r2
 8000884:	0018      	movs	r0, r3
 8000886:	f002 fcf3 	bl	8003270 <HAL_TIM_ConfigClockSource>
 800088a:	1e03      	subs	r3, r0, #0
 800088c:	d001      	beq.n	8000892 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800088e:	f000 fb41 	bl	8000f14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000892:	1d3b      	adds	r3, r7, #4
 8000894:	2200      	movs	r2, #0
 8000896:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000898:	1d3b      	adds	r3, r7, #4
 800089a:	2200      	movs	r2, #0
 800089c:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800089e:	1d3a      	adds	r2, r7, #4
 80008a0:	4b06      	ldr	r3, [pc, #24]	@ (80008bc <MX_TIM3_Init+0xa0>)
 80008a2:	0011      	movs	r1, r2
 80008a4:	0018      	movs	r0, r3
 80008a6:	f003 fa47 	bl	8003d38 <HAL_TIMEx_MasterConfigSynchronization>
 80008aa:	1e03      	subs	r3, r0, #0
 80008ac:	d001      	beq.n	80008b2 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80008ae:	f000 fb31 	bl	8000f14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80008b2:	46c0      	nop			@ (mov r8, r8)
 80008b4:	46bd      	mov	sp, r7
 80008b6:	b008      	add	sp, #32
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	46c0      	nop			@ (mov r8, r8)
 80008bc:	20000034 	.word	0x20000034
 80008c0:	40000400 	.word	0x40000400

080008c4 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b094      	sub	sp, #80	@ 0x50
 80008c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80008ca:	2334      	movs	r3, #52	@ 0x34
 80008cc:	18fb      	adds	r3, r7, r3
 80008ce:	0018      	movs	r0, r3
 80008d0:	231c      	movs	r3, #28
 80008d2:	001a      	movs	r2, r3
 80008d4:	2100      	movs	r1, #0
 80008d6:	f004 fad3 	bl	8004e80 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80008da:	003b      	movs	r3, r7
 80008dc:	0018      	movs	r0, r3
 80008de:	2334      	movs	r3, #52	@ 0x34
 80008e0:	001a      	movs	r2, r3
 80008e2:	2100      	movs	r1, #0
 80008e4:	f004 facc 	bl	8004e80 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80008e8:	4b37      	ldr	r3, [pc, #220]	@ (80009c8 <MX_TIM16_Init+0x104>)
 80008ea:	4a38      	ldr	r2, [pc, #224]	@ (80009cc <MX_TIM16_Init+0x108>)
 80008ec:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 80008ee:	4b36      	ldr	r3, [pc, #216]	@ (80009c8 <MX_TIM16_Init+0x104>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008f4:	4b34      	ldr	r3, [pc, #208]	@ (80009c8 <MX_TIM16_Init+0x104>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 3199;
 80008fa:	4b33      	ldr	r3, [pc, #204]	@ (80009c8 <MX_TIM16_Init+0x104>)
 80008fc:	4a34      	ldr	r2, [pc, #208]	@ (80009d0 <MX_TIM16_Init+0x10c>)
 80008fe:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000900:	4b31      	ldr	r3, [pc, #196]	@ (80009c8 <MX_TIM16_Init+0x104>)
 8000902:	2200      	movs	r2, #0
 8000904:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000906:	4b30      	ldr	r3, [pc, #192]	@ (80009c8 <MX_TIM16_Init+0x104>)
 8000908:	2200      	movs	r2, #0
 800090a:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800090c:	4b2e      	ldr	r3, [pc, #184]	@ (80009c8 <MX_TIM16_Init+0x104>)
 800090e:	2200      	movs	r2, #0
 8000910:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000912:	4b2d      	ldr	r3, [pc, #180]	@ (80009c8 <MX_TIM16_Init+0x104>)
 8000914:	0018      	movs	r0, r3
 8000916:	f002 f8c5 	bl	8002aa4 <HAL_TIM_Base_Init>
 800091a:	1e03      	subs	r3, r0, #0
 800091c:	d001      	beq.n	8000922 <MX_TIM16_Init+0x5e>
  {
    Error_Handler();
 800091e:	f000 faf9 	bl	8000f14 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8000922:	4b29      	ldr	r3, [pc, #164]	@ (80009c8 <MX_TIM16_Init+0x104>)
 8000924:	0018      	movs	r0, r3
 8000926:	f002 f963 	bl	8002bf0 <HAL_TIM_PWM_Init>
 800092a:	1e03      	subs	r3, r0, #0
 800092c:	d001      	beq.n	8000932 <MX_TIM16_Init+0x6e>
  {
    Error_Handler();
 800092e:	f000 faf1 	bl	8000f14 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000932:	2134      	movs	r1, #52	@ 0x34
 8000934:	187b      	adds	r3, r7, r1
 8000936:	2260      	movs	r2, #96	@ 0x60
 8000938:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800093a:	187b      	adds	r3, r7, r1
 800093c:	2200      	movs	r2, #0
 800093e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000940:	187b      	adds	r3, r7, r1
 8000942:	2200      	movs	r2, #0
 8000944:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000946:	187b      	adds	r3, r7, r1
 8000948:	2200      	movs	r2, #0
 800094a:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800094c:	187b      	adds	r3, r7, r1
 800094e:	2200      	movs	r2, #0
 8000950:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000952:	187b      	adds	r3, r7, r1
 8000954:	2200      	movs	r2, #0
 8000956:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000958:	187b      	adds	r3, r7, r1
 800095a:	2200      	movs	r2, #0
 800095c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800095e:	1879      	adds	r1, r7, r1
 8000960:	4b19      	ldr	r3, [pc, #100]	@ (80009c8 <MX_TIM16_Init+0x104>)
 8000962:	2200      	movs	r2, #0
 8000964:	0018      	movs	r0, r3
 8000966:	f002 fb83 	bl	8003070 <HAL_TIM_PWM_ConfigChannel>
 800096a:	1e03      	subs	r3, r0, #0
 800096c:	d001      	beq.n	8000972 <MX_TIM16_Init+0xae>
  {
    Error_Handler();
 800096e:	f000 fad1 	bl	8000f14 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000972:	003b      	movs	r3, r7
 8000974:	2200      	movs	r2, #0
 8000976:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000978:	003b      	movs	r3, r7
 800097a:	2200      	movs	r2, #0
 800097c:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800097e:	003b      	movs	r3, r7
 8000980:	2200      	movs	r2, #0
 8000982:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000984:	003b      	movs	r3, r7
 8000986:	2200      	movs	r2, #0
 8000988:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800098a:	003b      	movs	r3, r7
 800098c:	2200      	movs	r2, #0
 800098e:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000990:	003b      	movs	r3, r7
 8000992:	2280      	movs	r2, #128	@ 0x80
 8000994:	0192      	lsls	r2, r2, #6
 8000996:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000998:	003b      	movs	r3, r7
 800099a:	2200      	movs	r2, #0
 800099c:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800099e:	003b      	movs	r3, r7
 80009a0:	2200      	movs	r2, #0
 80009a2:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 80009a4:	003a      	movs	r2, r7
 80009a6:	4b08      	ldr	r3, [pc, #32]	@ (80009c8 <MX_TIM16_Init+0x104>)
 80009a8:	0011      	movs	r1, r2
 80009aa:	0018      	movs	r0, r3
 80009ac:	f003 fa26 	bl	8003dfc <HAL_TIMEx_ConfigBreakDeadTime>
 80009b0:	1e03      	subs	r3, r0, #0
 80009b2:	d001      	beq.n	80009b8 <MX_TIM16_Init+0xf4>
  {
    Error_Handler();
 80009b4:	f000 faae 	bl	8000f14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 80009b8:	4b03      	ldr	r3, [pc, #12]	@ (80009c8 <MX_TIM16_Init+0x104>)
 80009ba:	0018      	movs	r0, r3
 80009bc:	f000 fb10 	bl	8000fe0 <HAL_TIM_MspPostInit>

}
 80009c0:	46c0      	nop			@ (mov r8, r8)
 80009c2:	46bd      	mov	sp, r7
 80009c4:	b014      	add	sp, #80	@ 0x50
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	20000080 	.word	0x20000080
 80009cc:	40014400 	.word	0x40014400
 80009d0:	00000c7f 	.word	0x00000c7f

080009d4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009d8:	4b22      	ldr	r3, [pc, #136]	@ (8000a64 <MX_USART1_UART_Init+0x90>)
 80009da:	4a23      	ldr	r2, [pc, #140]	@ (8000a68 <MX_USART1_UART_Init+0x94>)
 80009dc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 500000;
 80009de:	4b21      	ldr	r3, [pc, #132]	@ (8000a64 <MX_USART1_UART_Init+0x90>)
 80009e0:	4a22      	ldr	r2, [pc, #136]	@ (8000a6c <MX_USART1_UART_Init+0x98>)
 80009e2:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009e4:	4b1f      	ldr	r3, [pc, #124]	@ (8000a64 <MX_USART1_UART_Init+0x90>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009ea:	4b1e      	ldr	r3, [pc, #120]	@ (8000a64 <MX_USART1_UART_Init+0x90>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009f0:	4b1c      	ldr	r3, [pc, #112]	@ (8000a64 <MX_USART1_UART_Init+0x90>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009f6:	4b1b      	ldr	r3, [pc, #108]	@ (8000a64 <MX_USART1_UART_Init+0x90>)
 80009f8:	220c      	movs	r2, #12
 80009fa:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009fc:	4b19      	ldr	r3, [pc, #100]	@ (8000a64 <MX_USART1_UART_Init+0x90>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a02:	4b18      	ldr	r3, [pc, #96]	@ (8000a64 <MX_USART1_UART_Init+0x90>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a08:	4b16      	ldr	r3, [pc, #88]	@ (8000a64 <MX_USART1_UART_Init+0x90>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a0e:	4b15      	ldr	r3, [pc, #84]	@ (8000a64 <MX_USART1_UART_Init+0x90>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a14:	4b13      	ldr	r3, [pc, #76]	@ (8000a64 <MX_USART1_UART_Init+0x90>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a1a:	4b12      	ldr	r3, [pc, #72]	@ (8000a64 <MX_USART1_UART_Init+0x90>)
 8000a1c:	0018      	movs	r0, r3
 8000a1e:	f003 fac5 	bl	8003fac <HAL_UART_Init>
 8000a22:	1e03      	subs	r3, r0, #0
 8000a24:	d001      	beq.n	8000a2a <MX_USART1_UART_Init+0x56>
  {
    Error_Handler();
 8000a26:	f000 fa75 	bl	8000f14 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a2a:	4b0e      	ldr	r3, [pc, #56]	@ (8000a64 <MX_USART1_UART_Init+0x90>)
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	0018      	movs	r0, r3
 8000a30:	f004 f946 	bl	8004cc0 <HAL_UARTEx_SetTxFifoThreshold>
 8000a34:	1e03      	subs	r3, r0, #0
 8000a36:	d001      	beq.n	8000a3c <MX_USART1_UART_Init+0x68>
  {
    Error_Handler();
 8000a38:	f000 fa6c 	bl	8000f14 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a3c:	4b09      	ldr	r3, [pc, #36]	@ (8000a64 <MX_USART1_UART_Init+0x90>)
 8000a3e:	2100      	movs	r1, #0
 8000a40:	0018      	movs	r0, r3
 8000a42:	f004 f97d 	bl	8004d40 <HAL_UARTEx_SetRxFifoThreshold>
 8000a46:	1e03      	subs	r3, r0, #0
 8000a48:	d001      	beq.n	8000a4e <MX_USART1_UART_Init+0x7a>
  {
    Error_Handler();
 8000a4a:	f000 fa63 	bl	8000f14 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000a4e:	4b05      	ldr	r3, [pc, #20]	@ (8000a64 <MX_USART1_UART_Init+0x90>)
 8000a50:	0018      	movs	r0, r3
 8000a52:	f004 f8fb 	bl	8004c4c <HAL_UARTEx_DisableFifoMode>
 8000a56:	1e03      	subs	r3, r0, #0
 8000a58:	d001      	beq.n	8000a5e <MX_USART1_UART_Init+0x8a>
  {
    Error_Handler();
 8000a5a:	f000 fa5b 	bl	8000f14 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a5e:	46c0      	nop			@ (mov r8, r8)
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	200000cc 	.word	0x200000cc
 8000a68:	40013800 	.word	0x40013800
 8000a6c:	0007a120 	.word	0x0007a120

08000a70 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a74:	4b16      	ldr	r3, [pc, #88]	@ (8000ad0 <MX_USART2_UART_Init+0x60>)
 8000a76:	4a17      	ldr	r2, [pc, #92]	@ (8000ad4 <MX_USART2_UART_Init+0x64>)
 8000a78:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a7a:	4b15      	ldr	r3, [pc, #84]	@ (8000ad0 <MX_USART2_UART_Init+0x60>)
 8000a7c:	22e1      	movs	r2, #225	@ 0xe1
 8000a7e:	0252      	lsls	r2, r2, #9
 8000a80:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a82:	4b13      	ldr	r3, [pc, #76]	@ (8000ad0 <MX_USART2_UART_Init+0x60>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a88:	4b11      	ldr	r3, [pc, #68]	@ (8000ad0 <MX_USART2_UART_Init+0x60>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a8e:	4b10      	ldr	r3, [pc, #64]	@ (8000ad0 <MX_USART2_UART_Init+0x60>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a94:	4b0e      	ldr	r3, [pc, #56]	@ (8000ad0 <MX_USART2_UART_Init+0x60>)
 8000a96:	220c      	movs	r2, #12
 8000a98:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a9a:	4b0d      	ldr	r3, [pc, #52]	@ (8000ad0 <MX_USART2_UART_Init+0x60>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000aa0:	4b0b      	ldr	r3, [pc, #44]	@ (8000ad0 <MX_USART2_UART_Init+0x60>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000aa6:	4b0a      	ldr	r3, [pc, #40]	@ (8000ad0 <MX_USART2_UART_Init+0x60>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000aac:	4b08      	ldr	r3, [pc, #32]	@ (8000ad0 <MX_USART2_UART_Init+0x60>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ab2:	4b07      	ldr	r3, [pc, #28]	@ (8000ad0 <MX_USART2_UART_Init+0x60>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ab8:	4b05      	ldr	r3, [pc, #20]	@ (8000ad0 <MX_USART2_UART_Init+0x60>)
 8000aba:	0018      	movs	r0, r3
 8000abc:	f003 fa76 	bl	8003fac <HAL_UART_Init>
 8000ac0:	1e03      	subs	r3, r0, #0
 8000ac2:	d001      	beq.n	8000ac8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000ac4:	f000 fa26 	bl	8000f14 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ac8:	46c0      	nop			@ (mov r8, r8)
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	46c0      	nop			@ (mov r8, r8)
 8000ad0:	20000160 	.word	0x20000160
 8000ad4:	40004400 	.word	0x40004400

08000ad8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ade:	4b10      	ldr	r3, [pc, #64]	@ (8000b20 <MX_DMA_Init+0x48>)
 8000ae0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000ae2:	4b0f      	ldr	r3, [pc, #60]	@ (8000b20 <MX_DMA_Init+0x48>)
 8000ae4:	2101      	movs	r1, #1
 8000ae6:	430a      	orrs	r2, r1
 8000ae8:	639a      	str	r2, [r3, #56]	@ 0x38
 8000aea:	4b0d      	ldr	r3, [pc, #52]	@ (8000b20 <MX_DMA_Init+0x48>)
 8000aec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000aee:	2201      	movs	r2, #1
 8000af0:	4013      	ands	r3, r2
 8000af2:	607b      	str	r3, [r7, #4]
 8000af4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000af6:	2200      	movs	r2, #0
 8000af8:	2100      	movs	r1, #0
 8000afa:	2009      	movs	r0, #9
 8000afc:	f000 fd6a 	bl	80015d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000b00:	2009      	movs	r0, #9
 8000b02:	f000 fd7c 	bl	80015fe <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8000b06:	2200      	movs	r2, #0
 8000b08:	2100      	movs	r1, #0
 8000b0a:	200a      	movs	r0, #10
 8000b0c:	f000 fd62 	bl	80015d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000b10:	200a      	movs	r0, #10
 8000b12:	f000 fd74 	bl	80015fe <HAL_NVIC_EnableIRQ>

}
 8000b16:	46c0      	nop			@ (mov r8, r8)
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	b002      	add	sp, #8
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	46c0      	nop			@ (mov r8, r8)
 8000b20:	40021000 	.word	0x40021000

08000b24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b24:	b590      	push	{r4, r7, lr}
 8000b26:	b089      	sub	sp, #36	@ 0x24
 8000b28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b2a:	240c      	movs	r4, #12
 8000b2c:	193b      	adds	r3, r7, r4
 8000b2e:	0018      	movs	r0, r3
 8000b30:	2314      	movs	r3, #20
 8000b32:	001a      	movs	r2, r3
 8000b34:	2100      	movs	r1, #0
 8000b36:	f004 f9a3 	bl	8004e80 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b3a:	4b44      	ldr	r3, [pc, #272]	@ (8000c4c <MX_GPIO_Init+0x128>)
 8000b3c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000b3e:	4b43      	ldr	r3, [pc, #268]	@ (8000c4c <MX_GPIO_Init+0x128>)
 8000b40:	2104      	movs	r1, #4
 8000b42:	430a      	orrs	r2, r1
 8000b44:	635a      	str	r2, [r3, #52]	@ 0x34
 8000b46:	4b41      	ldr	r3, [pc, #260]	@ (8000c4c <MX_GPIO_Init+0x128>)
 8000b48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b4a:	2204      	movs	r2, #4
 8000b4c:	4013      	ands	r3, r2
 8000b4e:	60bb      	str	r3, [r7, #8]
 8000b50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b52:	4b3e      	ldr	r3, [pc, #248]	@ (8000c4c <MX_GPIO_Init+0x128>)
 8000b54:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000b56:	4b3d      	ldr	r3, [pc, #244]	@ (8000c4c <MX_GPIO_Init+0x128>)
 8000b58:	2101      	movs	r1, #1
 8000b5a:	430a      	orrs	r2, r1
 8000b5c:	635a      	str	r2, [r3, #52]	@ 0x34
 8000b5e:	4b3b      	ldr	r3, [pc, #236]	@ (8000c4c <MX_GPIO_Init+0x128>)
 8000b60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b62:	2201      	movs	r2, #1
 8000b64:	4013      	ands	r3, r2
 8000b66:	607b      	str	r3, [r7, #4]
 8000b68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b6a:	4b38      	ldr	r3, [pc, #224]	@ (8000c4c <MX_GPIO_Init+0x128>)
 8000b6c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000b6e:	4b37      	ldr	r3, [pc, #220]	@ (8000c4c <MX_GPIO_Init+0x128>)
 8000b70:	2102      	movs	r1, #2
 8000b72:	430a      	orrs	r2, r1
 8000b74:	635a      	str	r2, [r3, #52]	@ 0x34
 8000b76:	4b35      	ldr	r3, [pc, #212]	@ (8000c4c <MX_GPIO_Init+0x128>)
 8000b78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b7a:	2202      	movs	r2, #2
 8000b7c:	4013      	ands	r3, r2
 8000b7e:	603b      	str	r3, [r7, #0]
 8000b80:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SHDN_GPIO_Port, SHDN_Pin, GPIO_PIN_RESET);
 8000b82:	23a0      	movs	r3, #160	@ 0xa0
 8000b84:	05db      	lsls	r3, r3, #23
 8000b86:	2200      	movs	r2, #0
 8000b88:	2120      	movs	r1, #32
 8000b8a:	0018      	movs	r0, r3
 8000b8c:	f001 f927 	bl	8001dde <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000b90:	4b2f      	ldr	r3, [pc, #188]	@ (8000c50 <MX_GPIO_Init+0x12c>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	2180      	movs	r1, #128	@ 0x80
 8000b96:	0018      	movs	r0, r3
 8000b98:	f001 f921 	bl	8001dde <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SLSW_Pin SW3_Pin SW1_Pin */
  GPIO_InitStruct.Pin = SLSW_Pin|SW3_Pin|SW1_Pin;
 8000b9c:	193b      	adds	r3, r7, r4
 8000b9e:	4a2d      	ldr	r2, [pc, #180]	@ (8000c54 <MX_GPIO_Init+0x130>)
 8000ba0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ba2:	193b      	adds	r3, r7, r4
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba8:	193b      	adds	r3, r7, r4
 8000baa:	2200      	movs	r2, #0
 8000bac:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bae:	193a      	adds	r2, r7, r4
 8000bb0:	23a0      	movs	r3, #160	@ 0xa0
 8000bb2:	05db      	lsls	r3, r3, #23
 8000bb4:	0011      	movs	r1, r2
 8000bb6:	0018      	movs	r0, r3
 8000bb8:	f000 ff90 	bl	8001adc <HAL_GPIO_Init>

  /*Configure GPIO pin : SHDN_Pin */
  GPIO_InitStruct.Pin = SHDN_Pin;
 8000bbc:	193b      	adds	r3, r7, r4
 8000bbe:	2220      	movs	r2, #32
 8000bc0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc2:	193b      	adds	r3, r7, r4
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc8:	193b      	adds	r3, r7, r4
 8000bca:	2200      	movs	r2, #0
 8000bcc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bce:	193b      	adds	r3, r7, r4
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SHDN_GPIO_Port, &GPIO_InitStruct);
 8000bd4:	193a      	adds	r2, r7, r4
 8000bd6:	23a0      	movs	r3, #160	@ 0xa0
 8000bd8:	05db      	lsls	r3, r3, #23
 8000bda:	0011      	movs	r1, r2
 8000bdc:	0018      	movs	r0, r3
 8000bde:	f000 ff7d 	bl	8001adc <HAL_GPIO_Init>

  /*Configure GPIO pins : SW5_Pin SW4_Pin */
  GPIO_InitStruct.Pin = SW5_Pin|SW4_Pin;
 8000be2:	193b      	adds	r3, r7, r4
 8000be4:	2206      	movs	r2, #6
 8000be6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000be8:	193b      	adds	r3, r7, r4
 8000bea:	2200      	movs	r2, #0
 8000bec:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bee:	193b      	adds	r3, r7, r4
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bf4:	193b      	adds	r3, r7, r4
 8000bf6:	4a16      	ldr	r2, [pc, #88]	@ (8000c50 <MX_GPIO_Init+0x12c>)
 8000bf8:	0019      	movs	r1, r3
 8000bfa:	0010      	movs	r0, r2
 8000bfc:	f000 ff6e 	bl	8001adc <HAL_GPIO_Init>

  /*Configure GPIO pin : SW2_Pin */
  GPIO_InitStruct.Pin = SW2_Pin;
 8000c00:	193b      	adds	r3, r7, r4
 8000c02:	2240      	movs	r2, #64	@ 0x40
 8000c04:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c06:	193b      	adds	r3, r7, r4
 8000c08:	2200      	movs	r2, #0
 8000c0a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0c:	193b      	adds	r3, r7, r4
 8000c0e:	2200      	movs	r2, #0
 8000c10:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(SW2_GPIO_Port, &GPIO_InitStruct);
 8000c12:	193b      	adds	r3, r7, r4
 8000c14:	4a10      	ldr	r2, [pc, #64]	@ (8000c58 <MX_GPIO_Init+0x134>)
 8000c16:	0019      	movs	r1, r3
 8000c18:	0010      	movs	r0, r2
 8000c1a:	f000 ff5f 	bl	8001adc <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000c1e:	0021      	movs	r1, r4
 8000c20:	187b      	adds	r3, r7, r1
 8000c22:	2280      	movs	r2, #128	@ 0x80
 8000c24:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c26:	187b      	adds	r3, r7, r1
 8000c28:	2201      	movs	r2, #1
 8000c2a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2c:	187b      	adds	r3, r7, r1
 8000c2e:	2200      	movs	r2, #0
 8000c30:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c32:	187b      	adds	r3, r7, r1
 8000c34:	2200      	movs	r2, #0
 8000c36:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000c38:	187b      	adds	r3, r7, r1
 8000c3a:	4a05      	ldr	r2, [pc, #20]	@ (8000c50 <MX_GPIO_Init+0x12c>)
 8000c3c:	0019      	movs	r1, r3
 8000c3e:	0010      	movs	r0, r2
 8000c40:	f000 ff4c 	bl	8001adc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c44:	46c0      	nop			@ (mov r8, r8)
 8000c46:	46bd      	mov	sp, r7
 8000c48:	b009      	add	sp, #36	@ 0x24
 8000c4a:	bd90      	pop	{r4, r7, pc}
 8000c4c:	40021000 	.word	0x40021000
 8000c50:	50000400 	.word	0x50000400
 8000c54:	00000902 	.word	0x00000902
 8000c58:	50000800 	.word	0x50000800

08000c5c <readBuf>:

/* USER CODE BEGIN 4 */
void readBuf(UART_HandleTypeDef* uart, uint8_t* buf, int buf_size, uint8_t* data, int data_size, uint8_t id, uint8_t* p_wrtpt, uint8_t* p_rdpt, uint16_t* stop_counter, uint16_t* error_counter){
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b08c      	sub	sp, #48	@ 0x30
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	60f8      	str	r0, [r7, #12]
 8000c64:	60b9      	str	r1, [r7, #8]
 8000c66:	607a      	str	r2, [r7, #4]
 8000c68:	603b      	str	r3, [r7, #0]
	int wrt_pt = uart->hdmarx->Instance->CNDTR;
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	2280      	movs	r2, #128	@ 0x80
 8000c6e:	589b      	ldr	r3, [r3, r2]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	685b      	ldr	r3, [r3, #4]
 8000c74:	617b      	str	r3, [r7, #20]
	wrt_pt= buf_size - wrt_pt;
 8000c76:	687a      	ldr	r2, [r7, #4]
 8000c78:	697b      	ldr	r3, [r7, #20]
 8000c7a:	1ad3      	subs	r3, r2, r3
 8000c7c:	617b      	str	r3, [r7, #20]
	int rd_pt;

	if(wrt_pt != *p_rdpt){//wrtに追い付かれてない
 8000c7e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000c80:	781b      	ldrb	r3, [r3, #0]
 8000c82:	001a      	movs	r2, r3
 8000c84:	697b      	ldr	r3, [r7, #20]
 8000c86:	4293      	cmp	r3, r2
 8000c88:	d02f      	beq.n	8000cea <readBuf+0x8e>
		if(buf[*p_rdpt] == 255){//p_rdptが書き換えられてない=追い越されてない
 8000c8a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000c8c:	781b      	ldrb	r3, [r3, #0]
 8000c8e:	001a      	movs	r2, r3
 8000c90:	68bb      	ldr	r3, [r7, #8]
 8000c92:	189b      	adds	r3, r3, r2
 8000c94:	781b      	ldrb	r3, [r3, #0]
 8000c96:	2bff      	cmp	r3, #255	@ 0xff
 8000c98:	d116      	bne.n	8000cc8 <readBuf+0x6c>
			if(wrt_pt != *p_wrtpt){//wrt_ptが進んだ=受信した
 8000c9a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	001a      	movs	r2, r3
 8000ca0:	697b      	ldr	r3, [r7, #20]
 8000ca2:	4293      	cmp	r3, r2
 8000ca4:	d006      	beq.n	8000cb4 <readBuf+0x58>
//正常
				*stop_counter = 0;
 8000ca6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000ca8:	2200      	movs	r2, #0
 8000caa:	801a      	strh	r2, [r3, #0]
				rd_pt = *p_rdpt;
 8000cac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000cb2:	e045      	b.n	8000d40 <readBuf+0xe4>
			}else{//wrt_ptが進んでない=受信してない
//受信してない
				(*stop_counter)++;
 8000cb4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000cb6:	881b      	ldrh	r3, [r3, #0]
 8000cb8:	3301      	adds	r3, #1
 8000cba:	b29a      	uxth	r2, r3
 8000cbc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000cbe:	801a      	strh	r2, [r3, #0]
				rd_pt = *p_rdpt;
 8000cc0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000cc6:	e03b      	b.n	8000d40 <readBuf+0xe4>
			}
		}else{//p_rdptが書き換えられた=追い越された
//追い越された
			(*error_counter)++;
 8000cc8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000cca:	881b      	ldrh	r3, [r3, #0]
 8000ccc:	3301      	adds	r3, #1
 8000cce:	b29a      	uxth	r2, r3
 8000cd0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000cd2:	801a      	strh	r2, [r3, #0]
			rd_pt = wrt_pt - 40;
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	3b28      	subs	r3, #40	@ 0x28
 8000cd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
				if(rd_pt < 0){rd_pt += buf_size;}
 8000cda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	da2f      	bge.n	8000d40 <readBuf+0xe4>
 8000ce0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	18d3      	adds	r3, r2, r3
 8000ce6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000ce8:	e02a      	b.n	8000d40 <readBuf+0xe4>
		}
	}else{//wrtに追い付かれた,追い付いた
		int front_pt = wrt_pt + 1;
 8000cea:	697b      	ldr	r3, [r7, #20]
 8000cec:	3301      	adds	r3, #1
 8000cee:	62bb      	str	r3, [r7, #40]	@ 0x28
			if(front_pt>buf_size-1){front_pt -= buf_size;}
 8000cf0:	687a      	ldr	r2, [r7, #4]
 8000cf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000cf4:	429a      	cmp	r2, r3
 8000cf6:	dc03      	bgt.n	8000d00 <readBuf+0xa4>
 8000cf8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	1ad3      	subs	r3, r2, r3
 8000cfe:	62bb      	str	r3, [r7, #40]	@ 0x28

		if(buf[front_pt] == 255){
 8000d00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d02:	68ba      	ldr	r2, [r7, #8]
 8000d04:	18d3      	adds	r3, r2, r3
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	2bff      	cmp	r3, #255	@ 0xff
 8000d0a:	d109      	bne.n	8000d20 <readBuf+0xc4>
//追い付いた
			(*stop_counter)++;
 8000d0c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000d0e:	881b      	ldrh	r3, [r3, #0]
 8000d10:	3301      	adds	r3, #1
 8000d12:	b29a      	uxth	r2, r3
 8000d14:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000d16:	801a      	strh	r2, [r3, #0]
			rd_pt = *p_rdpt;
 8000d18:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000d1e:	e00f      	b.n	8000d40 <readBuf+0xe4>
		}else{
//追い付かれた
			(*error_counter)++;
 8000d20:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000d22:	881b      	ldrh	r3, [r3, #0]
 8000d24:	3301      	adds	r3, #1
 8000d26:	b29a      	uxth	r2, r3
 8000d28:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000d2a:	801a      	strh	r2, [r3, #0]
			rd_pt = wrt_pt - 40;
 8000d2c:	697b      	ldr	r3, [r7, #20]
 8000d2e:	3b28      	subs	r3, #40	@ 0x28
 8000d30:	62fb      	str	r3, [r7, #44]	@ 0x2c
				if(rd_pt < 0){rd_pt += buf_size;}
 8000d32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	da03      	bge.n	8000d40 <readBuf+0xe4>
 8000d38:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	18d3      	adds	r3, r2, r3
 8000d3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
		}
	}

	if(*stop_counter > 65500){*stop_counter = 65500;}
 8000d40:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000d42:	881b      	ldrh	r3, [r3, #0]
 8000d44:	4a49      	ldr	r2, [pc, #292]	@ (8000e6c <readBuf+0x210>)
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d903      	bls.n	8000d52 <readBuf+0xf6>
 8000d4a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000d4c:	2224      	movs	r2, #36	@ 0x24
 8000d4e:	4252      	negs	r2, r2
 8000d50:	801a      	strh	r2, [r3, #0]
	if(*error_counter > 65500){*error_counter = 65500;}
 8000d52:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000d54:	881b      	ldrh	r3, [r3, #0]
 8000d56:	4a45      	ldr	r2, [pc, #276]	@ (8000e6c <readBuf+0x210>)
 8000d58:	4293      	cmp	r3, r2
 8000d5a:	d903      	bls.n	8000d64 <readBuf+0x108>
 8000d5c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000d5e:	2224      	movs	r2, #36	@ 0x24
 8000d60:	4252      	negs	r2, r2
 8000d62:	801a      	strh	r2, [r3, #0]


	while(1){
		int dif_pt = wrt_pt - rd_pt;
 8000d64:	697a      	ldr	r2, [r7, #20]
 8000d66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d68:	1ad3      	subs	r3, r2, r3
 8000d6a:	627b      	str	r3, [r7, #36]	@ 0x24
			if(dif_pt < 0){dif_pt += buf_size;}
 8000d6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	da03      	bge.n	8000d7a <readBuf+0x11e>
 8000d72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	18d3      	adds	r3, r2, r3
 8000d78:	627b      	str	r3, [r7, #36]	@ 0x24
		if(dif_pt <= 20){break;}
 8000d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d7c:	2b14      	cmp	r3, #20
 8000d7e:	dd67      	ble.n	8000e50 <readBuf+0x1f4>

		rd_pt++;
 8000d80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d82:	3301      	adds	r3, #1
 8000d84:	62fb      	str	r3, [r7, #44]	@ 0x2c
			if(rd_pt>buf_size-1){rd_pt -= buf_size;}
 8000d86:	687a      	ldr	r2, [r7, #4]
 8000d88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d8a:	429a      	cmp	r2, r3
 8000d8c:	dc03      	bgt.n	8000d96 <readBuf+0x13a>
 8000d8e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	1ad3      	subs	r3, r2, r3
 8000d94:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if(buf[rd_pt] == 250+id){
 8000d96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d98:	68ba      	ldr	r2, [r7, #8]
 8000d9a:	18d3      	adds	r3, r2, r3
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	001a      	movs	r2, r3
 8000da0:	233c      	movs	r3, #60	@ 0x3c
 8000da2:	18fb      	adds	r3, r7, r3
 8000da4:	781b      	ldrb	r3, [r3, #0]
 8000da6:	33fa      	adds	r3, #250	@ 0xfa
 8000da8:	429a      	cmp	r2, r3
 8000daa:	d14b      	bne.n	8000e44 <readBuf+0x1e8>
			int goal_rdpt = rd_pt + data_size;//data_sizeに0はとれない,25以上もだめ
 8000dac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000dae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000db0:	18d3      	adds	r3, r2, r3
 8000db2:	623b      	str	r3, [r7, #32]
				if(goal_rdpt>buf_size-1){goal_rdpt -= buf_size;}
 8000db4:	687a      	ldr	r2, [r7, #4]
 8000db6:	6a3b      	ldr	r3, [r7, #32]
 8000db8:	429a      	cmp	r2, r3
 8000dba:	dc03      	bgt.n	8000dc4 <readBuf+0x168>
 8000dbc:	6a3a      	ldr	r2, [r7, #32]
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	1ad3      	subs	r3, r2, r3
 8000dc2:	623b      	str	r3, [r7, #32]
			int temp_rdpt = rd_pt;
 8000dc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000dc6:	61fb      	str	r3, [r7, #28]
			buf[rd_pt] = 255;
 8000dc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000dca:	68ba      	ldr	r2, [r7, #8]
 8000dcc:	18d3      	adds	r3, r2, r3
 8000dce:	22ff      	movs	r2, #255	@ 0xff
 8000dd0:	701a      	strb	r2, [r3, #0]

			for(int i=0; temp_rdpt==goal_rdpt; i++){
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	61bb      	str	r3, [r7, #24]
 8000dd6:	e01a      	b.n	8000e0e <readBuf+0x1b2>
				temp_rdpt += 1;
 8000dd8:	69fb      	ldr	r3, [r7, #28]
 8000dda:	3301      	adds	r3, #1
 8000ddc:	61fb      	str	r3, [r7, #28]
					if(temp_rdpt>buf_size-1){temp_rdpt -= buf_size;}
 8000dde:	687a      	ldr	r2, [r7, #4]
 8000de0:	69fb      	ldr	r3, [r7, #28]
 8000de2:	429a      	cmp	r2, r3
 8000de4:	dc03      	bgt.n	8000dee <readBuf+0x192>
 8000de6:	69fa      	ldr	r2, [r7, #28]
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	1ad3      	subs	r3, r2, r3
 8000dec:	61fb      	str	r3, [r7, #28]

				data[i] = buf[temp_rdpt];
 8000dee:	69fb      	ldr	r3, [r7, #28]
 8000df0:	68ba      	ldr	r2, [r7, #8]
 8000df2:	18d2      	adds	r2, r2, r3
 8000df4:	69bb      	ldr	r3, [r7, #24]
 8000df6:	6839      	ldr	r1, [r7, #0]
 8000df8:	18cb      	adds	r3, r1, r3
 8000dfa:	7812      	ldrb	r2, [r2, #0]
 8000dfc:	701a      	strb	r2, [r3, #0]
				buf[temp_rdpt] = 255;
 8000dfe:	69fb      	ldr	r3, [r7, #28]
 8000e00:	68ba      	ldr	r2, [r7, #8]
 8000e02:	18d3      	adds	r3, r2, r3
 8000e04:	22ff      	movs	r2, #255	@ 0xff
 8000e06:	701a      	strb	r2, [r3, #0]
			for(int i=0; temp_rdpt==goal_rdpt; i++){
 8000e08:	69bb      	ldr	r3, [r7, #24]
 8000e0a:	3301      	adds	r3, #1
 8000e0c:	61bb      	str	r3, [r7, #24]
 8000e0e:	69fa      	ldr	r2, [r7, #28]
 8000e10:	6a3b      	ldr	r3, [r7, #32]
 8000e12:	429a      	cmp	r2, r3
 8000e14:	d0e0      	beq.n	8000dd8 <readBuf+0x17c>
			}

			rd_pt = temp_rdpt;
 8000e16:	69fb      	ldr	r3, [r7, #28]
 8000e18:	62fb      	str	r3, [r7, #44]	@ 0x2c

			dif_pt = wrt_pt - rd_pt;
 8000e1a:	697a      	ldr	r2, [r7, #20]
 8000e1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e1e:	1ad3      	subs	r3, r2, r3
 8000e20:	627b      	str	r3, [r7, #36]	@ 0x24
				if(dif_pt < 0){dif_pt += buf_size;}
 8000e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	da03      	bge.n	8000e30 <readBuf+0x1d4>
 8000e28:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	18d3      	adds	r3, r2, r3
 8000e2e:	627b      	str	r3, [r7, #36]	@ 0x24
			if(dif_pt >= buf_size/2){}
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	da00      	bge.n	8000e38 <readBuf+0x1dc>
 8000e36:	3301      	adds	r3, #1
 8000e38:	105b      	asrs	r3, r3, #1
 8000e3a:	001a      	movs	r2, r3
 8000e3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	da90      	bge.n	8000d64 <readBuf+0x108>
			else{break;}
 8000e42:	e006      	b.n	8000e52 <readBuf+0x1f6>
		}else{buf[rd_pt] = 255;}
 8000e44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e46:	68ba      	ldr	r2, [r7, #8]
 8000e48:	18d3      	adds	r3, r2, r3
 8000e4a:	22ff      	movs	r2, #255	@ 0xff
 8000e4c:	701a      	strb	r2, [r3, #0]
	while(1){
 8000e4e:	e789      	b.n	8000d64 <readBuf+0x108>
		if(dif_pt <= 20){break;}
 8000e50:	46c0      	nop			@ (mov r8, r8)
	}

	*p_rdpt = rd_pt;
 8000e52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e54:	b2da      	uxtb	r2, r3
 8000e56:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000e58:	701a      	strb	r2, [r3, #0]
//	*p_wrtpt = buf_size - (uart->hdmarx->Instance->CNDTR);
	*p_wrtpt = wrt_pt;
 8000e5a:	697b      	ldr	r3, [r7, #20]
 8000e5c:	b2da      	uxtb	r2, r3
 8000e5e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000e60:	701a      	strb	r2, [r3, #0]
}
 8000e62:	46c0      	nop			@ (mov r8, r8)
 8000e64:	46bd      	mov	sp, r7
 8000e66:	b00c      	add	sp, #48	@ 0x30
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	46c0      	nop			@ (mov r8, r8)
 8000e6c:	0000ffdc 	.word	0x0000ffdc

08000e70 <readID>:
	int index = uart->hdmarx->Instance->CNDTR;
	index = buf_size - index;
	return index;
}

uint8_t readID(){
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
	uint8_t id;
	if(HAL_GPIO_ReadPin(SW1_GPIO_Port, SW1_Pin)==1){id=0;}
 8000e76:	2380      	movs	r3, #128	@ 0x80
 8000e78:	011a      	lsls	r2, r3, #4
 8000e7a:	23a0      	movs	r3, #160	@ 0xa0
 8000e7c:	05db      	lsls	r3, r3, #23
 8000e7e:	0011      	movs	r1, r2
 8000e80:	0018      	movs	r0, r3
 8000e82:	f000 ff8f 	bl	8001da4 <HAL_GPIO_ReadPin>
 8000e86:	0003      	movs	r3, r0
 8000e88:	2b01      	cmp	r3, #1
 8000e8a:	d103      	bne.n	8000e94 <readID+0x24>
 8000e8c:	1dfb      	adds	r3, r7, #7
 8000e8e:	2200      	movs	r2, #0
 8000e90:	701a      	strb	r2, [r3, #0]
 8000e92:	e035      	b.n	8000f00 <readID+0x90>
	else if(HAL_GPIO_ReadPin(SW2_GPIO_Port, SW2_Pin)==1){id=1;}
 8000e94:	4b1d      	ldr	r3, [pc, #116]	@ (8000f0c <readID+0x9c>)
 8000e96:	2140      	movs	r1, #64	@ 0x40
 8000e98:	0018      	movs	r0, r3
 8000e9a:	f000 ff83 	bl	8001da4 <HAL_GPIO_ReadPin>
 8000e9e:	0003      	movs	r3, r0
 8000ea0:	2b01      	cmp	r3, #1
 8000ea2:	d103      	bne.n	8000eac <readID+0x3c>
 8000ea4:	1dfb      	adds	r3, r7, #7
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	701a      	strb	r2, [r3, #0]
 8000eaa:	e029      	b.n	8000f00 <readID+0x90>
	else if(HAL_GPIO_ReadPin(SW3_GPIO_Port, SW3_Pin)==1){id=2;}
 8000eac:	2380      	movs	r3, #128	@ 0x80
 8000eae:	005a      	lsls	r2, r3, #1
 8000eb0:	23a0      	movs	r3, #160	@ 0xa0
 8000eb2:	05db      	lsls	r3, r3, #23
 8000eb4:	0011      	movs	r1, r2
 8000eb6:	0018      	movs	r0, r3
 8000eb8:	f000 ff74 	bl	8001da4 <HAL_GPIO_ReadPin>
 8000ebc:	0003      	movs	r3, r0
 8000ebe:	2b01      	cmp	r3, #1
 8000ec0:	d103      	bne.n	8000eca <readID+0x5a>
 8000ec2:	1dfb      	adds	r3, r7, #7
 8000ec4:	2202      	movs	r2, #2
 8000ec6:	701a      	strb	r2, [r3, #0]
 8000ec8:	e01a      	b.n	8000f00 <readID+0x90>
	else if(HAL_GPIO_ReadPin(SW4_GPIO_Port, SW4_Pin)==1){id=3;}
 8000eca:	4b11      	ldr	r3, [pc, #68]	@ (8000f10 <readID+0xa0>)
 8000ecc:	2104      	movs	r1, #4
 8000ece:	0018      	movs	r0, r3
 8000ed0:	f000 ff68 	bl	8001da4 <HAL_GPIO_ReadPin>
 8000ed4:	0003      	movs	r3, r0
 8000ed6:	2b01      	cmp	r3, #1
 8000ed8:	d103      	bne.n	8000ee2 <readID+0x72>
 8000eda:	1dfb      	adds	r3, r7, #7
 8000edc:	2203      	movs	r2, #3
 8000ede:	701a      	strb	r2, [r3, #0]
 8000ee0:	e00e      	b.n	8000f00 <readID+0x90>
	else if(HAL_GPIO_ReadPin(SW5_GPIO_Port, SW5_Pin)==1){id=4;}
 8000ee2:	4b0b      	ldr	r3, [pc, #44]	@ (8000f10 <readID+0xa0>)
 8000ee4:	2102      	movs	r1, #2
 8000ee6:	0018      	movs	r0, r3
 8000ee8:	f000 ff5c 	bl	8001da4 <HAL_GPIO_ReadPin>
 8000eec:	0003      	movs	r3, r0
 8000eee:	2b01      	cmp	r3, #1
 8000ef0:	d103      	bne.n	8000efa <readID+0x8a>
 8000ef2:	1dfb      	adds	r3, r7, #7
 8000ef4:	2204      	movs	r2, #4
 8000ef6:	701a      	strb	r2, [r3, #0]
 8000ef8:	e002      	b.n	8000f00 <readID+0x90>
	else{id=5;}
 8000efa:	1dfb      	adds	r3, r7, #7
 8000efc:	2205      	movs	r2, #5
 8000efe:	701a      	strb	r2, [r3, #0]
	return id;
 8000f00:	1dfb      	adds	r3, r7, #7
 8000f02:	781b      	ldrb	r3, [r3, #0]
}
 8000f04:	0018      	movs	r0, r3
 8000f06:	46bd      	mov	sp, r7
 8000f08:	b002      	add	sp, #8
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	50000800 	.word	0x50000800
 8000f10:	50000400 	.word	0x50000400

08000f14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f18:	b672      	cpsid	i
}
 8000f1a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f1c:	46c0      	nop			@ (mov r8, r8)
 8000f1e:	e7fd      	b.n	8000f1c <Error_Handler+0x8>

08000f20 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f26:	4b0f      	ldr	r3, [pc, #60]	@ (8000f64 <HAL_MspInit+0x44>)
 8000f28:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000f2a:	4b0e      	ldr	r3, [pc, #56]	@ (8000f64 <HAL_MspInit+0x44>)
 8000f2c:	2101      	movs	r1, #1
 8000f2e:	430a      	orrs	r2, r1
 8000f30:	641a      	str	r2, [r3, #64]	@ 0x40
 8000f32:	4b0c      	ldr	r3, [pc, #48]	@ (8000f64 <HAL_MspInit+0x44>)
 8000f34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f36:	2201      	movs	r2, #1
 8000f38:	4013      	ands	r3, r2
 8000f3a:	607b      	str	r3, [r7, #4]
 8000f3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f3e:	4b09      	ldr	r3, [pc, #36]	@ (8000f64 <HAL_MspInit+0x44>)
 8000f40:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000f42:	4b08      	ldr	r3, [pc, #32]	@ (8000f64 <HAL_MspInit+0x44>)
 8000f44:	2180      	movs	r1, #128	@ 0x80
 8000f46:	0549      	lsls	r1, r1, #21
 8000f48:	430a      	orrs	r2, r1
 8000f4a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000f4c:	4b05      	ldr	r3, [pc, #20]	@ (8000f64 <HAL_MspInit+0x44>)
 8000f4e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000f50:	2380      	movs	r3, #128	@ 0x80
 8000f52:	055b      	lsls	r3, r3, #21
 8000f54:	4013      	ands	r3, r2
 8000f56:	603b      	str	r3, [r7, #0]
 8000f58:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f5a:	46c0      	nop			@ (mov r8, r8)
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	b002      	add	sp, #8
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	46c0      	nop			@ (mov r8, r8)
 8000f64:	40021000 	.word	0x40021000

08000f68 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b084      	sub	sp, #16
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a17      	ldr	r2, [pc, #92]	@ (8000fd4 <HAL_TIM_Base_MspInit+0x6c>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d114      	bne.n	8000fa4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f7a:	4b17      	ldr	r3, [pc, #92]	@ (8000fd8 <HAL_TIM_Base_MspInit+0x70>)
 8000f7c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000f7e:	4b16      	ldr	r3, [pc, #88]	@ (8000fd8 <HAL_TIM_Base_MspInit+0x70>)
 8000f80:	2102      	movs	r1, #2
 8000f82:	430a      	orrs	r2, r1
 8000f84:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000f86:	4b14      	ldr	r3, [pc, #80]	@ (8000fd8 <HAL_TIM_Base_MspInit+0x70>)
 8000f88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000f8a:	2202      	movs	r2, #2
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	60fb      	str	r3, [r7, #12]
 8000f90:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000f92:	2200      	movs	r2, #0
 8000f94:	2100      	movs	r1, #0
 8000f96:	2010      	movs	r0, #16
 8000f98:	f000 fb1c 	bl	80015d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000f9c:	2010      	movs	r0, #16
 8000f9e:	f000 fb2e 	bl	80015fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8000fa2:	e012      	b.n	8000fca <HAL_TIM_Base_MspInit+0x62>
  else if(htim_base->Instance==TIM16)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a0c      	ldr	r2, [pc, #48]	@ (8000fdc <HAL_TIM_Base_MspInit+0x74>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d10d      	bne.n	8000fca <HAL_TIM_Base_MspInit+0x62>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000fae:	4b0a      	ldr	r3, [pc, #40]	@ (8000fd8 <HAL_TIM_Base_MspInit+0x70>)
 8000fb0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000fb2:	4b09      	ldr	r3, [pc, #36]	@ (8000fd8 <HAL_TIM_Base_MspInit+0x70>)
 8000fb4:	2180      	movs	r1, #128	@ 0x80
 8000fb6:	0289      	lsls	r1, r1, #10
 8000fb8:	430a      	orrs	r2, r1
 8000fba:	641a      	str	r2, [r3, #64]	@ 0x40
 8000fbc:	4b06      	ldr	r3, [pc, #24]	@ (8000fd8 <HAL_TIM_Base_MspInit+0x70>)
 8000fbe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000fc0:	2380      	movs	r3, #128	@ 0x80
 8000fc2:	029b      	lsls	r3, r3, #10
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	60bb      	str	r3, [r7, #8]
 8000fc8:	68bb      	ldr	r3, [r7, #8]
}
 8000fca:	46c0      	nop			@ (mov r8, r8)
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	b004      	add	sp, #16
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	46c0      	nop			@ (mov r8, r8)
 8000fd4:	40000400 	.word	0x40000400
 8000fd8:	40021000 	.word	0x40021000
 8000fdc:	40014400 	.word	0x40014400

08000fe0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000fe0:	b590      	push	{r4, r7, lr}
 8000fe2:	b08b      	sub	sp, #44	@ 0x2c
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe8:	2414      	movs	r4, #20
 8000fea:	193b      	adds	r3, r7, r4
 8000fec:	0018      	movs	r0, r3
 8000fee:	2314      	movs	r3, #20
 8000ff0:	001a      	movs	r2, r3
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	f003 ff44 	bl	8004e80 <memset>
  if(htim->Instance==TIM16)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a25      	ldr	r2, [pc, #148]	@ (8001094 <HAL_TIM_MspPostInit+0xb4>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d143      	bne.n	800108a <HAL_TIM_MspPostInit+0xaa>
  {
  /* USER CODE BEGIN TIM16_MspPostInit 0 */

  /* USER CODE END TIM16_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001002:	4b25      	ldr	r3, [pc, #148]	@ (8001098 <HAL_TIM_MspPostInit+0xb8>)
 8001004:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001006:	4b24      	ldr	r3, [pc, #144]	@ (8001098 <HAL_TIM_MspPostInit+0xb8>)
 8001008:	2101      	movs	r1, #1
 800100a:	430a      	orrs	r2, r1
 800100c:	635a      	str	r2, [r3, #52]	@ 0x34
 800100e:	4b22      	ldr	r3, [pc, #136]	@ (8001098 <HAL_TIM_MspPostInit+0xb8>)
 8001010:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001012:	2201      	movs	r2, #1
 8001014:	4013      	ands	r3, r2
 8001016:	613b      	str	r3, [r7, #16]
 8001018:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800101a:	4b1f      	ldr	r3, [pc, #124]	@ (8001098 <HAL_TIM_MspPostInit+0xb8>)
 800101c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800101e:	4b1e      	ldr	r3, [pc, #120]	@ (8001098 <HAL_TIM_MspPostInit+0xb8>)
 8001020:	2102      	movs	r1, #2
 8001022:	430a      	orrs	r2, r1
 8001024:	635a      	str	r2, [r3, #52]	@ 0x34
 8001026:	4b1c      	ldr	r3, [pc, #112]	@ (8001098 <HAL_TIM_MspPostInit+0xb8>)
 8001028:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800102a:	2202      	movs	r2, #2
 800102c:	4013      	ands	r3, r2
 800102e:	60fb      	str	r3, [r7, #12]
 8001030:	68fb      	ldr	r3, [r7, #12]
    /**TIM16 GPIO Configuration
    PA6     ------> TIM16_CH1
    PB6     ------> TIM16_CH1N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001032:	193b      	adds	r3, r7, r4
 8001034:	2240      	movs	r2, #64	@ 0x40
 8001036:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001038:	193b      	adds	r3, r7, r4
 800103a:	2202      	movs	r2, #2
 800103c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103e:	193b      	adds	r3, r7, r4
 8001040:	2200      	movs	r2, #0
 8001042:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001044:	193b      	adds	r3, r7, r4
 8001046:	2200      	movs	r2, #0
 8001048:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM16;
 800104a:	193b      	adds	r3, r7, r4
 800104c:	2205      	movs	r2, #5
 800104e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001050:	193a      	adds	r2, r7, r4
 8001052:	23a0      	movs	r3, #160	@ 0xa0
 8001054:	05db      	lsls	r3, r3, #23
 8001056:	0011      	movs	r1, r2
 8001058:	0018      	movs	r0, r3
 800105a:	f000 fd3f 	bl	8001adc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800105e:	0021      	movs	r1, r4
 8001060:	187b      	adds	r3, r7, r1
 8001062:	2240      	movs	r2, #64	@ 0x40
 8001064:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001066:	187b      	adds	r3, r7, r1
 8001068:	2202      	movs	r2, #2
 800106a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106c:	187b      	adds	r3, r7, r1
 800106e:	2200      	movs	r2, #0
 8001070:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001072:	187b      	adds	r3, r7, r1
 8001074:	2200      	movs	r2, #0
 8001076:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM16;
 8001078:	187b      	adds	r3, r7, r1
 800107a:	2202      	movs	r2, #2
 800107c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800107e:	187b      	adds	r3, r7, r1
 8001080:	4a06      	ldr	r2, [pc, #24]	@ (800109c <HAL_TIM_MspPostInit+0xbc>)
 8001082:	0019      	movs	r1, r3
 8001084:	0010      	movs	r0, r2
 8001086:	f000 fd29 	bl	8001adc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 800108a:	46c0      	nop			@ (mov r8, r8)
 800108c:	46bd      	mov	sp, r7
 800108e:	b00b      	add	sp, #44	@ 0x2c
 8001090:	bd90      	pop	{r4, r7, pc}
 8001092:	46c0      	nop			@ (mov r8, r8)
 8001094:	40014400 	.word	0x40014400
 8001098:	40021000 	.word	0x40021000
 800109c:	50000400 	.word	0x50000400

080010a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010a0:	b590      	push	{r4, r7, lr}
 80010a2:	b093      	sub	sp, #76	@ 0x4c
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a8:	2334      	movs	r3, #52	@ 0x34
 80010aa:	18fb      	adds	r3, r7, r3
 80010ac:	0018      	movs	r0, r3
 80010ae:	2314      	movs	r3, #20
 80010b0:	001a      	movs	r2, r3
 80010b2:	2100      	movs	r1, #0
 80010b4:	f003 fee4 	bl	8004e80 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010b8:	241c      	movs	r4, #28
 80010ba:	193b      	adds	r3, r7, r4
 80010bc:	0018      	movs	r0, r3
 80010be:	2318      	movs	r3, #24
 80010c0:	001a      	movs	r2, r3
 80010c2:	2100      	movs	r1, #0
 80010c4:	f003 fedc 	bl	8004e80 <memset>
  if(huart->Instance==USART1)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a69      	ldr	r2, [pc, #420]	@ (8001274 <HAL_UART_MspInit+0x1d4>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d16b      	bne.n	80011aa <HAL_UART_MspInit+0x10a>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80010d2:	193b      	adds	r3, r7, r4
 80010d4:	2201      	movs	r2, #1
 80010d6:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80010d8:	193b      	adds	r3, r7, r4
 80010da:	2200      	movs	r2, #0
 80010dc:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010de:	193b      	adds	r3, r7, r4
 80010e0:	0018      	movs	r0, r3
 80010e2:	f001 fbb9 	bl	8002858 <HAL_RCCEx_PeriphCLKConfig>
 80010e6:	1e03      	subs	r3, r0, #0
 80010e8:	d001      	beq.n	80010ee <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80010ea:	f7ff ff13 	bl	8000f14 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80010ee:	4b62      	ldr	r3, [pc, #392]	@ (8001278 <HAL_UART_MspInit+0x1d8>)
 80010f0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80010f2:	4b61      	ldr	r3, [pc, #388]	@ (8001278 <HAL_UART_MspInit+0x1d8>)
 80010f4:	2180      	movs	r1, #128	@ 0x80
 80010f6:	01c9      	lsls	r1, r1, #7
 80010f8:	430a      	orrs	r2, r1
 80010fa:	641a      	str	r2, [r3, #64]	@ 0x40
 80010fc:	4b5e      	ldr	r3, [pc, #376]	@ (8001278 <HAL_UART_MspInit+0x1d8>)
 80010fe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001100:	2380      	movs	r3, #128	@ 0x80
 8001102:	01db      	lsls	r3, r3, #7
 8001104:	4013      	ands	r3, r2
 8001106:	61bb      	str	r3, [r7, #24]
 8001108:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800110a:	4b5b      	ldr	r3, [pc, #364]	@ (8001278 <HAL_UART_MspInit+0x1d8>)
 800110c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800110e:	4b5a      	ldr	r3, [pc, #360]	@ (8001278 <HAL_UART_MspInit+0x1d8>)
 8001110:	2101      	movs	r1, #1
 8001112:	430a      	orrs	r2, r1
 8001114:	635a      	str	r2, [r3, #52]	@ 0x34
 8001116:	4b58      	ldr	r3, [pc, #352]	@ (8001278 <HAL_UART_MspInit+0x1d8>)
 8001118:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800111a:	2201      	movs	r2, #1
 800111c:	4013      	ands	r3, r2
 800111e:	617b      	str	r3, [r7, #20]
 8001120:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001122:	2134      	movs	r1, #52	@ 0x34
 8001124:	187b      	adds	r3, r7, r1
 8001126:	22c0      	movs	r2, #192	@ 0xc0
 8001128:	00d2      	lsls	r2, r2, #3
 800112a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800112c:	187b      	adds	r3, r7, r1
 800112e:	2202      	movs	r2, #2
 8001130:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001132:	187b      	adds	r3, r7, r1
 8001134:	2200      	movs	r2, #0
 8001136:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001138:	187b      	adds	r3, r7, r1
 800113a:	2200      	movs	r2, #0
 800113c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 800113e:	187b      	adds	r3, r7, r1
 8001140:	2201      	movs	r2, #1
 8001142:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001144:	187a      	adds	r2, r7, r1
 8001146:	23a0      	movs	r3, #160	@ 0xa0
 8001148:	05db      	lsls	r3, r3, #23
 800114a:	0011      	movs	r1, r2
 800114c:	0018      	movs	r0, r3
 800114e:	f000 fcc5 	bl	8001adc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel2;
 8001152:	4b4a      	ldr	r3, [pc, #296]	@ (800127c <HAL_UART_MspInit+0x1dc>)
 8001154:	4a4a      	ldr	r2, [pc, #296]	@ (8001280 <HAL_UART_MspInit+0x1e0>)
 8001156:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8001158:	4b48      	ldr	r3, [pc, #288]	@ (800127c <HAL_UART_MspInit+0x1dc>)
 800115a:	2232      	movs	r2, #50	@ 0x32
 800115c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800115e:	4b47      	ldr	r3, [pc, #284]	@ (800127c <HAL_UART_MspInit+0x1dc>)
 8001160:	2200      	movs	r2, #0
 8001162:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001164:	4b45      	ldr	r3, [pc, #276]	@ (800127c <HAL_UART_MspInit+0x1dc>)
 8001166:	2200      	movs	r2, #0
 8001168:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800116a:	4b44      	ldr	r3, [pc, #272]	@ (800127c <HAL_UART_MspInit+0x1dc>)
 800116c:	2280      	movs	r2, #128	@ 0x80
 800116e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001170:	4b42      	ldr	r3, [pc, #264]	@ (800127c <HAL_UART_MspInit+0x1dc>)
 8001172:	2200      	movs	r2, #0
 8001174:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001176:	4b41      	ldr	r3, [pc, #260]	@ (800127c <HAL_UART_MspInit+0x1dc>)
 8001178:	2200      	movs	r2, #0
 800117a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800117c:	4b3f      	ldr	r3, [pc, #252]	@ (800127c <HAL_UART_MspInit+0x1dc>)
 800117e:	2220      	movs	r2, #32
 8001180:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001182:	4b3e      	ldr	r3, [pc, #248]	@ (800127c <HAL_UART_MspInit+0x1dc>)
 8001184:	2280      	movs	r2, #128	@ 0x80
 8001186:	0152      	lsls	r2, r2, #5
 8001188:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800118a:	4b3c      	ldr	r3, [pc, #240]	@ (800127c <HAL_UART_MspInit+0x1dc>)
 800118c:	0018      	movs	r0, r3
 800118e:	f000 fa53 	bl	8001638 <HAL_DMA_Init>
 8001192:	1e03      	subs	r3, r0, #0
 8001194:	d001      	beq.n	800119a <HAL_UART_MspInit+0xfa>
    {
      Error_Handler();
 8001196:	f7ff febd 	bl	8000f14 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	2180      	movs	r1, #128	@ 0x80
 800119e:	4a37      	ldr	r2, [pc, #220]	@ (800127c <HAL_UART_MspInit+0x1dc>)
 80011a0:	505a      	str	r2, [r3, r1]
 80011a2:	4b36      	ldr	r3, [pc, #216]	@ (800127c <HAL_UART_MspInit+0x1dc>)
 80011a4:	687a      	ldr	r2, [r7, #4]
 80011a6:	629a      	str	r2, [r3, #40]	@ 0x28
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80011a8:	e05f      	b.n	800126a <HAL_UART_MspInit+0x1ca>
  else if(huart->Instance==USART2)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4a35      	ldr	r2, [pc, #212]	@ (8001284 <HAL_UART_MspInit+0x1e4>)
 80011b0:	4293      	cmp	r3, r2
 80011b2:	d15a      	bne.n	800126a <HAL_UART_MspInit+0x1ca>
    __HAL_RCC_USART2_CLK_ENABLE();
 80011b4:	4b30      	ldr	r3, [pc, #192]	@ (8001278 <HAL_UART_MspInit+0x1d8>)
 80011b6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80011b8:	4b2f      	ldr	r3, [pc, #188]	@ (8001278 <HAL_UART_MspInit+0x1d8>)
 80011ba:	2180      	movs	r1, #128	@ 0x80
 80011bc:	0289      	lsls	r1, r1, #10
 80011be:	430a      	orrs	r2, r1
 80011c0:	63da      	str	r2, [r3, #60]	@ 0x3c
 80011c2:	4b2d      	ldr	r3, [pc, #180]	@ (8001278 <HAL_UART_MspInit+0x1d8>)
 80011c4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80011c6:	2380      	movs	r3, #128	@ 0x80
 80011c8:	029b      	lsls	r3, r3, #10
 80011ca:	4013      	ands	r3, r2
 80011cc:	613b      	str	r3, [r7, #16]
 80011ce:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011d0:	4b29      	ldr	r3, [pc, #164]	@ (8001278 <HAL_UART_MspInit+0x1d8>)
 80011d2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80011d4:	4b28      	ldr	r3, [pc, #160]	@ (8001278 <HAL_UART_MspInit+0x1d8>)
 80011d6:	2101      	movs	r1, #1
 80011d8:	430a      	orrs	r2, r1
 80011da:	635a      	str	r2, [r3, #52]	@ 0x34
 80011dc:	4b26      	ldr	r3, [pc, #152]	@ (8001278 <HAL_UART_MspInit+0x1d8>)
 80011de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80011e0:	2201      	movs	r2, #1
 80011e2:	4013      	ands	r3, r2
 80011e4:	60fb      	str	r3, [r7, #12]
 80011e6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 80011e8:	2134      	movs	r1, #52	@ 0x34
 80011ea:	187b      	adds	r3, r7, r1
 80011ec:	4a26      	ldr	r2, [pc, #152]	@ (8001288 <HAL_UART_MspInit+0x1e8>)
 80011ee:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f0:	187b      	adds	r3, r7, r1
 80011f2:	2202      	movs	r2, #2
 80011f4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f6:	187b      	adds	r3, r7, r1
 80011f8:	2200      	movs	r2, #0
 80011fa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011fc:	187b      	adds	r3, r7, r1
 80011fe:	2200      	movs	r2, #0
 8001200:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001202:	187b      	adds	r3, r7, r1
 8001204:	2201      	movs	r2, #1
 8001206:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001208:	187a      	adds	r2, r7, r1
 800120a:	23a0      	movs	r3, #160	@ 0xa0
 800120c:	05db      	lsls	r3, r3, #23
 800120e:	0011      	movs	r1, r2
 8001210:	0018      	movs	r0, r3
 8001212:	f000 fc63 	bl	8001adc <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel1;
 8001216:	4b1d      	ldr	r3, [pc, #116]	@ (800128c <HAL_UART_MspInit+0x1ec>)
 8001218:	4a1d      	ldr	r2, [pc, #116]	@ (8001290 <HAL_UART_MspInit+0x1f0>)
 800121a:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 800121c:	4b1b      	ldr	r3, [pc, #108]	@ (800128c <HAL_UART_MspInit+0x1ec>)
 800121e:	2234      	movs	r2, #52	@ 0x34
 8001220:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001222:	4b1a      	ldr	r3, [pc, #104]	@ (800128c <HAL_UART_MspInit+0x1ec>)
 8001224:	2200      	movs	r2, #0
 8001226:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001228:	4b18      	ldr	r3, [pc, #96]	@ (800128c <HAL_UART_MspInit+0x1ec>)
 800122a:	2200      	movs	r2, #0
 800122c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800122e:	4b17      	ldr	r3, [pc, #92]	@ (800128c <HAL_UART_MspInit+0x1ec>)
 8001230:	2280      	movs	r2, #128	@ 0x80
 8001232:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001234:	4b15      	ldr	r3, [pc, #84]	@ (800128c <HAL_UART_MspInit+0x1ec>)
 8001236:	2200      	movs	r2, #0
 8001238:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800123a:	4b14      	ldr	r3, [pc, #80]	@ (800128c <HAL_UART_MspInit+0x1ec>)
 800123c:	2200      	movs	r2, #0
 800123e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8001240:	4b12      	ldr	r3, [pc, #72]	@ (800128c <HAL_UART_MspInit+0x1ec>)
 8001242:	2220      	movs	r2, #32
 8001244:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001246:	4b11      	ldr	r3, [pc, #68]	@ (800128c <HAL_UART_MspInit+0x1ec>)
 8001248:	2200      	movs	r2, #0
 800124a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800124c:	4b0f      	ldr	r3, [pc, #60]	@ (800128c <HAL_UART_MspInit+0x1ec>)
 800124e:	0018      	movs	r0, r3
 8001250:	f000 f9f2 	bl	8001638 <HAL_DMA_Init>
 8001254:	1e03      	subs	r3, r0, #0
 8001256:	d001      	beq.n	800125c <HAL_UART_MspInit+0x1bc>
      Error_Handler();
 8001258:	f7ff fe5c 	bl	8000f14 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2180      	movs	r1, #128	@ 0x80
 8001260:	4a0a      	ldr	r2, [pc, #40]	@ (800128c <HAL_UART_MspInit+0x1ec>)
 8001262:	505a      	str	r2, [r3, r1]
 8001264:	4b09      	ldr	r3, [pc, #36]	@ (800128c <HAL_UART_MspInit+0x1ec>)
 8001266:	687a      	ldr	r2, [r7, #4]
 8001268:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800126a:	46c0      	nop			@ (mov r8, r8)
 800126c:	46bd      	mov	sp, r7
 800126e:	b013      	add	sp, #76	@ 0x4c
 8001270:	bd90      	pop	{r4, r7, pc}
 8001272:	46c0      	nop			@ (mov r8, r8)
 8001274:	40013800 	.word	0x40013800
 8001278:	40021000 	.word	0x40021000
 800127c:	200001f4 	.word	0x200001f4
 8001280:	4002001c 	.word	0x4002001c
 8001284:	40004400 	.word	0x40004400
 8001288:	00008004 	.word	0x00008004
 800128c:	20000250 	.word	0x20000250
 8001290:	40020008 	.word	0x40020008

08001294 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001298:	46c0      	nop			@ (mov r8, r8)
 800129a:	e7fd      	b.n	8001298 <NMI_Handler+0x4>

0800129c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012a0:	46c0      	nop			@ (mov r8, r8)
 80012a2:	e7fd      	b.n	80012a0 <HardFault_Handler+0x4>

080012a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80012a8:	46c0      	nop			@ (mov r8, r8)
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}

080012ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012ae:	b580      	push	{r7, lr}
 80012b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012b2:	46c0      	nop			@ (mov r8, r8)
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}

080012b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012bc:	f000 f8c2 	bl	8001444 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012c0:	46c0      	nop			@ (mov r8, r8)
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
	...

080012c8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80012cc:	4b03      	ldr	r3, [pc, #12]	@ (80012dc <DMA1_Channel1_IRQHandler+0x14>)
 80012ce:	0018      	movs	r0, r3
 80012d0:	f000 fac2 	bl	8001858 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80012d4:	46c0      	nop			@ (mov r8, r8)
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	46c0      	nop			@ (mov r8, r8)
 80012dc:	20000250 	.word	0x20000250

080012e0 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80012e4:	4b03      	ldr	r3, [pc, #12]	@ (80012f4 <DMA1_Channel2_3_IRQHandler+0x14>)
 80012e6:	0018      	movs	r0, r3
 80012e8:	f000 fab6 	bl	8001858 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 80012ec:	46c0      	nop			@ (mov r8, r8)
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	46c0      	nop			@ (mov r8, r8)
 80012f4:	200001f4 	.word	0x200001f4

080012f8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80012fc:	4b03      	ldr	r3, [pc, #12]	@ (800130c <TIM3_IRQHandler+0x14>)
 80012fe:	0018      	movs	r0, r3
 8001300:	f001 fdae 	bl	8002e60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001304:	46c0      	nop			@ (mov r8, r8)
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	46c0      	nop			@ (mov r8, r8)
 800130c:	20000034 	.word	0x20000034

08001310 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001314:	46c0      	nop			@ (mov r8, r8)
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
	...

0800131c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800131c:	480d      	ldr	r0, [pc, #52]	@ (8001354 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800131e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001320:	f7ff fff6 	bl	8001310 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001324:	480c      	ldr	r0, [pc, #48]	@ (8001358 <LoopForever+0x6>)
  ldr r1, =_edata
 8001326:	490d      	ldr	r1, [pc, #52]	@ (800135c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001328:	4a0d      	ldr	r2, [pc, #52]	@ (8001360 <LoopForever+0xe>)
  movs r3, #0
 800132a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800132c:	e002      	b.n	8001334 <LoopCopyDataInit>

0800132e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800132e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001330:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001332:	3304      	adds	r3, #4

08001334 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001334:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001336:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001338:	d3f9      	bcc.n	800132e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800133a:	4a0a      	ldr	r2, [pc, #40]	@ (8001364 <LoopForever+0x12>)
  ldr r4, =_ebss
 800133c:	4c0a      	ldr	r4, [pc, #40]	@ (8001368 <LoopForever+0x16>)
  movs r3, #0
 800133e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001340:	e001      	b.n	8001346 <LoopFillZerobss>

08001342 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001342:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001344:	3204      	adds	r2, #4

08001346 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001346:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001348:	d3fb      	bcc.n	8001342 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800134a:	f003 fda1 	bl	8004e90 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800134e:	f7ff f863 	bl	8000418 <main>

08001352 <LoopForever>:

LoopForever:
  b LoopForever
 8001352:	e7fe      	b.n	8001352 <LoopForever>
  ldr   r0, =_estack
 8001354:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001358:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800135c:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8001360:	08004fd4 	.word	0x08004fd4
  ldr r2, =_sbss
 8001364:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8001368:	20000388 	.word	0x20000388

0800136c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800136c:	e7fe      	b.n	800136c <ADC1_IRQHandler>
	...

08001370 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001376:	1dfb      	adds	r3, r7, #7
 8001378:	2200      	movs	r2, #0
 800137a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800137c:	4b0b      	ldr	r3, [pc, #44]	@ (80013ac <HAL_Init+0x3c>)
 800137e:	681a      	ldr	r2, [r3, #0]
 8001380:	4b0a      	ldr	r3, [pc, #40]	@ (80013ac <HAL_Init+0x3c>)
 8001382:	2180      	movs	r1, #128	@ 0x80
 8001384:	0049      	lsls	r1, r1, #1
 8001386:	430a      	orrs	r2, r1
 8001388:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800138a:	2003      	movs	r0, #3
 800138c:	f000 f810 	bl	80013b0 <HAL_InitTick>
 8001390:	1e03      	subs	r3, r0, #0
 8001392:	d003      	beq.n	800139c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001394:	1dfb      	adds	r3, r7, #7
 8001396:	2201      	movs	r2, #1
 8001398:	701a      	strb	r2, [r3, #0]
 800139a:	e001      	b.n	80013a0 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 800139c:	f7ff fdc0 	bl	8000f20 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80013a0:	1dfb      	adds	r3, r7, #7
 80013a2:	781b      	ldrb	r3, [r3, #0]
}
 80013a4:	0018      	movs	r0, r3
 80013a6:	46bd      	mov	sp, r7
 80013a8:	b002      	add	sp, #8
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	40022000 	.word	0x40022000

080013b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013b0:	b590      	push	{r4, r7, lr}
 80013b2:	b085      	sub	sp, #20
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80013b8:	230f      	movs	r3, #15
 80013ba:	18fb      	adds	r3, r7, r3
 80013bc:	2200      	movs	r2, #0
 80013be:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80013c0:	4b1d      	ldr	r3, [pc, #116]	@ (8001438 <HAL_InitTick+0x88>)
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d02b      	beq.n	8001420 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80013c8:	4b1c      	ldr	r3, [pc, #112]	@ (800143c <HAL_InitTick+0x8c>)
 80013ca:	681c      	ldr	r4, [r3, #0]
 80013cc:	4b1a      	ldr	r3, [pc, #104]	@ (8001438 <HAL_InitTick+0x88>)
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	0019      	movs	r1, r3
 80013d2:	23fa      	movs	r3, #250	@ 0xfa
 80013d4:	0098      	lsls	r0, r3, #2
 80013d6:	f7fe fe93 	bl	8000100 <__udivsi3>
 80013da:	0003      	movs	r3, r0
 80013dc:	0019      	movs	r1, r3
 80013de:	0020      	movs	r0, r4
 80013e0:	f7fe fe8e 	bl	8000100 <__udivsi3>
 80013e4:	0003      	movs	r3, r0
 80013e6:	0018      	movs	r0, r3
 80013e8:	f000 f919 	bl	800161e <HAL_SYSTICK_Config>
 80013ec:	1e03      	subs	r3, r0, #0
 80013ee:	d112      	bne.n	8001416 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2b03      	cmp	r3, #3
 80013f4:	d80a      	bhi.n	800140c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013f6:	6879      	ldr	r1, [r7, #4]
 80013f8:	2301      	movs	r3, #1
 80013fa:	425b      	negs	r3, r3
 80013fc:	2200      	movs	r2, #0
 80013fe:	0018      	movs	r0, r3
 8001400:	f000 f8e8 	bl	80015d4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001404:	4b0e      	ldr	r3, [pc, #56]	@ (8001440 <HAL_InitTick+0x90>)
 8001406:	687a      	ldr	r2, [r7, #4]
 8001408:	601a      	str	r2, [r3, #0]
 800140a:	e00d      	b.n	8001428 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 800140c:	230f      	movs	r3, #15
 800140e:	18fb      	adds	r3, r7, r3
 8001410:	2201      	movs	r2, #1
 8001412:	701a      	strb	r2, [r3, #0]
 8001414:	e008      	b.n	8001428 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001416:	230f      	movs	r3, #15
 8001418:	18fb      	adds	r3, r7, r3
 800141a:	2201      	movs	r2, #1
 800141c:	701a      	strb	r2, [r3, #0]
 800141e:	e003      	b.n	8001428 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001420:	230f      	movs	r3, #15
 8001422:	18fb      	adds	r3, r7, r3
 8001424:	2201      	movs	r2, #1
 8001426:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001428:	230f      	movs	r3, #15
 800142a:	18fb      	adds	r3, r7, r3
 800142c:	781b      	ldrb	r3, [r3, #0]
}
 800142e:	0018      	movs	r0, r3
 8001430:	46bd      	mov	sp, r7
 8001432:	b005      	add	sp, #20
 8001434:	bd90      	pop	{r4, r7, pc}
 8001436:	46c0      	nop			@ (mov r8, r8)
 8001438:	20000014 	.word	0x20000014
 800143c:	2000000c 	.word	0x2000000c
 8001440:	20000010 	.word	0x20000010

08001444 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001448:	4b05      	ldr	r3, [pc, #20]	@ (8001460 <HAL_IncTick+0x1c>)
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	001a      	movs	r2, r3
 800144e:	4b05      	ldr	r3, [pc, #20]	@ (8001464 <HAL_IncTick+0x20>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	18d2      	adds	r2, r2, r3
 8001454:	4b03      	ldr	r3, [pc, #12]	@ (8001464 <HAL_IncTick+0x20>)
 8001456:	601a      	str	r2, [r3, #0]
}
 8001458:	46c0      	nop			@ (mov r8, r8)
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	46c0      	nop			@ (mov r8, r8)
 8001460:	20000014 	.word	0x20000014
 8001464:	20000384 	.word	0x20000384

08001468 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
  return uwTick;
 800146c:	4b02      	ldr	r3, [pc, #8]	@ (8001478 <HAL_GetTick+0x10>)
 800146e:	681b      	ldr	r3, [r3, #0]
}
 8001470:	0018      	movs	r0, r3
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	46c0      	nop			@ (mov r8, r8)
 8001478:	20000384 	.word	0x20000384

0800147c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	0002      	movs	r2, r0
 8001484:	1dfb      	adds	r3, r7, #7
 8001486:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001488:	1dfb      	adds	r3, r7, #7
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	2b7f      	cmp	r3, #127	@ 0x7f
 800148e:	d809      	bhi.n	80014a4 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001490:	1dfb      	adds	r3, r7, #7
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	001a      	movs	r2, r3
 8001496:	231f      	movs	r3, #31
 8001498:	401a      	ands	r2, r3
 800149a:	4b04      	ldr	r3, [pc, #16]	@ (80014ac <__NVIC_EnableIRQ+0x30>)
 800149c:	2101      	movs	r1, #1
 800149e:	4091      	lsls	r1, r2
 80014a0:	000a      	movs	r2, r1
 80014a2:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80014a4:	46c0      	nop			@ (mov r8, r8)
 80014a6:	46bd      	mov	sp, r7
 80014a8:	b002      	add	sp, #8
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	e000e100 	.word	0xe000e100

080014b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014b0:	b590      	push	{r4, r7, lr}
 80014b2:	b083      	sub	sp, #12
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	0002      	movs	r2, r0
 80014b8:	6039      	str	r1, [r7, #0]
 80014ba:	1dfb      	adds	r3, r7, #7
 80014bc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80014be:	1dfb      	adds	r3, r7, #7
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	2b7f      	cmp	r3, #127	@ 0x7f
 80014c4:	d828      	bhi.n	8001518 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80014c6:	4a2f      	ldr	r2, [pc, #188]	@ (8001584 <__NVIC_SetPriority+0xd4>)
 80014c8:	1dfb      	adds	r3, r7, #7
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	b25b      	sxtb	r3, r3
 80014ce:	089b      	lsrs	r3, r3, #2
 80014d0:	33c0      	adds	r3, #192	@ 0xc0
 80014d2:	009b      	lsls	r3, r3, #2
 80014d4:	589b      	ldr	r3, [r3, r2]
 80014d6:	1dfa      	adds	r2, r7, #7
 80014d8:	7812      	ldrb	r2, [r2, #0]
 80014da:	0011      	movs	r1, r2
 80014dc:	2203      	movs	r2, #3
 80014de:	400a      	ands	r2, r1
 80014e0:	00d2      	lsls	r2, r2, #3
 80014e2:	21ff      	movs	r1, #255	@ 0xff
 80014e4:	4091      	lsls	r1, r2
 80014e6:	000a      	movs	r2, r1
 80014e8:	43d2      	mvns	r2, r2
 80014ea:	401a      	ands	r2, r3
 80014ec:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	019b      	lsls	r3, r3, #6
 80014f2:	22ff      	movs	r2, #255	@ 0xff
 80014f4:	401a      	ands	r2, r3
 80014f6:	1dfb      	adds	r3, r7, #7
 80014f8:	781b      	ldrb	r3, [r3, #0]
 80014fa:	0018      	movs	r0, r3
 80014fc:	2303      	movs	r3, #3
 80014fe:	4003      	ands	r3, r0
 8001500:	00db      	lsls	r3, r3, #3
 8001502:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001504:	481f      	ldr	r0, [pc, #124]	@ (8001584 <__NVIC_SetPriority+0xd4>)
 8001506:	1dfb      	adds	r3, r7, #7
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	b25b      	sxtb	r3, r3
 800150c:	089b      	lsrs	r3, r3, #2
 800150e:	430a      	orrs	r2, r1
 8001510:	33c0      	adds	r3, #192	@ 0xc0
 8001512:	009b      	lsls	r3, r3, #2
 8001514:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001516:	e031      	b.n	800157c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001518:	4a1b      	ldr	r2, [pc, #108]	@ (8001588 <__NVIC_SetPriority+0xd8>)
 800151a:	1dfb      	adds	r3, r7, #7
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	0019      	movs	r1, r3
 8001520:	230f      	movs	r3, #15
 8001522:	400b      	ands	r3, r1
 8001524:	3b08      	subs	r3, #8
 8001526:	089b      	lsrs	r3, r3, #2
 8001528:	3306      	adds	r3, #6
 800152a:	009b      	lsls	r3, r3, #2
 800152c:	18d3      	adds	r3, r2, r3
 800152e:	3304      	adds	r3, #4
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	1dfa      	adds	r2, r7, #7
 8001534:	7812      	ldrb	r2, [r2, #0]
 8001536:	0011      	movs	r1, r2
 8001538:	2203      	movs	r2, #3
 800153a:	400a      	ands	r2, r1
 800153c:	00d2      	lsls	r2, r2, #3
 800153e:	21ff      	movs	r1, #255	@ 0xff
 8001540:	4091      	lsls	r1, r2
 8001542:	000a      	movs	r2, r1
 8001544:	43d2      	mvns	r2, r2
 8001546:	401a      	ands	r2, r3
 8001548:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	019b      	lsls	r3, r3, #6
 800154e:	22ff      	movs	r2, #255	@ 0xff
 8001550:	401a      	ands	r2, r3
 8001552:	1dfb      	adds	r3, r7, #7
 8001554:	781b      	ldrb	r3, [r3, #0]
 8001556:	0018      	movs	r0, r3
 8001558:	2303      	movs	r3, #3
 800155a:	4003      	ands	r3, r0
 800155c:	00db      	lsls	r3, r3, #3
 800155e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001560:	4809      	ldr	r0, [pc, #36]	@ (8001588 <__NVIC_SetPriority+0xd8>)
 8001562:	1dfb      	adds	r3, r7, #7
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	001c      	movs	r4, r3
 8001568:	230f      	movs	r3, #15
 800156a:	4023      	ands	r3, r4
 800156c:	3b08      	subs	r3, #8
 800156e:	089b      	lsrs	r3, r3, #2
 8001570:	430a      	orrs	r2, r1
 8001572:	3306      	adds	r3, #6
 8001574:	009b      	lsls	r3, r3, #2
 8001576:	18c3      	adds	r3, r0, r3
 8001578:	3304      	adds	r3, #4
 800157a:	601a      	str	r2, [r3, #0]
}
 800157c:	46c0      	nop			@ (mov r8, r8)
 800157e:	46bd      	mov	sp, r7
 8001580:	b003      	add	sp, #12
 8001582:	bd90      	pop	{r4, r7, pc}
 8001584:	e000e100 	.word	0xe000e100
 8001588:	e000ed00 	.word	0xe000ed00

0800158c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	1e5a      	subs	r2, r3, #1
 8001598:	2380      	movs	r3, #128	@ 0x80
 800159a:	045b      	lsls	r3, r3, #17
 800159c:	429a      	cmp	r2, r3
 800159e:	d301      	bcc.n	80015a4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015a0:	2301      	movs	r3, #1
 80015a2:	e010      	b.n	80015c6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015a4:	4b0a      	ldr	r3, [pc, #40]	@ (80015d0 <SysTick_Config+0x44>)
 80015a6:	687a      	ldr	r2, [r7, #4]
 80015a8:	3a01      	subs	r2, #1
 80015aa:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015ac:	2301      	movs	r3, #1
 80015ae:	425b      	negs	r3, r3
 80015b0:	2103      	movs	r1, #3
 80015b2:	0018      	movs	r0, r3
 80015b4:	f7ff ff7c 	bl	80014b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015b8:	4b05      	ldr	r3, [pc, #20]	@ (80015d0 <SysTick_Config+0x44>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015be:	4b04      	ldr	r3, [pc, #16]	@ (80015d0 <SysTick_Config+0x44>)
 80015c0:	2207      	movs	r2, #7
 80015c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015c4:	2300      	movs	r3, #0
}
 80015c6:	0018      	movs	r0, r3
 80015c8:	46bd      	mov	sp, r7
 80015ca:	b002      	add	sp, #8
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	46c0      	nop			@ (mov r8, r8)
 80015d0:	e000e010 	.word	0xe000e010

080015d4 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b084      	sub	sp, #16
 80015d8:	af00      	add	r7, sp, #0
 80015da:	60b9      	str	r1, [r7, #8]
 80015dc:	607a      	str	r2, [r7, #4]
 80015de:	210f      	movs	r1, #15
 80015e0:	187b      	adds	r3, r7, r1
 80015e2:	1c02      	adds	r2, r0, #0
 80015e4:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80015e6:	68ba      	ldr	r2, [r7, #8]
 80015e8:	187b      	adds	r3, r7, r1
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	b25b      	sxtb	r3, r3
 80015ee:	0011      	movs	r1, r2
 80015f0:	0018      	movs	r0, r3
 80015f2:	f7ff ff5d 	bl	80014b0 <__NVIC_SetPriority>
}
 80015f6:	46c0      	nop			@ (mov r8, r8)
 80015f8:	46bd      	mov	sp, r7
 80015fa:	b004      	add	sp, #16
 80015fc:	bd80      	pop	{r7, pc}

080015fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015fe:	b580      	push	{r7, lr}
 8001600:	b082      	sub	sp, #8
 8001602:	af00      	add	r7, sp, #0
 8001604:	0002      	movs	r2, r0
 8001606:	1dfb      	adds	r3, r7, #7
 8001608:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800160a:	1dfb      	adds	r3, r7, #7
 800160c:	781b      	ldrb	r3, [r3, #0]
 800160e:	b25b      	sxtb	r3, r3
 8001610:	0018      	movs	r0, r3
 8001612:	f7ff ff33 	bl	800147c <__NVIC_EnableIRQ>
}
 8001616:	46c0      	nop			@ (mov r8, r8)
 8001618:	46bd      	mov	sp, r7
 800161a:	b002      	add	sp, #8
 800161c:	bd80      	pop	{r7, pc}

0800161e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800161e:	b580      	push	{r7, lr}
 8001620:	b082      	sub	sp, #8
 8001622:	af00      	add	r7, sp, #0
 8001624:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	0018      	movs	r0, r3
 800162a:	f7ff ffaf 	bl	800158c <SysTick_Config>
 800162e:	0003      	movs	r3, r0
}
 8001630:	0018      	movs	r0, r3
 8001632:	46bd      	mov	sp, r7
 8001634:	b002      	add	sp, #8
 8001636:	bd80      	pop	{r7, pc}

08001638 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d101      	bne.n	800164a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001646:	2301      	movs	r3, #1
 8001648:	e077      	b.n	800173a <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4a3d      	ldr	r2, [pc, #244]	@ (8001744 <HAL_DMA_Init+0x10c>)
 8001650:	4694      	mov	ip, r2
 8001652:	4463      	add	r3, ip
 8001654:	2114      	movs	r1, #20
 8001656:	0018      	movs	r0, r3
 8001658:	f7fe fd52 	bl	8000100 <__udivsi3>
 800165c:	0003      	movs	r3, r0
 800165e:	009a      	lsls	r2, r3, #2
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	641a      	str	r2, [r3, #64]	@ 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2225      	movs	r2, #37	@ 0x25
 8001668:	2102      	movs	r1, #2
 800166a:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4934      	ldr	r1, [pc, #208]	@ (8001748 <HAL_DMA_Init+0x110>)
 8001678:	400a      	ands	r2, r1
 800167a:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	6819      	ldr	r1, [r3, #0]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	689a      	ldr	r2, [r3, #8]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	68db      	ldr	r3, [r3, #12]
 800168a:	431a      	orrs	r2, r3
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	691b      	ldr	r3, [r3, #16]
 8001690:	431a      	orrs	r2, r3
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	695b      	ldr	r3, [r3, #20]
 8001696:	431a      	orrs	r2, r3
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	699b      	ldr	r3, [r3, #24]
 800169c:	431a      	orrs	r2, r3
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	69db      	ldr	r3, [r3, #28]
 80016a2:	431a      	orrs	r2, r3
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6a1b      	ldr	r3, [r3, #32]
 80016a8:	431a      	orrs	r2, r3
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	430a      	orrs	r2, r1
 80016b0:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	0018      	movs	r0, r3
 80016b6:	f000 f9c1 	bl	8001a3c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	689a      	ldr	r2, [r3, #8]
 80016be:	2380      	movs	r3, #128	@ 0x80
 80016c0:	01db      	lsls	r3, r3, #7
 80016c2:	429a      	cmp	r2, r3
 80016c4:	d102      	bne.n	80016cc <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2200      	movs	r2, #0
 80016ca:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	685a      	ldr	r2, [r3, #4]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016d4:	213f      	movs	r1, #63	@ 0x3f
 80016d6:	400a      	ands	r2, r1
 80016d8:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80016de:	687a      	ldr	r2, [r7, #4]
 80016e0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80016e2:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d011      	beq.n	8001710 <HAL_DMA_Init+0xd8>
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	2b04      	cmp	r3, #4
 80016f2:	d80d      	bhi.n	8001710 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	0018      	movs	r0, r3
 80016f8:	f000 f9cc 	bl	8001a94 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001700:	2200      	movs	r2, #0
 8001702:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001708:	687a      	ldr	r2, [r7, #4]
 800170a:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800170c:	605a      	str	r2, [r3, #4]
 800170e:	e008      	b.n	8001722 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2200      	movs	r2, #0
 8001714:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2200      	movs	r2, #0
 800171a:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2200      	movs	r2, #0
 8001720:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2200      	movs	r2, #0
 8001726:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2225      	movs	r2, #37	@ 0x25
 800172c:	2101      	movs	r1, #1
 800172e:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2224      	movs	r2, #36	@ 0x24
 8001734:	2100      	movs	r1, #0
 8001736:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001738:	2300      	movs	r3, #0
}
 800173a:	0018      	movs	r0, r3
 800173c:	46bd      	mov	sp, r7
 800173e:	b002      	add	sp, #8
 8001740:	bd80      	pop	{r7, pc}
 8001742:	46c0      	nop			@ (mov r8, r8)
 8001744:	bffdfff8 	.word	0xbffdfff8
 8001748:	ffff800f 	.word	0xffff800f

0800174c <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b086      	sub	sp, #24
 8001750:	af00      	add	r7, sp, #0
 8001752:	60f8      	str	r0, [r7, #12]
 8001754:	60b9      	str	r1, [r7, #8]
 8001756:	607a      	str	r2, [r7, #4]
 8001758:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800175a:	2317      	movs	r3, #23
 800175c:	18fb      	adds	r3, r7, r3
 800175e:	2200      	movs	r2, #0
 8001760:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	2224      	movs	r2, #36	@ 0x24
 8001766:	5c9b      	ldrb	r3, [r3, r2]
 8001768:	2b01      	cmp	r3, #1
 800176a:	d101      	bne.n	8001770 <HAL_DMA_Start_IT+0x24>
 800176c:	2302      	movs	r3, #2
 800176e:	e06f      	b.n	8001850 <HAL_DMA_Start_IT+0x104>
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	2224      	movs	r2, #36	@ 0x24
 8001774:	2101      	movs	r1, #1
 8001776:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	2225      	movs	r2, #37	@ 0x25
 800177c:	5c9b      	ldrb	r3, [r3, r2]
 800177e:	b2db      	uxtb	r3, r3
 8001780:	2b01      	cmp	r3, #1
 8001782:	d157      	bne.n	8001834 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	2225      	movs	r2, #37	@ 0x25
 8001788:	2102      	movs	r1, #2
 800178a:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	2200      	movs	r2, #0
 8001790:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	2101      	movs	r1, #1
 800179e:	438a      	bics	r2, r1
 80017a0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	687a      	ldr	r2, [r7, #4]
 80017a6:	68b9      	ldr	r1, [r7, #8]
 80017a8:	68f8      	ldr	r0, [r7, #12]
 80017aa:	f000 f907 	bl	80019bc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d008      	beq.n	80017c8 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	210e      	movs	r1, #14
 80017c2:	430a      	orrs	r2, r1
 80017c4:	601a      	str	r2, [r3, #0]
 80017c6:	e00f      	b.n	80017e8 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	2104      	movs	r1, #4
 80017d4:	438a      	bics	r2, r1
 80017d6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	210a      	movs	r1, #10
 80017e4:	430a      	orrs	r2, r1
 80017e6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	2380      	movs	r3, #128	@ 0x80
 80017f0:	025b      	lsls	r3, r3, #9
 80017f2:	4013      	ands	r3, r2
 80017f4:	d008      	beq.n	8001808 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017fa:	681a      	ldr	r2, [r3, #0]
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001800:	2180      	movs	r1, #128	@ 0x80
 8001802:	0049      	lsls	r1, r1, #1
 8001804:	430a      	orrs	r2, r1
 8001806:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800180c:	2b00      	cmp	r3, #0
 800180e:	d008      	beq.n	8001822 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001814:	681a      	ldr	r2, [r3, #0]
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800181a:	2180      	movs	r1, #128	@ 0x80
 800181c:	0049      	lsls	r1, r1, #1
 800181e:	430a      	orrs	r2, r1
 8001820:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	2101      	movs	r1, #1
 800182e:	430a      	orrs	r2, r1
 8001830:	601a      	str	r2, [r3, #0]
 8001832:	e00a      	b.n	800184a <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	2280      	movs	r2, #128	@ 0x80
 8001838:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	2224      	movs	r2, #36	@ 0x24
 800183e:	2100      	movs	r1, #0
 8001840:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8001842:	2317      	movs	r3, #23
 8001844:	18fb      	adds	r3, r7, r3
 8001846:	2201      	movs	r2, #1
 8001848:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800184a:	2317      	movs	r3, #23
 800184c:	18fb      	adds	r3, r7, r3
 800184e:	781b      	ldrb	r3, [r3, #0]
}
 8001850:	0018      	movs	r0, r3
 8001852:	46bd      	mov	sp, r7
 8001854:	b006      	add	sp, #24
 8001856:	bd80      	pop	{r7, pc}

08001858 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b084      	sub	sp, #16
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8001860:	4b55      	ldr	r3, [pc, #340]	@ (80019b8 <HAL_DMA_IRQHandler+0x160>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001872:	221c      	movs	r2, #28
 8001874:	4013      	ands	r3, r2
 8001876:	2204      	movs	r2, #4
 8001878:	409a      	lsls	r2, r3
 800187a:	0013      	movs	r3, r2
 800187c:	68fa      	ldr	r2, [r7, #12]
 800187e:	4013      	ands	r3, r2
 8001880:	d027      	beq.n	80018d2 <HAL_DMA_IRQHandler+0x7a>
 8001882:	68bb      	ldr	r3, [r7, #8]
 8001884:	2204      	movs	r2, #4
 8001886:	4013      	ands	r3, r2
 8001888:	d023      	beq.n	80018d2 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	2220      	movs	r2, #32
 8001892:	4013      	ands	r3, r2
 8001894:	d107      	bne.n	80018a6 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	2104      	movs	r1, #4
 80018a2:	438a      	bics	r2, r1
 80018a4:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 80018a6:	4b44      	ldr	r3, [pc, #272]	@ (80019b8 <HAL_DMA_IRQHandler+0x160>)
 80018a8:	6859      	ldr	r1, [r3, #4]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ae:	221c      	movs	r2, #28
 80018b0:	4013      	ands	r3, r2
 80018b2:	2204      	movs	r2, #4
 80018b4:	409a      	lsls	r2, r3
 80018b6:	4b40      	ldr	r3, [pc, #256]	@ (80019b8 <HAL_DMA_IRQHandler+0x160>)
 80018b8:	430a      	orrs	r2, r1
 80018ba:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d100      	bne.n	80018c6 <HAL_DMA_IRQHandler+0x6e>
 80018c4:	e073      	b.n	80019ae <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ca:	687a      	ldr	r2, [r7, #4]
 80018cc:	0010      	movs	r0, r2
 80018ce:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 80018d0:	e06d      	b.n	80019ae <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018d6:	221c      	movs	r2, #28
 80018d8:	4013      	ands	r3, r2
 80018da:	2202      	movs	r2, #2
 80018dc:	409a      	lsls	r2, r3
 80018de:	0013      	movs	r3, r2
 80018e0:	68fa      	ldr	r2, [r7, #12]
 80018e2:	4013      	ands	r3, r2
 80018e4:	d02e      	beq.n	8001944 <HAL_DMA_IRQHandler+0xec>
 80018e6:	68bb      	ldr	r3, [r7, #8]
 80018e8:	2202      	movs	r2, #2
 80018ea:	4013      	ands	r3, r2
 80018ec:	d02a      	beq.n	8001944 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	2220      	movs	r2, #32
 80018f6:	4013      	ands	r3, r2
 80018f8:	d10b      	bne.n	8001912 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	210a      	movs	r1, #10
 8001906:	438a      	bics	r2, r1
 8001908:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2225      	movs	r2, #37	@ 0x25
 800190e:	2101      	movs	r1, #1
 8001910:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8001912:	4b29      	ldr	r3, [pc, #164]	@ (80019b8 <HAL_DMA_IRQHandler+0x160>)
 8001914:	6859      	ldr	r1, [r3, #4]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800191a:	221c      	movs	r2, #28
 800191c:	4013      	ands	r3, r2
 800191e:	2202      	movs	r2, #2
 8001920:	409a      	lsls	r2, r3
 8001922:	4b25      	ldr	r3, [pc, #148]	@ (80019b8 <HAL_DMA_IRQHandler+0x160>)
 8001924:	430a      	orrs	r2, r1
 8001926:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2224      	movs	r2, #36	@ 0x24
 800192c:	2100      	movs	r1, #0
 800192e:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001934:	2b00      	cmp	r3, #0
 8001936:	d03a      	beq.n	80019ae <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800193c:	687a      	ldr	r2, [r7, #4]
 800193e:	0010      	movs	r0, r2
 8001940:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8001942:	e034      	b.n	80019ae <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001948:	221c      	movs	r2, #28
 800194a:	4013      	ands	r3, r2
 800194c:	2208      	movs	r2, #8
 800194e:	409a      	lsls	r2, r3
 8001950:	0013      	movs	r3, r2
 8001952:	68fa      	ldr	r2, [r7, #12]
 8001954:	4013      	ands	r3, r2
 8001956:	d02b      	beq.n	80019b0 <HAL_DMA_IRQHandler+0x158>
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	2208      	movs	r2, #8
 800195c:	4013      	ands	r3, r2
 800195e:	d027      	beq.n	80019b0 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	210e      	movs	r1, #14
 800196c:	438a      	bics	r2, r1
 800196e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8001970:	4b11      	ldr	r3, [pc, #68]	@ (80019b8 <HAL_DMA_IRQHandler+0x160>)
 8001972:	6859      	ldr	r1, [r3, #4]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001978:	221c      	movs	r2, #28
 800197a:	4013      	ands	r3, r2
 800197c:	2201      	movs	r2, #1
 800197e:	409a      	lsls	r2, r3
 8001980:	4b0d      	ldr	r3, [pc, #52]	@ (80019b8 <HAL_DMA_IRQHandler+0x160>)
 8001982:	430a      	orrs	r2, r1
 8001984:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2201      	movs	r2, #1
 800198a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2225      	movs	r2, #37	@ 0x25
 8001990:	2101      	movs	r1, #1
 8001992:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2224      	movs	r2, #36	@ 0x24
 8001998:	2100      	movs	r1, #0
 800199a:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d005      	beq.n	80019b0 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019a8:	687a      	ldr	r2, [r7, #4]
 80019aa:	0010      	movs	r0, r2
 80019ac:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80019ae:	46c0      	nop			@ (mov r8, r8)
 80019b0:	46c0      	nop			@ (mov r8, r8)
}
 80019b2:	46bd      	mov	sp, r7
 80019b4:	b004      	add	sp, #16
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	40020000 	.word	0x40020000

080019bc <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b084      	sub	sp, #16
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	60f8      	str	r0, [r7, #12]
 80019c4:	60b9      	str	r1, [r7, #8]
 80019c6:	607a      	str	r2, [r7, #4]
 80019c8:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80019ce:	68fa      	ldr	r2, [r7, #12]
 80019d0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80019d2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d004      	beq.n	80019e6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019e0:	68fa      	ldr	r2, [r7, #12]
 80019e2:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80019e4:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80019e6:	4b14      	ldr	r3, [pc, #80]	@ (8001a38 <DMA_SetConfig+0x7c>)
 80019e8:	6859      	ldr	r1, [r3, #4]
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ee:	221c      	movs	r2, #28
 80019f0:	4013      	ands	r3, r2
 80019f2:	2201      	movs	r2, #1
 80019f4:	409a      	lsls	r2, r3
 80019f6:	4b10      	ldr	r3, [pc, #64]	@ (8001a38 <DMA_SetConfig+0x7c>)
 80019f8:	430a      	orrs	r2, r1
 80019fa:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	683a      	ldr	r2, [r7, #0]
 8001a02:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	2b10      	cmp	r3, #16
 8001a0a:	d108      	bne.n	8001a1e <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	687a      	ldr	r2, [r7, #4]
 8001a12:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	68ba      	ldr	r2, [r7, #8]
 8001a1a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001a1c:	e007      	b.n	8001a2e <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	68ba      	ldr	r2, [r7, #8]
 8001a24:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	687a      	ldr	r2, [r7, #4]
 8001a2c:	60da      	str	r2, [r3, #12]
}
 8001a2e:	46c0      	nop			@ (mov r8, r8)
 8001a30:	46bd      	mov	sp, r7
 8001a32:	b004      	add	sp, #16
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	46c0      	nop			@ (mov r8, r8)
 8001a38:	40020000 	.word	0x40020000

08001a3c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b084      	sub	sp, #16
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a48:	089b      	lsrs	r3, r3, #2
 8001a4a:	4a10      	ldr	r2, [pc, #64]	@ (8001a8c <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8001a4c:	4694      	mov	ip, r2
 8001a4e:	4463      	add	r3, ip
 8001a50:	009b      	lsls	r3, r3, #2
 8001a52:	001a      	movs	r2, r3
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	001a      	movs	r2, r3
 8001a5e:	23ff      	movs	r3, #255	@ 0xff
 8001a60:	4013      	ands	r3, r2
 8001a62:	3b08      	subs	r3, #8
 8001a64:	2114      	movs	r1, #20
 8001a66:	0018      	movs	r0, r3
 8001a68:	f7fe fb4a 	bl	8000100 <__udivsi3>
 8001a6c:	0003      	movs	r3, r0
 8001a6e:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	4a07      	ldr	r2, [pc, #28]	@ (8001a90 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8001a74:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	221f      	movs	r2, #31
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	409a      	lsls	r2, r3
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8001a84:	46c0      	nop			@ (mov r8, r8)
 8001a86:	46bd      	mov	sp, r7
 8001a88:	b004      	add	sp, #16
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	10008200 	.word	0x10008200
 8001a90:	40020880 	.word	0x40020880

08001a94 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b084      	sub	sp, #16
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	223f      	movs	r2, #63	@ 0x3f
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	4a0a      	ldr	r2, [pc, #40]	@ (8001ad4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001aaa:	4694      	mov	ip, r2
 8001aac:	4463      	add	r3, ip
 8001aae:	009b      	lsls	r3, r3, #2
 8001ab0:	001a      	movs	r2, r3
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	651a      	str	r2, [r3, #80]	@ 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	4a07      	ldr	r2, [pc, #28]	@ (8001ad8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001aba:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	3b01      	subs	r3, #1
 8001ac0:	2203      	movs	r2, #3
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	409a      	lsls	r2, r3
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	659a      	str	r2, [r3, #88]	@ 0x58
}
 8001acc:	46c0      	nop			@ (mov r8, r8)
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	b004      	add	sp, #16
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	1000823f 	.word	0x1000823f
 8001ad8:	40020940 	.word	0x40020940

08001adc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b086      	sub	sp, #24
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001aea:	e147      	b.n	8001d7c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	2101      	movs	r1, #1
 8001af2:	697a      	ldr	r2, [r7, #20]
 8001af4:	4091      	lsls	r1, r2
 8001af6:	000a      	movs	r2, r1
 8001af8:	4013      	ands	r3, r2
 8001afa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d100      	bne.n	8001b04 <HAL_GPIO_Init+0x28>
 8001b02:	e138      	b.n	8001d76 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	2203      	movs	r2, #3
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	d005      	beq.n	8001b1c <HAL_GPIO_Init+0x40>
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	2203      	movs	r2, #3
 8001b16:	4013      	ands	r3, r2
 8001b18:	2b02      	cmp	r3, #2
 8001b1a:	d130      	bne.n	8001b7e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	005b      	lsls	r3, r3, #1
 8001b26:	2203      	movs	r2, #3
 8001b28:	409a      	lsls	r2, r3
 8001b2a:	0013      	movs	r3, r2
 8001b2c:	43da      	mvns	r2, r3
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	4013      	ands	r3, r2
 8001b32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	68da      	ldr	r2, [r3, #12]
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	005b      	lsls	r3, r3, #1
 8001b3c:	409a      	lsls	r2, r3
 8001b3e:	0013      	movs	r3, r2
 8001b40:	693a      	ldr	r2, [r7, #16]
 8001b42:	4313      	orrs	r3, r2
 8001b44:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	693a      	ldr	r2, [r7, #16]
 8001b4a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001b52:	2201      	movs	r2, #1
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	409a      	lsls	r2, r3
 8001b58:	0013      	movs	r3, r2
 8001b5a:	43da      	mvns	r2, r3
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	4013      	ands	r3, r2
 8001b60:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	091b      	lsrs	r3, r3, #4
 8001b68:	2201      	movs	r2, #1
 8001b6a:	401a      	ands	r2, r3
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	409a      	lsls	r2, r3
 8001b70:	0013      	movs	r3, r2
 8001b72:	693a      	ldr	r2, [r7, #16]
 8001b74:	4313      	orrs	r3, r2
 8001b76:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	693a      	ldr	r2, [r7, #16]
 8001b7c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	2203      	movs	r2, #3
 8001b84:	4013      	ands	r3, r2
 8001b86:	2b03      	cmp	r3, #3
 8001b88:	d017      	beq.n	8001bba <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	68db      	ldr	r3, [r3, #12]
 8001b8e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	005b      	lsls	r3, r3, #1
 8001b94:	2203      	movs	r2, #3
 8001b96:	409a      	lsls	r2, r3
 8001b98:	0013      	movs	r3, r2
 8001b9a:	43da      	mvns	r2, r3
 8001b9c:	693b      	ldr	r3, [r7, #16]
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	689a      	ldr	r2, [r3, #8]
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	005b      	lsls	r3, r3, #1
 8001baa:	409a      	lsls	r2, r3
 8001bac:	0013      	movs	r3, r2
 8001bae:	693a      	ldr	r2, [r7, #16]
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	693a      	ldr	r2, [r7, #16]
 8001bb8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	2203      	movs	r2, #3
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	2b02      	cmp	r3, #2
 8001bc4:	d123      	bne.n	8001c0e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	08da      	lsrs	r2, r3, #3
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	3208      	adds	r2, #8
 8001bce:	0092      	lsls	r2, r2, #2
 8001bd0:	58d3      	ldr	r3, [r2, r3]
 8001bd2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	2207      	movs	r2, #7
 8001bd8:	4013      	ands	r3, r2
 8001bda:	009b      	lsls	r3, r3, #2
 8001bdc:	220f      	movs	r2, #15
 8001bde:	409a      	lsls	r2, r3
 8001be0:	0013      	movs	r3, r2
 8001be2:	43da      	mvns	r2, r3
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	4013      	ands	r3, r2
 8001be8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	691a      	ldr	r2, [r3, #16]
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	2107      	movs	r1, #7
 8001bf2:	400b      	ands	r3, r1
 8001bf4:	009b      	lsls	r3, r3, #2
 8001bf6:	409a      	lsls	r2, r3
 8001bf8:	0013      	movs	r3, r2
 8001bfa:	693a      	ldr	r2, [r7, #16]
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	08da      	lsrs	r2, r3, #3
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	3208      	adds	r2, #8
 8001c08:	0092      	lsls	r2, r2, #2
 8001c0a:	6939      	ldr	r1, [r7, #16]
 8001c0c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	005b      	lsls	r3, r3, #1
 8001c18:	2203      	movs	r2, #3
 8001c1a:	409a      	lsls	r2, r3
 8001c1c:	0013      	movs	r3, r2
 8001c1e:	43da      	mvns	r2, r3
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	4013      	ands	r3, r2
 8001c24:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	2203      	movs	r2, #3
 8001c2c:	401a      	ands	r2, r3
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	005b      	lsls	r3, r3, #1
 8001c32:	409a      	lsls	r2, r3
 8001c34:	0013      	movs	r3, r2
 8001c36:	693a      	ldr	r2, [r7, #16]
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	693a      	ldr	r2, [r7, #16]
 8001c40:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	685a      	ldr	r2, [r3, #4]
 8001c46:	23c0      	movs	r3, #192	@ 0xc0
 8001c48:	029b      	lsls	r3, r3, #10
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	d100      	bne.n	8001c50 <HAL_GPIO_Init+0x174>
 8001c4e:	e092      	b.n	8001d76 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001c50:	4a50      	ldr	r2, [pc, #320]	@ (8001d94 <HAL_GPIO_Init+0x2b8>)
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	089b      	lsrs	r3, r3, #2
 8001c56:	3318      	adds	r3, #24
 8001c58:	009b      	lsls	r3, r3, #2
 8001c5a:	589b      	ldr	r3, [r3, r2]
 8001c5c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	2203      	movs	r2, #3
 8001c62:	4013      	ands	r3, r2
 8001c64:	00db      	lsls	r3, r3, #3
 8001c66:	220f      	movs	r2, #15
 8001c68:	409a      	lsls	r2, r3
 8001c6a:	0013      	movs	r3, r2
 8001c6c:	43da      	mvns	r2, r3
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	4013      	ands	r3, r2
 8001c72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001c74:	687a      	ldr	r2, [r7, #4]
 8001c76:	23a0      	movs	r3, #160	@ 0xa0
 8001c78:	05db      	lsls	r3, r3, #23
 8001c7a:	429a      	cmp	r2, r3
 8001c7c:	d013      	beq.n	8001ca6 <HAL_GPIO_Init+0x1ca>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	4a45      	ldr	r2, [pc, #276]	@ (8001d98 <HAL_GPIO_Init+0x2bc>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d00d      	beq.n	8001ca2 <HAL_GPIO_Init+0x1c6>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	4a44      	ldr	r2, [pc, #272]	@ (8001d9c <HAL_GPIO_Init+0x2c0>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d007      	beq.n	8001c9e <HAL_GPIO_Init+0x1c2>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	4a43      	ldr	r2, [pc, #268]	@ (8001da0 <HAL_GPIO_Init+0x2c4>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d101      	bne.n	8001c9a <HAL_GPIO_Init+0x1be>
 8001c96:	2303      	movs	r3, #3
 8001c98:	e006      	b.n	8001ca8 <HAL_GPIO_Init+0x1cc>
 8001c9a:	2305      	movs	r3, #5
 8001c9c:	e004      	b.n	8001ca8 <HAL_GPIO_Init+0x1cc>
 8001c9e:	2302      	movs	r3, #2
 8001ca0:	e002      	b.n	8001ca8 <HAL_GPIO_Init+0x1cc>
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e000      	b.n	8001ca8 <HAL_GPIO_Init+0x1cc>
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	697a      	ldr	r2, [r7, #20]
 8001caa:	2103      	movs	r1, #3
 8001cac:	400a      	ands	r2, r1
 8001cae:	00d2      	lsls	r2, r2, #3
 8001cb0:	4093      	lsls	r3, r2
 8001cb2:	693a      	ldr	r2, [r7, #16]
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001cb8:	4936      	ldr	r1, [pc, #216]	@ (8001d94 <HAL_GPIO_Init+0x2b8>)
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	089b      	lsrs	r3, r3, #2
 8001cbe:	3318      	adds	r3, #24
 8001cc0:	009b      	lsls	r3, r3, #2
 8001cc2:	693a      	ldr	r2, [r7, #16]
 8001cc4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001cc6:	4b33      	ldr	r3, [pc, #204]	@ (8001d94 <HAL_GPIO_Init+0x2b8>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	43da      	mvns	r2, r3
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	685a      	ldr	r2, [r3, #4]
 8001cda:	2380      	movs	r3, #128	@ 0x80
 8001cdc:	035b      	lsls	r3, r3, #13
 8001cde:	4013      	ands	r3, r2
 8001ce0:	d003      	beq.n	8001cea <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8001ce2:	693a      	ldr	r2, [r7, #16]
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001cea:	4b2a      	ldr	r3, [pc, #168]	@ (8001d94 <HAL_GPIO_Init+0x2b8>)
 8001cec:	693a      	ldr	r2, [r7, #16]
 8001cee:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001cf0:	4b28      	ldr	r3, [pc, #160]	@ (8001d94 <HAL_GPIO_Init+0x2b8>)
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	43da      	mvns	r2, r3
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	685a      	ldr	r2, [r3, #4]
 8001d04:	2380      	movs	r3, #128	@ 0x80
 8001d06:	039b      	lsls	r3, r3, #14
 8001d08:	4013      	ands	r3, r2
 8001d0a:	d003      	beq.n	8001d14 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001d0c:	693a      	ldr	r2, [r7, #16]
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	4313      	orrs	r3, r2
 8001d12:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001d14:	4b1f      	ldr	r3, [pc, #124]	@ (8001d94 <HAL_GPIO_Init+0x2b8>)
 8001d16:	693a      	ldr	r2, [r7, #16]
 8001d18:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001d1a:	4a1e      	ldr	r2, [pc, #120]	@ (8001d94 <HAL_GPIO_Init+0x2b8>)
 8001d1c:	2384      	movs	r3, #132	@ 0x84
 8001d1e:	58d3      	ldr	r3, [r2, r3]
 8001d20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	43da      	mvns	r2, r3
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	4013      	ands	r3, r2
 8001d2a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	685a      	ldr	r2, [r3, #4]
 8001d30:	2380      	movs	r3, #128	@ 0x80
 8001d32:	029b      	lsls	r3, r3, #10
 8001d34:	4013      	ands	r3, r2
 8001d36:	d003      	beq.n	8001d40 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001d38:	693a      	ldr	r2, [r7, #16]
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001d40:	4914      	ldr	r1, [pc, #80]	@ (8001d94 <HAL_GPIO_Init+0x2b8>)
 8001d42:	2284      	movs	r2, #132	@ 0x84
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001d48:	4a12      	ldr	r2, [pc, #72]	@ (8001d94 <HAL_GPIO_Init+0x2b8>)
 8001d4a:	2380      	movs	r3, #128	@ 0x80
 8001d4c:	58d3      	ldr	r3, [r2, r3]
 8001d4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	43da      	mvns	r2, r3
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	4013      	ands	r3, r2
 8001d58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	685a      	ldr	r2, [r3, #4]
 8001d5e:	2380      	movs	r3, #128	@ 0x80
 8001d60:	025b      	lsls	r3, r3, #9
 8001d62:	4013      	ands	r3, r2
 8001d64:	d003      	beq.n	8001d6e <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8001d66:	693a      	ldr	r2, [r7, #16]
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001d6e:	4909      	ldr	r1, [pc, #36]	@ (8001d94 <HAL_GPIO_Init+0x2b8>)
 8001d70:	2280      	movs	r2, #128	@ 0x80
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	3301      	adds	r3, #1
 8001d7a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	40da      	lsrs	r2, r3
 8001d84:	1e13      	subs	r3, r2, #0
 8001d86:	d000      	beq.n	8001d8a <HAL_GPIO_Init+0x2ae>
 8001d88:	e6b0      	b.n	8001aec <HAL_GPIO_Init+0x10>
  }
}
 8001d8a:	46c0      	nop			@ (mov r8, r8)
 8001d8c:	46c0      	nop			@ (mov r8, r8)
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	b006      	add	sp, #24
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	40021800 	.word	0x40021800
 8001d98:	50000400 	.word	0x50000400
 8001d9c:	50000800 	.word	0x50000800
 8001da0:	50000c00 	.word	0x50000c00

08001da4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b084      	sub	sp, #16
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
 8001dac:	000a      	movs	r2, r1
 8001dae:	1cbb      	adds	r3, r7, #2
 8001db0:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	691b      	ldr	r3, [r3, #16]
 8001db6:	1cba      	adds	r2, r7, #2
 8001db8:	8812      	ldrh	r2, [r2, #0]
 8001dba:	4013      	ands	r3, r2
 8001dbc:	d004      	beq.n	8001dc8 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001dbe:	230f      	movs	r3, #15
 8001dc0:	18fb      	adds	r3, r7, r3
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	701a      	strb	r2, [r3, #0]
 8001dc6:	e003      	b.n	8001dd0 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001dc8:	230f      	movs	r3, #15
 8001dca:	18fb      	adds	r3, r7, r3
 8001dcc:	2200      	movs	r2, #0
 8001dce:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001dd0:	230f      	movs	r3, #15
 8001dd2:	18fb      	adds	r3, r7, r3
 8001dd4:	781b      	ldrb	r3, [r3, #0]
}
 8001dd6:	0018      	movs	r0, r3
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	b004      	add	sp, #16
 8001ddc:	bd80      	pop	{r7, pc}

08001dde <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001dde:	b580      	push	{r7, lr}
 8001de0:	b082      	sub	sp, #8
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	6078      	str	r0, [r7, #4]
 8001de6:	0008      	movs	r0, r1
 8001de8:	0011      	movs	r1, r2
 8001dea:	1cbb      	adds	r3, r7, #2
 8001dec:	1c02      	adds	r2, r0, #0
 8001dee:	801a      	strh	r2, [r3, #0]
 8001df0:	1c7b      	adds	r3, r7, #1
 8001df2:	1c0a      	adds	r2, r1, #0
 8001df4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001df6:	1c7b      	adds	r3, r7, #1
 8001df8:	781b      	ldrb	r3, [r3, #0]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d004      	beq.n	8001e08 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001dfe:	1cbb      	adds	r3, r7, #2
 8001e00:	881a      	ldrh	r2, [r3, #0]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e06:	e003      	b.n	8001e10 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e08:	1cbb      	adds	r3, r7, #2
 8001e0a:	881a      	ldrh	r2, [r3, #0]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001e10:	46c0      	nop			@ (mov r8, r8)
 8001e12:	46bd      	mov	sp, r7
 8001e14:	b002      	add	sp, #8
 8001e16:	bd80      	pop	{r7, pc}

08001e18 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b084      	sub	sp, #16
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
 8001e20:	000a      	movs	r2, r1
 8001e22:	1cbb      	adds	r3, r7, #2
 8001e24:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	695b      	ldr	r3, [r3, #20]
 8001e2a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e2c:	1cbb      	adds	r3, r7, #2
 8001e2e:	881b      	ldrh	r3, [r3, #0]
 8001e30:	68fa      	ldr	r2, [r7, #12]
 8001e32:	4013      	ands	r3, r2
 8001e34:	041a      	lsls	r2, r3, #16
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	43db      	mvns	r3, r3
 8001e3a:	1cb9      	adds	r1, r7, #2
 8001e3c:	8809      	ldrh	r1, [r1, #0]
 8001e3e:	400b      	ands	r3, r1
 8001e40:	431a      	orrs	r2, r3
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	619a      	str	r2, [r3, #24]
}
 8001e46:	46c0      	nop			@ (mov r8, r8)
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	b004      	add	sp, #16
 8001e4c:	bd80      	pop	{r7, pc}
	...

08001e50 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b084      	sub	sp, #16
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001e58:	4b19      	ldr	r3, [pc, #100]	@ (8001ec0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a19      	ldr	r2, [pc, #100]	@ (8001ec4 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001e5e:	4013      	ands	r3, r2
 8001e60:	0019      	movs	r1, r3
 8001e62:	4b17      	ldr	r3, [pc, #92]	@ (8001ec0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001e64:	687a      	ldr	r2, [r7, #4]
 8001e66:	430a      	orrs	r2, r1
 8001e68:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e6a:	687a      	ldr	r2, [r7, #4]
 8001e6c:	2380      	movs	r3, #128	@ 0x80
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d11f      	bne.n	8001eb4 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001e74:	4b14      	ldr	r3, [pc, #80]	@ (8001ec8 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	0013      	movs	r3, r2
 8001e7a:	005b      	lsls	r3, r3, #1
 8001e7c:	189b      	adds	r3, r3, r2
 8001e7e:	005b      	lsls	r3, r3, #1
 8001e80:	4912      	ldr	r1, [pc, #72]	@ (8001ecc <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001e82:	0018      	movs	r0, r3
 8001e84:	f7fe f93c 	bl	8000100 <__udivsi3>
 8001e88:	0003      	movs	r3, r0
 8001e8a:	3301      	adds	r3, #1
 8001e8c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001e8e:	e008      	b.n	8001ea2 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d003      	beq.n	8001e9e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	3b01      	subs	r3, #1
 8001e9a:	60fb      	str	r3, [r7, #12]
 8001e9c:	e001      	b.n	8001ea2 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	e009      	b.n	8001eb6 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001ea2:	4b07      	ldr	r3, [pc, #28]	@ (8001ec0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001ea4:	695a      	ldr	r2, [r3, #20]
 8001ea6:	2380      	movs	r3, #128	@ 0x80
 8001ea8:	00db      	lsls	r3, r3, #3
 8001eaa:	401a      	ands	r2, r3
 8001eac:	2380      	movs	r3, #128	@ 0x80
 8001eae:	00db      	lsls	r3, r3, #3
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d0ed      	beq.n	8001e90 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001eb4:	2300      	movs	r3, #0
}
 8001eb6:	0018      	movs	r0, r3
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	b004      	add	sp, #16
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	46c0      	nop			@ (mov r8, r8)
 8001ec0:	40007000 	.word	0x40007000
 8001ec4:	fffff9ff 	.word	0xfffff9ff
 8001ec8:	2000000c 	.word	0x2000000c
 8001ecc:	000f4240 	.word	0x000f4240

08001ed0 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001ed4:	4b03      	ldr	r3, [pc, #12]	@ (8001ee4 <LL_RCC_GetAPB1Prescaler+0x14>)
 8001ed6:	689a      	ldr	r2, [r3, #8]
 8001ed8:	23e0      	movs	r3, #224	@ 0xe0
 8001eda:	01db      	lsls	r3, r3, #7
 8001edc:	4013      	ands	r3, r2
}
 8001ede:	0018      	movs	r0, r3
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	40021000 	.word	0x40021000

08001ee8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b088      	sub	sp, #32
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d101      	bne.n	8001efa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e2f3      	b.n	80024e2 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	2201      	movs	r2, #1
 8001f00:	4013      	ands	r3, r2
 8001f02:	d100      	bne.n	8001f06 <HAL_RCC_OscConfig+0x1e>
 8001f04:	e07c      	b.n	8002000 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f06:	4bc3      	ldr	r3, [pc, #780]	@ (8002214 <HAL_RCC_OscConfig+0x32c>)
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	2238      	movs	r2, #56	@ 0x38
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f10:	4bc0      	ldr	r3, [pc, #768]	@ (8002214 <HAL_RCC_OscConfig+0x32c>)
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	2203      	movs	r2, #3
 8001f16:	4013      	ands	r3, r2
 8001f18:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001f1a:	69bb      	ldr	r3, [r7, #24]
 8001f1c:	2b10      	cmp	r3, #16
 8001f1e:	d102      	bne.n	8001f26 <HAL_RCC_OscConfig+0x3e>
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	2b03      	cmp	r3, #3
 8001f24:	d002      	beq.n	8001f2c <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001f26:	69bb      	ldr	r3, [r7, #24]
 8001f28:	2b08      	cmp	r3, #8
 8001f2a:	d10b      	bne.n	8001f44 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f2c:	4bb9      	ldr	r3, [pc, #740]	@ (8002214 <HAL_RCC_OscConfig+0x32c>)
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	2380      	movs	r3, #128	@ 0x80
 8001f32:	029b      	lsls	r3, r3, #10
 8001f34:	4013      	ands	r3, r2
 8001f36:	d062      	beq.n	8001ffe <HAL_RCC_OscConfig+0x116>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d15e      	bne.n	8001ffe <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001f40:	2301      	movs	r3, #1
 8001f42:	e2ce      	b.n	80024e2 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	685a      	ldr	r2, [r3, #4]
 8001f48:	2380      	movs	r3, #128	@ 0x80
 8001f4a:	025b      	lsls	r3, r3, #9
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	d107      	bne.n	8001f60 <HAL_RCC_OscConfig+0x78>
 8001f50:	4bb0      	ldr	r3, [pc, #704]	@ (8002214 <HAL_RCC_OscConfig+0x32c>)
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	4baf      	ldr	r3, [pc, #700]	@ (8002214 <HAL_RCC_OscConfig+0x32c>)
 8001f56:	2180      	movs	r1, #128	@ 0x80
 8001f58:	0249      	lsls	r1, r1, #9
 8001f5a:	430a      	orrs	r2, r1
 8001f5c:	601a      	str	r2, [r3, #0]
 8001f5e:	e020      	b.n	8001fa2 <HAL_RCC_OscConfig+0xba>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	685a      	ldr	r2, [r3, #4]
 8001f64:	23a0      	movs	r3, #160	@ 0xa0
 8001f66:	02db      	lsls	r3, r3, #11
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	d10e      	bne.n	8001f8a <HAL_RCC_OscConfig+0xa2>
 8001f6c:	4ba9      	ldr	r3, [pc, #676]	@ (8002214 <HAL_RCC_OscConfig+0x32c>)
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	4ba8      	ldr	r3, [pc, #672]	@ (8002214 <HAL_RCC_OscConfig+0x32c>)
 8001f72:	2180      	movs	r1, #128	@ 0x80
 8001f74:	02c9      	lsls	r1, r1, #11
 8001f76:	430a      	orrs	r2, r1
 8001f78:	601a      	str	r2, [r3, #0]
 8001f7a:	4ba6      	ldr	r3, [pc, #664]	@ (8002214 <HAL_RCC_OscConfig+0x32c>)
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	4ba5      	ldr	r3, [pc, #660]	@ (8002214 <HAL_RCC_OscConfig+0x32c>)
 8001f80:	2180      	movs	r1, #128	@ 0x80
 8001f82:	0249      	lsls	r1, r1, #9
 8001f84:	430a      	orrs	r2, r1
 8001f86:	601a      	str	r2, [r3, #0]
 8001f88:	e00b      	b.n	8001fa2 <HAL_RCC_OscConfig+0xba>
 8001f8a:	4ba2      	ldr	r3, [pc, #648]	@ (8002214 <HAL_RCC_OscConfig+0x32c>)
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	4ba1      	ldr	r3, [pc, #644]	@ (8002214 <HAL_RCC_OscConfig+0x32c>)
 8001f90:	49a1      	ldr	r1, [pc, #644]	@ (8002218 <HAL_RCC_OscConfig+0x330>)
 8001f92:	400a      	ands	r2, r1
 8001f94:	601a      	str	r2, [r3, #0]
 8001f96:	4b9f      	ldr	r3, [pc, #636]	@ (8002214 <HAL_RCC_OscConfig+0x32c>)
 8001f98:	681a      	ldr	r2, [r3, #0]
 8001f9a:	4b9e      	ldr	r3, [pc, #632]	@ (8002214 <HAL_RCC_OscConfig+0x32c>)
 8001f9c:	499f      	ldr	r1, [pc, #636]	@ (800221c <HAL_RCC_OscConfig+0x334>)
 8001f9e:	400a      	ands	r2, r1
 8001fa0:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d014      	beq.n	8001fd4 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001faa:	f7ff fa5d 	bl	8001468 <HAL_GetTick>
 8001fae:	0003      	movs	r3, r0
 8001fb0:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fb2:	e008      	b.n	8001fc6 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fb4:	f7ff fa58 	bl	8001468 <HAL_GetTick>
 8001fb8:	0002      	movs	r2, r0
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	1ad3      	subs	r3, r2, r3
 8001fbe:	2b64      	cmp	r3, #100	@ 0x64
 8001fc0:	d901      	bls.n	8001fc6 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	e28d      	b.n	80024e2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fc6:	4b93      	ldr	r3, [pc, #588]	@ (8002214 <HAL_RCC_OscConfig+0x32c>)
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	2380      	movs	r3, #128	@ 0x80
 8001fcc:	029b      	lsls	r3, r3, #10
 8001fce:	4013      	ands	r3, r2
 8001fd0:	d0f0      	beq.n	8001fb4 <HAL_RCC_OscConfig+0xcc>
 8001fd2:	e015      	b.n	8002000 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fd4:	f7ff fa48 	bl	8001468 <HAL_GetTick>
 8001fd8:	0003      	movs	r3, r0
 8001fda:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001fdc:	e008      	b.n	8001ff0 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fde:	f7ff fa43 	bl	8001468 <HAL_GetTick>
 8001fe2:	0002      	movs	r2, r0
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	1ad3      	subs	r3, r2, r3
 8001fe8:	2b64      	cmp	r3, #100	@ 0x64
 8001fea:	d901      	bls.n	8001ff0 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001fec:	2303      	movs	r3, #3
 8001fee:	e278      	b.n	80024e2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ff0:	4b88      	ldr	r3, [pc, #544]	@ (8002214 <HAL_RCC_OscConfig+0x32c>)
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	2380      	movs	r3, #128	@ 0x80
 8001ff6:	029b      	lsls	r3, r3, #10
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	d1f0      	bne.n	8001fde <HAL_RCC_OscConfig+0xf6>
 8001ffc:	e000      	b.n	8002000 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ffe:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	2202      	movs	r2, #2
 8002006:	4013      	ands	r3, r2
 8002008:	d100      	bne.n	800200c <HAL_RCC_OscConfig+0x124>
 800200a:	e099      	b.n	8002140 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800200c:	4b81      	ldr	r3, [pc, #516]	@ (8002214 <HAL_RCC_OscConfig+0x32c>)
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	2238      	movs	r2, #56	@ 0x38
 8002012:	4013      	ands	r3, r2
 8002014:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002016:	4b7f      	ldr	r3, [pc, #508]	@ (8002214 <HAL_RCC_OscConfig+0x32c>)
 8002018:	68db      	ldr	r3, [r3, #12]
 800201a:	2203      	movs	r2, #3
 800201c:	4013      	ands	r3, r2
 800201e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002020:	69bb      	ldr	r3, [r7, #24]
 8002022:	2b10      	cmp	r3, #16
 8002024:	d102      	bne.n	800202c <HAL_RCC_OscConfig+0x144>
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	2b02      	cmp	r3, #2
 800202a:	d002      	beq.n	8002032 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800202c:	69bb      	ldr	r3, [r7, #24]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d135      	bne.n	800209e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002032:	4b78      	ldr	r3, [pc, #480]	@ (8002214 <HAL_RCC_OscConfig+0x32c>)
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	2380      	movs	r3, #128	@ 0x80
 8002038:	00db      	lsls	r3, r3, #3
 800203a:	4013      	ands	r3, r2
 800203c:	d005      	beq.n	800204a <HAL_RCC_OscConfig+0x162>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	68db      	ldr	r3, [r3, #12]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d101      	bne.n	800204a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e24b      	b.n	80024e2 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800204a:	4b72      	ldr	r3, [pc, #456]	@ (8002214 <HAL_RCC_OscConfig+0x32c>)
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	4a74      	ldr	r2, [pc, #464]	@ (8002220 <HAL_RCC_OscConfig+0x338>)
 8002050:	4013      	ands	r3, r2
 8002052:	0019      	movs	r1, r3
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	695b      	ldr	r3, [r3, #20]
 8002058:	021a      	lsls	r2, r3, #8
 800205a:	4b6e      	ldr	r3, [pc, #440]	@ (8002214 <HAL_RCC_OscConfig+0x32c>)
 800205c:	430a      	orrs	r2, r1
 800205e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002060:	69bb      	ldr	r3, [r7, #24]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d112      	bne.n	800208c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002066:	4b6b      	ldr	r3, [pc, #428]	@ (8002214 <HAL_RCC_OscConfig+0x32c>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a6e      	ldr	r2, [pc, #440]	@ (8002224 <HAL_RCC_OscConfig+0x33c>)
 800206c:	4013      	ands	r3, r2
 800206e:	0019      	movs	r1, r3
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	691a      	ldr	r2, [r3, #16]
 8002074:	4b67      	ldr	r3, [pc, #412]	@ (8002214 <HAL_RCC_OscConfig+0x32c>)
 8002076:	430a      	orrs	r2, r1
 8002078:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800207a:	4b66      	ldr	r3, [pc, #408]	@ (8002214 <HAL_RCC_OscConfig+0x32c>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	0adb      	lsrs	r3, r3, #11
 8002080:	2207      	movs	r2, #7
 8002082:	4013      	ands	r3, r2
 8002084:	4a68      	ldr	r2, [pc, #416]	@ (8002228 <HAL_RCC_OscConfig+0x340>)
 8002086:	40da      	lsrs	r2, r3
 8002088:	4b68      	ldr	r3, [pc, #416]	@ (800222c <HAL_RCC_OscConfig+0x344>)
 800208a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800208c:	4b68      	ldr	r3, [pc, #416]	@ (8002230 <HAL_RCC_OscConfig+0x348>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	0018      	movs	r0, r3
 8002092:	f7ff f98d 	bl	80013b0 <HAL_InitTick>
 8002096:	1e03      	subs	r3, r0, #0
 8002098:	d051      	beq.n	800213e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e221      	b.n	80024e2 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	68db      	ldr	r3, [r3, #12]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d030      	beq.n	8002108 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80020a6:	4b5b      	ldr	r3, [pc, #364]	@ (8002214 <HAL_RCC_OscConfig+0x32c>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a5e      	ldr	r2, [pc, #376]	@ (8002224 <HAL_RCC_OscConfig+0x33c>)
 80020ac:	4013      	ands	r3, r2
 80020ae:	0019      	movs	r1, r3
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	691a      	ldr	r2, [r3, #16]
 80020b4:	4b57      	ldr	r3, [pc, #348]	@ (8002214 <HAL_RCC_OscConfig+0x32c>)
 80020b6:	430a      	orrs	r2, r1
 80020b8:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80020ba:	4b56      	ldr	r3, [pc, #344]	@ (8002214 <HAL_RCC_OscConfig+0x32c>)
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	4b55      	ldr	r3, [pc, #340]	@ (8002214 <HAL_RCC_OscConfig+0x32c>)
 80020c0:	2180      	movs	r1, #128	@ 0x80
 80020c2:	0049      	lsls	r1, r1, #1
 80020c4:	430a      	orrs	r2, r1
 80020c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020c8:	f7ff f9ce 	bl	8001468 <HAL_GetTick>
 80020cc:	0003      	movs	r3, r0
 80020ce:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020d0:	e008      	b.n	80020e4 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020d2:	f7ff f9c9 	bl	8001468 <HAL_GetTick>
 80020d6:	0002      	movs	r2, r0
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	1ad3      	subs	r3, r2, r3
 80020dc:	2b02      	cmp	r3, #2
 80020de:	d901      	bls.n	80020e4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80020e0:	2303      	movs	r3, #3
 80020e2:	e1fe      	b.n	80024e2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020e4:	4b4b      	ldr	r3, [pc, #300]	@ (8002214 <HAL_RCC_OscConfig+0x32c>)
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	2380      	movs	r3, #128	@ 0x80
 80020ea:	00db      	lsls	r3, r3, #3
 80020ec:	4013      	ands	r3, r2
 80020ee:	d0f0      	beq.n	80020d2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020f0:	4b48      	ldr	r3, [pc, #288]	@ (8002214 <HAL_RCC_OscConfig+0x32c>)
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	4a4a      	ldr	r2, [pc, #296]	@ (8002220 <HAL_RCC_OscConfig+0x338>)
 80020f6:	4013      	ands	r3, r2
 80020f8:	0019      	movs	r1, r3
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	695b      	ldr	r3, [r3, #20]
 80020fe:	021a      	lsls	r2, r3, #8
 8002100:	4b44      	ldr	r3, [pc, #272]	@ (8002214 <HAL_RCC_OscConfig+0x32c>)
 8002102:	430a      	orrs	r2, r1
 8002104:	605a      	str	r2, [r3, #4]
 8002106:	e01b      	b.n	8002140 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002108:	4b42      	ldr	r3, [pc, #264]	@ (8002214 <HAL_RCC_OscConfig+0x32c>)
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	4b41      	ldr	r3, [pc, #260]	@ (8002214 <HAL_RCC_OscConfig+0x32c>)
 800210e:	4949      	ldr	r1, [pc, #292]	@ (8002234 <HAL_RCC_OscConfig+0x34c>)
 8002110:	400a      	ands	r2, r1
 8002112:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002114:	f7ff f9a8 	bl	8001468 <HAL_GetTick>
 8002118:	0003      	movs	r3, r0
 800211a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800211c:	e008      	b.n	8002130 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800211e:	f7ff f9a3 	bl	8001468 <HAL_GetTick>
 8002122:	0002      	movs	r2, r0
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	1ad3      	subs	r3, r2, r3
 8002128:	2b02      	cmp	r3, #2
 800212a:	d901      	bls.n	8002130 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800212c:	2303      	movs	r3, #3
 800212e:	e1d8      	b.n	80024e2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002130:	4b38      	ldr	r3, [pc, #224]	@ (8002214 <HAL_RCC_OscConfig+0x32c>)
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	2380      	movs	r3, #128	@ 0x80
 8002136:	00db      	lsls	r3, r3, #3
 8002138:	4013      	ands	r3, r2
 800213a:	d1f0      	bne.n	800211e <HAL_RCC_OscConfig+0x236>
 800213c:	e000      	b.n	8002140 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800213e:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	2208      	movs	r2, #8
 8002146:	4013      	ands	r3, r2
 8002148:	d047      	beq.n	80021da <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800214a:	4b32      	ldr	r3, [pc, #200]	@ (8002214 <HAL_RCC_OscConfig+0x32c>)
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	2238      	movs	r2, #56	@ 0x38
 8002150:	4013      	ands	r3, r2
 8002152:	2b18      	cmp	r3, #24
 8002154:	d10a      	bne.n	800216c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8002156:	4b2f      	ldr	r3, [pc, #188]	@ (8002214 <HAL_RCC_OscConfig+0x32c>)
 8002158:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800215a:	2202      	movs	r2, #2
 800215c:	4013      	ands	r3, r2
 800215e:	d03c      	beq.n	80021da <HAL_RCC_OscConfig+0x2f2>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	699b      	ldr	r3, [r3, #24]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d138      	bne.n	80021da <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8002168:	2301      	movs	r3, #1
 800216a:	e1ba      	b.n	80024e2 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	699b      	ldr	r3, [r3, #24]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d019      	beq.n	80021a8 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002174:	4b27      	ldr	r3, [pc, #156]	@ (8002214 <HAL_RCC_OscConfig+0x32c>)
 8002176:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002178:	4b26      	ldr	r3, [pc, #152]	@ (8002214 <HAL_RCC_OscConfig+0x32c>)
 800217a:	2101      	movs	r1, #1
 800217c:	430a      	orrs	r2, r1
 800217e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002180:	f7ff f972 	bl	8001468 <HAL_GetTick>
 8002184:	0003      	movs	r3, r0
 8002186:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002188:	e008      	b.n	800219c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800218a:	f7ff f96d 	bl	8001468 <HAL_GetTick>
 800218e:	0002      	movs	r2, r0
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	1ad3      	subs	r3, r2, r3
 8002194:	2b02      	cmp	r3, #2
 8002196:	d901      	bls.n	800219c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002198:	2303      	movs	r3, #3
 800219a:	e1a2      	b.n	80024e2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800219c:	4b1d      	ldr	r3, [pc, #116]	@ (8002214 <HAL_RCC_OscConfig+0x32c>)
 800219e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021a0:	2202      	movs	r2, #2
 80021a2:	4013      	ands	r3, r2
 80021a4:	d0f1      	beq.n	800218a <HAL_RCC_OscConfig+0x2a2>
 80021a6:	e018      	b.n	80021da <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80021a8:	4b1a      	ldr	r3, [pc, #104]	@ (8002214 <HAL_RCC_OscConfig+0x32c>)
 80021aa:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80021ac:	4b19      	ldr	r3, [pc, #100]	@ (8002214 <HAL_RCC_OscConfig+0x32c>)
 80021ae:	2101      	movs	r1, #1
 80021b0:	438a      	bics	r2, r1
 80021b2:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021b4:	f7ff f958 	bl	8001468 <HAL_GetTick>
 80021b8:	0003      	movs	r3, r0
 80021ba:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80021bc:	e008      	b.n	80021d0 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021be:	f7ff f953 	bl	8001468 <HAL_GetTick>
 80021c2:	0002      	movs	r2, r0
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	1ad3      	subs	r3, r2, r3
 80021c8:	2b02      	cmp	r3, #2
 80021ca:	d901      	bls.n	80021d0 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80021cc:	2303      	movs	r3, #3
 80021ce:	e188      	b.n	80024e2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80021d0:	4b10      	ldr	r3, [pc, #64]	@ (8002214 <HAL_RCC_OscConfig+0x32c>)
 80021d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021d4:	2202      	movs	r2, #2
 80021d6:	4013      	ands	r3, r2
 80021d8:	d1f1      	bne.n	80021be <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	2204      	movs	r2, #4
 80021e0:	4013      	ands	r3, r2
 80021e2:	d100      	bne.n	80021e6 <HAL_RCC_OscConfig+0x2fe>
 80021e4:	e0c6      	b.n	8002374 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021e6:	231f      	movs	r3, #31
 80021e8:	18fb      	adds	r3, r7, r3
 80021ea:	2200      	movs	r2, #0
 80021ec:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80021ee:	4b09      	ldr	r3, [pc, #36]	@ (8002214 <HAL_RCC_OscConfig+0x32c>)
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	2238      	movs	r2, #56	@ 0x38
 80021f4:	4013      	ands	r3, r2
 80021f6:	2b20      	cmp	r3, #32
 80021f8:	d11e      	bne.n	8002238 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80021fa:	4b06      	ldr	r3, [pc, #24]	@ (8002214 <HAL_RCC_OscConfig+0x32c>)
 80021fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021fe:	2202      	movs	r2, #2
 8002200:	4013      	ands	r3, r2
 8002202:	d100      	bne.n	8002206 <HAL_RCC_OscConfig+0x31e>
 8002204:	e0b6      	b.n	8002374 <HAL_RCC_OscConfig+0x48c>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d000      	beq.n	8002210 <HAL_RCC_OscConfig+0x328>
 800220e:	e0b1      	b.n	8002374 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	e166      	b.n	80024e2 <HAL_RCC_OscConfig+0x5fa>
 8002214:	40021000 	.word	0x40021000
 8002218:	fffeffff 	.word	0xfffeffff
 800221c:	fffbffff 	.word	0xfffbffff
 8002220:	ffff80ff 	.word	0xffff80ff
 8002224:	ffffc7ff 	.word	0xffffc7ff
 8002228:	00f42400 	.word	0x00f42400
 800222c:	2000000c 	.word	0x2000000c
 8002230:	20000010 	.word	0x20000010
 8002234:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002238:	4bac      	ldr	r3, [pc, #688]	@ (80024ec <HAL_RCC_OscConfig+0x604>)
 800223a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800223c:	2380      	movs	r3, #128	@ 0x80
 800223e:	055b      	lsls	r3, r3, #21
 8002240:	4013      	ands	r3, r2
 8002242:	d101      	bne.n	8002248 <HAL_RCC_OscConfig+0x360>
 8002244:	2301      	movs	r3, #1
 8002246:	e000      	b.n	800224a <HAL_RCC_OscConfig+0x362>
 8002248:	2300      	movs	r3, #0
 800224a:	2b00      	cmp	r3, #0
 800224c:	d011      	beq.n	8002272 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800224e:	4ba7      	ldr	r3, [pc, #668]	@ (80024ec <HAL_RCC_OscConfig+0x604>)
 8002250:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002252:	4ba6      	ldr	r3, [pc, #664]	@ (80024ec <HAL_RCC_OscConfig+0x604>)
 8002254:	2180      	movs	r1, #128	@ 0x80
 8002256:	0549      	lsls	r1, r1, #21
 8002258:	430a      	orrs	r2, r1
 800225a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800225c:	4ba3      	ldr	r3, [pc, #652]	@ (80024ec <HAL_RCC_OscConfig+0x604>)
 800225e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002260:	2380      	movs	r3, #128	@ 0x80
 8002262:	055b      	lsls	r3, r3, #21
 8002264:	4013      	ands	r3, r2
 8002266:	60fb      	str	r3, [r7, #12]
 8002268:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800226a:	231f      	movs	r3, #31
 800226c:	18fb      	adds	r3, r7, r3
 800226e:	2201      	movs	r2, #1
 8002270:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002272:	4b9f      	ldr	r3, [pc, #636]	@ (80024f0 <HAL_RCC_OscConfig+0x608>)
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	2380      	movs	r3, #128	@ 0x80
 8002278:	005b      	lsls	r3, r3, #1
 800227a:	4013      	ands	r3, r2
 800227c:	d11a      	bne.n	80022b4 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800227e:	4b9c      	ldr	r3, [pc, #624]	@ (80024f0 <HAL_RCC_OscConfig+0x608>)
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	4b9b      	ldr	r3, [pc, #620]	@ (80024f0 <HAL_RCC_OscConfig+0x608>)
 8002284:	2180      	movs	r1, #128	@ 0x80
 8002286:	0049      	lsls	r1, r1, #1
 8002288:	430a      	orrs	r2, r1
 800228a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800228c:	f7ff f8ec 	bl	8001468 <HAL_GetTick>
 8002290:	0003      	movs	r3, r0
 8002292:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002294:	e008      	b.n	80022a8 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002296:	f7ff f8e7 	bl	8001468 <HAL_GetTick>
 800229a:	0002      	movs	r2, r0
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	1ad3      	subs	r3, r2, r3
 80022a0:	2b02      	cmp	r3, #2
 80022a2:	d901      	bls.n	80022a8 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80022a4:	2303      	movs	r3, #3
 80022a6:	e11c      	b.n	80024e2 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022a8:	4b91      	ldr	r3, [pc, #580]	@ (80024f0 <HAL_RCC_OscConfig+0x608>)
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	2380      	movs	r3, #128	@ 0x80
 80022ae:	005b      	lsls	r3, r3, #1
 80022b0:	4013      	ands	r3, r2
 80022b2:	d0f0      	beq.n	8002296 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	d106      	bne.n	80022ca <HAL_RCC_OscConfig+0x3e2>
 80022bc:	4b8b      	ldr	r3, [pc, #556]	@ (80024ec <HAL_RCC_OscConfig+0x604>)
 80022be:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80022c0:	4b8a      	ldr	r3, [pc, #552]	@ (80024ec <HAL_RCC_OscConfig+0x604>)
 80022c2:	2101      	movs	r1, #1
 80022c4:	430a      	orrs	r2, r1
 80022c6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80022c8:	e01c      	b.n	8002304 <HAL_RCC_OscConfig+0x41c>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	2b05      	cmp	r3, #5
 80022d0:	d10c      	bne.n	80022ec <HAL_RCC_OscConfig+0x404>
 80022d2:	4b86      	ldr	r3, [pc, #536]	@ (80024ec <HAL_RCC_OscConfig+0x604>)
 80022d4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80022d6:	4b85      	ldr	r3, [pc, #532]	@ (80024ec <HAL_RCC_OscConfig+0x604>)
 80022d8:	2104      	movs	r1, #4
 80022da:	430a      	orrs	r2, r1
 80022dc:	65da      	str	r2, [r3, #92]	@ 0x5c
 80022de:	4b83      	ldr	r3, [pc, #524]	@ (80024ec <HAL_RCC_OscConfig+0x604>)
 80022e0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80022e2:	4b82      	ldr	r3, [pc, #520]	@ (80024ec <HAL_RCC_OscConfig+0x604>)
 80022e4:	2101      	movs	r1, #1
 80022e6:	430a      	orrs	r2, r1
 80022e8:	65da      	str	r2, [r3, #92]	@ 0x5c
 80022ea:	e00b      	b.n	8002304 <HAL_RCC_OscConfig+0x41c>
 80022ec:	4b7f      	ldr	r3, [pc, #508]	@ (80024ec <HAL_RCC_OscConfig+0x604>)
 80022ee:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80022f0:	4b7e      	ldr	r3, [pc, #504]	@ (80024ec <HAL_RCC_OscConfig+0x604>)
 80022f2:	2101      	movs	r1, #1
 80022f4:	438a      	bics	r2, r1
 80022f6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80022f8:	4b7c      	ldr	r3, [pc, #496]	@ (80024ec <HAL_RCC_OscConfig+0x604>)
 80022fa:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80022fc:	4b7b      	ldr	r3, [pc, #492]	@ (80024ec <HAL_RCC_OscConfig+0x604>)
 80022fe:	2104      	movs	r1, #4
 8002300:	438a      	bics	r2, r1
 8002302:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d014      	beq.n	8002336 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800230c:	f7ff f8ac 	bl	8001468 <HAL_GetTick>
 8002310:	0003      	movs	r3, r0
 8002312:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002314:	e009      	b.n	800232a <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002316:	f7ff f8a7 	bl	8001468 <HAL_GetTick>
 800231a:	0002      	movs	r2, r0
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	1ad3      	subs	r3, r2, r3
 8002320:	4a74      	ldr	r2, [pc, #464]	@ (80024f4 <HAL_RCC_OscConfig+0x60c>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d901      	bls.n	800232a <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8002326:	2303      	movs	r3, #3
 8002328:	e0db      	b.n	80024e2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800232a:	4b70      	ldr	r3, [pc, #448]	@ (80024ec <HAL_RCC_OscConfig+0x604>)
 800232c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800232e:	2202      	movs	r2, #2
 8002330:	4013      	ands	r3, r2
 8002332:	d0f0      	beq.n	8002316 <HAL_RCC_OscConfig+0x42e>
 8002334:	e013      	b.n	800235e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002336:	f7ff f897 	bl	8001468 <HAL_GetTick>
 800233a:	0003      	movs	r3, r0
 800233c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800233e:	e009      	b.n	8002354 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002340:	f7ff f892 	bl	8001468 <HAL_GetTick>
 8002344:	0002      	movs	r2, r0
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	4a6a      	ldr	r2, [pc, #424]	@ (80024f4 <HAL_RCC_OscConfig+0x60c>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d901      	bls.n	8002354 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002350:	2303      	movs	r3, #3
 8002352:	e0c6      	b.n	80024e2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002354:	4b65      	ldr	r3, [pc, #404]	@ (80024ec <HAL_RCC_OscConfig+0x604>)
 8002356:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002358:	2202      	movs	r2, #2
 800235a:	4013      	ands	r3, r2
 800235c:	d1f0      	bne.n	8002340 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800235e:	231f      	movs	r3, #31
 8002360:	18fb      	adds	r3, r7, r3
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	2b01      	cmp	r3, #1
 8002366:	d105      	bne.n	8002374 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002368:	4b60      	ldr	r3, [pc, #384]	@ (80024ec <HAL_RCC_OscConfig+0x604>)
 800236a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800236c:	4b5f      	ldr	r3, [pc, #380]	@ (80024ec <HAL_RCC_OscConfig+0x604>)
 800236e:	4962      	ldr	r1, [pc, #392]	@ (80024f8 <HAL_RCC_OscConfig+0x610>)
 8002370:	400a      	ands	r2, r1
 8002372:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	69db      	ldr	r3, [r3, #28]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d100      	bne.n	800237e <HAL_RCC_OscConfig+0x496>
 800237c:	e0b0      	b.n	80024e0 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800237e:	4b5b      	ldr	r3, [pc, #364]	@ (80024ec <HAL_RCC_OscConfig+0x604>)
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	2238      	movs	r2, #56	@ 0x38
 8002384:	4013      	ands	r3, r2
 8002386:	2b10      	cmp	r3, #16
 8002388:	d100      	bne.n	800238c <HAL_RCC_OscConfig+0x4a4>
 800238a:	e078      	b.n	800247e <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	69db      	ldr	r3, [r3, #28]
 8002390:	2b02      	cmp	r3, #2
 8002392:	d153      	bne.n	800243c <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002394:	4b55      	ldr	r3, [pc, #340]	@ (80024ec <HAL_RCC_OscConfig+0x604>)
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	4b54      	ldr	r3, [pc, #336]	@ (80024ec <HAL_RCC_OscConfig+0x604>)
 800239a:	4958      	ldr	r1, [pc, #352]	@ (80024fc <HAL_RCC_OscConfig+0x614>)
 800239c:	400a      	ands	r2, r1
 800239e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023a0:	f7ff f862 	bl	8001468 <HAL_GetTick>
 80023a4:	0003      	movs	r3, r0
 80023a6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023a8:	e008      	b.n	80023bc <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023aa:	f7ff f85d 	bl	8001468 <HAL_GetTick>
 80023ae:	0002      	movs	r2, r0
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	1ad3      	subs	r3, r2, r3
 80023b4:	2b02      	cmp	r3, #2
 80023b6:	d901      	bls.n	80023bc <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80023b8:	2303      	movs	r3, #3
 80023ba:	e092      	b.n	80024e2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023bc:	4b4b      	ldr	r3, [pc, #300]	@ (80024ec <HAL_RCC_OscConfig+0x604>)
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	2380      	movs	r3, #128	@ 0x80
 80023c2:	049b      	lsls	r3, r3, #18
 80023c4:	4013      	ands	r3, r2
 80023c6:	d1f0      	bne.n	80023aa <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023c8:	4b48      	ldr	r3, [pc, #288]	@ (80024ec <HAL_RCC_OscConfig+0x604>)
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	4a4c      	ldr	r2, [pc, #304]	@ (8002500 <HAL_RCC_OscConfig+0x618>)
 80023ce:	4013      	ands	r3, r2
 80023d0:	0019      	movs	r1, r3
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6a1a      	ldr	r2, [r3, #32]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023da:	431a      	orrs	r2, r3
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023e0:	021b      	lsls	r3, r3, #8
 80023e2:	431a      	orrs	r2, r3
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023e8:	431a      	orrs	r2, r3
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ee:	431a      	orrs	r2, r3
 80023f0:	4b3e      	ldr	r3, [pc, #248]	@ (80024ec <HAL_RCC_OscConfig+0x604>)
 80023f2:	430a      	orrs	r2, r1
 80023f4:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023f6:	4b3d      	ldr	r3, [pc, #244]	@ (80024ec <HAL_RCC_OscConfig+0x604>)
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	4b3c      	ldr	r3, [pc, #240]	@ (80024ec <HAL_RCC_OscConfig+0x604>)
 80023fc:	2180      	movs	r1, #128	@ 0x80
 80023fe:	0449      	lsls	r1, r1, #17
 8002400:	430a      	orrs	r2, r1
 8002402:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002404:	4b39      	ldr	r3, [pc, #228]	@ (80024ec <HAL_RCC_OscConfig+0x604>)
 8002406:	68da      	ldr	r2, [r3, #12]
 8002408:	4b38      	ldr	r3, [pc, #224]	@ (80024ec <HAL_RCC_OscConfig+0x604>)
 800240a:	2180      	movs	r1, #128	@ 0x80
 800240c:	0549      	lsls	r1, r1, #21
 800240e:	430a      	orrs	r2, r1
 8002410:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002412:	f7ff f829 	bl	8001468 <HAL_GetTick>
 8002416:	0003      	movs	r3, r0
 8002418:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800241a:	e008      	b.n	800242e <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800241c:	f7ff f824 	bl	8001468 <HAL_GetTick>
 8002420:	0002      	movs	r2, r0
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	2b02      	cmp	r3, #2
 8002428:	d901      	bls.n	800242e <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 800242a:	2303      	movs	r3, #3
 800242c:	e059      	b.n	80024e2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800242e:	4b2f      	ldr	r3, [pc, #188]	@ (80024ec <HAL_RCC_OscConfig+0x604>)
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	2380      	movs	r3, #128	@ 0x80
 8002434:	049b      	lsls	r3, r3, #18
 8002436:	4013      	ands	r3, r2
 8002438:	d0f0      	beq.n	800241c <HAL_RCC_OscConfig+0x534>
 800243a:	e051      	b.n	80024e0 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800243c:	4b2b      	ldr	r3, [pc, #172]	@ (80024ec <HAL_RCC_OscConfig+0x604>)
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	4b2a      	ldr	r3, [pc, #168]	@ (80024ec <HAL_RCC_OscConfig+0x604>)
 8002442:	492e      	ldr	r1, [pc, #184]	@ (80024fc <HAL_RCC_OscConfig+0x614>)
 8002444:	400a      	ands	r2, r1
 8002446:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002448:	f7ff f80e 	bl	8001468 <HAL_GetTick>
 800244c:	0003      	movs	r3, r0
 800244e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002450:	e008      	b.n	8002464 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002452:	f7ff f809 	bl	8001468 <HAL_GetTick>
 8002456:	0002      	movs	r2, r0
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	1ad3      	subs	r3, r2, r3
 800245c:	2b02      	cmp	r3, #2
 800245e:	d901      	bls.n	8002464 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8002460:	2303      	movs	r3, #3
 8002462:	e03e      	b.n	80024e2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002464:	4b21      	ldr	r3, [pc, #132]	@ (80024ec <HAL_RCC_OscConfig+0x604>)
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	2380      	movs	r3, #128	@ 0x80
 800246a:	049b      	lsls	r3, r3, #18
 800246c:	4013      	ands	r3, r2
 800246e:	d1f0      	bne.n	8002452 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8002470:	4b1e      	ldr	r3, [pc, #120]	@ (80024ec <HAL_RCC_OscConfig+0x604>)
 8002472:	68da      	ldr	r2, [r3, #12]
 8002474:	4b1d      	ldr	r3, [pc, #116]	@ (80024ec <HAL_RCC_OscConfig+0x604>)
 8002476:	4923      	ldr	r1, [pc, #140]	@ (8002504 <HAL_RCC_OscConfig+0x61c>)
 8002478:	400a      	ands	r2, r1
 800247a:	60da      	str	r2, [r3, #12]
 800247c:	e030      	b.n	80024e0 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	69db      	ldr	r3, [r3, #28]
 8002482:	2b01      	cmp	r3, #1
 8002484:	d101      	bne.n	800248a <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	e02b      	b.n	80024e2 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800248a:	4b18      	ldr	r3, [pc, #96]	@ (80024ec <HAL_RCC_OscConfig+0x604>)
 800248c:	68db      	ldr	r3, [r3, #12]
 800248e:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	2203      	movs	r2, #3
 8002494:	401a      	ands	r2, r3
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6a1b      	ldr	r3, [r3, #32]
 800249a:	429a      	cmp	r2, r3
 800249c:	d11e      	bne.n	80024dc <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	2270      	movs	r2, #112	@ 0x70
 80024a2:	401a      	ands	r2, r3
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d117      	bne.n	80024dc <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80024ac:	697a      	ldr	r2, [r7, #20]
 80024ae:	23fe      	movs	r3, #254	@ 0xfe
 80024b0:	01db      	lsls	r3, r3, #7
 80024b2:	401a      	ands	r2, r3
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024b8:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80024ba:	429a      	cmp	r2, r3
 80024bc:	d10e      	bne.n	80024dc <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80024be:	697a      	ldr	r2, [r7, #20]
 80024c0:	23f8      	movs	r3, #248	@ 0xf8
 80024c2:	039b      	lsls	r3, r3, #14
 80024c4:	401a      	ands	r2, r3
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80024ca:	429a      	cmp	r2, r3
 80024cc:	d106      	bne.n	80024dc <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	0f5b      	lsrs	r3, r3, #29
 80024d2:	075a      	lsls	r2, r3, #29
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80024d8:	429a      	cmp	r2, r3
 80024da:	d001      	beq.n	80024e0 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	e000      	b.n	80024e2 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 80024e0:	2300      	movs	r3, #0
}
 80024e2:	0018      	movs	r0, r3
 80024e4:	46bd      	mov	sp, r7
 80024e6:	b008      	add	sp, #32
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	46c0      	nop			@ (mov r8, r8)
 80024ec:	40021000 	.word	0x40021000
 80024f0:	40007000 	.word	0x40007000
 80024f4:	00001388 	.word	0x00001388
 80024f8:	efffffff 	.word	0xefffffff
 80024fc:	feffffff 	.word	0xfeffffff
 8002500:	1fc1808c 	.word	0x1fc1808c
 8002504:	effefffc 	.word	0xeffefffc

08002508 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b084      	sub	sp, #16
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
 8002510:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d101      	bne.n	800251c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002518:	2301      	movs	r3, #1
 800251a:	e0e9      	b.n	80026f0 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800251c:	4b76      	ldr	r3, [pc, #472]	@ (80026f8 <HAL_RCC_ClockConfig+0x1f0>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	2207      	movs	r2, #7
 8002522:	4013      	ands	r3, r2
 8002524:	683a      	ldr	r2, [r7, #0]
 8002526:	429a      	cmp	r2, r3
 8002528:	d91e      	bls.n	8002568 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800252a:	4b73      	ldr	r3, [pc, #460]	@ (80026f8 <HAL_RCC_ClockConfig+0x1f0>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	2207      	movs	r2, #7
 8002530:	4393      	bics	r3, r2
 8002532:	0019      	movs	r1, r3
 8002534:	4b70      	ldr	r3, [pc, #448]	@ (80026f8 <HAL_RCC_ClockConfig+0x1f0>)
 8002536:	683a      	ldr	r2, [r7, #0]
 8002538:	430a      	orrs	r2, r1
 800253a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800253c:	f7fe ff94 	bl	8001468 <HAL_GetTick>
 8002540:	0003      	movs	r3, r0
 8002542:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002544:	e009      	b.n	800255a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002546:	f7fe ff8f 	bl	8001468 <HAL_GetTick>
 800254a:	0002      	movs	r2, r0
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	1ad3      	subs	r3, r2, r3
 8002550:	4a6a      	ldr	r2, [pc, #424]	@ (80026fc <HAL_RCC_ClockConfig+0x1f4>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d901      	bls.n	800255a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002556:	2303      	movs	r3, #3
 8002558:	e0ca      	b.n	80026f0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800255a:	4b67      	ldr	r3, [pc, #412]	@ (80026f8 <HAL_RCC_ClockConfig+0x1f0>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	2207      	movs	r2, #7
 8002560:	4013      	ands	r3, r2
 8002562:	683a      	ldr	r2, [r7, #0]
 8002564:	429a      	cmp	r2, r3
 8002566:	d1ee      	bne.n	8002546 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	2202      	movs	r2, #2
 800256e:	4013      	ands	r3, r2
 8002570:	d015      	beq.n	800259e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	2204      	movs	r2, #4
 8002578:	4013      	ands	r3, r2
 800257a:	d006      	beq.n	800258a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800257c:	4b60      	ldr	r3, [pc, #384]	@ (8002700 <HAL_RCC_ClockConfig+0x1f8>)
 800257e:	689a      	ldr	r2, [r3, #8]
 8002580:	4b5f      	ldr	r3, [pc, #380]	@ (8002700 <HAL_RCC_ClockConfig+0x1f8>)
 8002582:	21e0      	movs	r1, #224	@ 0xe0
 8002584:	01c9      	lsls	r1, r1, #7
 8002586:	430a      	orrs	r2, r1
 8002588:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800258a:	4b5d      	ldr	r3, [pc, #372]	@ (8002700 <HAL_RCC_ClockConfig+0x1f8>)
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	4a5d      	ldr	r2, [pc, #372]	@ (8002704 <HAL_RCC_ClockConfig+0x1fc>)
 8002590:	4013      	ands	r3, r2
 8002592:	0019      	movs	r1, r3
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	689a      	ldr	r2, [r3, #8]
 8002598:	4b59      	ldr	r3, [pc, #356]	@ (8002700 <HAL_RCC_ClockConfig+0x1f8>)
 800259a:	430a      	orrs	r2, r1
 800259c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	2201      	movs	r2, #1
 80025a4:	4013      	ands	r3, r2
 80025a6:	d057      	beq.n	8002658 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d107      	bne.n	80025c0 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025b0:	4b53      	ldr	r3, [pc, #332]	@ (8002700 <HAL_RCC_ClockConfig+0x1f8>)
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	2380      	movs	r3, #128	@ 0x80
 80025b6:	029b      	lsls	r3, r3, #10
 80025b8:	4013      	ands	r3, r2
 80025ba:	d12b      	bne.n	8002614 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80025bc:	2301      	movs	r3, #1
 80025be:	e097      	b.n	80026f0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	2b02      	cmp	r3, #2
 80025c6:	d107      	bne.n	80025d8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025c8:	4b4d      	ldr	r3, [pc, #308]	@ (8002700 <HAL_RCC_ClockConfig+0x1f8>)
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	2380      	movs	r3, #128	@ 0x80
 80025ce:	049b      	lsls	r3, r3, #18
 80025d0:	4013      	ands	r3, r2
 80025d2:	d11f      	bne.n	8002614 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80025d4:	2301      	movs	r3, #1
 80025d6:	e08b      	b.n	80026f0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d107      	bne.n	80025f0 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025e0:	4b47      	ldr	r3, [pc, #284]	@ (8002700 <HAL_RCC_ClockConfig+0x1f8>)
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	2380      	movs	r3, #128	@ 0x80
 80025e6:	00db      	lsls	r3, r3, #3
 80025e8:	4013      	ands	r3, r2
 80025ea:	d113      	bne.n	8002614 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	e07f      	b.n	80026f0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	2b03      	cmp	r3, #3
 80025f6:	d106      	bne.n	8002606 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80025f8:	4b41      	ldr	r3, [pc, #260]	@ (8002700 <HAL_RCC_ClockConfig+0x1f8>)
 80025fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025fc:	2202      	movs	r2, #2
 80025fe:	4013      	ands	r3, r2
 8002600:	d108      	bne.n	8002614 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e074      	b.n	80026f0 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002606:	4b3e      	ldr	r3, [pc, #248]	@ (8002700 <HAL_RCC_ClockConfig+0x1f8>)
 8002608:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800260a:	2202      	movs	r2, #2
 800260c:	4013      	ands	r3, r2
 800260e:	d101      	bne.n	8002614 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	e06d      	b.n	80026f0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002614:	4b3a      	ldr	r3, [pc, #232]	@ (8002700 <HAL_RCC_ClockConfig+0x1f8>)
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	2207      	movs	r2, #7
 800261a:	4393      	bics	r3, r2
 800261c:	0019      	movs	r1, r3
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	685a      	ldr	r2, [r3, #4]
 8002622:	4b37      	ldr	r3, [pc, #220]	@ (8002700 <HAL_RCC_ClockConfig+0x1f8>)
 8002624:	430a      	orrs	r2, r1
 8002626:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002628:	f7fe ff1e 	bl	8001468 <HAL_GetTick>
 800262c:	0003      	movs	r3, r0
 800262e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002630:	e009      	b.n	8002646 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002632:	f7fe ff19 	bl	8001468 <HAL_GetTick>
 8002636:	0002      	movs	r2, r0
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	1ad3      	subs	r3, r2, r3
 800263c:	4a2f      	ldr	r2, [pc, #188]	@ (80026fc <HAL_RCC_ClockConfig+0x1f4>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d901      	bls.n	8002646 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002642:	2303      	movs	r3, #3
 8002644:	e054      	b.n	80026f0 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002646:	4b2e      	ldr	r3, [pc, #184]	@ (8002700 <HAL_RCC_ClockConfig+0x1f8>)
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	2238      	movs	r2, #56	@ 0x38
 800264c:	401a      	ands	r2, r3
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	00db      	lsls	r3, r3, #3
 8002654:	429a      	cmp	r2, r3
 8002656:	d1ec      	bne.n	8002632 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002658:	4b27      	ldr	r3, [pc, #156]	@ (80026f8 <HAL_RCC_ClockConfig+0x1f0>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	2207      	movs	r2, #7
 800265e:	4013      	ands	r3, r2
 8002660:	683a      	ldr	r2, [r7, #0]
 8002662:	429a      	cmp	r2, r3
 8002664:	d21e      	bcs.n	80026a4 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002666:	4b24      	ldr	r3, [pc, #144]	@ (80026f8 <HAL_RCC_ClockConfig+0x1f0>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	2207      	movs	r2, #7
 800266c:	4393      	bics	r3, r2
 800266e:	0019      	movs	r1, r3
 8002670:	4b21      	ldr	r3, [pc, #132]	@ (80026f8 <HAL_RCC_ClockConfig+0x1f0>)
 8002672:	683a      	ldr	r2, [r7, #0]
 8002674:	430a      	orrs	r2, r1
 8002676:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002678:	f7fe fef6 	bl	8001468 <HAL_GetTick>
 800267c:	0003      	movs	r3, r0
 800267e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002680:	e009      	b.n	8002696 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002682:	f7fe fef1 	bl	8001468 <HAL_GetTick>
 8002686:	0002      	movs	r2, r0
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	1ad3      	subs	r3, r2, r3
 800268c:	4a1b      	ldr	r2, [pc, #108]	@ (80026fc <HAL_RCC_ClockConfig+0x1f4>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d901      	bls.n	8002696 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002692:	2303      	movs	r3, #3
 8002694:	e02c      	b.n	80026f0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002696:	4b18      	ldr	r3, [pc, #96]	@ (80026f8 <HAL_RCC_ClockConfig+0x1f0>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	2207      	movs	r2, #7
 800269c:	4013      	ands	r3, r2
 800269e:	683a      	ldr	r2, [r7, #0]
 80026a0:	429a      	cmp	r2, r3
 80026a2:	d1ee      	bne.n	8002682 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	2204      	movs	r2, #4
 80026aa:	4013      	ands	r3, r2
 80026ac:	d009      	beq.n	80026c2 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80026ae:	4b14      	ldr	r3, [pc, #80]	@ (8002700 <HAL_RCC_ClockConfig+0x1f8>)
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	4a15      	ldr	r2, [pc, #84]	@ (8002708 <HAL_RCC_ClockConfig+0x200>)
 80026b4:	4013      	ands	r3, r2
 80026b6:	0019      	movs	r1, r3
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	68da      	ldr	r2, [r3, #12]
 80026bc:	4b10      	ldr	r3, [pc, #64]	@ (8002700 <HAL_RCC_ClockConfig+0x1f8>)
 80026be:	430a      	orrs	r2, r1
 80026c0:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80026c2:	f000 f829 	bl	8002718 <HAL_RCC_GetSysClockFreq>
 80026c6:	0001      	movs	r1, r0
 80026c8:	4b0d      	ldr	r3, [pc, #52]	@ (8002700 <HAL_RCC_ClockConfig+0x1f8>)
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	0a1b      	lsrs	r3, r3, #8
 80026ce:	220f      	movs	r2, #15
 80026d0:	401a      	ands	r2, r3
 80026d2:	4b0e      	ldr	r3, [pc, #56]	@ (800270c <HAL_RCC_ClockConfig+0x204>)
 80026d4:	0092      	lsls	r2, r2, #2
 80026d6:	58d3      	ldr	r3, [r2, r3]
 80026d8:	221f      	movs	r2, #31
 80026da:	4013      	ands	r3, r2
 80026dc:	000a      	movs	r2, r1
 80026de:	40da      	lsrs	r2, r3
 80026e0:	4b0b      	ldr	r3, [pc, #44]	@ (8002710 <HAL_RCC_ClockConfig+0x208>)
 80026e2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80026e4:	4b0b      	ldr	r3, [pc, #44]	@ (8002714 <HAL_RCC_ClockConfig+0x20c>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	0018      	movs	r0, r3
 80026ea:	f7fe fe61 	bl	80013b0 <HAL_InitTick>
 80026ee:	0003      	movs	r3, r0
}
 80026f0:	0018      	movs	r0, r3
 80026f2:	46bd      	mov	sp, r7
 80026f4:	b004      	add	sp, #16
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	40022000 	.word	0x40022000
 80026fc:	00001388 	.word	0x00001388
 8002700:	40021000 	.word	0x40021000
 8002704:	fffff0ff 	.word	0xfffff0ff
 8002708:	ffff8fff 	.word	0xffff8fff
 800270c:	08004ef0 	.word	0x08004ef0
 8002710:	2000000c 	.word	0x2000000c
 8002714:	20000010 	.word	0x20000010

08002718 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b086      	sub	sp, #24
 800271c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800271e:	4b3c      	ldr	r3, [pc, #240]	@ (8002810 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	2238      	movs	r2, #56	@ 0x38
 8002724:	4013      	ands	r3, r2
 8002726:	d10f      	bne.n	8002748 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002728:	4b39      	ldr	r3, [pc, #228]	@ (8002810 <HAL_RCC_GetSysClockFreq+0xf8>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	0adb      	lsrs	r3, r3, #11
 800272e:	2207      	movs	r2, #7
 8002730:	4013      	ands	r3, r2
 8002732:	2201      	movs	r2, #1
 8002734:	409a      	lsls	r2, r3
 8002736:	0013      	movs	r3, r2
 8002738:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800273a:	6839      	ldr	r1, [r7, #0]
 800273c:	4835      	ldr	r0, [pc, #212]	@ (8002814 <HAL_RCC_GetSysClockFreq+0xfc>)
 800273e:	f7fd fcdf 	bl	8000100 <__udivsi3>
 8002742:	0003      	movs	r3, r0
 8002744:	613b      	str	r3, [r7, #16]
 8002746:	e05d      	b.n	8002804 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002748:	4b31      	ldr	r3, [pc, #196]	@ (8002810 <HAL_RCC_GetSysClockFreq+0xf8>)
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	2238      	movs	r2, #56	@ 0x38
 800274e:	4013      	ands	r3, r2
 8002750:	2b08      	cmp	r3, #8
 8002752:	d102      	bne.n	800275a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002754:	4b2f      	ldr	r3, [pc, #188]	@ (8002814 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002756:	613b      	str	r3, [r7, #16]
 8002758:	e054      	b.n	8002804 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800275a:	4b2d      	ldr	r3, [pc, #180]	@ (8002810 <HAL_RCC_GetSysClockFreq+0xf8>)
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	2238      	movs	r2, #56	@ 0x38
 8002760:	4013      	ands	r3, r2
 8002762:	2b10      	cmp	r3, #16
 8002764:	d138      	bne.n	80027d8 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002766:	4b2a      	ldr	r3, [pc, #168]	@ (8002810 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002768:	68db      	ldr	r3, [r3, #12]
 800276a:	2203      	movs	r2, #3
 800276c:	4013      	ands	r3, r2
 800276e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002770:	4b27      	ldr	r3, [pc, #156]	@ (8002810 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	091b      	lsrs	r3, r3, #4
 8002776:	2207      	movs	r2, #7
 8002778:	4013      	ands	r3, r2
 800277a:	3301      	adds	r3, #1
 800277c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	2b03      	cmp	r3, #3
 8002782:	d10d      	bne.n	80027a0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002784:	68b9      	ldr	r1, [r7, #8]
 8002786:	4823      	ldr	r0, [pc, #140]	@ (8002814 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002788:	f7fd fcba 	bl	8000100 <__udivsi3>
 800278c:	0003      	movs	r3, r0
 800278e:	0019      	movs	r1, r3
 8002790:	4b1f      	ldr	r3, [pc, #124]	@ (8002810 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	0a1b      	lsrs	r3, r3, #8
 8002796:	227f      	movs	r2, #127	@ 0x7f
 8002798:	4013      	ands	r3, r2
 800279a:	434b      	muls	r3, r1
 800279c:	617b      	str	r3, [r7, #20]
        break;
 800279e:	e00d      	b.n	80027bc <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80027a0:	68b9      	ldr	r1, [r7, #8]
 80027a2:	481c      	ldr	r0, [pc, #112]	@ (8002814 <HAL_RCC_GetSysClockFreq+0xfc>)
 80027a4:	f7fd fcac 	bl	8000100 <__udivsi3>
 80027a8:	0003      	movs	r3, r0
 80027aa:	0019      	movs	r1, r3
 80027ac:	4b18      	ldr	r3, [pc, #96]	@ (8002810 <HAL_RCC_GetSysClockFreq+0xf8>)
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	0a1b      	lsrs	r3, r3, #8
 80027b2:	227f      	movs	r2, #127	@ 0x7f
 80027b4:	4013      	ands	r3, r2
 80027b6:	434b      	muls	r3, r1
 80027b8:	617b      	str	r3, [r7, #20]
        break;
 80027ba:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80027bc:	4b14      	ldr	r3, [pc, #80]	@ (8002810 <HAL_RCC_GetSysClockFreq+0xf8>)
 80027be:	68db      	ldr	r3, [r3, #12]
 80027c0:	0f5b      	lsrs	r3, r3, #29
 80027c2:	2207      	movs	r2, #7
 80027c4:	4013      	ands	r3, r2
 80027c6:	3301      	adds	r3, #1
 80027c8:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80027ca:	6879      	ldr	r1, [r7, #4]
 80027cc:	6978      	ldr	r0, [r7, #20]
 80027ce:	f7fd fc97 	bl	8000100 <__udivsi3>
 80027d2:	0003      	movs	r3, r0
 80027d4:	613b      	str	r3, [r7, #16]
 80027d6:	e015      	b.n	8002804 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80027d8:	4b0d      	ldr	r3, [pc, #52]	@ (8002810 <HAL_RCC_GetSysClockFreq+0xf8>)
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	2238      	movs	r2, #56	@ 0x38
 80027de:	4013      	ands	r3, r2
 80027e0:	2b20      	cmp	r3, #32
 80027e2:	d103      	bne.n	80027ec <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80027e4:	2380      	movs	r3, #128	@ 0x80
 80027e6:	021b      	lsls	r3, r3, #8
 80027e8:	613b      	str	r3, [r7, #16]
 80027ea:	e00b      	b.n	8002804 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80027ec:	4b08      	ldr	r3, [pc, #32]	@ (8002810 <HAL_RCC_GetSysClockFreq+0xf8>)
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	2238      	movs	r2, #56	@ 0x38
 80027f2:	4013      	ands	r3, r2
 80027f4:	2b18      	cmp	r3, #24
 80027f6:	d103      	bne.n	8002800 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80027f8:	23fa      	movs	r3, #250	@ 0xfa
 80027fa:	01db      	lsls	r3, r3, #7
 80027fc:	613b      	str	r3, [r7, #16]
 80027fe:	e001      	b.n	8002804 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002800:	2300      	movs	r3, #0
 8002802:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002804:	693b      	ldr	r3, [r7, #16]
}
 8002806:	0018      	movs	r0, r3
 8002808:	46bd      	mov	sp, r7
 800280a:	b006      	add	sp, #24
 800280c:	bd80      	pop	{r7, pc}
 800280e:	46c0      	nop			@ (mov r8, r8)
 8002810:	40021000 	.word	0x40021000
 8002814:	00f42400 	.word	0x00f42400

08002818 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800281c:	4b02      	ldr	r3, [pc, #8]	@ (8002828 <HAL_RCC_GetHCLKFreq+0x10>)
 800281e:	681b      	ldr	r3, [r3, #0]
}
 8002820:	0018      	movs	r0, r3
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}
 8002826:	46c0      	nop			@ (mov r8, r8)
 8002828:	2000000c 	.word	0x2000000c

0800282c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800282c:	b5b0      	push	{r4, r5, r7, lr}
 800282e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002830:	f7ff fff2 	bl	8002818 <HAL_RCC_GetHCLKFreq>
 8002834:	0004      	movs	r4, r0
 8002836:	f7ff fb4b 	bl	8001ed0 <LL_RCC_GetAPB1Prescaler>
 800283a:	0003      	movs	r3, r0
 800283c:	0b1a      	lsrs	r2, r3, #12
 800283e:	4b05      	ldr	r3, [pc, #20]	@ (8002854 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002840:	0092      	lsls	r2, r2, #2
 8002842:	58d3      	ldr	r3, [r2, r3]
 8002844:	221f      	movs	r2, #31
 8002846:	4013      	ands	r3, r2
 8002848:	40dc      	lsrs	r4, r3
 800284a:	0023      	movs	r3, r4
}
 800284c:	0018      	movs	r0, r3
 800284e:	46bd      	mov	sp, r7
 8002850:	bdb0      	pop	{r4, r5, r7, pc}
 8002852:	46c0      	nop			@ (mov r8, r8)
 8002854:	08004f30 	.word	0x08004f30

08002858 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b086      	sub	sp, #24
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002860:	2313      	movs	r3, #19
 8002862:	18fb      	adds	r3, r7, r3
 8002864:	2200      	movs	r2, #0
 8002866:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002868:	2312      	movs	r3, #18
 800286a:	18fb      	adds	r3, r7, r3
 800286c:	2200      	movs	r2, #0
 800286e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	2380      	movs	r3, #128	@ 0x80
 8002876:	029b      	lsls	r3, r3, #10
 8002878:	4013      	ands	r3, r2
 800287a:	d100      	bne.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x26>
 800287c:	e0a3      	b.n	80029c6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800287e:	2011      	movs	r0, #17
 8002880:	183b      	adds	r3, r7, r0
 8002882:	2200      	movs	r2, #0
 8002884:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002886:	4b7f      	ldr	r3, [pc, #508]	@ (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002888:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800288a:	2380      	movs	r3, #128	@ 0x80
 800288c:	055b      	lsls	r3, r3, #21
 800288e:	4013      	ands	r3, r2
 8002890:	d110      	bne.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002892:	4b7c      	ldr	r3, [pc, #496]	@ (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002894:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002896:	4b7b      	ldr	r3, [pc, #492]	@ (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002898:	2180      	movs	r1, #128	@ 0x80
 800289a:	0549      	lsls	r1, r1, #21
 800289c:	430a      	orrs	r2, r1
 800289e:	63da      	str	r2, [r3, #60]	@ 0x3c
 80028a0:	4b78      	ldr	r3, [pc, #480]	@ (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80028a2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80028a4:	2380      	movs	r3, #128	@ 0x80
 80028a6:	055b      	lsls	r3, r3, #21
 80028a8:	4013      	ands	r3, r2
 80028aa:	60bb      	str	r3, [r7, #8]
 80028ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028ae:	183b      	adds	r3, r7, r0
 80028b0:	2201      	movs	r2, #1
 80028b2:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80028b4:	4b74      	ldr	r3, [pc, #464]	@ (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	4b73      	ldr	r3, [pc, #460]	@ (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80028ba:	2180      	movs	r1, #128	@ 0x80
 80028bc:	0049      	lsls	r1, r1, #1
 80028be:	430a      	orrs	r2, r1
 80028c0:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80028c2:	f7fe fdd1 	bl	8001468 <HAL_GetTick>
 80028c6:	0003      	movs	r3, r0
 80028c8:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80028ca:	e00b      	b.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028cc:	f7fe fdcc 	bl	8001468 <HAL_GetTick>
 80028d0:	0002      	movs	r2, r0
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	1ad3      	subs	r3, r2, r3
 80028d6:	2b02      	cmp	r3, #2
 80028d8:	d904      	bls.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80028da:	2313      	movs	r3, #19
 80028dc:	18fb      	adds	r3, r7, r3
 80028de:	2203      	movs	r2, #3
 80028e0:	701a      	strb	r2, [r3, #0]
        break;
 80028e2:	e005      	b.n	80028f0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80028e4:	4b68      	ldr	r3, [pc, #416]	@ (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	2380      	movs	r3, #128	@ 0x80
 80028ea:	005b      	lsls	r3, r3, #1
 80028ec:	4013      	ands	r3, r2
 80028ee:	d0ed      	beq.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80028f0:	2313      	movs	r3, #19
 80028f2:	18fb      	adds	r3, r7, r3
 80028f4:	781b      	ldrb	r3, [r3, #0]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d154      	bne.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80028fa:	4b62      	ldr	r3, [pc, #392]	@ (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80028fc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80028fe:	23c0      	movs	r3, #192	@ 0xc0
 8002900:	009b      	lsls	r3, r3, #2
 8002902:	4013      	ands	r3, r2
 8002904:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d019      	beq.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	695b      	ldr	r3, [r3, #20]
 8002910:	697a      	ldr	r2, [r7, #20]
 8002912:	429a      	cmp	r2, r3
 8002914:	d014      	beq.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002916:	4b5b      	ldr	r3, [pc, #364]	@ (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002918:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800291a:	4a5c      	ldr	r2, [pc, #368]	@ (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x234>)
 800291c:	4013      	ands	r3, r2
 800291e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002920:	4b58      	ldr	r3, [pc, #352]	@ (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002922:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002924:	4b57      	ldr	r3, [pc, #348]	@ (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002926:	2180      	movs	r1, #128	@ 0x80
 8002928:	0249      	lsls	r1, r1, #9
 800292a:	430a      	orrs	r2, r1
 800292c:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800292e:	4b55      	ldr	r3, [pc, #340]	@ (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002930:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002932:	4b54      	ldr	r3, [pc, #336]	@ (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002934:	4956      	ldr	r1, [pc, #344]	@ (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8002936:	400a      	ands	r2, r1
 8002938:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800293a:	4b52      	ldr	r3, [pc, #328]	@ (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800293c:	697a      	ldr	r2, [r7, #20]
 800293e:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	2201      	movs	r2, #1
 8002944:	4013      	ands	r3, r2
 8002946:	d016      	beq.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002948:	f7fe fd8e 	bl	8001468 <HAL_GetTick>
 800294c:	0003      	movs	r3, r0
 800294e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002950:	e00c      	b.n	800296c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002952:	f7fe fd89 	bl	8001468 <HAL_GetTick>
 8002956:	0002      	movs	r2, r0
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	1ad3      	subs	r3, r2, r3
 800295c:	4a4d      	ldr	r2, [pc, #308]	@ (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d904      	bls.n	800296c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002962:	2313      	movs	r3, #19
 8002964:	18fb      	adds	r3, r7, r3
 8002966:	2203      	movs	r2, #3
 8002968:	701a      	strb	r2, [r3, #0]
            break;
 800296a:	e004      	b.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800296c:	4b45      	ldr	r3, [pc, #276]	@ (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800296e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002970:	2202      	movs	r2, #2
 8002972:	4013      	ands	r3, r2
 8002974:	d0ed      	beq.n	8002952 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002976:	2313      	movs	r3, #19
 8002978:	18fb      	adds	r3, r7, r3
 800297a:	781b      	ldrb	r3, [r3, #0]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d10a      	bne.n	8002996 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002980:	4b40      	ldr	r3, [pc, #256]	@ (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002982:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002984:	4a41      	ldr	r2, [pc, #260]	@ (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002986:	4013      	ands	r3, r2
 8002988:	0019      	movs	r1, r3
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	695a      	ldr	r2, [r3, #20]
 800298e:	4b3d      	ldr	r3, [pc, #244]	@ (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002990:	430a      	orrs	r2, r1
 8002992:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002994:	e00c      	b.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002996:	2312      	movs	r3, #18
 8002998:	18fb      	adds	r3, r7, r3
 800299a:	2213      	movs	r2, #19
 800299c:	18ba      	adds	r2, r7, r2
 800299e:	7812      	ldrb	r2, [r2, #0]
 80029a0:	701a      	strb	r2, [r3, #0]
 80029a2:	e005      	b.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029a4:	2312      	movs	r3, #18
 80029a6:	18fb      	adds	r3, r7, r3
 80029a8:	2213      	movs	r2, #19
 80029aa:	18ba      	adds	r2, r7, r2
 80029ac:	7812      	ldrb	r2, [r2, #0]
 80029ae:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80029b0:	2311      	movs	r3, #17
 80029b2:	18fb      	adds	r3, r7, r3
 80029b4:	781b      	ldrb	r3, [r3, #0]
 80029b6:	2b01      	cmp	r3, #1
 80029b8:	d105      	bne.n	80029c6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029ba:	4b32      	ldr	r3, [pc, #200]	@ (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80029bc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80029be:	4b31      	ldr	r3, [pc, #196]	@ (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80029c0:	4935      	ldr	r1, [pc, #212]	@ (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80029c2:	400a      	ands	r2, r1
 80029c4:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	2201      	movs	r2, #1
 80029cc:	4013      	ands	r3, r2
 80029ce:	d009      	beq.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80029d0:	4b2c      	ldr	r3, [pc, #176]	@ (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80029d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029d4:	2203      	movs	r2, #3
 80029d6:	4393      	bics	r3, r2
 80029d8:	0019      	movs	r1, r3
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	685a      	ldr	r2, [r3, #4]
 80029de:	4b29      	ldr	r3, [pc, #164]	@ (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80029e0:	430a      	orrs	r2, r1
 80029e2:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	2220      	movs	r2, #32
 80029ea:	4013      	ands	r3, r2
 80029ec:	d009      	beq.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80029ee:	4b25      	ldr	r3, [pc, #148]	@ (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80029f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029f2:	4a2a      	ldr	r2, [pc, #168]	@ (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80029f4:	4013      	ands	r3, r2
 80029f6:	0019      	movs	r1, r3
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	689a      	ldr	r2, [r3, #8]
 80029fc:	4b21      	ldr	r3, [pc, #132]	@ (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80029fe:	430a      	orrs	r2, r1
 8002a00:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681a      	ldr	r2, [r3, #0]
 8002a06:	2380      	movs	r3, #128	@ 0x80
 8002a08:	01db      	lsls	r3, r3, #7
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	d015      	beq.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002a0e:	4b1d      	ldr	r3, [pc, #116]	@ (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002a10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	0899      	lsrs	r1, r3, #2
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	691a      	ldr	r2, [r3, #16]
 8002a1a:	4b1a      	ldr	r3, [pc, #104]	@ (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002a1c:	430a      	orrs	r2, r1
 8002a1e:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	691a      	ldr	r2, [r3, #16]
 8002a24:	2380      	movs	r3, #128	@ 0x80
 8002a26:	05db      	lsls	r3, r3, #23
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d106      	bne.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002a2c:	4b15      	ldr	r3, [pc, #84]	@ (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002a2e:	68da      	ldr	r2, [r3, #12]
 8002a30:	4b14      	ldr	r3, [pc, #80]	@ (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002a32:	2180      	movs	r1, #128	@ 0x80
 8002a34:	0249      	lsls	r1, r1, #9
 8002a36:	430a      	orrs	r2, r1
 8002a38:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	2380      	movs	r3, #128	@ 0x80
 8002a40:	011b      	lsls	r3, r3, #4
 8002a42:	4013      	ands	r3, r2
 8002a44:	d016      	beq.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002a46:	4b0f      	ldr	r3, [pc, #60]	@ (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002a48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a4a:	4a15      	ldr	r2, [pc, #84]	@ (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	0019      	movs	r1, r3
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	68da      	ldr	r2, [r3, #12]
 8002a54:	4b0b      	ldr	r3, [pc, #44]	@ (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002a56:	430a      	orrs	r2, r1
 8002a58:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	68da      	ldr	r2, [r3, #12]
 8002a5e:	2380      	movs	r3, #128	@ 0x80
 8002a60:	01db      	lsls	r3, r3, #7
 8002a62:	429a      	cmp	r2, r3
 8002a64:	d106      	bne.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002a66:	4b07      	ldr	r3, [pc, #28]	@ (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002a68:	68da      	ldr	r2, [r3, #12]
 8002a6a:	4b06      	ldr	r3, [pc, #24]	@ (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002a6c:	2180      	movs	r1, #128	@ 0x80
 8002a6e:	0249      	lsls	r1, r1, #9
 8002a70:	430a      	orrs	r2, r1
 8002a72:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002a74:	2312      	movs	r3, #18
 8002a76:	18fb      	adds	r3, r7, r3
 8002a78:	781b      	ldrb	r3, [r3, #0]
}
 8002a7a:	0018      	movs	r0, r3
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	b006      	add	sp, #24
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	46c0      	nop			@ (mov r8, r8)
 8002a84:	40021000 	.word	0x40021000
 8002a88:	40007000 	.word	0x40007000
 8002a8c:	fffffcff 	.word	0xfffffcff
 8002a90:	fffeffff 	.word	0xfffeffff
 8002a94:	00001388 	.word	0x00001388
 8002a98:	efffffff 	.word	0xefffffff
 8002a9c:	ffffcfff 	.word	0xffffcfff
 8002aa0:	ffff3fff 	.word	0xffff3fff

08002aa4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b082      	sub	sp, #8
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d101      	bne.n	8002ab6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e04a      	b.n	8002b4c <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	223d      	movs	r2, #61	@ 0x3d
 8002aba:	5c9b      	ldrb	r3, [r3, r2]
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d107      	bne.n	8002ad2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	223c      	movs	r2, #60	@ 0x3c
 8002ac6:	2100      	movs	r1, #0
 8002ac8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	0018      	movs	r0, r3
 8002ace:	f7fe fa4b 	bl	8000f68 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	223d      	movs	r2, #61	@ 0x3d
 8002ad6:	2102      	movs	r1, #2
 8002ad8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	3304      	adds	r3, #4
 8002ae2:	0019      	movs	r1, r3
 8002ae4:	0010      	movs	r0, r2
 8002ae6:	f000 fcb9 	bl	800345c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2248      	movs	r2, #72	@ 0x48
 8002aee:	2101      	movs	r1, #1
 8002af0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	223e      	movs	r2, #62	@ 0x3e
 8002af6:	2101      	movs	r1, #1
 8002af8:	5499      	strb	r1, [r3, r2]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	223f      	movs	r2, #63	@ 0x3f
 8002afe:	2101      	movs	r1, #1
 8002b00:	5499      	strb	r1, [r3, r2]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2240      	movs	r2, #64	@ 0x40
 8002b06:	2101      	movs	r1, #1
 8002b08:	5499      	strb	r1, [r3, r2]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2241      	movs	r2, #65	@ 0x41
 8002b0e:	2101      	movs	r1, #1
 8002b10:	5499      	strb	r1, [r3, r2]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2242      	movs	r2, #66	@ 0x42
 8002b16:	2101      	movs	r1, #1
 8002b18:	5499      	strb	r1, [r3, r2]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2243      	movs	r2, #67	@ 0x43
 8002b1e:	2101      	movs	r1, #1
 8002b20:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2244      	movs	r2, #68	@ 0x44
 8002b26:	2101      	movs	r1, #1
 8002b28:	5499      	strb	r1, [r3, r2]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2245      	movs	r2, #69	@ 0x45
 8002b2e:	2101      	movs	r1, #1
 8002b30:	5499      	strb	r1, [r3, r2]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2246      	movs	r2, #70	@ 0x46
 8002b36:	2101      	movs	r1, #1
 8002b38:	5499      	strb	r1, [r3, r2]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2247      	movs	r2, #71	@ 0x47
 8002b3e:	2101      	movs	r1, #1
 8002b40:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	223d      	movs	r2, #61	@ 0x3d
 8002b46:	2101      	movs	r1, #1
 8002b48:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002b4a:	2300      	movs	r3, #0
}
 8002b4c:	0018      	movs	r0, r3
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	b002      	add	sp, #8
 8002b52:	bd80      	pop	{r7, pc}

08002b54 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b084      	sub	sp, #16
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	223d      	movs	r2, #61	@ 0x3d
 8002b60:	5c9b      	ldrb	r3, [r3, r2]
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	d001      	beq.n	8002b6c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	e037      	b.n	8002bdc <HAL_TIM_Base_Start_IT+0x88>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	223d      	movs	r2, #61	@ 0x3d
 8002b70:	2102      	movs	r1, #2
 8002b72:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	68da      	ldr	r2, [r3, #12]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	2101      	movs	r1, #1
 8002b80:	430a      	orrs	r2, r1
 8002b82:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a16      	ldr	r2, [pc, #88]	@ (8002be4 <HAL_TIM_Base_Start_IT+0x90>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d004      	beq.n	8002b98 <HAL_TIM_Base_Start_IT+0x44>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a15      	ldr	r2, [pc, #84]	@ (8002be8 <HAL_TIM_Base_Start_IT+0x94>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d116      	bne.n	8002bc6 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	4a13      	ldr	r2, [pc, #76]	@ (8002bec <HAL_TIM_Base_Start_IT+0x98>)
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	2b06      	cmp	r3, #6
 8002ba8:	d016      	beq.n	8002bd8 <HAL_TIM_Base_Start_IT+0x84>
 8002baa:	68fa      	ldr	r2, [r7, #12]
 8002bac:	2380      	movs	r3, #128	@ 0x80
 8002bae:	025b      	lsls	r3, r3, #9
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d011      	beq.n	8002bd8 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	2101      	movs	r1, #1
 8002bc0:	430a      	orrs	r2, r1
 8002bc2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bc4:	e008      	b.n	8002bd8 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	2101      	movs	r1, #1
 8002bd2:	430a      	orrs	r2, r1
 8002bd4:	601a      	str	r2, [r3, #0]
 8002bd6:	e000      	b.n	8002bda <HAL_TIM_Base_Start_IT+0x86>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bd8:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8002bda:	2300      	movs	r3, #0
}
 8002bdc:	0018      	movs	r0, r3
 8002bde:	46bd      	mov	sp, r7
 8002be0:	b004      	add	sp, #16
 8002be2:	bd80      	pop	{r7, pc}
 8002be4:	40012c00 	.word	0x40012c00
 8002be8:	40000400 	.word	0x40000400
 8002bec:	00010007 	.word	0x00010007

08002bf0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b082      	sub	sp, #8
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d101      	bne.n	8002c02 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e04a      	b.n	8002c98 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	223d      	movs	r2, #61	@ 0x3d
 8002c06:	5c9b      	ldrb	r3, [r3, r2]
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d107      	bne.n	8002c1e <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	223c      	movs	r2, #60	@ 0x3c
 8002c12:	2100      	movs	r1, #0
 8002c14:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	0018      	movs	r0, r3
 8002c1a:	f000 f841 	bl	8002ca0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	223d      	movs	r2, #61	@ 0x3d
 8002c22:	2102      	movs	r1, #2
 8002c24:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	3304      	adds	r3, #4
 8002c2e:	0019      	movs	r1, r3
 8002c30:	0010      	movs	r0, r2
 8002c32:	f000 fc13 	bl	800345c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2248      	movs	r2, #72	@ 0x48
 8002c3a:	2101      	movs	r1, #1
 8002c3c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	223e      	movs	r2, #62	@ 0x3e
 8002c42:	2101      	movs	r1, #1
 8002c44:	5499      	strb	r1, [r3, r2]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	223f      	movs	r2, #63	@ 0x3f
 8002c4a:	2101      	movs	r1, #1
 8002c4c:	5499      	strb	r1, [r3, r2]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2240      	movs	r2, #64	@ 0x40
 8002c52:	2101      	movs	r1, #1
 8002c54:	5499      	strb	r1, [r3, r2]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2241      	movs	r2, #65	@ 0x41
 8002c5a:	2101      	movs	r1, #1
 8002c5c:	5499      	strb	r1, [r3, r2]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2242      	movs	r2, #66	@ 0x42
 8002c62:	2101      	movs	r1, #1
 8002c64:	5499      	strb	r1, [r3, r2]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2243      	movs	r2, #67	@ 0x43
 8002c6a:	2101      	movs	r1, #1
 8002c6c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2244      	movs	r2, #68	@ 0x44
 8002c72:	2101      	movs	r1, #1
 8002c74:	5499      	strb	r1, [r3, r2]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2245      	movs	r2, #69	@ 0x45
 8002c7a:	2101      	movs	r1, #1
 8002c7c:	5499      	strb	r1, [r3, r2]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2246      	movs	r2, #70	@ 0x46
 8002c82:	2101      	movs	r1, #1
 8002c84:	5499      	strb	r1, [r3, r2]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2247      	movs	r2, #71	@ 0x47
 8002c8a:	2101      	movs	r1, #1
 8002c8c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	223d      	movs	r2, #61	@ 0x3d
 8002c92:	2101      	movs	r1, #1
 8002c94:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002c96:	2300      	movs	r3, #0
}
 8002c98:	0018      	movs	r0, r3
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	b002      	add	sp, #8
 8002c9e:	bd80      	pop	{r7, pc}

08002ca0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b082      	sub	sp, #8
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002ca8:	46c0      	nop			@ (mov r8, r8)
 8002caa:	46bd      	mov	sp, r7
 8002cac:	b002      	add	sp, #8
 8002cae:	bd80      	pop	{r7, pc}

08002cb0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b084      	sub	sp, #16
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
 8002cb8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d108      	bne.n	8002cd2 <HAL_TIM_PWM_Start+0x22>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	223e      	movs	r2, #62	@ 0x3e
 8002cc4:	5c9b      	ldrb	r3, [r3, r2]
 8002cc6:	b2db      	uxtb	r3, r3
 8002cc8:	3b01      	subs	r3, #1
 8002cca:	1e5a      	subs	r2, r3, #1
 8002ccc:	4193      	sbcs	r3, r2
 8002cce:	b2db      	uxtb	r3, r3
 8002cd0:	e037      	b.n	8002d42 <HAL_TIM_PWM_Start+0x92>
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	2b04      	cmp	r3, #4
 8002cd6:	d108      	bne.n	8002cea <HAL_TIM_PWM_Start+0x3a>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	223f      	movs	r2, #63	@ 0x3f
 8002cdc:	5c9b      	ldrb	r3, [r3, r2]
 8002cde:	b2db      	uxtb	r3, r3
 8002ce0:	3b01      	subs	r3, #1
 8002ce2:	1e5a      	subs	r2, r3, #1
 8002ce4:	4193      	sbcs	r3, r2
 8002ce6:	b2db      	uxtb	r3, r3
 8002ce8:	e02b      	b.n	8002d42 <HAL_TIM_PWM_Start+0x92>
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	2b08      	cmp	r3, #8
 8002cee:	d108      	bne.n	8002d02 <HAL_TIM_PWM_Start+0x52>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2240      	movs	r2, #64	@ 0x40
 8002cf4:	5c9b      	ldrb	r3, [r3, r2]
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	3b01      	subs	r3, #1
 8002cfa:	1e5a      	subs	r2, r3, #1
 8002cfc:	4193      	sbcs	r3, r2
 8002cfe:	b2db      	uxtb	r3, r3
 8002d00:	e01f      	b.n	8002d42 <HAL_TIM_PWM_Start+0x92>
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	2b0c      	cmp	r3, #12
 8002d06:	d108      	bne.n	8002d1a <HAL_TIM_PWM_Start+0x6a>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2241      	movs	r2, #65	@ 0x41
 8002d0c:	5c9b      	ldrb	r3, [r3, r2]
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	3b01      	subs	r3, #1
 8002d12:	1e5a      	subs	r2, r3, #1
 8002d14:	4193      	sbcs	r3, r2
 8002d16:	b2db      	uxtb	r3, r3
 8002d18:	e013      	b.n	8002d42 <HAL_TIM_PWM_Start+0x92>
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	2b10      	cmp	r3, #16
 8002d1e:	d108      	bne.n	8002d32 <HAL_TIM_PWM_Start+0x82>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2242      	movs	r2, #66	@ 0x42
 8002d24:	5c9b      	ldrb	r3, [r3, r2]
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	3b01      	subs	r3, #1
 8002d2a:	1e5a      	subs	r2, r3, #1
 8002d2c:	4193      	sbcs	r3, r2
 8002d2e:	b2db      	uxtb	r3, r3
 8002d30:	e007      	b.n	8002d42 <HAL_TIM_PWM_Start+0x92>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2243      	movs	r2, #67	@ 0x43
 8002d36:	5c9b      	ldrb	r3, [r3, r2]
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	3b01      	subs	r3, #1
 8002d3c:	1e5a      	subs	r2, r3, #1
 8002d3e:	4193      	sbcs	r3, r2
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d001      	beq.n	8002d4a <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e07b      	b.n	8002e42 <HAL_TIM_PWM_Start+0x192>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d104      	bne.n	8002d5a <HAL_TIM_PWM_Start+0xaa>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	223e      	movs	r2, #62	@ 0x3e
 8002d54:	2102      	movs	r1, #2
 8002d56:	5499      	strb	r1, [r3, r2]
 8002d58:	e023      	b.n	8002da2 <HAL_TIM_PWM_Start+0xf2>
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	2b04      	cmp	r3, #4
 8002d5e:	d104      	bne.n	8002d6a <HAL_TIM_PWM_Start+0xba>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	223f      	movs	r2, #63	@ 0x3f
 8002d64:	2102      	movs	r1, #2
 8002d66:	5499      	strb	r1, [r3, r2]
 8002d68:	e01b      	b.n	8002da2 <HAL_TIM_PWM_Start+0xf2>
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	2b08      	cmp	r3, #8
 8002d6e:	d104      	bne.n	8002d7a <HAL_TIM_PWM_Start+0xca>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2240      	movs	r2, #64	@ 0x40
 8002d74:	2102      	movs	r1, #2
 8002d76:	5499      	strb	r1, [r3, r2]
 8002d78:	e013      	b.n	8002da2 <HAL_TIM_PWM_Start+0xf2>
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	2b0c      	cmp	r3, #12
 8002d7e:	d104      	bne.n	8002d8a <HAL_TIM_PWM_Start+0xda>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2241      	movs	r2, #65	@ 0x41
 8002d84:	2102      	movs	r1, #2
 8002d86:	5499      	strb	r1, [r3, r2]
 8002d88:	e00b      	b.n	8002da2 <HAL_TIM_PWM_Start+0xf2>
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	2b10      	cmp	r3, #16
 8002d8e:	d104      	bne.n	8002d9a <HAL_TIM_PWM_Start+0xea>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2242      	movs	r2, #66	@ 0x42
 8002d94:	2102      	movs	r1, #2
 8002d96:	5499      	strb	r1, [r3, r2]
 8002d98:	e003      	b.n	8002da2 <HAL_TIM_PWM_Start+0xf2>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2243      	movs	r2, #67	@ 0x43
 8002d9e:	2102      	movs	r1, #2
 8002da0:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	6839      	ldr	r1, [r7, #0]
 8002da8:	2201      	movs	r2, #1
 8002daa:	0018      	movs	r0, r3
 8002dac:	f000 ff08 	bl	8003bc0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a25      	ldr	r2, [pc, #148]	@ (8002e4c <HAL_TIM_PWM_Start+0x19c>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d009      	beq.n	8002dce <HAL_TIM_PWM_Start+0x11e>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a24      	ldr	r2, [pc, #144]	@ (8002e50 <HAL_TIM_PWM_Start+0x1a0>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d004      	beq.n	8002dce <HAL_TIM_PWM_Start+0x11e>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a22      	ldr	r2, [pc, #136]	@ (8002e54 <HAL_TIM_PWM_Start+0x1a4>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d101      	bne.n	8002dd2 <HAL_TIM_PWM_Start+0x122>
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e000      	b.n	8002dd4 <HAL_TIM_PWM_Start+0x124>
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d008      	beq.n	8002dea <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	2180      	movs	r1, #128	@ 0x80
 8002de4:	0209      	lsls	r1, r1, #8
 8002de6:	430a      	orrs	r2, r1
 8002de8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a17      	ldr	r2, [pc, #92]	@ (8002e4c <HAL_TIM_PWM_Start+0x19c>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d004      	beq.n	8002dfe <HAL_TIM_PWM_Start+0x14e>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a17      	ldr	r2, [pc, #92]	@ (8002e58 <HAL_TIM_PWM_Start+0x1a8>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d116      	bne.n	8002e2c <HAL_TIM_PWM_Start+0x17c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	4a15      	ldr	r2, [pc, #84]	@ (8002e5c <HAL_TIM_PWM_Start+0x1ac>)
 8002e06:	4013      	ands	r3, r2
 8002e08:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2b06      	cmp	r3, #6
 8002e0e:	d016      	beq.n	8002e3e <HAL_TIM_PWM_Start+0x18e>
 8002e10:	68fa      	ldr	r2, [r7, #12]
 8002e12:	2380      	movs	r3, #128	@ 0x80
 8002e14:	025b      	lsls	r3, r3, #9
 8002e16:	429a      	cmp	r2, r3
 8002e18:	d011      	beq.n	8002e3e <HAL_TIM_PWM_Start+0x18e>
    {
      __HAL_TIM_ENABLE(htim);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	2101      	movs	r1, #1
 8002e26:	430a      	orrs	r2, r1
 8002e28:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e2a:	e008      	b.n	8002e3e <HAL_TIM_PWM_Start+0x18e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	2101      	movs	r1, #1
 8002e38:	430a      	orrs	r2, r1
 8002e3a:	601a      	str	r2, [r3, #0]
 8002e3c:	e000      	b.n	8002e40 <HAL_TIM_PWM_Start+0x190>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e3e:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8002e40:	2300      	movs	r3, #0
}
 8002e42:	0018      	movs	r0, r3
 8002e44:	46bd      	mov	sp, r7
 8002e46:	b004      	add	sp, #16
 8002e48:	bd80      	pop	{r7, pc}
 8002e4a:	46c0      	nop			@ (mov r8, r8)
 8002e4c:	40012c00 	.word	0x40012c00
 8002e50:	40014400 	.word	0x40014400
 8002e54:	40014800 	.word	0x40014800
 8002e58:	40000400 	.word	0x40000400
 8002e5c:	00010007 	.word	0x00010007

08002e60 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b084      	sub	sp, #16
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	68db      	ldr	r3, [r3, #12]
 8002e6e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	691b      	ldr	r3, [r3, #16]
 8002e76:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	2202      	movs	r2, #2
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	d021      	beq.n	8002ec4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2202      	movs	r2, #2
 8002e84:	4013      	ands	r3, r2
 8002e86:	d01d      	beq.n	8002ec4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	2203      	movs	r2, #3
 8002e8e:	4252      	negs	r2, r2
 8002e90:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2201      	movs	r2, #1
 8002e96:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	699b      	ldr	r3, [r3, #24]
 8002e9e:	2203      	movs	r2, #3
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	d004      	beq.n	8002eae <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	0018      	movs	r0, r3
 8002ea8:	f000 fac0 	bl	800342c <HAL_TIM_IC_CaptureCallback>
 8002eac:	e007      	b.n	8002ebe <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	0018      	movs	r0, r3
 8002eb2:	f000 fab3 	bl	800341c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	0018      	movs	r0, r3
 8002eba:	f000 fabf 	bl	800343c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	2204      	movs	r2, #4
 8002ec8:	4013      	ands	r3, r2
 8002eca:	d022      	beq.n	8002f12 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2204      	movs	r2, #4
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	d01e      	beq.n	8002f12 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	2205      	movs	r2, #5
 8002eda:	4252      	negs	r2, r2
 8002edc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2202      	movs	r2, #2
 8002ee2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	699a      	ldr	r2, [r3, #24]
 8002eea:	23c0      	movs	r3, #192	@ 0xc0
 8002eec:	009b      	lsls	r3, r3, #2
 8002eee:	4013      	ands	r3, r2
 8002ef0:	d004      	beq.n	8002efc <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	0018      	movs	r0, r3
 8002ef6:	f000 fa99 	bl	800342c <HAL_TIM_IC_CaptureCallback>
 8002efa:	e007      	b.n	8002f0c <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	0018      	movs	r0, r3
 8002f00:	f000 fa8c 	bl	800341c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	0018      	movs	r0, r3
 8002f08:	f000 fa98 	bl	800343c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	2208      	movs	r2, #8
 8002f16:	4013      	ands	r3, r2
 8002f18:	d021      	beq.n	8002f5e <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2208      	movs	r2, #8
 8002f1e:	4013      	ands	r3, r2
 8002f20:	d01d      	beq.n	8002f5e <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	2209      	movs	r2, #9
 8002f28:	4252      	negs	r2, r2
 8002f2a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2204      	movs	r2, #4
 8002f30:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	69db      	ldr	r3, [r3, #28]
 8002f38:	2203      	movs	r2, #3
 8002f3a:	4013      	ands	r3, r2
 8002f3c:	d004      	beq.n	8002f48 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	0018      	movs	r0, r3
 8002f42:	f000 fa73 	bl	800342c <HAL_TIM_IC_CaptureCallback>
 8002f46:	e007      	b.n	8002f58 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	0018      	movs	r0, r3
 8002f4c:	f000 fa66 	bl	800341c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	0018      	movs	r0, r3
 8002f54:	f000 fa72 	bl	800343c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	2210      	movs	r2, #16
 8002f62:	4013      	ands	r3, r2
 8002f64:	d022      	beq.n	8002fac <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	2210      	movs	r2, #16
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	d01e      	beq.n	8002fac <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	2211      	movs	r2, #17
 8002f74:	4252      	negs	r2, r2
 8002f76:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2208      	movs	r2, #8
 8002f7c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	69da      	ldr	r2, [r3, #28]
 8002f84:	23c0      	movs	r3, #192	@ 0xc0
 8002f86:	009b      	lsls	r3, r3, #2
 8002f88:	4013      	ands	r3, r2
 8002f8a:	d004      	beq.n	8002f96 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	0018      	movs	r0, r3
 8002f90:	f000 fa4c 	bl	800342c <HAL_TIM_IC_CaptureCallback>
 8002f94:	e007      	b.n	8002fa6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	0018      	movs	r0, r3
 8002f9a:	f000 fa3f 	bl	800341c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	0018      	movs	r0, r3
 8002fa2:	f000 fa4b 	bl	800343c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	2201      	movs	r2, #1
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	d00c      	beq.n	8002fce <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	4013      	ands	r3, r2
 8002fba:	d008      	beq.n	8002fce <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	2202      	movs	r2, #2
 8002fc2:	4252      	negs	r2, r2
 8002fc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	0018      	movs	r0, r3
 8002fca:	f7fd fa0f 	bl	80003ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	2280      	movs	r2, #128	@ 0x80
 8002fd2:	4013      	ands	r3, r2
 8002fd4:	d104      	bne.n	8002fe0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8002fd6:	68ba      	ldr	r2, [r7, #8]
 8002fd8:	2380      	movs	r3, #128	@ 0x80
 8002fda:	019b      	lsls	r3, r3, #6
 8002fdc:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002fde:	d00b      	beq.n	8002ff8 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2280      	movs	r2, #128	@ 0x80
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	d007      	beq.n	8002ff8 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a1e      	ldr	r2, [pc, #120]	@ (8003068 <HAL_TIM_IRQHandler+0x208>)
 8002fee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	0018      	movs	r0, r3
 8002ff4:	f000 ffa6 	bl	8003f44 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002ff8:	68ba      	ldr	r2, [r7, #8]
 8002ffa:	2380      	movs	r3, #128	@ 0x80
 8002ffc:	005b      	lsls	r3, r3, #1
 8002ffe:	4013      	ands	r3, r2
 8003000:	d00b      	beq.n	800301a <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2280      	movs	r2, #128	@ 0x80
 8003006:	4013      	ands	r3, r2
 8003008:	d007      	beq.n	800301a <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a17      	ldr	r2, [pc, #92]	@ (800306c <HAL_TIM_IRQHandler+0x20c>)
 8003010:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	0018      	movs	r0, r3
 8003016:	f000 ff9d 	bl	8003f54 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800301a:	68bb      	ldr	r3, [r7, #8]
 800301c:	2240      	movs	r2, #64	@ 0x40
 800301e:	4013      	ands	r3, r2
 8003020:	d00c      	beq.n	800303c <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2240      	movs	r2, #64	@ 0x40
 8003026:	4013      	ands	r3, r2
 8003028:	d008      	beq.n	800303c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	2241      	movs	r2, #65	@ 0x41
 8003030:	4252      	negs	r2, r2
 8003032:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	0018      	movs	r0, r3
 8003038:	f000 fa08 	bl	800344c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	2220      	movs	r2, #32
 8003040:	4013      	ands	r3, r2
 8003042:	d00c      	beq.n	800305e <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2220      	movs	r2, #32
 8003048:	4013      	ands	r3, r2
 800304a:	d008      	beq.n	800305e <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	2221      	movs	r2, #33	@ 0x21
 8003052:	4252      	negs	r2, r2
 8003054:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	0018      	movs	r0, r3
 800305a:	f000 ff6b 	bl	8003f34 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800305e:	46c0      	nop			@ (mov r8, r8)
 8003060:	46bd      	mov	sp, r7
 8003062:	b004      	add	sp, #16
 8003064:	bd80      	pop	{r7, pc}
 8003066:	46c0      	nop			@ (mov r8, r8)
 8003068:	ffffdf7f 	.word	0xffffdf7f
 800306c:	fffffeff 	.word	0xfffffeff

08003070 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b086      	sub	sp, #24
 8003074:	af00      	add	r7, sp, #0
 8003076:	60f8      	str	r0, [r7, #12]
 8003078:	60b9      	str	r1, [r7, #8]
 800307a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800307c:	2317      	movs	r3, #23
 800307e:	18fb      	adds	r3, r7, r3
 8003080:	2200      	movs	r2, #0
 8003082:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	223c      	movs	r2, #60	@ 0x3c
 8003088:	5c9b      	ldrb	r3, [r3, r2]
 800308a:	2b01      	cmp	r3, #1
 800308c:	d101      	bne.n	8003092 <HAL_TIM_PWM_ConfigChannel+0x22>
 800308e:	2302      	movs	r3, #2
 8003090:	e0e5      	b.n	800325e <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	223c      	movs	r2, #60	@ 0x3c
 8003096:	2101      	movs	r1, #1
 8003098:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2b14      	cmp	r3, #20
 800309e:	d900      	bls.n	80030a2 <HAL_TIM_PWM_ConfigChannel+0x32>
 80030a0:	e0d1      	b.n	8003246 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	009a      	lsls	r2, r3, #2
 80030a6:	4b70      	ldr	r3, [pc, #448]	@ (8003268 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 80030a8:	18d3      	adds	r3, r2, r3
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	68ba      	ldr	r2, [r7, #8]
 80030b4:	0011      	movs	r1, r2
 80030b6:	0018      	movs	r0, r3
 80030b8:	f000 fa4a 	bl	8003550 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	699a      	ldr	r2, [r3, #24]
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	2108      	movs	r1, #8
 80030c8:	430a      	orrs	r2, r1
 80030ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	699a      	ldr	r2, [r3, #24]
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	2104      	movs	r1, #4
 80030d8:	438a      	bics	r2, r1
 80030da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	6999      	ldr	r1, [r3, #24]
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	691a      	ldr	r2, [r3, #16]
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	430a      	orrs	r2, r1
 80030ec:	619a      	str	r2, [r3, #24]
      break;
 80030ee:	e0af      	b.n	8003250 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	68ba      	ldr	r2, [r7, #8]
 80030f6:	0011      	movs	r1, r2
 80030f8:	0018      	movs	r0, r3
 80030fa:	f000 faa9 	bl	8003650 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	699a      	ldr	r2, [r3, #24]
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	2180      	movs	r1, #128	@ 0x80
 800310a:	0109      	lsls	r1, r1, #4
 800310c:	430a      	orrs	r2, r1
 800310e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	699a      	ldr	r2, [r3, #24]
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4954      	ldr	r1, [pc, #336]	@ (800326c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800311c:	400a      	ands	r2, r1
 800311e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	6999      	ldr	r1, [r3, #24]
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	691b      	ldr	r3, [r3, #16]
 800312a:	021a      	lsls	r2, r3, #8
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	430a      	orrs	r2, r1
 8003132:	619a      	str	r2, [r3, #24]
      break;
 8003134:	e08c      	b.n	8003250 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	68ba      	ldr	r2, [r7, #8]
 800313c:	0011      	movs	r1, r2
 800313e:	0018      	movs	r0, r3
 8003140:	f000 fb04 	bl	800374c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	69da      	ldr	r2, [r3, #28]
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	2108      	movs	r1, #8
 8003150:	430a      	orrs	r2, r1
 8003152:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	69da      	ldr	r2, [r3, #28]
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	2104      	movs	r1, #4
 8003160:	438a      	bics	r2, r1
 8003162:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	69d9      	ldr	r1, [r3, #28]
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	691a      	ldr	r2, [r3, #16]
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	430a      	orrs	r2, r1
 8003174:	61da      	str	r2, [r3, #28]
      break;
 8003176:	e06b      	b.n	8003250 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	68ba      	ldr	r2, [r7, #8]
 800317e:	0011      	movs	r1, r2
 8003180:	0018      	movs	r0, r3
 8003182:	f000 fb65 	bl	8003850 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	69da      	ldr	r2, [r3, #28]
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	2180      	movs	r1, #128	@ 0x80
 8003192:	0109      	lsls	r1, r1, #4
 8003194:	430a      	orrs	r2, r1
 8003196:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	69da      	ldr	r2, [r3, #28]
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4932      	ldr	r1, [pc, #200]	@ (800326c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80031a4:	400a      	ands	r2, r1
 80031a6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	69d9      	ldr	r1, [r3, #28]
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	691b      	ldr	r3, [r3, #16]
 80031b2:	021a      	lsls	r2, r3, #8
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	430a      	orrs	r2, r1
 80031ba:	61da      	str	r2, [r3, #28]
      break;
 80031bc:	e048      	b.n	8003250 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	68ba      	ldr	r2, [r7, #8]
 80031c4:	0011      	movs	r1, r2
 80031c6:	0018      	movs	r0, r3
 80031c8:	f000 fba6 	bl	8003918 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	2108      	movs	r1, #8
 80031d8:	430a      	orrs	r2, r1
 80031da:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	2104      	movs	r1, #4
 80031e8:	438a      	bics	r2, r1
 80031ea:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	691a      	ldr	r2, [r3, #16]
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	430a      	orrs	r2, r1
 80031fc:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80031fe:	e027      	b.n	8003250 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	68ba      	ldr	r2, [r7, #8]
 8003206:	0011      	movs	r1, r2
 8003208:	0018      	movs	r0, r3
 800320a:	f000 fbdf 	bl	80039cc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	2180      	movs	r1, #128	@ 0x80
 800321a:	0109      	lsls	r1, r1, #4
 800321c:	430a      	orrs	r2, r1
 800321e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4910      	ldr	r1, [pc, #64]	@ (800326c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800322c:	400a      	ands	r2, r1
 800322e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	691b      	ldr	r3, [r3, #16]
 800323a:	021a      	lsls	r2, r3, #8
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	430a      	orrs	r2, r1
 8003242:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003244:	e004      	b.n	8003250 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8003246:	2317      	movs	r3, #23
 8003248:	18fb      	adds	r3, r7, r3
 800324a:	2201      	movs	r2, #1
 800324c:	701a      	strb	r2, [r3, #0]
      break;
 800324e:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	223c      	movs	r2, #60	@ 0x3c
 8003254:	2100      	movs	r1, #0
 8003256:	5499      	strb	r1, [r3, r2]

  return status;
 8003258:	2317      	movs	r3, #23
 800325a:	18fb      	adds	r3, r7, r3
 800325c:	781b      	ldrb	r3, [r3, #0]
}
 800325e:	0018      	movs	r0, r3
 8003260:	46bd      	mov	sp, r7
 8003262:	b006      	add	sp, #24
 8003264:	bd80      	pop	{r7, pc}
 8003266:	46c0      	nop			@ (mov r8, r8)
 8003268:	08004f50 	.word	0x08004f50
 800326c:	fffffbff 	.word	0xfffffbff

08003270 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b084      	sub	sp, #16
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
 8003278:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800327a:	230f      	movs	r3, #15
 800327c:	18fb      	adds	r3, r7, r3
 800327e:	2200      	movs	r2, #0
 8003280:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	223c      	movs	r2, #60	@ 0x3c
 8003286:	5c9b      	ldrb	r3, [r3, r2]
 8003288:	2b01      	cmp	r3, #1
 800328a:	d101      	bne.n	8003290 <HAL_TIM_ConfigClockSource+0x20>
 800328c:	2302      	movs	r3, #2
 800328e:	e0bc      	b.n	800340a <HAL_TIM_ConfigClockSource+0x19a>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	223c      	movs	r2, #60	@ 0x3c
 8003294:	2101      	movs	r1, #1
 8003296:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	223d      	movs	r2, #61	@ 0x3d
 800329c:	2102      	movs	r1, #2
 800329e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	4a5a      	ldr	r2, [pc, #360]	@ (8003414 <HAL_TIM_ConfigClockSource+0x1a4>)
 80032ac:	4013      	ands	r3, r2
 80032ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	4a59      	ldr	r2, [pc, #356]	@ (8003418 <HAL_TIM_ConfigClockSource+0x1a8>)
 80032b4:	4013      	ands	r3, r2
 80032b6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	68ba      	ldr	r2, [r7, #8]
 80032be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	2280      	movs	r2, #128	@ 0x80
 80032c6:	0192      	lsls	r2, r2, #6
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d040      	beq.n	800334e <HAL_TIM_ConfigClockSource+0xde>
 80032cc:	2280      	movs	r2, #128	@ 0x80
 80032ce:	0192      	lsls	r2, r2, #6
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d900      	bls.n	80032d6 <HAL_TIM_ConfigClockSource+0x66>
 80032d4:	e088      	b.n	80033e8 <HAL_TIM_ConfigClockSource+0x178>
 80032d6:	2280      	movs	r2, #128	@ 0x80
 80032d8:	0152      	lsls	r2, r2, #5
 80032da:	4293      	cmp	r3, r2
 80032dc:	d100      	bne.n	80032e0 <HAL_TIM_ConfigClockSource+0x70>
 80032de:	e088      	b.n	80033f2 <HAL_TIM_ConfigClockSource+0x182>
 80032e0:	2280      	movs	r2, #128	@ 0x80
 80032e2:	0152      	lsls	r2, r2, #5
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d900      	bls.n	80032ea <HAL_TIM_ConfigClockSource+0x7a>
 80032e8:	e07e      	b.n	80033e8 <HAL_TIM_ConfigClockSource+0x178>
 80032ea:	2b70      	cmp	r3, #112	@ 0x70
 80032ec:	d018      	beq.n	8003320 <HAL_TIM_ConfigClockSource+0xb0>
 80032ee:	d900      	bls.n	80032f2 <HAL_TIM_ConfigClockSource+0x82>
 80032f0:	e07a      	b.n	80033e8 <HAL_TIM_ConfigClockSource+0x178>
 80032f2:	2b60      	cmp	r3, #96	@ 0x60
 80032f4:	d04f      	beq.n	8003396 <HAL_TIM_ConfigClockSource+0x126>
 80032f6:	d900      	bls.n	80032fa <HAL_TIM_ConfigClockSource+0x8a>
 80032f8:	e076      	b.n	80033e8 <HAL_TIM_ConfigClockSource+0x178>
 80032fa:	2b50      	cmp	r3, #80	@ 0x50
 80032fc:	d03b      	beq.n	8003376 <HAL_TIM_ConfigClockSource+0x106>
 80032fe:	d900      	bls.n	8003302 <HAL_TIM_ConfigClockSource+0x92>
 8003300:	e072      	b.n	80033e8 <HAL_TIM_ConfigClockSource+0x178>
 8003302:	2b40      	cmp	r3, #64	@ 0x40
 8003304:	d057      	beq.n	80033b6 <HAL_TIM_ConfigClockSource+0x146>
 8003306:	d900      	bls.n	800330a <HAL_TIM_ConfigClockSource+0x9a>
 8003308:	e06e      	b.n	80033e8 <HAL_TIM_ConfigClockSource+0x178>
 800330a:	2b30      	cmp	r3, #48	@ 0x30
 800330c:	d063      	beq.n	80033d6 <HAL_TIM_ConfigClockSource+0x166>
 800330e:	d86b      	bhi.n	80033e8 <HAL_TIM_ConfigClockSource+0x178>
 8003310:	2b20      	cmp	r3, #32
 8003312:	d060      	beq.n	80033d6 <HAL_TIM_ConfigClockSource+0x166>
 8003314:	d868      	bhi.n	80033e8 <HAL_TIM_ConfigClockSource+0x178>
 8003316:	2b00      	cmp	r3, #0
 8003318:	d05d      	beq.n	80033d6 <HAL_TIM_ConfigClockSource+0x166>
 800331a:	2b10      	cmp	r3, #16
 800331c:	d05b      	beq.n	80033d6 <HAL_TIM_ConfigClockSource+0x166>
 800331e:	e063      	b.n	80033e8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003330:	f000 fc26 	bl	8003b80 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	2277      	movs	r2, #119	@ 0x77
 8003340:	4313      	orrs	r3, r2
 8003342:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	68ba      	ldr	r2, [r7, #8]
 800334a:	609a      	str	r2, [r3, #8]
      break;
 800334c:	e052      	b.n	80033f4 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800335e:	f000 fc0f 	bl	8003b80 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	689a      	ldr	r2, [r3, #8]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	2180      	movs	r1, #128	@ 0x80
 800336e:	01c9      	lsls	r1, r1, #7
 8003370:	430a      	orrs	r2, r1
 8003372:	609a      	str	r2, [r3, #8]
      break;
 8003374:	e03e      	b.n	80033f4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003382:	001a      	movs	r2, r3
 8003384:	f000 fb80 	bl	8003a88 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	2150      	movs	r1, #80	@ 0x50
 800338e:	0018      	movs	r0, r3
 8003390:	f000 fbda 	bl	8003b48 <TIM_ITRx_SetConfig>
      break;
 8003394:	e02e      	b.n	80033f4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80033a2:	001a      	movs	r2, r3
 80033a4:	f000 fb9e 	bl	8003ae4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	2160      	movs	r1, #96	@ 0x60
 80033ae:	0018      	movs	r0, r3
 80033b0:	f000 fbca 	bl	8003b48 <TIM_ITRx_SetConfig>
      break;
 80033b4:	e01e      	b.n	80033f4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80033c2:	001a      	movs	r2, r3
 80033c4:	f000 fb60 	bl	8003a88 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	2140      	movs	r1, #64	@ 0x40
 80033ce:	0018      	movs	r0, r3
 80033d0:	f000 fbba 	bl	8003b48 <TIM_ITRx_SetConfig>
      break;
 80033d4:	e00e      	b.n	80033f4 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	0019      	movs	r1, r3
 80033e0:	0010      	movs	r0, r2
 80033e2:	f000 fbb1 	bl	8003b48 <TIM_ITRx_SetConfig>
      break;
 80033e6:	e005      	b.n	80033f4 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80033e8:	230f      	movs	r3, #15
 80033ea:	18fb      	adds	r3, r7, r3
 80033ec:	2201      	movs	r2, #1
 80033ee:	701a      	strb	r2, [r3, #0]
      break;
 80033f0:	e000      	b.n	80033f4 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80033f2:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	223d      	movs	r2, #61	@ 0x3d
 80033f8:	2101      	movs	r1, #1
 80033fa:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	223c      	movs	r2, #60	@ 0x3c
 8003400:	2100      	movs	r1, #0
 8003402:	5499      	strb	r1, [r3, r2]

  return status;
 8003404:	230f      	movs	r3, #15
 8003406:	18fb      	adds	r3, r7, r3
 8003408:	781b      	ldrb	r3, [r3, #0]
}
 800340a:	0018      	movs	r0, r3
 800340c:	46bd      	mov	sp, r7
 800340e:	b004      	add	sp, #16
 8003410:	bd80      	pop	{r7, pc}
 8003412:	46c0      	nop			@ (mov r8, r8)
 8003414:	ffceff88 	.word	0xffceff88
 8003418:	ffff00ff 	.word	0xffff00ff

0800341c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b082      	sub	sp, #8
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003424:	46c0      	nop			@ (mov r8, r8)
 8003426:	46bd      	mov	sp, r7
 8003428:	b002      	add	sp, #8
 800342a:	bd80      	pop	{r7, pc}

0800342c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b082      	sub	sp, #8
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003434:	46c0      	nop			@ (mov r8, r8)
 8003436:	46bd      	mov	sp, r7
 8003438:	b002      	add	sp, #8
 800343a:	bd80      	pop	{r7, pc}

0800343c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b082      	sub	sp, #8
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003444:	46c0      	nop			@ (mov r8, r8)
 8003446:	46bd      	mov	sp, r7
 8003448:	b002      	add	sp, #8
 800344a:	bd80      	pop	{r7, pc}

0800344c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b082      	sub	sp, #8
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003454:	46c0      	nop			@ (mov r8, r8)
 8003456:	46bd      	mov	sp, r7
 8003458:	b002      	add	sp, #8
 800345a:	bd80      	pop	{r7, pc}

0800345c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b084      	sub	sp, #16
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
 8003464:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	4a32      	ldr	r2, [pc, #200]	@ (8003538 <TIM_Base_SetConfig+0xdc>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d003      	beq.n	800347c <TIM_Base_SetConfig+0x20>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	4a31      	ldr	r2, [pc, #196]	@ (800353c <TIM_Base_SetConfig+0xe0>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d108      	bne.n	800348e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2270      	movs	r2, #112	@ 0x70
 8003480:	4393      	bics	r3, r2
 8003482:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	68fa      	ldr	r2, [r7, #12]
 800348a:	4313      	orrs	r3, r2
 800348c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	4a29      	ldr	r2, [pc, #164]	@ (8003538 <TIM_Base_SetConfig+0xdc>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d00f      	beq.n	80034b6 <TIM_Base_SetConfig+0x5a>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	4a28      	ldr	r2, [pc, #160]	@ (800353c <TIM_Base_SetConfig+0xe0>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d00b      	beq.n	80034b6 <TIM_Base_SetConfig+0x5a>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	4a27      	ldr	r2, [pc, #156]	@ (8003540 <TIM_Base_SetConfig+0xe4>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d007      	beq.n	80034b6 <TIM_Base_SetConfig+0x5a>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	4a26      	ldr	r2, [pc, #152]	@ (8003544 <TIM_Base_SetConfig+0xe8>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d003      	beq.n	80034b6 <TIM_Base_SetConfig+0x5a>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	4a25      	ldr	r2, [pc, #148]	@ (8003548 <TIM_Base_SetConfig+0xec>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d108      	bne.n	80034c8 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	4a24      	ldr	r2, [pc, #144]	@ (800354c <TIM_Base_SetConfig+0xf0>)
 80034ba:	4013      	ands	r3, r2
 80034bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	68db      	ldr	r3, [r3, #12]
 80034c2:	68fa      	ldr	r2, [r7, #12]
 80034c4:	4313      	orrs	r3, r2
 80034c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2280      	movs	r2, #128	@ 0x80
 80034cc:	4393      	bics	r3, r2
 80034ce:	001a      	movs	r2, r3
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	695b      	ldr	r3, [r3, #20]
 80034d4:	4313      	orrs	r3, r2
 80034d6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	68fa      	ldr	r2, [r7, #12]
 80034dc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	689a      	ldr	r2, [r3, #8]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	4a11      	ldr	r2, [pc, #68]	@ (8003538 <TIM_Base_SetConfig+0xdc>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d007      	beq.n	8003506 <TIM_Base_SetConfig+0xaa>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	4a12      	ldr	r2, [pc, #72]	@ (8003544 <TIM_Base_SetConfig+0xe8>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d003      	beq.n	8003506 <TIM_Base_SetConfig+0xaa>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	4a11      	ldr	r2, [pc, #68]	@ (8003548 <TIM_Base_SetConfig+0xec>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d103      	bne.n	800350e <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	691a      	ldr	r2, [r3, #16]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2201      	movs	r2, #1
 8003512:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	691b      	ldr	r3, [r3, #16]
 8003518:	2201      	movs	r2, #1
 800351a:	4013      	ands	r3, r2
 800351c:	2b01      	cmp	r3, #1
 800351e:	d106      	bne.n	800352e <TIM_Base_SetConfig+0xd2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	691b      	ldr	r3, [r3, #16]
 8003524:	2201      	movs	r2, #1
 8003526:	4393      	bics	r3, r2
 8003528:	001a      	movs	r2, r3
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	611a      	str	r2, [r3, #16]
  }
}
 800352e:	46c0      	nop			@ (mov r8, r8)
 8003530:	46bd      	mov	sp, r7
 8003532:	b004      	add	sp, #16
 8003534:	bd80      	pop	{r7, pc}
 8003536:	46c0      	nop			@ (mov r8, r8)
 8003538:	40012c00 	.word	0x40012c00
 800353c:	40000400 	.word	0x40000400
 8003540:	40002000 	.word	0x40002000
 8003544:	40014400 	.word	0x40014400
 8003548:	40014800 	.word	0x40014800
 800354c:	fffffcff 	.word	0xfffffcff

08003550 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b086      	sub	sp, #24
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
 8003558:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6a1b      	ldr	r3, [r3, #32]
 800355e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6a1b      	ldr	r3, [r3, #32]
 8003564:	2201      	movs	r2, #1
 8003566:	4393      	bics	r3, r2
 8003568:	001a      	movs	r2, r3
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	699b      	ldr	r3, [r3, #24]
 8003578:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	4a2e      	ldr	r2, [pc, #184]	@ (8003638 <TIM_OC1_SetConfig+0xe8>)
 800357e:	4013      	ands	r3, r2
 8003580:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2203      	movs	r2, #3
 8003586:	4393      	bics	r3, r2
 8003588:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	68fa      	ldr	r2, [r7, #12]
 8003590:	4313      	orrs	r3, r2
 8003592:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	2202      	movs	r2, #2
 8003598:	4393      	bics	r3, r2
 800359a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	697a      	ldr	r2, [r7, #20]
 80035a2:	4313      	orrs	r3, r2
 80035a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	4a24      	ldr	r2, [pc, #144]	@ (800363c <TIM_OC1_SetConfig+0xec>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d007      	beq.n	80035be <TIM_OC1_SetConfig+0x6e>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	4a23      	ldr	r2, [pc, #140]	@ (8003640 <TIM_OC1_SetConfig+0xf0>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d003      	beq.n	80035be <TIM_OC1_SetConfig+0x6e>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	4a22      	ldr	r2, [pc, #136]	@ (8003644 <TIM_OC1_SetConfig+0xf4>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d10c      	bne.n	80035d8 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	2208      	movs	r2, #8
 80035c2:	4393      	bics	r3, r2
 80035c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	68db      	ldr	r3, [r3, #12]
 80035ca:	697a      	ldr	r2, [r7, #20]
 80035cc:	4313      	orrs	r3, r2
 80035ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	2204      	movs	r2, #4
 80035d4:	4393      	bics	r3, r2
 80035d6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	4a18      	ldr	r2, [pc, #96]	@ (800363c <TIM_OC1_SetConfig+0xec>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d007      	beq.n	80035f0 <TIM_OC1_SetConfig+0xa0>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	4a17      	ldr	r2, [pc, #92]	@ (8003640 <TIM_OC1_SetConfig+0xf0>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d003      	beq.n	80035f0 <TIM_OC1_SetConfig+0xa0>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	4a16      	ldr	r2, [pc, #88]	@ (8003644 <TIM_OC1_SetConfig+0xf4>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d111      	bne.n	8003614 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	4a15      	ldr	r2, [pc, #84]	@ (8003648 <TIM_OC1_SetConfig+0xf8>)
 80035f4:	4013      	ands	r3, r2
 80035f6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	4a14      	ldr	r2, [pc, #80]	@ (800364c <TIM_OC1_SetConfig+0xfc>)
 80035fc:	4013      	ands	r3, r2
 80035fe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	695b      	ldr	r3, [r3, #20]
 8003604:	693a      	ldr	r2, [r7, #16]
 8003606:	4313      	orrs	r3, r2
 8003608:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	699b      	ldr	r3, [r3, #24]
 800360e:	693a      	ldr	r2, [r7, #16]
 8003610:	4313      	orrs	r3, r2
 8003612:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	693a      	ldr	r2, [r7, #16]
 8003618:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	68fa      	ldr	r2, [r7, #12]
 800361e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	685a      	ldr	r2, [r3, #4]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	697a      	ldr	r2, [r7, #20]
 800362c:	621a      	str	r2, [r3, #32]
}
 800362e:	46c0      	nop			@ (mov r8, r8)
 8003630:	46bd      	mov	sp, r7
 8003632:	b006      	add	sp, #24
 8003634:	bd80      	pop	{r7, pc}
 8003636:	46c0      	nop			@ (mov r8, r8)
 8003638:	fffeff8f 	.word	0xfffeff8f
 800363c:	40012c00 	.word	0x40012c00
 8003640:	40014400 	.word	0x40014400
 8003644:	40014800 	.word	0x40014800
 8003648:	fffffeff 	.word	0xfffffeff
 800364c:	fffffdff 	.word	0xfffffdff

08003650 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b086      	sub	sp, #24
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
 8003658:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6a1b      	ldr	r3, [r3, #32]
 800365e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6a1b      	ldr	r3, [r3, #32]
 8003664:	2210      	movs	r2, #16
 8003666:	4393      	bics	r3, r2
 8003668:	001a      	movs	r2, r3
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	699b      	ldr	r3, [r3, #24]
 8003678:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	4a2c      	ldr	r2, [pc, #176]	@ (8003730 <TIM_OC2_SetConfig+0xe0>)
 800367e:	4013      	ands	r3, r2
 8003680:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	4a2b      	ldr	r2, [pc, #172]	@ (8003734 <TIM_OC2_SetConfig+0xe4>)
 8003686:	4013      	ands	r3, r2
 8003688:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	021b      	lsls	r3, r3, #8
 8003690:	68fa      	ldr	r2, [r7, #12]
 8003692:	4313      	orrs	r3, r2
 8003694:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	2220      	movs	r2, #32
 800369a:	4393      	bics	r3, r2
 800369c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	011b      	lsls	r3, r3, #4
 80036a4:	697a      	ldr	r2, [r7, #20]
 80036a6:	4313      	orrs	r3, r2
 80036a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	4a22      	ldr	r2, [pc, #136]	@ (8003738 <TIM_OC2_SetConfig+0xe8>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d10d      	bne.n	80036ce <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	2280      	movs	r2, #128	@ 0x80
 80036b6:	4393      	bics	r3, r2
 80036b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	68db      	ldr	r3, [r3, #12]
 80036be:	011b      	lsls	r3, r3, #4
 80036c0:	697a      	ldr	r2, [r7, #20]
 80036c2:	4313      	orrs	r3, r2
 80036c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	2240      	movs	r2, #64	@ 0x40
 80036ca:	4393      	bics	r3, r2
 80036cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	4a19      	ldr	r2, [pc, #100]	@ (8003738 <TIM_OC2_SetConfig+0xe8>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d007      	beq.n	80036e6 <TIM_OC2_SetConfig+0x96>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	4a18      	ldr	r2, [pc, #96]	@ (800373c <TIM_OC2_SetConfig+0xec>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d003      	beq.n	80036e6 <TIM_OC2_SetConfig+0x96>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	4a17      	ldr	r2, [pc, #92]	@ (8003740 <TIM_OC2_SetConfig+0xf0>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d113      	bne.n	800370e <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	4a16      	ldr	r2, [pc, #88]	@ (8003744 <TIM_OC2_SetConfig+0xf4>)
 80036ea:	4013      	ands	r3, r2
 80036ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	4a15      	ldr	r2, [pc, #84]	@ (8003748 <TIM_OC2_SetConfig+0xf8>)
 80036f2:	4013      	ands	r3, r2
 80036f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	695b      	ldr	r3, [r3, #20]
 80036fa:	009b      	lsls	r3, r3, #2
 80036fc:	693a      	ldr	r2, [r7, #16]
 80036fe:	4313      	orrs	r3, r2
 8003700:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	699b      	ldr	r3, [r3, #24]
 8003706:	009b      	lsls	r3, r3, #2
 8003708:	693a      	ldr	r2, [r7, #16]
 800370a:	4313      	orrs	r3, r2
 800370c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	693a      	ldr	r2, [r7, #16]
 8003712:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	68fa      	ldr	r2, [r7, #12]
 8003718:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	685a      	ldr	r2, [r3, #4]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	697a      	ldr	r2, [r7, #20]
 8003726:	621a      	str	r2, [r3, #32]
}
 8003728:	46c0      	nop			@ (mov r8, r8)
 800372a:	46bd      	mov	sp, r7
 800372c:	b006      	add	sp, #24
 800372e:	bd80      	pop	{r7, pc}
 8003730:	feff8fff 	.word	0xfeff8fff
 8003734:	fffffcff 	.word	0xfffffcff
 8003738:	40012c00 	.word	0x40012c00
 800373c:	40014400 	.word	0x40014400
 8003740:	40014800 	.word	0x40014800
 8003744:	fffffbff 	.word	0xfffffbff
 8003748:	fffff7ff 	.word	0xfffff7ff

0800374c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b086      	sub	sp, #24
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
 8003754:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6a1b      	ldr	r3, [r3, #32]
 800375a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6a1b      	ldr	r3, [r3, #32]
 8003760:	4a31      	ldr	r2, [pc, #196]	@ (8003828 <TIM_OC3_SetConfig+0xdc>)
 8003762:	401a      	ands	r2, r3
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	69db      	ldr	r3, [r3, #28]
 8003772:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	4a2d      	ldr	r2, [pc, #180]	@ (800382c <TIM_OC3_SetConfig+0xe0>)
 8003778:	4013      	ands	r3, r2
 800377a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	2203      	movs	r2, #3
 8003780:	4393      	bics	r3, r2
 8003782:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	68fa      	ldr	r2, [r7, #12]
 800378a:	4313      	orrs	r3, r2
 800378c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	4a27      	ldr	r2, [pc, #156]	@ (8003830 <TIM_OC3_SetConfig+0xe4>)
 8003792:	4013      	ands	r3, r2
 8003794:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	021b      	lsls	r3, r3, #8
 800379c:	697a      	ldr	r2, [r7, #20]
 800379e:	4313      	orrs	r3, r2
 80037a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	4a23      	ldr	r2, [pc, #140]	@ (8003834 <TIM_OC3_SetConfig+0xe8>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d10d      	bne.n	80037c6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	4a22      	ldr	r2, [pc, #136]	@ (8003838 <TIM_OC3_SetConfig+0xec>)
 80037ae:	4013      	ands	r3, r2
 80037b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	68db      	ldr	r3, [r3, #12]
 80037b6:	021b      	lsls	r3, r3, #8
 80037b8:	697a      	ldr	r2, [r7, #20]
 80037ba:	4313      	orrs	r3, r2
 80037bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	4a1e      	ldr	r2, [pc, #120]	@ (800383c <TIM_OC3_SetConfig+0xf0>)
 80037c2:	4013      	ands	r3, r2
 80037c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	4a1a      	ldr	r2, [pc, #104]	@ (8003834 <TIM_OC3_SetConfig+0xe8>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d007      	beq.n	80037de <TIM_OC3_SetConfig+0x92>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	4a1b      	ldr	r2, [pc, #108]	@ (8003840 <TIM_OC3_SetConfig+0xf4>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d003      	beq.n	80037de <TIM_OC3_SetConfig+0x92>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	4a1a      	ldr	r2, [pc, #104]	@ (8003844 <TIM_OC3_SetConfig+0xf8>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d113      	bne.n	8003806 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	4a19      	ldr	r2, [pc, #100]	@ (8003848 <TIM_OC3_SetConfig+0xfc>)
 80037e2:	4013      	ands	r3, r2
 80037e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	4a18      	ldr	r2, [pc, #96]	@ (800384c <TIM_OC3_SetConfig+0x100>)
 80037ea:	4013      	ands	r3, r2
 80037ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	695b      	ldr	r3, [r3, #20]
 80037f2:	011b      	lsls	r3, r3, #4
 80037f4:	693a      	ldr	r2, [r7, #16]
 80037f6:	4313      	orrs	r3, r2
 80037f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	699b      	ldr	r3, [r3, #24]
 80037fe:	011b      	lsls	r3, r3, #4
 8003800:	693a      	ldr	r2, [r7, #16]
 8003802:	4313      	orrs	r3, r2
 8003804:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	693a      	ldr	r2, [r7, #16]
 800380a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	68fa      	ldr	r2, [r7, #12]
 8003810:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	685a      	ldr	r2, [r3, #4]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	697a      	ldr	r2, [r7, #20]
 800381e:	621a      	str	r2, [r3, #32]
}
 8003820:	46c0      	nop			@ (mov r8, r8)
 8003822:	46bd      	mov	sp, r7
 8003824:	b006      	add	sp, #24
 8003826:	bd80      	pop	{r7, pc}
 8003828:	fffffeff 	.word	0xfffffeff
 800382c:	fffeff8f 	.word	0xfffeff8f
 8003830:	fffffdff 	.word	0xfffffdff
 8003834:	40012c00 	.word	0x40012c00
 8003838:	fffff7ff 	.word	0xfffff7ff
 800383c:	fffffbff 	.word	0xfffffbff
 8003840:	40014400 	.word	0x40014400
 8003844:	40014800 	.word	0x40014800
 8003848:	ffffefff 	.word	0xffffefff
 800384c:	ffffdfff 	.word	0xffffdfff

08003850 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b086      	sub	sp, #24
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
 8003858:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6a1b      	ldr	r3, [r3, #32]
 800385e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6a1b      	ldr	r3, [r3, #32]
 8003864:	4a24      	ldr	r2, [pc, #144]	@ (80038f8 <TIM_OC4_SetConfig+0xa8>)
 8003866:	401a      	ands	r2, r3
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	69db      	ldr	r3, [r3, #28]
 8003876:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	4a20      	ldr	r2, [pc, #128]	@ (80038fc <TIM_OC4_SetConfig+0xac>)
 800387c:	4013      	ands	r3, r2
 800387e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	4a1f      	ldr	r2, [pc, #124]	@ (8003900 <TIM_OC4_SetConfig+0xb0>)
 8003884:	4013      	ands	r3, r2
 8003886:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	021b      	lsls	r3, r3, #8
 800388e:	68fa      	ldr	r2, [r7, #12]
 8003890:	4313      	orrs	r3, r2
 8003892:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	4a1b      	ldr	r2, [pc, #108]	@ (8003904 <TIM_OC4_SetConfig+0xb4>)
 8003898:	4013      	ands	r3, r2
 800389a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	689b      	ldr	r3, [r3, #8]
 80038a0:	031b      	lsls	r3, r3, #12
 80038a2:	693a      	ldr	r2, [r7, #16]
 80038a4:	4313      	orrs	r3, r2
 80038a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	4a17      	ldr	r2, [pc, #92]	@ (8003908 <TIM_OC4_SetConfig+0xb8>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d007      	beq.n	80038c0 <TIM_OC4_SetConfig+0x70>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	4a16      	ldr	r2, [pc, #88]	@ (800390c <TIM_OC4_SetConfig+0xbc>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d003      	beq.n	80038c0 <TIM_OC4_SetConfig+0x70>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	4a15      	ldr	r2, [pc, #84]	@ (8003910 <TIM_OC4_SetConfig+0xc0>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d109      	bne.n	80038d4 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	4a14      	ldr	r2, [pc, #80]	@ (8003914 <TIM_OC4_SetConfig+0xc4>)
 80038c4:	4013      	ands	r3, r2
 80038c6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	695b      	ldr	r3, [r3, #20]
 80038cc:	019b      	lsls	r3, r3, #6
 80038ce:	697a      	ldr	r2, [r7, #20]
 80038d0:	4313      	orrs	r3, r2
 80038d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	697a      	ldr	r2, [r7, #20]
 80038d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	68fa      	ldr	r2, [r7, #12]
 80038de:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	685a      	ldr	r2, [r3, #4]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	693a      	ldr	r2, [r7, #16]
 80038ec:	621a      	str	r2, [r3, #32]
}
 80038ee:	46c0      	nop			@ (mov r8, r8)
 80038f0:	46bd      	mov	sp, r7
 80038f2:	b006      	add	sp, #24
 80038f4:	bd80      	pop	{r7, pc}
 80038f6:	46c0      	nop			@ (mov r8, r8)
 80038f8:	ffffefff 	.word	0xffffefff
 80038fc:	feff8fff 	.word	0xfeff8fff
 8003900:	fffffcff 	.word	0xfffffcff
 8003904:	ffffdfff 	.word	0xffffdfff
 8003908:	40012c00 	.word	0x40012c00
 800390c:	40014400 	.word	0x40014400
 8003910:	40014800 	.word	0x40014800
 8003914:	ffffbfff 	.word	0xffffbfff

08003918 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b086      	sub	sp, #24
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
 8003920:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6a1b      	ldr	r3, [r3, #32]
 8003926:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6a1b      	ldr	r3, [r3, #32]
 800392c:	4a21      	ldr	r2, [pc, #132]	@ (80039b4 <TIM_OC5_SetConfig+0x9c>)
 800392e:	401a      	ands	r2, r3
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800393e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	4a1d      	ldr	r2, [pc, #116]	@ (80039b8 <TIM_OC5_SetConfig+0xa0>)
 8003944:	4013      	ands	r3, r2
 8003946:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	68fa      	ldr	r2, [r7, #12]
 800394e:	4313      	orrs	r3, r2
 8003950:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	4a19      	ldr	r2, [pc, #100]	@ (80039bc <TIM_OC5_SetConfig+0xa4>)
 8003956:	4013      	ands	r3, r2
 8003958:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	041b      	lsls	r3, r3, #16
 8003960:	693a      	ldr	r2, [r7, #16]
 8003962:	4313      	orrs	r3, r2
 8003964:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	4a15      	ldr	r2, [pc, #84]	@ (80039c0 <TIM_OC5_SetConfig+0xa8>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d007      	beq.n	800397e <TIM_OC5_SetConfig+0x66>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	4a14      	ldr	r2, [pc, #80]	@ (80039c4 <TIM_OC5_SetConfig+0xac>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d003      	beq.n	800397e <TIM_OC5_SetConfig+0x66>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	4a13      	ldr	r2, [pc, #76]	@ (80039c8 <TIM_OC5_SetConfig+0xb0>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d109      	bne.n	8003992 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	4a0c      	ldr	r2, [pc, #48]	@ (80039b4 <TIM_OC5_SetConfig+0x9c>)
 8003982:	4013      	ands	r3, r2
 8003984:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	695b      	ldr	r3, [r3, #20]
 800398a:	021b      	lsls	r3, r3, #8
 800398c:	697a      	ldr	r2, [r7, #20]
 800398e:	4313      	orrs	r3, r2
 8003990:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	697a      	ldr	r2, [r7, #20]
 8003996:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	68fa      	ldr	r2, [r7, #12]
 800399c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	685a      	ldr	r2, [r3, #4]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	693a      	ldr	r2, [r7, #16]
 80039aa:	621a      	str	r2, [r3, #32]
}
 80039ac:	46c0      	nop			@ (mov r8, r8)
 80039ae:	46bd      	mov	sp, r7
 80039b0:	b006      	add	sp, #24
 80039b2:	bd80      	pop	{r7, pc}
 80039b4:	fffeffff 	.word	0xfffeffff
 80039b8:	fffeff8f 	.word	0xfffeff8f
 80039bc:	fffdffff 	.word	0xfffdffff
 80039c0:	40012c00 	.word	0x40012c00
 80039c4:	40014400 	.word	0x40014400
 80039c8:	40014800 	.word	0x40014800

080039cc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b086      	sub	sp, #24
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
 80039d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6a1b      	ldr	r3, [r3, #32]
 80039da:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6a1b      	ldr	r3, [r3, #32]
 80039e0:	4a22      	ldr	r2, [pc, #136]	@ (8003a6c <TIM_OC6_SetConfig+0xa0>)
 80039e2:	401a      	ands	r2, r3
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	4a1e      	ldr	r2, [pc, #120]	@ (8003a70 <TIM_OC6_SetConfig+0xa4>)
 80039f8:	4013      	ands	r3, r2
 80039fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	021b      	lsls	r3, r3, #8
 8003a02:	68fa      	ldr	r2, [r7, #12]
 8003a04:	4313      	orrs	r3, r2
 8003a06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	4a1a      	ldr	r2, [pc, #104]	@ (8003a74 <TIM_OC6_SetConfig+0xa8>)
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	051b      	lsls	r3, r3, #20
 8003a16:	693a      	ldr	r2, [r7, #16]
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	4a16      	ldr	r2, [pc, #88]	@ (8003a78 <TIM_OC6_SetConfig+0xac>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d007      	beq.n	8003a34 <TIM_OC6_SetConfig+0x68>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	4a15      	ldr	r2, [pc, #84]	@ (8003a7c <TIM_OC6_SetConfig+0xb0>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d003      	beq.n	8003a34 <TIM_OC6_SetConfig+0x68>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	4a14      	ldr	r2, [pc, #80]	@ (8003a80 <TIM_OC6_SetConfig+0xb4>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d109      	bne.n	8003a48 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	4a13      	ldr	r2, [pc, #76]	@ (8003a84 <TIM_OC6_SetConfig+0xb8>)
 8003a38:	4013      	ands	r3, r2
 8003a3a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	695b      	ldr	r3, [r3, #20]
 8003a40:	029b      	lsls	r3, r3, #10
 8003a42:	697a      	ldr	r2, [r7, #20]
 8003a44:	4313      	orrs	r3, r2
 8003a46:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	697a      	ldr	r2, [r7, #20]
 8003a4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	68fa      	ldr	r2, [r7, #12]
 8003a52:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	685a      	ldr	r2, [r3, #4]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	693a      	ldr	r2, [r7, #16]
 8003a60:	621a      	str	r2, [r3, #32]
}
 8003a62:	46c0      	nop			@ (mov r8, r8)
 8003a64:	46bd      	mov	sp, r7
 8003a66:	b006      	add	sp, #24
 8003a68:	bd80      	pop	{r7, pc}
 8003a6a:	46c0      	nop			@ (mov r8, r8)
 8003a6c:	ffefffff 	.word	0xffefffff
 8003a70:	feff8fff 	.word	0xfeff8fff
 8003a74:	ffdfffff 	.word	0xffdfffff
 8003a78:	40012c00 	.word	0x40012c00
 8003a7c:	40014400 	.word	0x40014400
 8003a80:	40014800 	.word	0x40014800
 8003a84:	fffbffff 	.word	0xfffbffff

08003a88 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b086      	sub	sp, #24
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	60f8      	str	r0, [r7, #12]
 8003a90:	60b9      	str	r1, [r7, #8]
 8003a92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	6a1b      	ldr	r3, [r3, #32]
 8003a98:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	6a1b      	ldr	r3, [r3, #32]
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	4393      	bics	r3, r2
 8003aa2:	001a      	movs	r2, r3
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	699b      	ldr	r3, [r3, #24]
 8003aac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	22f0      	movs	r2, #240	@ 0xf0
 8003ab2:	4393      	bics	r3, r2
 8003ab4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	011b      	lsls	r3, r3, #4
 8003aba:	693a      	ldr	r2, [r7, #16]
 8003abc:	4313      	orrs	r3, r2
 8003abe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	220a      	movs	r2, #10
 8003ac4:	4393      	bics	r3, r2
 8003ac6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003ac8:	697a      	ldr	r2, [r7, #20]
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	4313      	orrs	r3, r2
 8003ace:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	693a      	ldr	r2, [r7, #16]
 8003ad4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	697a      	ldr	r2, [r7, #20]
 8003ada:	621a      	str	r2, [r3, #32]
}
 8003adc:	46c0      	nop			@ (mov r8, r8)
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	b006      	add	sp, #24
 8003ae2:	bd80      	pop	{r7, pc}

08003ae4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b086      	sub	sp, #24
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	60f8      	str	r0, [r7, #12]
 8003aec:	60b9      	str	r1, [r7, #8]
 8003aee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	6a1b      	ldr	r3, [r3, #32]
 8003af4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	6a1b      	ldr	r3, [r3, #32]
 8003afa:	2210      	movs	r2, #16
 8003afc:	4393      	bics	r3, r2
 8003afe:	001a      	movs	r2, r3
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	699b      	ldr	r3, [r3, #24]
 8003b08:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	4a0d      	ldr	r2, [pc, #52]	@ (8003b44 <TIM_TI2_ConfigInputStage+0x60>)
 8003b0e:	4013      	ands	r3, r2
 8003b10:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	031b      	lsls	r3, r3, #12
 8003b16:	693a      	ldr	r2, [r7, #16]
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	22a0      	movs	r2, #160	@ 0xa0
 8003b20:	4393      	bics	r3, r2
 8003b22:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	011b      	lsls	r3, r3, #4
 8003b28:	697a      	ldr	r2, [r7, #20]
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	693a      	ldr	r2, [r7, #16]
 8003b32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	697a      	ldr	r2, [r7, #20]
 8003b38:	621a      	str	r2, [r3, #32]
}
 8003b3a:	46c0      	nop			@ (mov r8, r8)
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	b006      	add	sp, #24
 8003b40:	bd80      	pop	{r7, pc}
 8003b42:	46c0      	nop			@ (mov r8, r8)
 8003b44:	ffff0fff 	.word	0xffff0fff

08003b48 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b084      	sub	sp, #16
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
 8003b50:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	4a08      	ldr	r2, [pc, #32]	@ (8003b7c <TIM_ITRx_SetConfig+0x34>)
 8003b5c:	4013      	ands	r3, r2
 8003b5e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003b60:	683a      	ldr	r2, [r7, #0]
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	4313      	orrs	r3, r2
 8003b66:	2207      	movs	r2, #7
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	68fa      	ldr	r2, [r7, #12]
 8003b70:	609a      	str	r2, [r3, #8]
}
 8003b72:	46c0      	nop			@ (mov r8, r8)
 8003b74:	46bd      	mov	sp, r7
 8003b76:	b004      	add	sp, #16
 8003b78:	bd80      	pop	{r7, pc}
 8003b7a:	46c0      	nop			@ (mov r8, r8)
 8003b7c:	ffcfff8f 	.word	0xffcfff8f

08003b80 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b086      	sub	sp, #24
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	60f8      	str	r0, [r7, #12]
 8003b88:	60b9      	str	r1, [r7, #8]
 8003b8a:	607a      	str	r2, [r7, #4]
 8003b8c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	4a09      	ldr	r2, [pc, #36]	@ (8003bbc <TIM_ETR_SetConfig+0x3c>)
 8003b98:	4013      	ands	r3, r2
 8003b9a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	021a      	lsls	r2, r3, #8
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	431a      	orrs	r2, r3
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	697a      	ldr	r2, [r7, #20]
 8003baa:	4313      	orrs	r3, r2
 8003bac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	697a      	ldr	r2, [r7, #20]
 8003bb2:	609a      	str	r2, [r3, #8]
}
 8003bb4:	46c0      	nop			@ (mov r8, r8)
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	b006      	add	sp, #24
 8003bba:	bd80      	pop	{r7, pc}
 8003bbc:	ffff00ff 	.word	0xffff00ff

08003bc0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b086      	sub	sp, #24
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	60f8      	str	r0, [r7, #12]
 8003bc8:	60b9      	str	r1, [r7, #8]
 8003bca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	221f      	movs	r2, #31
 8003bd0:	4013      	ands	r3, r2
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	409a      	lsls	r2, r3
 8003bd6:	0013      	movs	r3, r2
 8003bd8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	6a1b      	ldr	r3, [r3, #32]
 8003bde:	697a      	ldr	r2, [r7, #20]
 8003be0:	43d2      	mvns	r2, r2
 8003be2:	401a      	ands	r2, r3
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	6a1a      	ldr	r2, [r3, #32]
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	211f      	movs	r1, #31
 8003bf0:	400b      	ands	r3, r1
 8003bf2:	6879      	ldr	r1, [r7, #4]
 8003bf4:	4099      	lsls	r1, r3
 8003bf6:	000b      	movs	r3, r1
 8003bf8:	431a      	orrs	r2, r3
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	621a      	str	r2, [r3, #32]
}
 8003bfe:	46c0      	nop			@ (mov r8, r8)
 8003c00:	46bd      	mov	sp, r7
 8003c02:	b006      	add	sp, #24
 8003c04:	bd80      	pop	{r7, pc}
	...

08003c08 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b084      	sub	sp, #16
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
 8003c10:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d108      	bne.n	8003c2a <HAL_TIMEx_PWMN_Start+0x22>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2244      	movs	r2, #68	@ 0x44
 8003c1c:	5c9b      	ldrb	r3, [r3, r2]
 8003c1e:	b2db      	uxtb	r3, r3
 8003c20:	3b01      	subs	r3, #1
 8003c22:	1e5a      	subs	r2, r3, #1
 8003c24:	4193      	sbcs	r3, r2
 8003c26:	b2db      	uxtb	r3, r3
 8003c28:	e01f      	b.n	8003c6a <HAL_TIMEx_PWMN_Start+0x62>
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	2b04      	cmp	r3, #4
 8003c2e:	d108      	bne.n	8003c42 <HAL_TIMEx_PWMN_Start+0x3a>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2245      	movs	r2, #69	@ 0x45
 8003c34:	5c9b      	ldrb	r3, [r3, r2]
 8003c36:	b2db      	uxtb	r3, r3
 8003c38:	3b01      	subs	r3, #1
 8003c3a:	1e5a      	subs	r2, r3, #1
 8003c3c:	4193      	sbcs	r3, r2
 8003c3e:	b2db      	uxtb	r3, r3
 8003c40:	e013      	b.n	8003c6a <HAL_TIMEx_PWMN_Start+0x62>
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	2b08      	cmp	r3, #8
 8003c46:	d108      	bne.n	8003c5a <HAL_TIMEx_PWMN_Start+0x52>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2246      	movs	r2, #70	@ 0x46
 8003c4c:	5c9b      	ldrb	r3, [r3, r2]
 8003c4e:	b2db      	uxtb	r3, r3
 8003c50:	3b01      	subs	r3, #1
 8003c52:	1e5a      	subs	r2, r3, #1
 8003c54:	4193      	sbcs	r3, r2
 8003c56:	b2db      	uxtb	r3, r3
 8003c58:	e007      	b.n	8003c6a <HAL_TIMEx_PWMN_Start+0x62>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2247      	movs	r2, #71	@ 0x47
 8003c5e:	5c9b      	ldrb	r3, [r3, r2]
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	3b01      	subs	r3, #1
 8003c64:	1e5a      	subs	r2, r3, #1
 8003c66:	4193      	sbcs	r3, r2
 8003c68:	b2db      	uxtb	r3, r3
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d001      	beq.n	8003c72 <HAL_TIMEx_PWMN_Start+0x6a>
  {
    return HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e057      	b.n	8003d22 <HAL_TIMEx_PWMN_Start+0x11a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d104      	bne.n	8003c82 <HAL_TIMEx_PWMN_Start+0x7a>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2244      	movs	r2, #68	@ 0x44
 8003c7c:	2102      	movs	r1, #2
 8003c7e:	5499      	strb	r1, [r3, r2]
 8003c80:	e013      	b.n	8003caa <HAL_TIMEx_PWMN_Start+0xa2>
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	2b04      	cmp	r3, #4
 8003c86:	d104      	bne.n	8003c92 <HAL_TIMEx_PWMN_Start+0x8a>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2245      	movs	r2, #69	@ 0x45
 8003c8c:	2102      	movs	r1, #2
 8003c8e:	5499      	strb	r1, [r3, r2]
 8003c90:	e00b      	b.n	8003caa <HAL_TIMEx_PWMN_Start+0xa2>
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	2b08      	cmp	r3, #8
 8003c96:	d104      	bne.n	8003ca2 <HAL_TIMEx_PWMN_Start+0x9a>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2246      	movs	r2, #70	@ 0x46
 8003c9c:	2102      	movs	r1, #2
 8003c9e:	5499      	strb	r1, [r3, r2]
 8003ca0:	e003      	b.n	8003caa <HAL_TIMEx_PWMN_Start+0xa2>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2247      	movs	r2, #71	@ 0x47
 8003ca6:	2102      	movs	r1, #2
 8003ca8:	5499      	strb	r1, [r3, r2]

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	6839      	ldr	r1, [r7, #0]
 8003cb0:	2204      	movs	r2, #4
 8003cb2:	0018      	movs	r0, r3
 8003cb4:	f000 f956 	bl	8003f64 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	2180      	movs	r1, #128	@ 0x80
 8003cc4:	0209      	lsls	r1, r1, #8
 8003cc6:	430a      	orrs	r2, r1
 8003cc8:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a17      	ldr	r2, [pc, #92]	@ (8003d2c <HAL_TIMEx_PWMN_Start+0x124>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d004      	beq.n	8003cde <HAL_TIMEx_PWMN_Start+0xd6>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a15      	ldr	r2, [pc, #84]	@ (8003d30 <HAL_TIMEx_PWMN_Start+0x128>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d116      	bne.n	8003d0c <HAL_TIMEx_PWMN_Start+0x104>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	4a13      	ldr	r2, [pc, #76]	@ (8003d34 <HAL_TIMEx_PWMN_Start+0x12c>)
 8003ce6:	4013      	ands	r3, r2
 8003ce8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	2b06      	cmp	r3, #6
 8003cee:	d016      	beq.n	8003d1e <HAL_TIMEx_PWMN_Start+0x116>
 8003cf0:	68fa      	ldr	r2, [r7, #12]
 8003cf2:	2380      	movs	r3, #128	@ 0x80
 8003cf4:	025b      	lsls	r3, r3, #9
 8003cf6:	429a      	cmp	r2, r3
 8003cf8:	d011      	beq.n	8003d1e <HAL_TIMEx_PWMN_Start+0x116>
    {
      __HAL_TIM_ENABLE(htim);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	681a      	ldr	r2, [r3, #0]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	2101      	movs	r1, #1
 8003d06:	430a      	orrs	r2, r1
 8003d08:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d0a:	e008      	b.n	8003d1e <HAL_TIMEx_PWMN_Start+0x116>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	681a      	ldr	r2, [r3, #0]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	2101      	movs	r1, #1
 8003d18:	430a      	orrs	r2, r1
 8003d1a:	601a      	str	r2, [r3, #0]
 8003d1c:	e000      	b.n	8003d20 <HAL_TIMEx_PWMN_Start+0x118>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d1e:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8003d20:	2300      	movs	r3, #0
}
 8003d22:	0018      	movs	r0, r3
 8003d24:	46bd      	mov	sp, r7
 8003d26:	b004      	add	sp, #16
 8003d28:	bd80      	pop	{r7, pc}
 8003d2a:	46c0      	nop			@ (mov r8, r8)
 8003d2c:	40012c00 	.word	0x40012c00
 8003d30:	40000400 	.word	0x40000400
 8003d34:	00010007 	.word	0x00010007

08003d38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b084      	sub	sp, #16
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
 8003d40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	223c      	movs	r2, #60	@ 0x3c
 8003d46:	5c9b      	ldrb	r3, [r3, r2]
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	d101      	bne.n	8003d50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003d4c:	2302      	movs	r3, #2
 8003d4e:	e04a      	b.n	8003de6 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	223c      	movs	r2, #60	@ 0x3c
 8003d54:	2101      	movs	r1, #1
 8003d56:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	223d      	movs	r2, #61	@ 0x3d
 8003d5c:	2102      	movs	r1, #2
 8003d5e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a1e      	ldr	r2, [pc, #120]	@ (8003df0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d108      	bne.n	8003d8c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	4a1d      	ldr	r2, [pc, #116]	@ (8003df4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8003d7e:	4013      	ands	r3, r2
 8003d80:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	68fa      	ldr	r2, [r7, #12]
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	2270      	movs	r2, #112	@ 0x70
 8003d90:	4393      	bics	r3, r2
 8003d92:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	68fa      	ldr	r2, [r7, #12]
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	68fa      	ldr	r2, [r7, #12]
 8003da4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a11      	ldr	r2, [pc, #68]	@ (8003df0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d004      	beq.n	8003dba <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a10      	ldr	r2, [pc, #64]	@ (8003df8 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d10c      	bne.n	8003dd4 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	2280      	movs	r2, #128	@ 0x80
 8003dbe:	4393      	bics	r3, r2
 8003dc0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	68ba      	ldr	r2, [r7, #8]
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	68ba      	ldr	r2, [r7, #8]
 8003dd2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	223d      	movs	r2, #61	@ 0x3d
 8003dd8:	2101      	movs	r1, #1
 8003dda:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	223c      	movs	r2, #60	@ 0x3c
 8003de0:	2100      	movs	r1, #0
 8003de2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003de4:	2300      	movs	r3, #0
}
 8003de6:	0018      	movs	r0, r3
 8003de8:	46bd      	mov	sp, r7
 8003dea:	b004      	add	sp, #16
 8003dec:	bd80      	pop	{r7, pc}
 8003dee:	46c0      	nop			@ (mov r8, r8)
 8003df0:	40012c00 	.word	0x40012c00
 8003df4:	ff0fffff 	.word	0xff0fffff
 8003df8:	40000400 	.word	0x40000400

08003dfc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b084      	sub	sp, #16
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
 8003e04:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003e06:	2300      	movs	r3, #0
 8003e08:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	223c      	movs	r2, #60	@ 0x3c
 8003e0e:	5c9b      	ldrb	r3, [r3, r2]
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	d101      	bne.n	8003e18 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003e14:	2302      	movs	r3, #2
 8003e16:	e06f      	b.n	8003ef8 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	223c      	movs	r2, #60	@ 0x3c
 8003e1c:	2101      	movs	r1, #1
 8003e1e:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	22ff      	movs	r2, #255	@ 0xff
 8003e24:	4393      	bics	r3, r2
 8003e26:	001a      	movs	r2, r3
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	68db      	ldr	r3, [r3, #12]
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	4a33      	ldr	r2, [pc, #204]	@ (8003f00 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 8003e34:	401a      	ands	r2, r3
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	4a30      	ldr	r2, [pc, #192]	@ (8003f04 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 8003e42:	401a      	ands	r2, r3
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	4a2e      	ldr	r2, [pc, #184]	@ (8003f08 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 8003e50:	401a      	ands	r2, r3
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4313      	orrs	r3, r2
 8003e58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	4a2b      	ldr	r2, [pc, #172]	@ (8003f0c <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8003e5e:	401a      	ands	r2, r3
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	691b      	ldr	r3, [r3, #16]
 8003e64:	4313      	orrs	r3, r2
 8003e66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	4a29      	ldr	r2, [pc, #164]	@ (8003f10 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8003e6c:	401a      	ands	r2, r3
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	695b      	ldr	r3, [r3, #20]
 8003e72:	4313      	orrs	r3, r2
 8003e74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	4a26      	ldr	r2, [pc, #152]	@ (8003f14 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8003e7a:	401a      	ands	r2, r3
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e80:	4313      	orrs	r3, r2
 8003e82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	4a24      	ldr	r2, [pc, #144]	@ (8003f18 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8003e88:	401a      	ands	r2, r3
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	699b      	ldr	r3, [r3, #24]
 8003e8e:	041b      	lsls	r3, r3, #16
 8003e90:	4313      	orrs	r3, r2
 8003e92:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	4a21      	ldr	r2, [pc, #132]	@ (8003f1c <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8003e98:	401a      	ands	r2, r3
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	69db      	ldr	r3, [r3, #28]
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a1e      	ldr	r2, [pc, #120]	@ (8003f20 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d11c      	bne.n	8003ee6 <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	4a1d      	ldr	r2, [pc, #116]	@ (8003f24 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8003eb0:	401a      	ands	r2, r3
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003eb6:	051b      	lsls	r3, r3, #20
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	4a1a      	ldr	r2, [pc, #104]	@ (8003f28 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8003ec0:	401a      	ands	r2, r3
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	6a1b      	ldr	r3, [r3, #32]
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	4a17      	ldr	r2, [pc, #92]	@ (8003f2c <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8003ece:	401a      	ands	r2, r3
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	4a15      	ldr	r2, [pc, #84]	@ (8003f30 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8003edc:	401a      	ands	r2, r3
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	68fa      	ldr	r2, [r7, #12]
 8003eec:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	223c      	movs	r2, #60	@ 0x3c
 8003ef2:	2100      	movs	r1, #0
 8003ef4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003ef6:	2300      	movs	r3, #0
}
 8003ef8:	0018      	movs	r0, r3
 8003efa:	46bd      	mov	sp, r7
 8003efc:	b004      	add	sp, #16
 8003efe:	bd80      	pop	{r7, pc}
 8003f00:	fffffcff 	.word	0xfffffcff
 8003f04:	fffffbff 	.word	0xfffffbff
 8003f08:	fffff7ff 	.word	0xfffff7ff
 8003f0c:	ffffefff 	.word	0xffffefff
 8003f10:	ffffdfff 	.word	0xffffdfff
 8003f14:	ffffbfff 	.word	0xffffbfff
 8003f18:	fff0ffff 	.word	0xfff0ffff
 8003f1c:	efffffff 	.word	0xefffffff
 8003f20:	40012c00 	.word	0x40012c00
 8003f24:	ff0fffff 	.word	0xff0fffff
 8003f28:	feffffff 	.word	0xfeffffff
 8003f2c:	fdffffff 	.word	0xfdffffff
 8003f30:	dfffffff 	.word	0xdfffffff

08003f34 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b082      	sub	sp, #8
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003f3c:	46c0      	nop			@ (mov r8, r8)
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	b002      	add	sp, #8
 8003f42:	bd80      	pop	{r7, pc}

08003f44 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b082      	sub	sp, #8
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003f4c:	46c0      	nop			@ (mov r8, r8)
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	b002      	add	sp, #8
 8003f52:	bd80      	pop	{r7, pc}

08003f54 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b082      	sub	sp, #8
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003f5c:	46c0      	nop			@ (mov r8, r8)
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	b002      	add	sp, #8
 8003f62:	bd80      	pop	{r7, pc}

08003f64 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b086      	sub	sp, #24
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	60f8      	str	r0, [r7, #12]
 8003f6c:	60b9      	str	r1, [r7, #8]
 8003f6e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	220f      	movs	r2, #15
 8003f74:	4013      	ands	r3, r2
 8003f76:	2204      	movs	r2, #4
 8003f78:	409a      	lsls	r2, r3
 8003f7a:	0013      	movs	r3, r2
 8003f7c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	6a1b      	ldr	r3, [r3, #32]
 8003f82:	697a      	ldr	r2, [r7, #20]
 8003f84:	43d2      	mvns	r2, r2
 8003f86:	401a      	ands	r2, r3
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	6a1a      	ldr	r2, [r3, #32]
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	210f      	movs	r1, #15
 8003f94:	400b      	ands	r3, r1
 8003f96:	6879      	ldr	r1, [r7, #4]
 8003f98:	4099      	lsls	r1, r3
 8003f9a:	000b      	movs	r3, r1
 8003f9c:	431a      	orrs	r2, r3
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	621a      	str	r2, [r3, #32]
}
 8003fa2:	46c0      	nop			@ (mov r8, r8)
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	b006      	add	sp, #24
 8003fa8:	bd80      	pop	{r7, pc}
	...

08003fac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b082      	sub	sp, #8
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d101      	bne.n	8003fbe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e046      	b.n	800404c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2288      	movs	r2, #136	@ 0x88
 8003fc2:	589b      	ldr	r3, [r3, r2]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d107      	bne.n	8003fd8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2284      	movs	r2, #132	@ 0x84
 8003fcc:	2100      	movs	r1, #0
 8003fce:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	0018      	movs	r0, r3
 8003fd4:	f7fd f864 	bl	80010a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2288      	movs	r2, #136	@ 0x88
 8003fdc:	2124      	movs	r1, #36	@ 0x24
 8003fde:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	2101      	movs	r1, #1
 8003fec:	438a      	bics	r2, r1
 8003fee:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d003      	beq.n	8004000 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	0018      	movs	r0, r3
 8003ffc:	f000 fa10 	bl	8004420 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	0018      	movs	r0, r3
 8004004:	f000 f8a2 	bl	800414c <UART_SetConfig>
 8004008:	0003      	movs	r3, r0
 800400a:	2b01      	cmp	r3, #1
 800400c:	d101      	bne.n	8004012 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	e01c      	b.n	800404c <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	685a      	ldr	r2, [r3, #4]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	490d      	ldr	r1, [pc, #52]	@ (8004054 <HAL_UART_Init+0xa8>)
 800401e:	400a      	ands	r2, r1
 8004020:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	689a      	ldr	r2, [r3, #8]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	212a      	movs	r1, #42	@ 0x2a
 800402e:	438a      	bics	r2, r1
 8004030:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	2101      	movs	r1, #1
 800403e:	430a      	orrs	r2, r1
 8004040:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	0018      	movs	r0, r3
 8004046:	f000 fa9f 	bl	8004588 <UART_CheckIdleState>
 800404a:	0003      	movs	r3, r0
}
 800404c:	0018      	movs	r0, r3
 800404e:	46bd      	mov	sp, r7
 8004050:	b002      	add	sp, #8
 8004052:	bd80      	pop	{r7, pc}
 8004054:	ffffb7ff 	.word	0xffffb7ff

08004058 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b088      	sub	sp, #32
 800405c:	af00      	add	r7, sp, #0
 800405e:	60f8      	str	r0, [r7, #12]
 8004060:	60b9      	str	r1, [r7, #8]
 8004062:	1dbb      	adds	r3, r7, #6
 8004064:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	228c      	movs	r2, #140	@ 0x8c
 800406a:	589b      	ldr	r3, [r3, r2]
 800406c:	2b20      	cmp	r3, #32
 800406e:	d145      	bne.n	80040fc <HAL_UART_Receive_DMA+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d003      	beq.n	800407e <HAL_UART_Receive_DMA+0x26>
 8004076:	1dbb      	adds	r3, r7, #6
 8004078:	881b      	ldrh	r3, [r3, #0]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d101      	bne.n	8004082 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	e03d      	b.n	80040fe <HAL_UART_Receive_DMA+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	689a      	ldr	r2, [r3, #8]
 8004086:	2380      	movs	r3, #128	@ 0x80
 8004088:	015b      	lsls	r3, r3, #5
 800408a:	429a      	cmp	r2, r3
 800408c:	d109      	bne.n	80040a2 <HAL_UART_Receive_DMA+0x4a>
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	691b      	ldr	r3, [r3, #16]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d105      	bne.n	80040a2 <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	2201      	movs	r2, #1
 800409a:	4013      	ands	r3, r2
 800409c:	d001      	beq.n	80040a2 <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	e02d      	b.n	80040fe <HAL_UART_Receive_DMA+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	2200      	movs	r2, #0
 80040a6:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	685a      	ldr	r2, [r3, #4]
 80040ae:	2380      	movs	r3, #128	@ 0x80
 80040b0:	041b      	lsls	r3, r3, #16
 80040b2:	4013      	ands	r3, r2
 80040b4:	d019      	beq.n	80040ea <HAL_UART_Receive_DMA+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040b6:	f3ef 8310 	mrs	r3, PRIMASK
 80040ba:	613b      	str	r3, [r7, #16]
  return(result);
 80040bc:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80040be:	61fb      	str	r3, [r7, #28]
 80040c0:	2301      	movs	r3, #1
 80040c2:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	f383 8810 	msr	PRIMASK, r3
}
 80040ca:	46c0      	nop			@ (mov r8, r8)
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	681a      	ldr	r2, [r3, #0]
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	2180      	movs	r1, #128	@ 0x80
 80040d8:	04c9      	lsls	r1, r1, #19
 80040da:	430a      	orrs	r2, r1
 80040dc:	601a      	str	r2, [r3, #0]
 80040de:	69fb      	ldr	r3, [r7, #28]
 80040e0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040e2:	69bb      	ldr	r3, [r7, #24]
 80040e4:	f383 8810 	msr	PRIMASK, r3
}
 80040e8:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80040ea:	1dbb      	adds	r3, r7, #6
 80040ec:	881a      	ldrh	r2, [r3, #0]
 80040ee:	68b9      	ldr	r1, [r7, #8]
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	0018      	movs	r0, r3
 80040f4:	f000 fb62 	bl	80047bc <UART_Start_Receive_DMA>
 80040f8:	0003      	movs	r3, r0
 80040fa:	e000      	b.n	80040fe <HAL_UART_Receive_DMA+0xa6>
  }
  else
  {
    return HAL_BUSY;
 80040fc:	2302      	movs	r3, #2
  }
}
 80040fe:	0018      	movs	r0, r3
 8004100:	46bd      	mov	sp, r7
 8004102:	b008      	add	sp, #32
 8004104:	bd80      	pop	{r7, pc}

08004106 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004106:	b580      	push	{r7, lr}
 8004108:	b082      	sub	sp, #8
 800410a:	af00      	add	r7, sp, #0
 800410c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800410e:	46c0      	nop			@ (mov r8, r8)
 8004110:	46bd      	mov	sp, r7
 8004112:	b002      	add	sp, #8
 8004114:	bd80      	pop	{r7, pc}

08004116 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004116:	b580      	push	{r7, lr}
 8004118:	b082      	sub	sp, #8
 800411a:	af00      	add	r7, sp, #0
 800411c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800411e:	46c0      	nop			@ (mov r8, r8)
 8004120:	46bd      	mov	sp, r7
 8004122:	b002      	add	sp, #8
 8004124:	bd80      	pop	{r7, pc}

08004126 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004126:	b580      	push	{r7, lr}
 8004128:	b082      	sub	sp, #8
 800412a:	af00      	add	r7, sp, #0
 800412c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800412e:	46c0      	nop			@ (mov r8, r8)
 8004130:	46bd      	mov	sp, r7
 8004132:	b002      	add	sp, #8
 8004134:	bd80      	pop	{r7, pc}

08004136 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004136:	b580      	push	{r7, lr}
 8004138:	b082      	sub	sp, #8
 800413a:	af00      	add	r7, sp, #0
 800413c:	6078      	str	r0, [r7, #4]
 800413e:	000a      	movs	r2, r1
 8004140:	1cbb      	adds	r3, r7, #2
 8004142:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004144:	46c0      	nop			@ (mov r8, r8)
 8004146:	46bd      	mov	sp, r7
 8004148:	b002      	add	sp, #8
 800414a:	bd80      	pop	{r7, pc}

0800414c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b088      	sub	sp, #32
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004154:	231a      	movs	r3, #26
 8004156:	18fb      	adds	r3, r7, r3
 8004158:	2200      	movs	r2, #0
 800415a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	689a      	ldr	r2, [r3, #8]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	691b      	ldr	r3, [r3, #16]
 8004164:	431a      	orrs	r2, r3
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	695b      	ldr	r3, [r3, #20]
 800416a:	431a      	orrs	r2, r3
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	69db      	ldr	r3, [r3, #28]
 8004170:	4313      	orrs	r3, r2
 8004172:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4aa1      	ldr	r2, [pc, #644]	@ (8004400 <UART_SetConfig+0x2b4>)
 800417c:	4013      	ands	r3, r2
 800417e:	0019      	movs	r1, r3
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	69fa      	ldr	r2, [r7, #28]
 8004186:	430a      	orrs	r2, r1
 8004188:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	4a9c      	ldr	r2, [pc, #624]	@ (8004404 <UART_SetConfig+0x2b8>)
 8004192:	4013      	ands	r3, r2
 8004194:	0019      	movs	r1, r3
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	68da      	ldr	r2, [r3, #12]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	430a      	orrs	r2, r1
 80041a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	699b      	ldr	r3, [r3, #24]
 80041a6:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6a1b      	ldr	r3, [r3, #32]
 80041ac:	69fa      	ldr	r2, [r7, #28]
 80041ae:	4313      	orrs	r3, r2
 80041b0:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	4a93      	ldr	r2, [pc, #588]	@ (8004408 <UART_SetConfig+0x2bc>)
 80041ba:	4013      	ands	r3, r2
 80041bc:	0019      	movs	r1, r3
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	69fa      	ldr	r2, [r7, #28]
 80041c4:	430a      	orrs	r2, r1
 80041c6:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041ce:	220f      	movs	r2, #15
 80041d0:	4393      	bics	r3, r2
 80041d2:	0019      	movs	r1, r3
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	430a      	orrs	r2, r1
 80041de:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a89      	ldr	r2, [pc, #548]	@ (800440c <UART_SetConfig+0x2c0>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d127      	bne.n	800423a <UART_SetConfig+0xee>
 80041ea:	4b89      	ldr	r3, [pc, #548]	@ (8004410 <UART_SetConfig+0x2c4>)
 80041ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041ee:	2203      	movs	r2, #3
 80041f0:	4013      	ands	r3, r2
 80041f2:	2b03      	cmp	r3, #3
 80041f4:	d017      	beq.n	8004226 <UART_SetConfig+0xda>
 80041f6:	d81b      	bhi.n	8004230 <UART_SetConfig+0xe4>
 80041f8:	2b02      	cmp	r3, #2
 80041fa:	d00a      	beq.n	8004212 <UART_SetConfig+0xc6>
 80041fc:	d818      	bhi.n	8004230 <UART_SetConfig+0xe4>
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d002      	beq.n	8004208 <UART_SetConfig+0xbc>
 8004202:	2b01      	cmp	r3, #1
 8004204:	d00a      	beq.n	800421c <UART_SetConfig+0xd0>
 8004206:	e013      	b.n	8004230 <UART_SetConfig+0xe4>
 8004208:	231b      	movs	r3, #27
 800420a:	18fb      	adds	r3, r7, r3
 800420c:	2200      	movs	r2, #0
 800420e:	701a      	strb	r2, [r3, #0]
 8004210:	e021      	b.n	8004256 <UART_SetConfig+0x10a>
 8004212:	231b      	movs	r3, #27
 8004214:	18fb      	adds	r3, r7, r3
 8004216:	2202      	movs	r2, #2
 8004218:	701a      	strb	r2, [r3, #0]
 800421a:	e01c      	b.n	8004256 <UART_SetConfig+0x10a>
 800421c:	231b      	movs	r3, #27
 800421e:	18fb      	adds	r3, r7, r3
 8004220:	2204      	movs	r2, #4
 8004222:	701a      	strb	r2, [r3, #0]
 8004224:	e017      	b.n	8004256 <UART_SetConfig+0x10a>
 8004226:	231b      	movs	r3, #27
 8004228:	18fb      	adds	r3, r7, r3
 800422a:	2208      	movs	r2, #8
 800422c:	701a      	strb	r2, [r3, #0]
 800422e:	e012      	b.n	8004256 <UART_SetConfig+0x10a>
 8004230:	231b      	movs	r3, #27
 8004232:	18fb      	adds	r3, r7, r3
 8004234:	2210      	movs	r2, #16
 8004236:	701a      	strb	r2, [r3, #0]
 8004238:	e00d      	b.n	8004256 <UART_SetConfig+0x10a>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a75      	ldr	r2, [pc, #468]	@ (8004414 <UART_SetConfig+0x2c8>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d104      	bne.n	800424e <UART_SetConfig+0x102>
 8004244:	231b      	movs	r3, #27
 8004246:	18fb      	adds	r3, r7, r3
 8004248:	2200      	movs	r2, #0
 800424a:	701a      	strb	r2, [r3, #0]
 800424c:	e003      	b.n	8004256 <UART_SetConfig+0x10a>
 800424e:	231b      	movs	r3, #27
 8004250:	18fb      	adds	r3, r7, r3
 8004252:	2210      	movs	r2, #16
 8004254:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	69da      	ldr	r2, [r3, #28]
 800425a:	2380      	movs	r3, #128	@ 0x80
 800425c:	021b      	lsls	r3, r3, #8
 800425e:	429a      	cmp	r2, r3
 8004260:	d000      	beq.n	8004264 <UART_SetConfig+0x118>
 8004262:	e065      	b.n	8004330 <UART_SetConfig+0x1e4>
  {
    switch (clocksource)
 8004264:	231b      	movs	r3, #27
 8004266:	18fb      	adds	r3, r7, r3
 8004268:	781b      	ldrb	r3, [r3, #0]
 800426a:	2b08      	cmp	r3, #8
 800426c:	d015      	beq.n	800429a <UART_SetConfig+0x14e>
 800426e:	dc18      	bgt.n	80042a2 <UART_SetConfig+0x156>
 8004270:	2b04      	cmp	r3, #4
 8004272:	d00d      	beq.n	8004290 <UART_SetConfig+0x144>
 8004274:	dc15      	bgt.n	80042a2 <UART_SetConfig+0x156>
 8004276:	2b00      	cmp	r3, #0
 8004278:	d002      	beq.n	8004280 <UART_SetConfig+0x134>
 800427a:	2b02      	cmp	r3, #2
 800427c:	d005      	beq.n	800428a <UART_SetConfig+0x13e>
 800427e:	e010      	b.n	80042a2 <UART_SetConfig+0x156>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004280:	f7fe fad4 	bl	800282c <HAL_RCC_GetPCLK1Freq>
 8004284:	0003      	movs	r3, r0
 8004286:	617b      	str	r3, [r7, #20]
        break;
 8004288:	e012      	b.n	80042b0 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800428a:	4b63      	ldr	r3, [pc, #396]	@ (8004418 <UART_SetConfig+0x2cc>)
 800428c:	617b      	str	r3, [r7, #20]
        break;
 800428e:	e00f      	b.n	80042b0 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004290:	f7fe fa42 	bl	8002718 <HAL_RCC_GetSysClockFreq>
 8004294:	0003      	movs	r3, r0
 8004296:	617b      	str	r3, [r7, #20]
        break;
 8004298:	e00a      	b.n	80042b0 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800429a:	2380      	movs	r3, #128	@ 0x80
 800429c:	021b      	lsls	r3, r3, #8
 800429e:	617b      	str	r3, [r7, #20]
        break;
 80042a0:	e006      	b.n	80042b0 <UART_SetConfig+0x164>
      default:
        pclk = 0U;
 80042a2:	2300      	movs	r3, #0
 80042a4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80042a6:	231a      	movs	r3, #26
 80042a8:	18fb      	adds	r3, r7, r3
 80042aa:	2201      	movs	r2, #1
 80042ac:	701a      	strb	r2, [r3, #0]
        break;
 80042ae:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d100      	bne.n	80042b8 <UART_SetConfig+0x16c>
 80042b6:	e08d      	b.n	80043d4 <UART_SetConfig+0x288>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80042bc:	4b57      	ldr	r3, [pc, #348]	@ (800441c <UART_SetConfig+0x2d0>)
 80042be:	0052      	lsls	r2, r2, #1
 80042c0:	5ad3      	ldrh	r3, [r2, r3]
 80042c2:	0019      	movs	r1, r3
 80042c4:	6978      	ldr	r0, [r7, #20]
 80042c6:	f7fb ff1b 	bl	8000100 <__udivsi3>
 80042ca:	0003      	movs	r3, r0
 80042cc:	005a      	lsls	r2, r3, #1
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	085b      	lsrs	r3, r3, #1
 80042d4:	18d2      	adds	r2, r2, r3
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	0019      	movs	r1, r3
 80042dc:	0010      	movs	r0, r2
 80042de:	f7fb ff0f 	bl	8000100 <__udivsi3>
 80042e2:	0003      	movs	r3, r0
 80042e4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	2b0f      	cmp	r3, #15
 80042ea:	d91c      	bls.n	8004326 <UART_SetConfig+0x1da>
 80042ec:	693a      	ldr	r2, [r7, #16]
 80042ee:	2380      	movs	r3, #128	@ 0x80
 80042f0:	025b      	lsls	r3, r3, #9
 80042f2:	429a      	cmp	r2, r3
 80042f4:	d217      	bcs.n	8004326 <UART_SetConfig+0x1da>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	b29a      	uxth	r2, r3
 80042fa:	200e      	movs	r0, #14
 80042fc:	183b      	adds	r3, r7, r0
 80042fe:	210f      	movs	r1, #15
 8004300:	438a      	bics	r2, r1
 8004302:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	085b      	lsrs	r3, r3, #1
 8004308:	b29b      	uxth	r3, r3
 800430a:	2207      	movs	r2, #7
 800430c:	4013      	ands	r3, r2
 800430e:	b299      	uxth	r1, r3
 8004310:	183b      	adds	r3, r7, r0
 8004312:	183a      	adds	r2, r7, r0
 8004314:	8812      	ldrh	r2, [r2, #0]
 8004316:	430a      	orrs	r2, r1
 8004318:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	183a      	adds	r2, r7, r0
 8004320:	8812      	ldrh	r2, [r2, #0]
 8004322:	60da      	str	r2, [r3, #12]
 8004324:	e056      	b.n	80043d4 <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 8004326:	231a      	movs	r3, #26
 8004328:	18fb      	adds	r3, r7, r3
 800432a:	2201      	movs	r2, #1
 800432c:	701a      	strb	r2, [r3, #0]
 800432e:	e051      	b.n	80043d4 <UART_SetConfig+0x288>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004330:	231b      	movs	r3, #27
 8004332:	18fb      	adds	r3, r7, r3
 8004334:	781b      	ldrb	r3, [r3, #0]
 8004336:	2b08      	cmp	r3, #8
 8004338:	d015      	beq.n	8004366 <UART_SetConfig+0x21a>
 800433a:	dc18      	bgt.n	800436e <UART_SetConfig+0x222>
 800433c:	2b04      	cmp	r3, #4
 800433e:	d00d      	beq.n	800435c <UART_SetConfig+0x210>
 8004340:	dc15      	bgt.n	800436e <UART_SetConfig+0x222>
 8004342:	2b00      	cmp	r3, #0
 8004344:	d002      	beq.n	800434c <UART_SetConfig+0x200>
 8004346:	2b02      	cmp	r3, #2
 8004348:	d005      	beq.n	8004356 <UART_SetConfig+0x20a>
 800434a:	e010      	b.n	800436e <UART_SetConfig+0x222>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800434c:	f7fe fa6e 	bl	800282c <HAL_RCC_GetPCLK1Freq>
 8004350:	0003      	movs	r3, r0
 8004352:	617b      	str	r3, [r7, #20]
        break;
 8004354:	e012      	b.n	800437c <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004356:	4b30      	ldr	r3, [pc, #192]	@ (8004418 <UART_SetConfig+0x2cc>)
 8004358:	617b      	str	r3, [r7, #20]
        break;
 800435a:	e00f      	b.n	800437c <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800435c:	f7fe f9dc 	bl	8002718 <HAL_RCC_GetSysClockFreq>
 8004360:	0003      	movs	r3, r0
 8004362:	617b      	str	r3, [r7, #20]
        break;
 8004364:	e00a      	b.n	800437c <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004366:	2380      	movs	r3, #128	@ 0x80
 8004368:	021b      	lsls	r3, r3, #8
 800436a:	617b      	str	r3, [r7, #20]
        break;
 800436c:	e006      	b.n	800437c <UART_SetConfig+0x230>
      default:
        pclk = 0U;
 800436e:	2300      	movs	r3, #0
 8004370:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004372:	231a      	movs	r3, #26
 8004374:	18fb      	adds	r3, r7, r3
 8004376:	2201      	movs	r2, #1
 8004378:	701a      	strb	r2, [r3, #0]
        break;
 800437a:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d028      	beq.n	80043d4 <UART_SetConfig+0x288>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004386:	4b25      	ldr	r3, [pc, #148]	@ (800441c <UART_SetConfig+0x2d0>)
 8004388:	0052      	lsls	r2, r2, #1
 800438a:	5ad3      	ldrh	r3, [r2, r3]
 800438c:	0019      	movs	r1, r3
 800438e:	6978      	ldr	r0, [r7, #20]
 8004390:	f7fb feb6 	bl	8000100 <__udivsi3>
 8004394:	0003      	movs	r3, r0
 8004396:	001a      	movs	r2, r3
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	085b      	lsrs	r3, r3, #1
 800439e:	18d2      	adds	r2, r2, r3
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	0019      	movs	r1, r3
 80043a6:	0010      	movs	r0, r2
 80043a8:	f7fb feaa 	bl	8000100 <__udivsi3>
 80043ac:	0003      	movs	r3, r0
 80043ae:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	2b0f      	cmp	r3, #15
 80043b4:	d90a      	bls.n	80043cc <UART_SetConfig+0x280>
 80043b6:	693a      	ldr	r2, [r7, #16]
 80043b8:	2380      	movs	r3, #128	@ 0x80
 80043ba:	025b      	lsls	r3, r3, #9
 80043bc:	429a      	cmp	r2, r3
 80043be:	d205      	bcs.n	80043cc <UART_SetConfig+0x280>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80043c0:	693b      	ldr	r3, [r7, #16]
 80043c2:	b29a      	uxth	r2, r3
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	60da      	str	r2, [r3, #12]
 80043ca:	e003      	b.n	80043d4 <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 80043cc:	231a      	movs	r3, #26
 80043ce:	18fb      	adds	r3, r7, r3
 80043d0:	2201      	movs	r2, #1
 80043d2:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	226a      	movs	r2, #106	@ 0x6a
 80043d8:	2101      	movs	r1, #1
 80043da:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2268      	movs	r2, #104	@ 0x68
 80043e0:	2101      	movs	r1, #1
 80043e2:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2200      	movs	r2, #0
 80043e8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2200      	movs	r2, #0
 80043ee:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80043f0:	231a      	movs	r3, #26
 80043f2:	18fb      	adds	r3, r7, r3
 80043f4:	781b      	ldrb	r3, [r3, #0]
}
 80043f6:	0018      	movs	r0, r3
 80043f8:	46bd      	mov	sp, r7
 80043fa:	b008      	add	sp, #32
 80043fc:	bd80      	pop	{r7, pc}
 80043fe:	46c0      	nop			@ (mov r8, r8)
 8004400:	cfff69f3 	.word	0xcfff69f3
 8004404:	ffffcfff 	.word	0xffffcfff
 8004408:	11fff4ff 	.word	0x11fff4ff
 800440c:	40013800 	.word	0x40013800
 8004410:	40021000 	.word	0x40021000
 8004414:	40004400 	.word	0x40004400
 8004418:	00f42400 	.word	0x00f42400
 800441c:	08004fa4 	.word	0x08004fa4

08004420 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b082      	sub	sp, #8
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800442c:	2208      	movs	r2, #8
 800442e:	4013      	ands	r3, r2
 8004430:	d00b      	beq.n	800444a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	4a4a      	ldr	r2, [pc, #296]	@ (8004564 <UART_AdvFeatureConfig+0x144>)
 800443a:	4013      	ands	r3, r2
 800443c:	0019      	movs	r1, r3
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	430a      	orrs	r2, r1
 8004448:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800444e:	2201      	movs	r2, #1
 8004450:	4013      	ands	r3, r2
 8004452:	d00b      	beq.n	800446c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	4a43      	ldr	r2, [pc, #268]	@ (8004568 <UART_AdvFeatureConfig+0x148>)
 800445c:	4013      	ands	r3, r2
 800445e:	0019      	movs	r1, r3
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	430a      	orrs	r2, r1
 800446a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004470:	2202      	movs	r2, #2
 8004472:	4013      	ands	r3, r2
 8004474:	d00b      	beq.n	800448e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	4a3b      	ldr	r2, [pc, #236]	@ (800456c <UART_AdvFeatureConfig+0x14c>)
 800447e:	4013      	ands	r3, r2
 8004480:	0019      	movs	r1, r3
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	430a      	orrs	r2, r1
 800448c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004492:	2204      	movs	r2, #4
 8004494:	4013      	ands	r3, r2
 8004496:	d00b      	beq.n	80044b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	4a34      	ldr	r2, [pc, #208]	@ (8004570 <UART_AdvFeatureConfig+0x150>)
 80044a0:	4013      	ands	r3, r2
 80044a2:	0019      	movs	r1, r3
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	430a      	orrs	r2, r1
 80044ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044b4:	2210      	movs	r2, #16
 80044b6:	4013      	ands	r3, r2
 80044b8:	d00b      	beq.n	80044d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	689b      	ldr	r3, [r3, #8]
 80044c0:	4a2c      	ldr	r2, [pc, #176]	@ (8004574 <UART_AdvFeatureConfig+0x154>)
 80044c2:	4013      	ands	r3, r2
 80044c4:	0019      	movs	r1, r3
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	430a      	orrs	r2, r1
 80044d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044d6:	2220      	movs	r2, #32
 80044d8:	4013      	ands	r3, r2
 80044da:	d00b      	beq.n	80044f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	4a25      	ldr	r2, [pc, #148]	@ (8004578 <UART_AdvFeatureConfig+0x158>)
 80044e4:	4013      	ands	r3, r2
 80044e6:	0019      	movs	r1, r3
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	430a      	orrs	r2, r1
 80044f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044f8:	2240      	movs	r2, #64	@ 0x40
 80044fa:	4013      	ands	r3, r2
 80044fc:	d01d      	beq.n	800453a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	4a1d      	ldr	r2, [pc, #116]	@ (800457c <UART_AdvFeatureConfig+0x15c>)
 8004506:	4013      	ands	r3, r2
 8004508:	0019      	movs	r1, r3
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	430a      	orrs	r2, r1
 8004514:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800451a:	2380      	movs	r3, #128	@ 0x80
 800451c:	035b      	lsls	r3, r3, #13
 800451e:	429a      	cmp	r2, r3
 8004520:	d10b      	bne.n	800453a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	4a15      	ldr	r2, [pc, #84]	@ (8004580 <UART_AdvFeatureConfig+0x160>)
 800452a:	4013      	ands	r3, r2
 800452c:	0019      	movs	r1, r3
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	430a      	orrs	r2, r1
 8004538:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800453e:	2280      	movs	r2, #128	@ 0x80
 8004540:	4013      	ands	r3, r2
 8004542:	d00b      	beq.n	800455c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	4a0e      	ldr	r2, [pc, #56]	@ (8004584 <UART_AdvFeatureConfig+0x164>)
 800454c:	4013      	ands	r3, r2
 800454e:	0019      	movs	r1, r3
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	430a      	orrs	r2, r1
 800455a:	605a      	str	r2, [r3, #4]
  }
}
 800455c:	46c0      	nop			@ (mov r8, r8)
 800455e:	46bd      	mov	sp, r7
 8004560:	b002      	add	sp, #8
 8004562:	bd80      	pop	{r7, pc}
 8004564:	ffff7fff 	.word	0xffff7fff
 8004568:	fffdffff 	.word	0xfffdffff
 800456c:	fffeffff 	.word	0xfffeffff
 8004570:	fffbffff 	.word	0xfffbffff
 8004574:	ffffefff 	.word	0xffffefff
 8004578:	ffffdfff 	.word	0xffffdfff
 800457c:	ffefffff 	.word	0xffefffff
 8004580:	ff9fffff 	.word	0xff9fffff
 8004584:	fff7ffff 	.word	0xfff7ffff

08004588 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b092      	sub	sp, #72	@ 0x48
 800458c:	af02      	add	r7, sp, #8
 800458e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2290      	movs	r2, #144	@ 0x90
 8004594:	2100      	movs	r1, #0
 8004596:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004598:	f7fc ff66 	bl	8001468 <HAL_GetTick>
 800459c:	0003      	movs	r3, r0
 800459e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	2208      	movs	r2, #8
 80045a8:	4013      	ands	r3, r2
 80045aa:	2b08      	cmp	r3, #8
 80045ac:	d12d      	bne.n	800460a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80045ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80045b0:	2280      	movs	r2, #128	@ 0x80
 80045b2:	0391      	lsls	r1, r2, #14
 80045b4:	6878      	ldr	r0, [r7, #4]
 80045b6:	4a47      	ldr	r2, [pc, #284]	@ (80046d4 <UART_CheckIdleState+0x14c>)
 80045b8:	9200      	str	r2, [sp, #0]
 80045ba:	2200      	movs	r2, #0
 80045bc:	f000 f88e 	bl	80046dc <UART_WaitOnFlagUntilTimeout>
 80045c0:	1e03      	subs	r3, r0, #0
 80045c2:	d022      	beq.n	800460a <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045c4:	f3ef 8310 	mrs	r3, PRIMASK
 80045c8:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80045ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80045cc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80045ce:	2301      	movs	r3, #1
 80045d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045d4:	f383 8810 	msr	PRIMASK, r3
}
 80045d8:	46c0      	nop			@ (mov r8, r8)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	681a      	ldr	r2, [r3, #0]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	2180      	movs	r1, #128	@ 0x80
 80045e6:	438a      	bics	r2, r1
 80045e8:	601a      	str	r2, [r3, #0]
 80045ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045f0:	f383 8810 	msr	PRIMASK, r3
}
 80045f4:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2288      	movs	r2, #136	@ 0x88
 80045fa:	2120      	movs	r1, #32
 80045fc:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2284      	movs	r2, #132	@ 0x84
 8004602:	2100      	movs	r1, #0
 8004604:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004606:	2303      	movs	r3, #3
 8004608:	e060      	b.n	80046cc <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	2204      	movs	r2, #4
 8004612:	4013      	ands	r3, r2
 8004614:	2b04      	cmp	r3, #4
 8004616:	d146      	bne.n	80046a6 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004618:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800461a:	2280      	movs	r2, #128	@ 0x80
 800461c:	03d1      	lsls	r1, r2, #15
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	4a2c      	ldr	r2, [pc, #176]	@ (80046d4 <UART_CheckIdleState+0x14c>)
 8004622:	9200      	str	r2, [sp, #0]
 8004624:	2200      	movs	r2, #0
 8004626:	f000 f859 	bl	80046dc <UART_WaitOnFlagUntilTimeout>
 800462a:	1e03      	subs	r3, r0, #0
 800462c:	d03b      	beq.n	80046a6 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800462e:	f3ef 8310 	mrs	r3, PRIMASK
 8004632:	60fb      	str	r3, [r7, #12]
  return(result);
 8004634:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004636:	637b      	str	r3, [r7, #52]	@ 0x34
 8004638:	2301      	movs	r3, #1
 800463a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	f383 8810 	msr	PRIMASK, r3
}
 8004642:	46c0      	nop			@ (mov r8, r8)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	681a      	ldr	r2, [r3, #0]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4922      	ldr	r1, [pc, #136]	@ (80046d8 <UART_CheckIdleState+0x150>)
 8004650:	400a      	ands	r2, r1
 8004652:	601a      	str	r2, [r3, #0]
 8004654:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004656:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	f383 8810 	msr	PRIMASK, r3
}
 800465e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004660:	f3ef 8310 	mrs	r3, PRIMASK
 8004664:	61bb      	str	r3, [r7, #24]
  return(result);
 8004666:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004668:	633b      	str	r3, [r7, #48]	@ 0x30
 800466a:	2301      	movs	r3, #1
 800466c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800466e:	69fb      	ldr	r3, [r7, #28]
 8004670:	f383 8810 	msr	PRIMASK, r3
}
 8004674:	46c0      	nop			@ (mov r8, r8)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	689a      	ldr	r2, [r3, #8]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	2101      	movs	r1, #1
 8004682:	438a      	bics	r2, r1
 8004684:	609a      	str	r2, [r3, #8]
 8004686:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004688:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800468a:	6a3b      	ldr	r3, [r7, #32]
 800468c:	f383 8810 	msr	PRIMASK, r3
}
 8004690:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	228c      	movs	r2, #140	@ 0x8c
 8004696:	2120      	movs	r1, #32
 8004698:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2284      	movs	r2, #132	@ 0x84
 800469e:	2100      	movs	r1, #0
 80046a0:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80046a2:	2303      	movs	r3, #3
 80046a4:	e012      	b.n	80046cc <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2288      	movs	r2, #136	@ 0x88
 80046aa:	2120      	movs	r1, #32
 80046ac:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	228c      	movs	r2, #140	@ 0x8c
 80046b2:	2120      	movs	r1, #32
 80046b4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2200      	movs	r2, #0
 80046ba:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2200      	movs	r2, #0
 80046c0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2284      	movs	r2, #132	@ 0x84
 80046c6:	2100      	movs	r1, #0
 80046c8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80046ca:	2300      	movs	r3, #0
}
 80046cc:	0018      	movs	r0, r3
 80046ce:	46bd      	mov	sp, r7
 80046d0:	b010      	add	sp, #64	@ 0x40
 80046d2:	bd80      	pop	{r7, pc}
 80046d4:	01ffffff 	.word	0x01ffffff
 80046d8:	fffffedf 	.word	0xfffffedf

080046dc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b084      	sub	sp, #16
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	60f8      	str	r0, [r7, #12]
 80046e4:	60b9      	str	r1, [r7, #8]
 80046e6:	603b      	str	r3, [r7, #0]
 80046e8:	1dfb      	adds	r3, r7, #7
 80046ea:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046ec:	e051      	b.n	8004792 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046ee:	69bb      	ldr	r3, [r7, #24]
 80046f0:	3301      	adds	r3, #1
 80046f2:	d04e      	beq.n	8004792 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046f4:	f7fc feb8 	bl	8001468 <HAL_GetTick>
 80046f8:	0002      	movs	r2, r0
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	1ad3      	subs	r3, r2, r3
 80046fe:	69ba      	ldr	r2, [r7, #24]
 8004700:	429a      	cmp	r2, r3
 8004702:	d302      	bcc.n	800470a <UART_WaitOnFlagUntilTimeout+0x2e>
 8004704:	69bb      	ldr	r3, [r7, #24]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d101      	bne.n	800470e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800470a:	2303      	movs	r3, #3
 800470c:	e051      	b.n	80047b2 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	2204      	movs	r2, #4
 8004716:	4013      	ands	r3, r2
 8004718:	d03b      	beq.n	8004792 <UART_WaitOnFlagUntilTimeout+0xb6>
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	2b80      	cmp	r3, #128	@ 0x80
 800471e:	d038      	beq.n	8004792 <UART_WaitOnFlagUntilTimeout+0xb6>
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	2b40      	cmp	r3, #64	@ 0x40
 8004724:	d035      	beq.n	8004792 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	69db      	ldr	r3, [r3, #28]
 800472c:	2208      	movs	r2, #8
 800472e:	4013      	ands	r3, r2
 8004730:	2b08      	cmp	r3, #8
 8004732:	d111      	bne.n	8004758 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	2208      	movs	r2, #8
 800473a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	0018      	movs	r0, r3
 8004740:	f000 f922 	bl	8004988 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	2290      	movs	r2, #144	@ 0x90
 8004748:	2108      	movs	r1, #8
 800474a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2284      	movs	r2, #132	@ 0x84
 8004750:	2100      	movs	r1, #0
 8004752:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004754:	2301      	movs	r3, #1
 8004756:	e02c      	b.n	80047b2 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	69da      	ldr	r2, [r3, #28]
 800475e:	2380      	movs	r3, #128	@ 0x80
 8004760:	011b      	lsls	r3, r3, #4
 8004762:	401a      	ands	r2, r3
 8004764:	2380      	movs	r3, #128	@ 0x80
 8004766:	011b      	lsls	r3, r3, #4
 8004768:	429a      	cmp	r2, r3
 800476a:	d112      	bne.n	8004792 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	2280      	movs	r2, #128	@ 0x80
 8004772:	0112      	lsls	r2, r2, #4
 8004774:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	0018      	movs	r0, r3
 800477a:	f000 f905 	bl	8004988 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	2290      	movs	r2, #144	@ 0x90
 8004782:	2120      	movs	r1, #32
 8004784:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	2284      	movs	r2, #132	@ 0x84
 800478a:	2100      	movs	r1, #0
 800478c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800478e:	2303      	movs	r3, #3
 8004790:	e00f      	b.n	80047b2 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	69db      	ldr	r3, [r3, #28]
 8004798:	68ba      	ldr	r2, [r7, #8]
 800479a:	4013      	ands	r3, r2
 800479c:	68ba      	ldr	r2, [r7, #8]
 800479e:	1ad3      	subs	r3, r2, r3
 80047a0:	425a      	negs	r2, r3
 80047a2:	4153      	adcs	r3, r2
 80047a4:	b2db      	uxtb	r3, r3
 80047a6:	001a      	movs	r2, r3
 80047a8:	1dfb      	adds	r3, r7, #7
 80047aa:	781b      	ldrb	r3, [r3, #0]
 80047ac:	429a      	cmp	r2, r3
 80047ae:	d09e      	beq.n	80046ee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80047b0:	2300      	movs	r3, #0
}
 80047b2:	0018      	movs	r0, r3
 80047b4:	46bd      	mov	sp, r7
 80047b6:	b004      	add	sp, #16
 80047b8:	bd80      	pop	{r7, pc}
	...

080047bc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b090      	sub	sp, #64	@ 0x40
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	60f8      	str	r0, [r7, #12]
 80047c4:	60b9      	str	r1, [r7, #8]
 80047c6:	1dbb      	adds	r3, r7, #6
 80047c8:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	68ba      	ldr	r2, [r7, #8]
 80047ce:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	1dba      	adds	r2, r7, #6
 80047d4:	215c      	movs	r1, #92	@ 0x5c
 80047d6:	8812      	ldrh	r2, [r2, #0]
 80047d8:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2290      	movs	r2, #144	@ 0x90
 80047de:	2100      	movs	r1, #0
 80047e0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	228c      	movs	r2, #140	@ 0x8c
 80047e6:	2122      	movs	r1, #34	@ 0x22
 80047e8:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	2280      	movs	r2, #128	@ 0x80
 80047ee:	589b      	ldr	r3, [r3, r2]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d02d      	beq.n	8004850 <UART_Start_Receive_DMA+0x94>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	2280      	movs	r2, #128	@ 0x80
 80047f8:	589b      	ldr	r3, [r3, r2]
 80047fa:	4a40      	ldr	r2, [pc, #256]	@ (80048fc <UART_Start_Receive_DMA+0x140>)
 80047fc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2280      	movs	r2, #128	@ 0x80
 8004802:	589b      	ldr	r3, [r3, r2]
 8004804:	4a3e      	ldr	r2, [pc, #248]	@ (8004900 <UART_Start_Receive_DMA+0x144>)
 8004806:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	2280      	movs	r2, #128	@ 0x80
 800480c:	589b      	ldr	r3, [r3, r2]
 800480e:	4a3d      	ldr	r2, [pc, #244]	@ (8004904 <UART_Start_Receive_DMA+0x148>)
 8004810:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	2280      	movs	r2, #128	@ 0x80
 8004816:	589b      	ldr	r3, [r3, r2]
 8004818:	2200      	movs	r2, #0
 800481a:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	2280      	movs	r2, #128	@ 0x80
 8004820:	5898      	ldr	r0, [r3, r2]
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	3324      	adds	r3, #36	@ 0x24
 8004828:	0019      	movs	r1, r3
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800482e:	001a      	movs	r2, r3
 8004830:	1dbb      	adds	r3, r7, #6
 8004832:	881b      	ldrh	r3, [r3, #0]
 8004834:	f7fc ff8a 	bl	800174c <HAL_DMA_Start_IT>
 8004838:	1e03      	subs	r3, r0, #0
 800483a:	d009      	beq.n	8004850 <UART_Start_Receive_DMA+0x94>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	2290      	movs	r2, #144	@ 0x90
 8004840:	2110      	movs	r1, #16
 8004842:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	228c      	movs	r2, #140	@ 0x8c
 8004848:	2120      	movs	r1, #32
 800484a:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 800484c:	2301      	movs	r3, #1
 800484e:	e050      	b.n	80048f2 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	691b      	ldr	r3, [r3, #16]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d019      	beq.n	800488c <UART_Start_Receive_DMA+0xd0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004858:	f3ef 8310 	mrs	r3, PRIMASK
 800485c:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 800485e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004860:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004862:	2301      	movs	r3, #1
 8004864:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004866:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004868:	f383 8810 	msr	PRIMASK, r3
}
 800486c:	46c0      	nop			@ (mov r8, r8)
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	681a      	ldr	r2, [r3, #0]
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	2180      	movs	r1, #128	@ 0x80
 800487a:	0049      	lsls	r1, r1, #1
 800487c:	430a      	orrs	r2, r1
 800487e:	601a      	str	r2, [r3, #0]
 8004880:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004882:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004884:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004886:	f383 8810 	msr	PRIMASK, r3
}
 800488a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800488c:	f3ef 8310 	mrs	r3, PRIMASK
 8004890:	613b      	str	r3, [r7, #16]
  return(result);
 8004892:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004894:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004896:	2301      	movs	r3, #1
 8004898:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	f383 8810 	msr	PRIMASK, r3
}
 80048a0:	46c0      	nop			@ (mov r8, r8)
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	689a      	ldr	r2, [r3, #8]
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	2101      	movs	r1, #1
 80048ae:	430a      	orrs	r2, r1
 80048b0:	609a      	str	r2, [r3, #8]
 80048b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048b4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048b6:	69bb      	ldr	r3, [r7, #24]
 80048b8:	f383 8810 	msr	PRIMASK, r3
}
 80048bc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048be:	f3ef 8310 	mrs	r3, PRIMASK
 80048c2:	61fb      	str	r3, [r7, #28]
  return(result);
 80048c4:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80048c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80048c8:	2301      	movs	r3, #1
 80048ca:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048cc:	6a3b      	ldr	r3, [r7, #32]
 80048ce:	f383 8810 	msr	PRIMASK, r3
}
 80048d2:	46c0      	nop			@ (mov r8, r8)
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	689a      	ldr	r2, [r3, #8]
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	2140      	movs	r1, #64	@ 0x40
 80048e0:	430a      	orrs	r2, r1
 80048e2:	609a      	str	r2, [r3, #8]
 80048e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048e6:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048ea:	f383 8810 	msr	PRIMASK, r3
}
 80048ee:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 80048f0:	2300      	movs	r3, #0
}
 80048f2:	0018      	movs	r0, r3
 80048f4:	46bd      	mov	sp, r7
 80048f6:	b010      	add	sp, #64	@ 0x40
 80048f8:	bd80      	pop	{r7, pc}
 80048fa:	46c0      	nop			@ (mov r8, r8)
 80048fc:	08004a55 	.word	0x08004a55
 8004900:	08004b85 	.word	0x08004b85
 8004904:	08004bc7 	.word	0x08004bc7

08004908 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b08a      	sub	sp, #40	@ 0x28
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004910:	f3ef 8310 	mrs	r3, PRIMASK
 8004914:	60bb      	str	r3, [r7, #8]
  return(result);
 8004916:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8004918:	627b      	str	r3, [r7, #36]	@ 0x24
 800491a:	2301      	movs	r3, #1
 800491c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	f383 8810 	msr	PRIMASK, r3
}
 8004924:	46c0      	nop			@ (mov r8, r8)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	681a      	ldr	r2, [r3, #0]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	21c0      	movs	r1, #192	@ 0xc0
 8004932:	438a      	bics	r2, r1
 8004934:	601a      	str	r2, [r3, #0]
 8004936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004938:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	f383 8810 	msr	PRIMASK, r3
}
 8004940:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004942:	f3ef 8310 	mrs	r3, PRIMASK
 8004946:	617b      	str	r3, [r7, #20]
  return(result);
 8004948:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800494a:	623b      	str	r3, [r7, #32]
 800494c:	2301      	movs	r3, #1
 800494e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004950:	69bb      	ldr	r3, [r7, #24]
 8004952:	f383 8810 	msr	PRIMASK, r3
}
 8004956:	46c0      	nop			@ (mov r8, r8)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	689a      	ldr	r2, [r3, #8]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4908      	ldr	r1, [pc, #32]	@ (8004984 <UART_EndTxTransfer+0x7c>)
 8004964:	400a      	ands	r2, r1
 8004966:	609a      	str	r2, [r3, #8]
 8004968:	6a3b      	ldr	r3, [r7, #32]
 800496a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800496c:	69fb      	ldr	r3, [r7, #28]
 800496e:	f383 8810 	msr	PRIMASK, r3
}
 8004972:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2288      	movs	r2, #136	@ 0x88
 8004978:	2120      	movs	r1, #32
 800497a:	5099      	str	r1, [r3, r2]
}
 800497c:	46c0      	nop			@ (mov r8, r8)
 800497e:	46bd      	mov	sp, r7
 8004980:	b00a      	add	sp, #40	@ 0x28
 8004982:	bd80      	pop	{r7, pc}
 8004984:	ff7fffff 	.word	0xff7fffff

08004988 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b08e      	sub	sp, #56	@ 0x38
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004990:	f3ef 8310 	mrs	r3, PRIMASK
 8004994:	617b      	str	r3, [r7, #20]
  return(result);
 8004996:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004998:	637b      	str	r3, [r7, #52]	@ 0x34
 800499a:	2301      	movs	r3, #1
 800499c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800499e:	69bb      	ldr	r3, [r7, #24]
 80049a0:	f383 8810 	msr	PRIMASK, r3
}
 80049a4:	46c0      	nop			@ (mov r8, r8)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	681a      	ldr	r2, [r3, #0]
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4926      	ldr	r1, [pc, #152]	@ (8004a4c <UART_EndRxTransfer+0xc4>)
 80049b2:	400a      	ands	r2, r1
 80049b4:	601a      	str	r2, [r3, #0]
 80049b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049b8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049ba:	69fb      	ldr	r3, [r7, #28]
 80049bc:	f383 8810 	msr	PRIMASK, r3
}
 80049c0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049c2:	f3ef 8310 	mrs	r3, PRIMASK
 80049c6:	623b      	str	r3, [r7, #32]
  return(result);
 80049c8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80049ca:	633b      	str	r3, [r7, #48]	@ 0x30
 80049cc:	2301      	movs	r3, #1
 80049ce:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049d2:	f383 8810 	msr	PRIMASK, r3
}
 80049d6:	46c0      	nop			@ (mov r8, r8)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	689a      	ldr	r2, [r3, #8]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	491b      	ldr	r1, [pc, #108]	@ (8004a50 <UART_EndRxTransfer+0xc8>)
 80049e4:	400a      	ands	r2, r1
 80049e6:	609a      	str	r2, [r3, #8]
 80049e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049ee:	f383 8810 	msr	PRIMASK, r3
}
 80049f2:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80049f8:	2b01      	cmp	r3, #1
 80049fa:	d118      	bne.n	8004a2e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049fc:	f3ef 8310 	mrs	r3, PRIMASK
 8004a00:	60bb      	str	r3, [r7, #8]
  return(result);
 8004a02:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a04:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004a06:	2301      	movs	r3, #1
 8004a08:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	f383 8810 	msr	PRIMASK, r3
}
 8004a10:	46c0      	nop			@ (mov r8, r8)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	681a      	ldr	r2, [r3, #0]
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	2110      	movs	r1, #16
 8004a1e:	438a      	bics	r2, r1
 8004a20:	601a      	str	r2, [r3, #0]
 8004a22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a24:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	f383 8810 	msr	PRIMASK, r3
}
 8004a2c:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	228c      	movs	r2, #140	@ 0x8c
 8004a32:	2120      	movs	r1, #32
 8004a34:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004a42:	46c0      	nop			@ (mov r8, r8)
 8004a44:	46bd      	mov	sp, r7
 8004a46:	b00e      	add	sp, #56	@ 0x38
 8004a48:	bd80      	pop	{r7, pc}
 8004a4a:	46c0      	nop			@ (mov r8, r8)
 8004a4c:	fffffedf 	.word	0xfffffedf
 8004a50:	effffffe 	.word	0xeffffffe

08004a54 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b094      	sub	sp, #80	@ 0x50
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a60:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	2220      	movs	r2, #32
 8004a6a:	4013      	ands	r3, r2
 8004a6c:	d16f      	bne.n	8004b4e <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8004a6e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004a70:	225e      	movs	r2, #94	@ 0x5e
 8004a72:	2100      	movs	r1, #0
 8004a74:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a76:	f3ef 8310 	mrs	r3, PRIMASK
 8004a7a:	61bb      	str	r3, [r7, #24]
  return(result);
 8004a7c:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004a7e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004a80:	2301      	movs	r3, #1
 8004a82:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a84:	69fb      	ldr	r3, [r7, #28]
 8004a86:	f383 8810 	msr	PRIMASK, r3
}
 8004a8a:	46c0      	nop			@ (mov r8, r8)
 8004a8c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	681a      	ldr	r2, [r3, #0]
 8004a92:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	493a      	ldr	r1, [pc, #232]	@ (8004b80 <UART_DMAReceiveCplt+0x12c>)
 8004a98:	400a      	ands	r2, r1
 8004a9a:	601a      	str	r2, [r3, #0]
 8004a9c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004a9e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004aa0:	6a3b      	ldr	r3, [r7, #32]
 8004aa2:	f383 8810 	msr	PRIMASK, r3
}
 8004aa6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004aa8:	f3ef 8310 	mrs	r3, PRIMASK
 8004aac:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ab0:	647b      	str	r3, [r7, #68]	@ 0x44
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ab6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ab8:	f383 8810 	msr	PRIMASK, r3
}
 8004abc:	46c0      	nop			@ (mov r8, r8)
 8004abe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	689a      	ldr	r2, [r3, #8]
 8004ac4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	2101      	movs	r1, #1
 8004aca:	438a      	bics	r2, r1
 8004acc:	609a      	str	r2, [r3, #8]
 8004ace:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004ad0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ad2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ad4:	f383 8810 	msr	PRIMASK, r3
}
 8004ad8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ada:	f3ef 8310 	mrs	r3, PRIMASK
 8004ade:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8004ae0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ae2:	643b      	str	r3, [r7, #64]	@ 0x40
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ae8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004aea:	f383 8810 	msr	PRIMASK, r3
}
 8004aee:	46c0      	nop			@ (mov r8, r8)
 8004af0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	689a      	ldr	r2, [r3, #8]
 8004af6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	2140      	movs	r1, #64	@ 0x40
 8004afc:	438a      	bics	r2, r1
 8004afe:	609a      	str	r2, [r3, #8]
 8004b00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004b02:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b06:	f383 8810 	msr	PRIMASK, r3
}
 8004b0a:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004b0c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004b0e:	228c      	movs	r2, #140	@ 0x8c
 8004b10:	2120      	movs	r1, #32
 8004b12:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b14:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004b16:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004b18:	2b01      	cmp	r3, #1
 8004b1a:	d118      	bne.n	8004b4e <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b1c:	f3ef 8310 	mrs	r3, PRIMASK
 8004b20:	60fb      	str	r3, [r7, #12]
  return(result);
 8004b22:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b24:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004b26:	2301      	movs	r3, #1
 8004b28:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b2a:	693b      	ldr	r3, [r7, #16]
 8004b2c:	f383 8810 	msr	PRIMASK, r3
}
 8004b30:	46c0      	nop			@ (mov r8, r8)
 8004b32:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	681a      	ldr	r2, [r3, #0]
 8004b38:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	2110      	movs	r1, #16
 8004b3e:	438a      	bics	r2, r1
 8004b40:	601a      	str	r2, [r3, #0]
 8004b42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b44:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	f383 8810 	msr	PRIMASK, r3
}
 8004b4c:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b4e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004b50:	2200      	movs	r2, #0
 8004b52:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b54:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004b56:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004b58:	2b01      	cmp	r3, #1
 8004b5a:	d108      	bne.n	8004b6e <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004b5c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004b5e:	225c      	movs	r2, #92	@ 0x5c
 8004b60:	5a9a      	ldrh	r2, [r3, r2]
 8004b62:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004b64:	0011      	movs	r1, r2
 8004b66:	0018      	movs	r0, r3
 8004b68:	f7ff fae5 	bl	8004136 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004b6c:	e003      	b.n	8004b76 <UART_DMAReceiveCplt+0x122>
    HAL_UART_RxCpltCallback(huart);
 8004b6e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004b70:	0018      	movs	r0, r3
 8004b72:	f7ff fac8 	bl	8004106 <HAL_UART_RxCpltCallback>
}
 8004b76:	46c0      	nop			@ (mov r8, r8)
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	b014      	add	sp, #80	@ 0x50
 8004b7c:	bd80      	pop	{r7, pc}
 8004b7e:	46c0      	nop			@ (mov r8, r8)
 8004b80:	fffffeff 	.word	0xfffffeff

08004b84 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b084      	sub	sp, #16
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b90:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	2201      	movs	r2, #1
 8004b96:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004b9c:	2b01      	cmp	r3, #1
 8004b9e:	d10a      	bne.n	8004bb6 <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	225c      	movs	r2, #92	@ 0x5c
 8004ba4:	5a9b      	ldrh	r3, [r3, r2]
 8004ba6:	085b      	lsrs	r3, r3, #1
 8004ba8:	b29a      	uxth	r2, r3
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	0011      	movs	r1, r2
 8004bae:	0018      	movs	r0, r3
 8004bb0:	f7ff fac1 	bl	8004136 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004bb4:	e003      	b.n	8004bbe <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	0018      	movs	r0, r3
 8004bba:	f7ff faac 	bl	8004116 <HAL_UART_RxHalfCpltCallback>
}
 8004bbe:	46c0      	nop			@ (mov r8, r8)
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	b004      	add	sp, #16
 8004bc4:	bd80      	pop	{r7, pc}

08004bc6 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004bc6:	b580      	push	{r7, lr}
 8004bc8:	b086      	sub	sp, #24
 8004bca:	af00      	add	r7, sp, #0
 8004bcc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bd2:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	2288      	movs	r2, #136	@ 0x88
 8004bd8:	589b      	ldr	r3, [r3, r2]
 8004bda:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	228c      	movs	r2, #140	@ 0x8c
 8004be0:	589b      	ldr	r3, [r3, r2]
 8004be2:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004be4:	697b      	ldr	r3, [r7, #20]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	689b      	ldr	r3, [r3, #8]
 8004bea:	2280      	movs	r2, #128	@ 0x80
 8004bec:	4013      	ands	r3, r2
 8004bee:	2b80      	cmp	r3, #128	@ 0x80
 8004bf0:	d10a      	bne.n	8004c08 <UART_DMAError+0x42>
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	2b21      	cmp	r3, #33	@ 0x21
 8004bf6:	d107      	bne.n	8004c08 <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	2256      	movs	r2, #86	@ 0x56
 8004bfc:	2100      	movs	r1, #0
 8004bfe:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	0018      	movs	r0, r3
 8004c04:	f7ff fe80 	bl	8004908 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	689b      	ldr	r3, [r3, #8]
 8004c0e:	2240      	movs	r2, #64	@ 0x40
 8004c10:	4013      	ands	r3, r2
 8004c12:	2b40      	cmp	r3, #64	@ 0x40
 8004c14:	d10a      	bne.n	8004c2c <UART_DMAError+0x66>
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	2b22      	cmp	r3, #34	@ 0x22
 8004c1a:	d107      	bne.n	8004c2c <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	225e      	movs	r2, #94	@ 0x5e
 8004c20:	2100      	movs	r1, #0
 8004c22:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	0018      	movs	r0, r3
 8004c28:	f7ff feae 	bl	8004988 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	2290      	movs	r2, #144	@ 0x90
 8004c30:	589b      	ldr	r3, [r3, r2]
 8004c32:	2210      	movs	r2, #16
 8004c34:	431a      	orrs	r2, r3
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	2190      	movs	r1, #144	@ 0x90
 8004c3a:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004c3c:	697b      	ldr	r3, [r7, #20]
 8004c3e:	0018      	movs	r0, r3
 8004c40:	f7ff fa71 	bl	8004126 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c44:	46c0      	nop			@ (mov r8, r8)
 8004c46:	46bd      	mov	sp, r7
 8004c48:	b006      	add	sp, #24
 8004c4a:	bd80      	pop	{r7, pc}

08004c4c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b084      	sub	sp, #16
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2284      	movs	r2, #132	@ 0x84
 8004c58:	5c9b      	ldrb	r3, [r3, r2]
 8004c5a:	2b01      	cmp	r3, #1
 8004c5c:	d101      	bne.n	8004c62 <HAL_UARTEx_DisableFifoMode+0x16>
 8004c5e:	2302      	movs	r3, #2
 8004c60:	e027      	b.n	8004cb2 <HAL_UARTEx_DisableFifoMode+0x66>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2284      	movs	r2, #132	@ 0x84
 8004c66:	2101      	movs	r1, #1
 8004c68:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2288      	movs	r2, #136	@ 0x88
 8004c6e:	2124      	movs	r1, #36	@ 0x24
 8004c70:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	681a      	ldr	r2, [r3, #0]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	2101      	movs	r1, #1
 8004c86:	438a      	bics	r2, r1
 8004c88:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	4a0b      	ldr	r2, [pc, #44]	@ (8004cbc <HAL_UARTEx_DisableFifoMode+0x70>)
 8004c8e:	4013      	ands	r3, r2
 8004c90:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2200      	movs	r2, #0
 8004c96:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	68fa      	ldr	r2, [r7, #12]
 8004c9e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2288      	movs	r2, #136	@ 0x88
 8004ca4:	2120      	movs	r1, #32
 8004ca6:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2284      	movs	r2, #132	@ 0x84
 8004cac:	2100      	movs	r1, #0
 8004cae:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004cb0:	2300      	movs	r3, #0
}
 8004cb2:	0018      	movs	r0, r3
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	b004      	add	sp, #16
 8004cb8:	bd80      	pop	{r7, pc}
 8004cba:	46c0      	nop			@ (mov r8, r8)
 8004cbc:	dfffffff 	.word	0xdfffffff

08004cc0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b084      	sub	sp, #16
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
 8004cc8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2284      	movs	r2, #132	@ 0x84
 8004cce:	5c9b      	ldrb	r3, [r3, r2]
 8004cd0:	2b01      	cmp	r3, #1
 8004cd2:	d101      	bne.n	8004cd8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004cd4:	2302      	movs	r3, #2
 8004cd6:	e02e      	b.n	8004d36 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2284      	movs	r2, #132	@ 0x84
 8004cdc:	2101      	movs	r1, #1
 8004cde:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2288      	movs	r2, #136	@ 0x88
 8004ce4:	2124      	movs	r1, #36	@ 0x24
 8004ce6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	681a      	ldr	r2, [r3, #0]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	2101      	movs	r1, #1
 8004cfc:	438a      	bics	r2, r1
 8004cfe:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	689b      	ldr	r3, [r3, #8]
 8004d06:	00db      	lsls	r3, r3, #3
 8004d08:	08d9      	lsrs	r1, r3, #3
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	683a      	ldr	r2, [r7, #0]
 8004d10:	430a      	orrs	r2, r1
 8004d12:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	0018      	movs	r0, r3
 8004d18:	f000 f854 	bl	8004dc4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	68fa      	ldr	r2, [r7, #12]
 8004d22:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2288      	movs	r2, #136	@ 0x88
 8004d28:	2120      	movs	r1, #32
 8004d2a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2284      	movs	r2, #132	@ 0x84
 8004d30:	2100      	movs	r1, #0
 8004d32:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004d34:	2300      	movs	r3, #0
}
 8004d36:	0018      	movs	r0, r3
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	b004      	add	sp, #16
 8004d3c:	bd80      	pop	{r7, pc}
	...

08004d40 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b084      	sub	sp, #16
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
 8004d48:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2284      	movs	r2, #132	@ 0x84
 8004d4e:	5c9b      	ldrb	r3, [r3, r2]
 8004d50:	2b01      	cmp	r3, #1
 8004d52:	d101      	bne.n	8004d58 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004d54:	2302      	movs	r3, #2
 8004d56:	e02f      	b.n	8004db8 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2284      	movs	r2, #132	@ 0x84
 8004d5c:	2101      	movs	r1, #1
 8004d5e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2288      	movs	r2, #136	@ 0x88
 8004d64:	2124      	movs	r1, #36	@ 0x24
 8004d66:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	681a      	ldr	r2, [r3, #0]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	2101      	movs	r1, #1
 8004d7c:	438a      	bics	r2, r1
 8004d7e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	689b      	ldr	r3, [r3, #8]
 8004d86:	4a0e      	ldr	r2, [pc, #56]	@ (8004dc0 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8004d88:	4013      	ands	r3, r2
 8004d8a:	0019      	movs	r1, r3
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	683a      	ldr	r2, [r7, #0]
 8004d92:	430a      	orrs	r2, r1
 8004d94:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	0018      	movs	r0, r3
 8004d9a:	f000 f813 	bl	8004dc4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	68fa      	ldr	r2, [r7, #12]
 8004da4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2288      	movs	r2, #136	@ 0x88
 8004daa:	2120      	movs	r1, #32
 8004dac:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2284      	movs	r2, #132	@ 0x84
 8004db2:	2100      	movs	r1, #0
 8004db4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004db6:	2300      	movs	r3, #0
}
 8004db8:	0018      	movs	r0, r3
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	b004      	add	sp, #16
 8004dbe:	bd80      	pop	{r7, pc}
 8004dc0:	f1ffffff 	.word	0xf1ffffff

08004dc4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004dc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004dc6:	b085      	sub	sp, #20
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d108      	bne.n	8004de6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	226a      	movs	r2, #106	@ 0x6a
 8004dd8:	2101      	movs	r1, #1
 8004dda:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2268      	movs	r2, #104	@ 0x68
 8004de0:	2101      	movs	r1, #1
 8004de2:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004de4:	e043      	b.n	8004e6e <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004de6:	260f      	movs	r6, #15
 8004de8:	19bb      	adds	r3, r7, r6
 8004dea:	2208      	movs	r2, #8
 8004dec:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004dee:	200e      	movs	r0, #14
 8004df0:	183b      	adds	r3, r7, r0
 8004df2:	2208      	movs	r2, #8
 8004df4:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	689b      	ldr	r3, [r3, #8]
 8004dfc:	0e5b      	lsrs	r3, r3, #25
 8004dfe:	b2da      	uxtb	r2, r3
 8004e00:	240d      	movs	r4, #13
 8004e02:	193b      	adds	r3, r7, r4
 8004e04:	2107      	movs	r1, #7
 8004e06:	400a      	ands	r2, r1
 8004e08:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	689b      	ldr	r3, [r3, #8]
 8004e10:	0f5b      	lsrs	r3, r3, #29
 8004e12:	b2da      	uxtb	r2, r3
 8004e14:	250c      	movs	r5, #12
 8004e16:	197b      	adds	r3, r7, r5
 8004e18:	2107      	movs	r1, #7
 8004e1a:	400a      	ands	r2, r1
 8004e1c:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004e1e:	183b      	adds	r3, r7, r0
 8004e20:	781b      	ldrb	r3, [r3, #0]
 8004e22:	197a      	adds	r2, r7, r5
 8004e24:	7812      	ldrb	r2, [r2, #0]
 8004e26:	4914      	ldr	r1, [pc, #80]	@ (8004e78 <UARTEx_SetNbDataToProcess+0xb4>)
 8004e28:	5c8a      	ldrb	r2, [r1, r2]
 8004e2a:	435a      	muls	r2, r3
 8004e2c:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8004e2e:	197b      	adds	r3, r7, r5
 8004e30:	781b      	ldrb	r3, [r3, #0]
 8004e32:	4a12      	ldr	r2, [pc, #72]	@ (8004e7c <UARTEx_SetNbDataToProcess+0xb8>)
 8004e34:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004e36:	0019      	movs	r1, r3
 8004e38:	f7fb f9ec 	bl	8000214 <__divsi3>
 8004e3c:	0003      	movs	r3, r0
 8004e3e:	b299      	uxth	r1, r3
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	226a      	movs	r2, #106	@ 0x6a
 8004e44:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004e46:	19bb      	adds	r3, r7, r6
 8004e48:	781b      	ldrb	r3, [r3, #0]
 8004e4a:	193a      	adds	r2, r7, r4
 8004e4c:	7812      	ldrb	r2, [r2, #0]
 8004e4e:	490a      	ldr	r1, [pc, #40]	@ (8004e78 <UARTEx_SetNbDataToProcess+0xb4>)
 8004e50:	5c8a      	ldrb	r2, [r1, r2]
 8004e52:	435a      	muls	r2, r3
 8004e54:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8004e56:	193b      	adds	r3, r7, r4
 8004e58:	781b      	ldrb	r3, [r3, #0]
 8004e5a:	4a08      	ldr	r2, [pc, #32]	@ (8004e7c <UARTEx_SetNbDataToProcess+0xb8>)
 8004e5c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004e5e:	0019      	movs	r1, r3
 8004e60:	f7fb f9d8 	bl	8000214 <__divsi3>
 8004e64:	0003      	movs	r3, r0
 8004e66:	b299      	uxth	r1, r3
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2268      	movs	r2, #104	@ 0x68
 8004e6c:	5299      	strh	r1, [r3, r2]
}
 8004e6e:	46c0      	nop			@ (mov r8, r8)
 8004e70:	46bd      	mov	sp, r7
 8004e72:	b005      	add	sp, #20
 8004e74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e76:	46c0      	nop			@ (mov r8, r8)
 8004e78:	08004fbc 	.word	0x08004fbc
 8004e7c:	08004fc4 	.word	0x08004fc4

08004e80 <memset>:
 8004e80:	0003      	movs	r3, r0
 8004e82:	1882      	adds	r2, r0, r2
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d100      	bne.n	8004e8a <memset+0xa>
 8004e88:	4770      	bx	lr
 8004e8a:	7019      	strb	r1, [r3, #0]
 8004e8c:	3301      	adds	r3, #1
 8004e8e:	e7f9      	b.n	8004e84 <memset+0x4>

08004e90 <__libc_init_array>:
 8004e90:	b570      	push	{r4, r5, r6, lr}
 8004e92:	2600      	movs	r6, #0
 8004e94:	4c0c      	ldr	r4, [pc, #48]	@ (8004ec8 <__libc_init_array+0x38>)
 8004e96:	4d0d      	ldr	r5, [pc, #52]	@ (8004ecc <__libc_init_array+0x3c>)
 8004e98:	1b64      	subs	r4, r4, r5
 8004e9a:	10a4      	asrs	r4, r4, #2
 8004e9c:	42a6      	cmp	r6, r4
 8004e9e:	d109      	bne.n	8004eb4 <__libc_init_array+0x24>
 8004ea0:	2600      	movs	r6, #0
 8004ea2:	f000 f819 	bl	8004ed8 <_init>
 8004ea6:	4c0a      	ldr	r4, [pc, #40]	@ (8004ed0 <__libc_init_array+0x40>)
 8004ea8:	4d0a      	ldr	r5, [pc, #40]	@ (8004ed4 <__libc_init_array+0x44>)
 8004eaa:	1b64      	subs	r4, r4, r5
 8004eac:	10a4      	asrs	r4, r4, #2
 8004eae:	42a6      	cmp	r6, r4
 8004eb0:	d105      	bne.n	8004ebe <__libc_init_array+0x2e>
 8004eb2:	bd70      	pop	{r4, r5, r6, pc}
 8004eb4:	00b3      	lsls	r3, r6, #2
 8004eb6:	58eb      	ldr	r3, [r5, r3]
 8004eb8:	4798      	blx	r3
 8004eba:	3601      	adds	r6, #1
 8004ebc:	e7ee      	b.n	8004e9c <__libc_init_array+0xc>
 8004ebe:	00b3      	lsls	r3, r6, #2
 8004ec0:	58eb      	ldr	r3, [r5, r3]
 8004ec2:	4798      	blx	r3
 8004ec4:	3601      	adds	r6, #1
 8004ec6:	e7f2      	b.n	8004eae <__libc_init_array+0x1e>
 8004ec8:	08004fcc 	.word	0x08004fcc
 8004ecc:	08004fcc 	.word	0x08004fcc
 8004ed0:	08004fd0 	.word	0x08004fd0
 8004ed4:	08004fcc 	.word	0x08004fcc

08004ed8 <_init>:
 8004ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004eda:	46c0      	nop			@ (mov r8, r8)
 8004edc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ede:	bc08      	pop	{r3}
 8004ee0:	469e      	mov	lr, r3
 8004ee2:	4770      	bx	lr

08004ee4 <_fini>:
 8004ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ee6:	46c0      	nop			@ (mov r8, r8)
 8004ee8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004eea:	bc08      	pop	{r3}
 8004eec:	469e      	mov	lr, r3
 8004eee:	4770      	bx	lr
