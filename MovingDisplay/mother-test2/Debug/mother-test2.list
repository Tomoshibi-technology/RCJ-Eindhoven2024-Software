
mother-test2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006dc8  080001c8  080001c8  000011c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000268  08006f90  08006f90  00007f90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080071f8  080071f8  00009078  2**0
                  CONTENTS
  4 .ARM          00000008  080071f8  080071f8  000081f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007200  08007200  00009078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007200  08007200  00008200  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007204  08007204  00008204  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  08007208  00009000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000025c  20000078  08007280  00009078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002d4  08007280  000092d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012cfb  00000000  00000000  000090a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023ff  00000000  00000000  0001bda3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f60  00000000  00000000  0001e1a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c37  00000000  00000000  0001f108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024e69  00000000  00000000  0001fd3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000142bb  00000000  00000000  00044ba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d62b3  00000000  00000000  00058e63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012f116  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000492c  00000000  00000000  0012f15c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  00133a88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000078 	.word	0x20000078
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08006f78 	.word	0x08006f78

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	2000007c 	.word	0x2000007c
 8000204:	08006f78 	.word	0x08006f78

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	@ 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__gedf2>:
 80009a4:	f04f 3cff 	mov.w	ip, #4294967295
 80009a8:	e006      	b.n	80009b8 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__ledf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	e002      	b.n	80009b8 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__cmpdf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ce:	d01b      	beq.n	8000a08 <__cmpdf2+0x54>
 80009d0:	b001      	add	sp, #4
 80009d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d6:	bf0c      	ite	eq
 80009d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009dc:	ea91 0f03 	teqne	r1, r3
 80009e0:	bf02      	ittt	eq
 80009e2:	ea90 0f02 	teqeq	r0, r2
 80009e6:	2000      	moveq	r0, #0
 80009e8:	4770      	bxeq	lr
 80009ea:	f110 0f00 	cmn.w	r0, #0
 80009ee:	ea91 0f03 	teq	r1, r3
 80009f2:	bf58      	it	pl
 80009f4:	4299      	cmppl	r1, r3
 80009f6:	bf08      	it	eq
 80009f8:	4290      	cmpeq	r0, r2
 80009fa:	bf2c      	ite	cs
 80009fc:	17d8      	asrcs	r0, r3, #31
 80009fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a02:	f040 0001 	orr.w	r0, r0, #1
 8000a06:	4770      	bx	lr
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__cmpdf2+0x64>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d107      	bne.n	8000a28 <__cmpdf2+0x74>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d1d6      	bne.n	80009d0 <__cmpdf2+0x1c>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d0d3      	beq.n	80009d0 <__cmpdf2+0x1c>
 8000a28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdrcmple>:
 8000a30:	4684      	mov	ip, r0
 8000a32:	4610      	mov	r0, r2
 8000a34:	4662      	mov	r2, ip
 8000a36:	468c      	mov	ip, r1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	e000      	b.n	8000a40 <__aeabi_cdcmpeq>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdcmpeq>:
 8000a40:	b501      	push	{r0, lr}
 8000a42:	f7ff ffb7 	bl	80009b4 <__cmpdf2>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	bf48      	it	mi
 8000a4a:	f110 0f00 	cmnmi.w	r0, #0
 8000a4e:	bd01      	pop	{r0, pc}

08000a50 <__aeabi_dcmpeq>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff fff4 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a58:	bf0c      	ite	eq
 8000a5a:	2001      	moveq	r0, #1
 8000a5c:	2000      	movne	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmplt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffea 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmple>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffe0 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpge>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffce 	bl	8000a30 <__aeabi_cdrcmple>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpgt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffc4 	bl	8000a30 <__aeabi_cdrcmple>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpun>:
 8000ab4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000abc:	d102      	bne.n	8000ac4 <__aeabi_dcmpun+0x10>
 8000abe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ac2:	d10a      	bne.n	8000ada <__aeabi_dcmpun+0x26>
 8000ac4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x20>
 8000ace:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ad2:	d102      	bne.n	8000ada <__aeabi_dcmpun+0x26>
 8000ad4:	f04f 0000 	mov.w	r0, #0
 8000ad8:	4770      	bx	lr
 8000ada:	f04f 0001 	mov.w	r0, #1
 8000ade:	4770      	bx	lr

08000ae0 <__aeabi_d2iz>:
 8000ae0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ae8:	d215      	bcs.n	8000b16 <__aeabi_d2iz+0x36>
 8000aea:	d511      	bpl.n	8000b10 <__aeabi_d2iz+0x30>
 8000aec:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000af0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000af4:	d912      	bls.n	8000b1c <__aeabi_d2iz+0x3c>
 8000af6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000afa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000afe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b02:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b06:	fa23 f002 	lsr.w	r0, r3, r2
 8000b0a:	bf18      	it	ne
 8000b0c:	4240      	negne	r0, r0
 8000b0e:	4770      	bx	lr
 8000b10:	f04f 0000 	mov.w	r0, #0
 8000b14:	4770      	bx	lr
 8000b16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b1a:	d105      	bne.n	8000b28 <__aeabi_d2iz+0x48>
 8000b1c:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b20:	bf08      	it	eq
 8000b22:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b26:	4770      	bx	lr
 8000b28:	f04f 0000 	mov.w	r0, #0
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop

08000b30 <__aeabi_d2f>:
 8000b30:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b34:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b38:	bf24      	itt	cs
 8000b3a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b3e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b42:	d90d      	bls.n	8000b60 <__aeabi_d2f+0x30>
 8000b44:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b48:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b4c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b50:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b54:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b58:	bf08      	it	eq
 8000b5a:	f020 0001 	biceq.w	r0, r0, #1
 8000b5e:	4770      	bx	lr
 8000b60:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b64:	d121      	bne.n	8000baa <__aeabi_d2f+0x7a>
 8000b66:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b6a:	bfbc      	itt	lt
 8000b6c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b70:	4770      	bxlt	lr
 8000b72:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b76:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b7a:	f1c2 0218 	rsb	r2, r2, #24
 8000b7e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b82:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b86:	fa20 f002 	lsr.w	r0, r0, r2
 8000b8a:	bf18      	it	ne
 8000b8c:	f040 0001 	orrne.w	r0, r0, #1
 8000b90:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b94:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b98:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b9c:	ea40 000c 	orr.w	r0, r0, ip
 8000ba0:	fa23 f302 	lsr.w	r3, r3, r2
 8000ba4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ba8:	e7cc      	b.n	8000b44 <__aeabi_d2f+0x14>
 8000baa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bae:	d107      	bne.n	8000bc0 <__aeabi_d2f+0x90>
 8000bb0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bb4:	bf1e      	ittt	ne
 8000bb6:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000bba:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000bbe:	4770      	bxne	lr
 8000bc0:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000bc4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bc8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop

08000bd0 <__aeabi_uldivmod>:
 8000bd0:	b953      	cbnz	r3, 8000be8 <__aeabi_uldivmod+0x18>
 8000bd2:	b94a      	cbnz	r2, 8000be8 <__aeabi_uldivmod+0x18>
 8000bd4:	2900      	cmp	r1, #0
 8000bd6:	bf08      	it	eq
 8000bd8:	2800      	cmpeq	r0, #0
 8000bda:	bf1c      	itt	ne
 8000bdc:	f04f 31ff 	movne.w	r1, #4294967295
 8000be0:	f04f 30ff 	movne.w	r0, #4294967295
 8000be4:	f000 b96a 	b.w	8000ebc <__aeabi_idiv0>
 8000be8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf0:	f000 f806 	bl	8000c00 <__udivmoddi4>
 8000bf4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bfc:	b004      	add	sp, #16
 8000bfe:	4770      	bx	lr

08000c00 <__udivmoddi4>:
 8000c00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c04:	9d08      	ldr	r5, [sp, #32]
 8000c06:	460c      	mov	r4, r1
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d14e      	bne.n	8000caa <__udivmoddi4+0xaa>
 8000c0c:	4694      	mov	ip, r2
 8000c0e:	458c      	cmp	ip, r1
 8000c10:	4686      	mov	lr, r0
 8000c12:	fab2 f282 	clz	r2, r2
 8000c16:	d962      	bls.n	8000cde <__udivmoddi4+0xde>
 8000c18:	b14a      	cbz	r2, 8000c2e <__udivmoddi4+0x2e>
 8000c1a:	f1c2 0320 	rsb	r3, r2, #32
 8000c1e:	4091      	lsls	r1, r2
 8000c20:	fa20 f303 	lsr.w	r3, r0, r3
 8000c24:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c28:	4319      	orrs	r1, r3
 8000c2a:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c32:	fa1f f68c 	uxth.w	r6, ip
 8000c36:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c3a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c3e:	fb07 1114 	mls	r1, r7, r4, r1
 8000c42:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c46:	fb04 f106 	mul.w	r1, r4, r6
 8000c4a:	4299      	cmp	r1, r3
 8000c4c:	d90a      	bls.n	8000c64 <__udivmoddi4+0x64>
 8000c4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c52:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c56:	f080 8112 	bcs.w	8000e7e <__udivmoddi4+0x27e>
 8000c5a:	4299      	cmp	r1, r3
 8000c5c:	f240 810f 	bls.w	8000e7e <__udivmoddi4+0x27e>
 8000c60:	3c02      	subs	r4, #2
 8000c62:	4463      	add	r3, ip
 8000c64:	1a59      	subs	r1, r3, r1
 8000c66:	fa1f f38e 	uxth.w	r3, lr
 8000c6a:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c6e:	fb07 1110 	mls	r1, r7, r0, r1
 8000c72:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c76:	fb00 f606 	mul.w	r6, r0, r6
 8000c7a:	429e      	cmp	r6, r3
 8000c7c:	d90a      	bls.n	8000c94 <__udivmoddi4+0x94>
 8000c7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c82:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c86:	f080 80fc 	bcs.w	8000e82 <__udivmoddi4+0x282>
 8000c8a:	429e      	cmp	r6, r3
 8000c8c:	f240 80f9 	bls.w	8000e82 <__udivmoddi4+0x282>
 8000c90:	4463      	add	r3, ip
 8000c92:	3802      	subs	r0, #2
 8000c94:	1b9b      	subs	r3, r3, r6
 8000c96:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c9a:	2100      	movs	r1, #0
 8000c9c:	b11d      	cbz	r5, 8000ca6 <__udivmoddi4+0xa6>
 8000c9e:	40d3      	lsrs	r3, r2
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	e9c5 3200 	strd	r3, r2, [r5]
 8000ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000caa:	428b      	cmp	r3, r1
 8000cac:	d905      	bls.n	8000cba <__udivmoddi4+0xba>
 8000cae:	b10d      	cbz	r5, 8000cb4 <__udivmoddi4+0xb4>
 8000cb0:	e9c5 0100 	strd	r0, r1, [r5]
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	4608      	mov	r0, r1
 8000cb8:	e7f5      	b.n	8000ca6 <__udivmoddi4+0xa6>
 8000cba:	fab3 f183 	clz	r1, r3
 8000cbe:	2900      	cmp	r1, #0
 8000cc0:	d146      	bne.n	8000d50 <__udivmoddi4+0x150>
 8000cc2:	42a3      	cmp	r3, r4
 8000cc4:	d302      	bcc.n	8000ccc <__udivmoddi4+0xcc>
 8000cc6:	4290      	cmp	r0, r2
 8000cc8:	f0c0 80f0 	bcc.w	8000eac <__udivmoddi4+0x2ac>
 8000ccc:	1a86      	subs	r6, r0, r2
 8000cce:	eb64 0303 	sbc.w	r3, r4, r3
 8000cd2:	2001      	movs	r0, #1
 8000cd4:	2d00      	cmp	r5, #0
 8000cd6:	d0e6      	beq.n	8000ca6 <__udivmoddi4+0xa6>
 8000cd8:	e9c5 6300 	strd	r6, r3, [r5]
 8000cdc:	e7e3      	b.n	8000ca6 <__udivmoddi4+0xa6>
 8000cde:	2a00      	cmp	r2, #0
 8000ce0:	f040 8090 	bne.w	8000e04 <__udivmoddi4+0x204>
 8000ce4:	eba1 040c 	sub.w	r4, r1, ip
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	fa1f f78c 	uxth.w	r7, ip
 8000cf0:	2101      	movs	r1, #1
 8000cf2:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cf6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cfa:	fb08 4416 	mls	r4, r8, r6, r4
 8000cfe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d02:	fb07 f006 	mul.w	r0, r7, r6
 8000d06:	4298      	cmp	r0, r3
 8000d08:	d908      	bls.n	8000d1c <__udivmoddi4+0x11c>
 8000d0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x11a>
 8000d14:	4298      	cmp	r0, r3
 8000d16:	f200 80cd 	bhi.w	8000eb4 <__udivmoddi4+0x2b4>
 8000d1a:	4626      	mov	r6, r4
 8000d1c:	1a1c      	subs	r4, r3, r0
 8000d1e:	fa1f f38e 	uxth.w	r3, lr
 8000d22:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d26:	fb08 4410 	mls	r4, r8, r0, r4
 8000d2a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d2e:	fb00 f707 	mul.w	r7, r0, r7
 8000d32:	429f      	cmp	r7, r3
 8000d34:	d908      	bls.n	8000d48 <__udivmoddi4+0x148>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d3e:	d202      	bcs.n	8000d46 <__udivmoddi4+0x146>
 8000d40:	429f      	cmp	r7, r3
 8000d42:	f200 80b0 	bhi.w	8000ea6 <__udivmoddi4+0x2a6>
 8000d46:	4620      	mov	r0, r4
 8000d48:	1bdb      	subs	r3, r3, r7
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	e7a5      	b.n	8000c9c <__udivmoddi4+0x9c>
 8000d50:	f1c1 0620 	rsb	r6, r1, #32
 8000d54:	408b      	lsls	r3, r1
 8000d56:	fa22 f706 	lsr.w	r7, r2, r6
 8000d5a:	431f      	orrs	r7, r3
 8000d5c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d60:	fa04 f301 	lsl.w	r3, r4, r1
 8000d64:	ea43 030c 	orr.w	r3, r3, ip
 8000d68:	40f4      	lsrs	r4, r6
 8000d6a:	fa00 f801 	lsl.w	r8, r0, r1
 8000d6e:	0c38      	lsrs	r0, r7, #16
 8000d70:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d74:	fbb4 fef0 	udiv	lr, r4, r0
 8000d78:	fa1f fc87 	uxth.w	ip, r7
 8000d7c:	fb00 441e 	mls	r4, r0, lr, r4
 8000d80:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d84:	fb0e f90c 	mul.w	r9, lr, ip
 8000d88:	45a1      	cmp	r9, r4
 8000d8a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d8e:	d90a      	bls.n	8000da6 <__udivmoddi4+0x1a6>
 8000d90:	193c      	adds	r4, r7, r4
 8000d92:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d96:	f080 8084 	bcs.w	8000ea2 <__udivmoddi4+0x2a2>
 8000d9a:	45a1      	cmp	r9, r4
 8000d9c:	f240 8081 	bls.w	8000ea2 <__udivmoddi4+0x2a2>
 8000da0:	f1ae 0e02 	sub.w	lr, lr, #2
 8000da4:	443c      	add	r4, r7
 8000da6:	eba4 0409 	sub.w	r4, r4, r9
 8000daa:	fa1f f983 	uxth.w	r9, r3
 8000dae:	fbb4 f3f0 	udiv	r3, r4, r0
 8000db2:	fb00 4413 	mls	r4, r0, r3, r4
 8000db6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dba:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dbe:	45a4      	cmp	ip, r4
 8000dc0:	d907      	bls.n	8000dd2 <__udivmoddi4+0x1d2>
 8000dc2:	193c      	adds	r4, r7, r4
 8000dc4:	f103 30ff 	add.w	r0, r3, #4294967295
 8000dc8:	d267      	bcs.n	8000e9a <__udivmoddi4+0x29a>
 8000dca:	45a4      	cmp	ip, r4
 8000dcc:	d965      	bls.n	8000e9a <__udivmoddi4+0x29a>
 8000dce:	3b02      	subs	r3, #2
 8000dd0:	443c      	add	r4, r7
 8000dd2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dd6:	fba0 9302 	umull	r9, r3, r0, r2
 8000dda:	eba4 040c 	sub.w	r4, r4, ip
 8000dde:	429c      	cmp	r4, r3
 8000de0:	46ce      	mov	lr, r9
 8000de2:	469c      	mov	ip, r3
 8000de4:	d351      	bcc.n	8000e8a <__udivmoddi4+0x28a>
 8000de6:	d04e      	beq.n	8000e86 <__udivmoddi4+0x286>
 8000de8:	b155      	cbz	r5, 8000e00 <__udivmoddi4+0x200>
 8000dea:	ebb8 030e 	subs.w	r3, r8, lr
 8000dee:	eb64 040c 	sbc.w	r4, r4, ip
 8000df2:	fa04 f606 	lsl.w	r6, r4, r6
 8000df6:	40cb      	lsrs	r3, r1
 8000df8:	431e      	orrs	r6, r3
 8000dfa:	40cc      	lsrs	r4, r1
 8000dfc:	e9c5 6400 	strd	r6, r4, [r5]
 8000e00:	2100      	movs	r1, #0
 8000e02:	e750      	b.n	8000ca6 <__udivmoddi4+0xa6>
 8000e04:	f1c2 0320 	rsb	r3, r2, #32
 8000e08:	fa20 f103 	lsr.w	r1, r0, r3
 8000e0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e10:	fa24 f303 	lsr.w	r3, r4, r3
 8000e14:	4094      	lsls	r4, r2
 8000e16:	430c      	orrs	r4, r1
 8000e18:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e1c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e20:	fa1f f78c 	uxth.w	r7, ip
 8000e24:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e28:	fb08 3110 	mls	r1, r8, r0, r3
 8000e2c:	0c23      	lsrs	r3, r4, #16
 8000e2e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e32:	fb00 f107 	mul.w	r1, r0, r7
 8000e36:	4299      	cmp	r1, r3
 8000e38:	d908      	bls.n	8000e4c <__udivmoddi4+0x24c>
 8000e3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e3e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e42:	d22c      	bcs.n	8000e9e <__udivmoddi4+0x29e>
 8000e44:	4299      	cmp	r1, r3
 8000e46:	d92a      	bls.n	8000e9e <__udivmoddi4+0x29e>
 8000e48:	3802      	subs	r0, #2
 8000e4a:	4463      	add	r3, ip
 8000e4c:	1a5b      	subs	r3, r3, r1
 8000e4e:	b2a4      	uxth	r4, r4
 8000e50:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e54:	fb08 3311 	mls	r3, r8, r1, r3
 8000e58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e5c:	fb01 f307 	mul.w	r3, r1, r7
 8000e60:	42a3      	cmp	r3, r4
 8000e62:	d908      	bls.n	8000e76 <__udivmoddi4+0x276>
 8000e64:	eb1c 0404 	adds.w	r4, ip, r4
 8000e68:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e6c:	d213      	bcs.n	8000e96 <__udivmoddi4+0x296>
 8000e6e:	42a3      	cmp	r3, r4
 8000e70:	d911      	bls.n	8000e96 <__udivmoddi4+0x296>
 8000e72:	3902      	subs	r1, #2
 8000e74:	4464      	add	r4, ip
 8000e76:	1ae4      	subs	r4, r4, r3
 8000e78:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e7c:	e739      	b.n	8000cf2 <__udivmoddi4+0xf2>
 8000e7e:	4604      	mov	r4, r0
 8000e80:	e6f0      	b.n	8000c64 <__udivmoddi4+0x64>
 8000e82:	4608      	mov	r0, r1
 8000e84:	e706      	b.n	8000c94 <__udivmoddi4+0x94>
 8000e86:	45c8      	cmp	r8, r9
 8000e88:	d2ae      	bcs.n	8000de8 <__udivmoddi4+0x1e8>
 8000e8a:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e8e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e92:	3801      	subs	r0, #1
 8000e94:	e7a8      	b.n	8000de8 <__udivmoddi4+0x1e8>
 8000e96:	4631      	mov	r1, r6
 8000e98:	e7ed      	b.n	8000e76 <__udivmoddi4+0x276>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	e799      	b.n	8000dd2 <__udivmoddi4+0x1d2>
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	e7d4      	b.n	8000e4c <__udivmoddi4+0x24c>
 8000ea2:	46d6      	mov	lr, sl
 8000ea4:	e77f      	b.n	8000da6 <__udivmoddi4+0x1a6>
 8000ea6:	4463      	add	r3, ip
 8000ea8:	3802      	subs	r0, #2
 8000eaa:	e74d      	b.n	8000d48 <__udivmoddi4+0x148>
 8000eac:	4606      	mov	r6, r0
 8000eae:	4623      	mov	r3, r4
 8000eb0:	4608      	mov	r0, r1
 8000eb2:	e70f      	b.n	8000cd4 <__udivmoddi4+0xd4>
 8000eb4:	3e02      	subs	r6, #2
 8000eb6:	4463      	add	r3, ip
 8000eb8:	e730      	b.n	8000d1c <__udivmoddi4+0x11c>
 8000eba:	bf00      	nop

08000ebc <__aeabi_idiv0>:
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop

08000ec0 <_ZN6BNO055C1E17I2C_HandleTypeDefh>:
#include "BNO055.hpp"

BNO055::BNO055(I2C_HandleTypeDef i2c_module,unsigned char device_address){
 8000ec0:	b084      	sub	sp, #16
 8000ec2:	b580      	push	{r7, lr}
 8000ec4:	b086      	sub	sp, #24
 8000ec6:	af02      	add	r7, sp, #8
 8000ec8:	6078      	str	r0, [r7, #4]
 8000eca:	f107 001c 	add.w	r0, r7, #28
 8000ece:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	i2c_module_ = i2c_module;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	3304      	adds	r3, #4
 8000ed6:	f107 011c 	add.w	r1, r7, #28
 8000eda:	2254      	movs	r2, #84	@ 0x54
 8000edc:	4618      	mov	r0, r3
 8000ede:	f006 f83d 	bl	8006f5c <memcpy>
	device_address_ = device_address;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	f897 2070 	ldrb.w	r2, [r7, #112]	@ 0x70
 8000ee8:	701a      	strb	r2, [r3, #0]
	uint8_t bno_mode_senddata[] = {0x3d,0x08};
 8000eea:	f640 033d 	movw	r3, #2109	@ 0x83d
 8000eee:	81bb      	strh	r3, [r7, #12]
	HAL_I2C_Master_Transmit(&i2c_module, device_address<<1, bno_mode_senddata, 2, 100);
 8000ef0:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 8000ef4:	b29b      	uxth	r3, r3
 8000ef6:	005b      	lsls	r3, r3, #1
 8000ef8:	b299      	uxth	r1, r3
 8000efa:	f107 020c 	add.w	r2, r7, #12
 8000efe:	f107 001c 	add.w	r0, r7, #28
 8000f02:	2364      	movs	r3, #100	@ 0x64
 8000f04:	9300      	str	r3, [sp, #0]
 8000f06:	2302      	movs	r3, #2
 8000f08:	f001 fc2c 	bl	8002764 <HAL_I2C_Master_Transmit>
	HAL_Delay(700);
 8000f0c:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 8000f10:	f000 fffa 	bl	8001f08 <HAL_Delay>
}
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	4618      	mov	r0, r3
 8000f18:	3710      	adds	r7, #16
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000f20:	b004      	add	sp, #16
 8000f22:	4770      	bx	lr

08000f24 <_ZN6BNO05514get_quaternionEv>:
//	        HAL_Delay(100);
//	    }
//	}
}

QUATERNION BNO055::get_quaternion(){
 8000f24:	b590      	push	{r4, r7, lr}
 8000f26:	b099      	sub	sp, #100	@ 0x64
 8000f28:	af02      	add	r7, sp, #8
 8000f2a:	6178      	str	r0, [r7, #20]
	uint8_t bno_readquat_address = 0x20;
 8000f2c:	2320      	movs	r3, #32
 8000f2e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	uint8_t bno_receivedata[16];
	short quat[4];

	HAL_I2C_Master_Transmit(&i2c_module_, device_address_<<1, &bno_readquat_address, 1, 100);
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	1d18      	adds	r0, r3, #4
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	005b      	lsls	r3, r3, #1
 8000f3c:	b299      	uxth	r1, r3
 8000f3e:	f107 0247 	add.w	r2, r7, #71	@ 0x47
 8000f42:	2364      	movs	r3, #100	@ 0x64
 8000f44:	9300      	str	r3, [sp, #0]
 8000f46:	2301      	movs	r3, #1
 8000f48:	f001 fc0c 	bl	8002764 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&i2c_module_, device_address_<<1, bno_receivedata, 8, 100);
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	1d18      	adds	r0, r3, #4
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	005b      	lsls	r3, r3, #1
 8000f56:	b299      	uxth	r1, r3
 8000f58:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8000f5c:	2364      	movs	r3, #100	@ 0x64
 8000f5e:	9300      	str	r3, [sp, #0]
 8000f60:	2308      	movs	r3, #8
 8000f62:	f001 fcfd 	bl	8002960 <HAL_I2C_Master_Receive>
	quat[0] = bno_receivedata[1] << 8 | bno_receivedata[0];
 8000f66:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8000f6a:	021b      	lsls	r3, r3, #8
 8000f6c:	b21a      	sxth	r2, r3
 8000f6e:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8000f72:	b21b      	sxth	r3, r3
 8000f74:	4313      	orrs	r3, r2
 8000f76:	b21b      	sxth	r3, r3
 8000f78:	85bb      	strh	r3, [r7, #44]	@ 0x2c
	quat[1] = bno_receivedata[3] << 8 | bno_receivedata[2];
 8000f7a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000f7e:	021b      	lsls	r3, r3, #8
 8000f80:	b21a      	sxth	r2, r3
 8000f82:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8000f86:	b21b      	sxth	r3, r3
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	b21b      	sxth	r3, r3
 8000f8c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	quat[2] = bno_receivedata[5] << 8 | bno_receivedata[4];
 8000f8e:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8000f92:	021b      	lsls	r3, r3, #8
 8000f94:	b21a      	sxth	r2, r3
 8000f96:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8000f9a:	b21b      	sxth	r3, r3
 8000f9c:	4313      	orrs	r3, r2
 8000f9e:	b21b      	sxth	r3, r3
 8000fa0:	863b      	strh	r3, [r7, #48]	@ 0x30
	quat[3] = bno_receivedata[7] << 8 | bno_receivedata[6];
 8000fa2:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8000fa6:	021b      	lsls	r3, r3, #8
 8000fa8:	b21a      	sxth	r2, r3
 8000faa:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8000fae:	b21b      	sxth	r3, r3
 8000fb0:	4313      	orrs	r3, r2
 8000fb2:	b21b      	sxth	r3, r3
 8000fb4:	867b      	strh	r3, [r7, #50]	@ 0x32

	QUATERNION q = { (float)quat[1]/16384.0,(float)quat[2]/16384.0,(float)quat[3]/16384.0,(float)quat[0]/16384.0 };
 8000fb6:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 8000fba:	ee07 3a90 	vmov	s15, r3
 8000fbe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fc2:	eddf 6a24 	vldr	s13, [pc, #144]	@ 8001054 <_ZN6BNO05514get_quaternionEv+0x130>
 8000fc6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fca:	edc7 7a07 	vstr	s15, [r7, #28]
 8000fce:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 8000fd2:	ee07 3a90 	vmov	s15, r3
 8000fd6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fda:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8001054 <_ZN6BNO05514get_quaternionEv+0x130>
 8000fde:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fe2:	edc7 7a08 	vstr	s15, [r7, #32]
 8000fe6:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8000fea:	ee07 3a90 	vmov	s15, r3
 8000fee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ff2:	eddf 6a18 	vldr	s13, [pc, #96]	@ 8001054 <_ZN6BNO05514get_quaternionEv+0x130>
 8000ff6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ffa:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
 8000ffe:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 8001002:	ee07 3a90 	vmov	s15, r3
 8001006:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800100a:	eddf 6a12 	vldr	s13, [pc, #72]	@ 8001054 <_ZN6BNO05514get_quaternionEv+0x130>
 800100e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001012:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
	return q;
 8001016:	f107 0448 	add.w	r4, r7, #72	@ 0x48
 800101a:	f107 031c 	add.w	r3, r7, #28
 800101e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001020:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001024:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8001026:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8001028:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800102a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800102c:	ee06 0a10 	vmov	s12, r0
 8001030:	ee06 1a90 	vmov	s13, r1
 8001034:	ee07 2a10 	vmov	s14, r2
 8001038:	ee07 3a90 	vmov	s15, r3
}
 800103c:	eeb0 0a46 	vmov.f32	s0, s12
 8001040:	eef0 0a66 	vmov.f32	s1, s13
 8001044:	eeb0 1a47 	vmov.f32	s2, s14
 8001048:	eef0 1a67 	vmov.f32	s3, s15
 800104c:	375c      	adds	r7, #92	@ 0x5c
 800104e:	46bd      	mov	sp, r7
 8001050:	bd90      	pop	{r4, r7, pc}
 8001052:	bf00      	nop
 8001054:	46800000 	.word	0x46800000

08001058 <_ZN6BNO0559get_eularEv>:

EULAR BNO055::get_eular(){
 8001058:	b5b0      	push	{r4, r5, r7, lr}
 800105a:	b09a      	sub	sp, #104	@ 0x68
 800105c:	af00      	add	r7, sp, #0
 800105e:	6178      	str	r0, [r7, #20]

	QUATERNION q = get_quaternion();
 8001060:	6978      	ldr	r0, [r7, #20]
 8001062:	f7ff ff5f 	bl	8000f24 <_ZN6BNO05514get_quaternionEv>
 8001066:	eeb0 6a40 	vmov.f32	s12, s0
 800106a:	eef0 6a60 	vmov.f32	s13, s1
 800106e:	eeb0 7a41 	vmov.f32	s14, s2
 8001072:	eef0 7a61 	vmov.f32	s15, s3
 8001076:	ed87 6a09 	vstr	s12, [r7, #36]	@ 0x24
 800107a:	edc7 6a0a 	vstr	s13, [r7, #40]	@ 0x28
 800107e:	ed87 7a0b 	vstr	s14, [r7, #44]	@ 0x2c
 8001082:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
	EULAR e;
	// roll (x-axis rotation)
	double sinr_cosp = +2.0 * (q.w * q.x + q.y * q.z);
 8001086:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 800108a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800108e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001092:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8001096:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800109a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800109e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010a2:	ee17 0a90 	vmov	r0, s15
 80010a6:	f7ff fa13 	bl	80004d0 <__aeabi_f2d>
 80010aa:	4602      	mov	r2, r0
 80010ac:	460b      	mov	r3, r1
 80010ae:	f7ff f8b1 	bl	8000214 <__adddf3>
 80010b2:	4602      	mov	r2, r0
 80010b4:	460b      	mov	r3, r1
 80010b6:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
	double cosr_cosp = +1.0 - 2.0 * (q.x * q.x + q.y * q.y);
 80010ba:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80010be:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80010c2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010c6:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 80010ca:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80010ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010d6:	ee17 0a90 	vmov	r0, s15
 80010da:	f7ff f9f9 	bl	80004d0 <__aeabi_f2d>
 80010de:	4602      	mov	r2, r0
 80010e0:	460b      	mov	r3, r1
 80010e2:	f7ff f897 	bl	8000214 <__adddf3>
 80010e6:	4602      	mov	r2, r0
 80010e8:	460b      	mov	r3, r1
 80010ea:	f04f 0000 	mov.w	r0, #0
 80010ee:	4960      	ldr	r1, [pc, #384]	@ (8001270 <_ZN6BNO0559get_eularEv+0x218>)
 80010f0:	f7ff f88e 	bl	8000210 <__aeabi_dsub>
 80010f4:	4602      	mov	r2, r0
 80010f6:	460b      	mov	r3, r1
 80010f8:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
	e.x = atan2(sinr_cosp, cosr_cosp);
 80010fc:	ed97 1b16 	vldr	d1, [r7, #88]	@ 0x58
 8001100:	ed97 0b18 	vldr	d0, [r7, #96]	@ 0x60
 8001104:	f004 f968 	bl	80053d8 <atan2>
 8001108:	ec53 2b10 	vmov	r2, r3, d0
 800110c:	4610      	mov	r0, r2
 800110e:	4619      	mov	r1, r3
 8001110:	f7ff fd0e 	bl	8000b30 <__aeabi_d2f>
 8001114:	4603      	mov	r3, r0
 8001116:	61bb      	str	r3, [r7, #24]

	// pitch (y-axis rotation)
	double sinp = +2.0 * (q.w * q.y - q.z * q.x);
 8001118:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 800111c:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001120:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001124:	edd7 6a0b 	vldr	s13, [r7, #44]	@ 0x2c
 8001128:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800112c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001130:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001134:	ee17 0a90 	vmov	r0, s15
 8001138:	f7ff f9ca 	bl	80004d0 <__aeabi_f2d>
 800113c:	4602      	mov	r2, r0
 800113e:	460b      	mov	r3, r1
 8001140:	f7ff f868 	bl	8000214 <__adddf3>
 8001144:	4602      	mov	r2, r0
 8001146:	460b      	mov	r3, r1
 8001148:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
	if (fabs(sinp) >= 1)
 800114c:	6d3c      	ldr	r4, [r7, #80]	@ 0x50
 800114e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001150:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 8001154:	f04f 0200 	mov.w	r2, #0
 8001158:	4b45      	ldr	r3, [pc, #276]	@ (8001270 <_ZN6BNO0559get_eularEv+0x218>)
 800115a:	4620      	mov	r0, r4
 800115c:	4629      	mov	r1, r5
 800115e:	f7ff fc95 	bl	8000a8c <__aeabi_dcmpge>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d00e      	beq.n	8001186 <_ZN6BNO0559get_eularEv+0x12e>
		e.y = copysign(3.1415926535 / 2, sinp); // use 90 degrees if out of range
 8001168:	ed97 1b14 	vldr	d1, [r7, #80]	@ 0x50
 800116c:	ed9f 0b3e 	vldr	d0, [pc, #248]	@ 8001268 <_ZN6BNO0559get_eularEv+0x210>
 8001170:	f004 f992 	bl	8005498 <copysign>
 8001174:	ec53 2b10 	vmov	r2, r3, d0
 8001178:	4610      	mov	r0, r2
 800117a:	4619      	mov	r1, r3
 800117c:	f7ff fcd8 	bl	8000b30 <__aeabi_d2f>
 8001180:	4603      	mov	r3, r0
 8001182:	61fb      	str	r3, [r7, #28]
 8001184:	e00b      	b.n	800119e <_ZN6BNO0559get_eularEv+0x146>
	else
		e.y = asin(sinp);
 8001186:	ed97 0b14 	vldr	d0, [r7, #80]	@ 0x50
 800118a:	f004 f8f1 	bl	8005370 <asin>
 800118e:	ec53 2b10 	vmov	r2, r3, d0
 8001192:	4610      	mov	r0, r2
 8001194:	4619      	mov	r1, r3
 8001196:	f7ff fccb 	bl	8000b30 <__aeabi_d2f>
 800119a:	4603      	mov	r3, r0
 800119c:	61fb      	str	r3, [r7, #28]

	// yaw (z-axis rotation)
	double siny_cosp = +2.0 * (q.w * q.z + q.x * q.y);
 800119e:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 80011a2:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80011a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011aa:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80011ae:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80011b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011ba:	ee17 0a90 	vmov	r0, s15
 80011be:	f7ff f987 	bl	80004d0 <__aeabi_f2d>
 80011c2:	4602      	mov	r2, r0
 80011c4:	460b      	mov	r3, r1
 80011c6:	f7ff f825 	bl	8000214 <__adddf3>
 80011ca:	4602      	mov	r2, r0
 80011cc:	460b      	mov	r3, r1
 80011ce:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
	double cosy_cosp = +1.0 - 2.0 * (q.y * q.y + q.z * q.z);
 80011d2:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80011d6:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80011da:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011de:	edd7 6a0b 	vldr	s13, [r7, #44]	@ 0x2c
 80011e2:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80011e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011ee:	ee17 0a90 	vmov	r0, s15
 80011f2:	f7ff f96d 	bl	80004d0 <__aeabi_f2d>
 80011f6:	4602      	mov	r2, r0
 80011f8:	460b      	mov	r3, r1
 80011fa:	f7ff f80b 	bl	8000214 <__adddf3>
 80011fe:	4602      	mov	r2, r0
 8001200:	460b      	mov	r3, r1
 8001202:	f04f 0000 	mov.w	r0, #0
 8001206:	491a      	ldr	r1, [pc, #104]	@ (8001270 <_ZN6BNO0559get_eularEv+0x218>)
 8001208:	f7ff f802 	bl	8000210 <__aeabi_dsub>
 800120c:	4602      	mov	r2, r0
 800120e:	460b      	mov	r3, r1
 8001210:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
	e.z = atan2(siny_cosp, cosy_cosp);
 8001214:	ed97 1b10 	vldr	d1, [r7, #64]	@ 0x40
 8001218:	ed97 0b12 	vldr	d0, [r7, #72]	@ 0x48
 800121c:	f004 f8dc 	bl	80053d8 <atan2>
 8001220:	ec53 2b10 	vmov	r2, r3, d0
 8001224:	4610      	mov	r0, r2
 8001226:	4619      	mov	r1, r3
 8001228:	f7ff fc82 	bl	8000b30 <__aeabi_d2f>
 800122c:	4603      	mov	r3, r0
 800122e:	623b      	str	r3, [r7, #32]

	return e;
 8001230:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001234:	f107 0218 	add.w	r2, r7, #24
 8001238:	ca07      	ldmia	r2, {r0, r1, r2}
 800123a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800123e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8001240:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001242:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001244:	ee06 1a90 	vmov	s13, r1
 8001248:	ee07 2a10 	vmov	s14, r2
 800124c:	ee07 3a90 	vmov	s15, r3
}
 8001250:	eeb0 0a66 	vmov.f32	s0, s13
 8001254:	eef0 0a47 	vmov.f32	s1, s14
 8001258:	eeb0 1a67 	vmov.f32	s2, s15
 800125c:	3768      	adds	r7, #104	@ 0x68
 800125e:	46bd      	mov	sp, r7
 8001260:	bdb0      	pop	{r4, r5, r7, pc}
 8001262:	bf00      	nop
 8001264:	f3af 8000 	nop.w
 8001268:	54411744 	.word	0x54411744
 800126c:	3ff921fb 	.word	0x3ff921fb
 8001270:	3ff00000 	.word	0x3ff00000
 8001274:	00000000 	.word	0x00000000

08001278 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001278:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800127c:	b0b6      	sub	sp, #216	@ 0xd8
 800127e:	af14      	add	r7, sp, #80	@ 0x50
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001280:	f000 fdd0 	bl	8001e24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001284:	f000 f98c 	bl	80015a0 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001288:	f000 faca 	bl	8001820 <_ZL12MX_GPIO_Initv>
  MX_TIM2_Init();
 800128c:	f000 fa3e 	bl	800170c <_ZL12MX_TIM2_Initv>
  MX_USART6_UART_Init();
 8001290:	f000 fa98 	bl	80017c4 <_ZL19MX_USART6_UART_Initv>
  MX_I2C1_Init();
 8001294:	f000 fa06 	bl	80016a4 <_ZL12MX_I2C1_Initv>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8001298:	48b1      	ldr	r0, [pc, #708]	@ (8001560 <main+0x2e8>)
 800129a:	f003 f8cd 	bl	8004438 <HAL_TIM_Base_Start_IT>
  HAL_UART_Transmit(&huart6, send_array, 12, 10);
 800129e:	230a      	movs	r3, #10
 80012a0:	220c      	movs	r2, #12
 80012a2:	49b0      	ldr	r1, [pc, #704]	@ (8001564 <main+0x2ec>)
 80012a4:	48b0      	ldr	r0, [pc, #704]	@ (8001568 <main+0x2f0>)
 80012a6:	f003 fc11 	bl	8004acc <HAL_UART_Transmit>


  HAL_Delay(1000);
 80012aa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80012ae:	f000 fe2b 	bl	8001f08 <HAL_Delay>

  while (!ready) {
 80012b2:	e01c      	b.n	80012ee <main+0x76>
    if (HAL_I2C_IsDeviceReady(&hi2c1, 0x28<< 1, 10, 1000) == HAL_OK) {
 80012b4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012b8:	220a      	movs	r2, #10
 80012ba:	2150      	movs	r1, #80	@ 0x50
 80012bc:	48ab      	ldr	r0, [pc, #684]	@ (800156c <main+0x2f4>)
 80012be:	f001 fd81 	bl	8002dc4 <HAL_I2C_IsDeviceReady>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	bf0c      	ite	eq
 80012c8:	2301      	moveq	r3, #1
 80012ca:	2300      	movne	r3, #0
 80012cc:	b2db      	uxtb	r3, r3
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d003      	beq.n	80012da <main+0x62>
      ready = 1;
 80012d2:	4ba7      	ldr	r3, [pc, #668]	@ (8001570 <main+0x2f8>)
 80012d4:	2201      	movs	r2, #1
 80012d6:	701a      	strb	r2, [r3, #0]
 80012d8:	e009      	b.n	80012ee <main+0x76>
    } else {
    	ready = 0;
 80012da:	4ba5      	ldr	r3, [pc, #660]	@ (8001570 <main+0x2f8>)
 80012dc:	2200      	movs	r2, #0
 80012de:	701a      	strb	r2, [r3, #0]
    	HAL_Delay(100);
 80012e0:	2064      	movs	r0, #100	@ 0x64
 80012e2:	f000 fe11 	bl	8001f08 <HAL_Delay>
    	HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
 80012e6:	2104      	movs	r1, #4
 80012e8:	48a2      	ldr	r0, [pc, #648]	@ (8001574 <main+0x2fc>)
 80012ea:	f001 f8dc 	bl	80024a6 <HAL_GPIO_TogglePin>
  while (!ready) {
 80012ee:	4ba0      	ldr	r3, [pc, #640]	@ (8001570 <main+0x2f8>)
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d0de      	beq.n	80012b4 <main+0x3c>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
//  uint32_t Ltika_pcounter = m_counter;
  uint32_t set_pcounter = m_counter;
 80012f6:	4ba0      	ldr	r3, [pc, #640]	@ (8001578 <main+0x300>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t Tx_pcounter = m_counter;
 80012fe:	4b9e      	ldr	r3, [pc, #632]	@ (8001578 <main+0x300>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  uint32_t d_pcounter = m_counter;
 8001306:	4b9c      	ldr	r3, [pc, #624]	@ (8001578 <main+0x300>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	67fb      	str	r3, [r7, #124]	@ 0x7c

  uint8_t Odo_ID = 248;
 800130c:	23f8      	movs	r3, #248	@ 0xf8
 800130e:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76



  unsigned char address = 0x28;
 8001312:	2328      	movs	r3, #40	@ 0x28
 8001314:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
  BNO055 bno055(hi2c1,address);
 8001318:	4e94      	ldr	r6, [pc, #592]	@ (800156c <main+0x2f4>)
 800131a:	f107 081c 	add.w	r8, r7, #28
 800131e:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8001322:	9312      	str	r3, [sp, #72]	@ 0x48
 8001324:	4668      	mov	r0, sp
 8001326:	f106 030c 	add.w	r3, r6, #12
 800132a:	2248      	movs	r2, #72	@ 0x48
 800132c:	4619      	mov	r1, r3
 800132e:	f005 fe15 	bl	8006f5c <memcpy>
 8001332:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8001336:	4640      	mov	r0, r8
 8001338:	f7ff fdc2 	bl	8000ec0 <_ZN6BNO055C1E17I2C_HandleTypeDefh>
  QUATERNION q;
  EULAR e;
  while (1)
  {
	e = bno055.get_eular();
 800133c:	f107 031c 	add.w	r3, r7, #28
 8001340:	4618      	mov	r0, r3
 8001342:	f7ff fe89 	bl	8001058 <_ZN6BNO0559get_eularEv>
 8001346:	eef0 6a40 	vmov.f32	s13, s0
 800134a:	eeb0 7a60 	vmov.f32	s14, s1
 800134e:	eef0 7a41 	vmov.f32	s15, s2
 8001352:	edc7 6a00 	vstr	s13, [r7]
 8001356:	ed87 7a01 	vstr	s14, [r7, #4]
 800135a:	edc7 7a02 	vstr	s15, [r7, #8]
	rotate = -1*(e.z/3.1415)*180;
 800135e:	68bb      	ldr	r3, [r7, #8]
 8001360:	4618      	mov	r0, r3
 8001362:	f7ff f8b5 	bl	80004d0 <__aeabi_f2d>
 8001366:	a37c      	add	r3, pc, #496	@ (adr r3, 8001558 <main+0x2e0>)
 8001368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800136c:	f7ff fa32 	bl	80007d4 <__aeabi_ddiv>
 8001370:	4602      	mov	r2, r0
 8001372:	460b      	mov	r3, r1
 8001374:	4614      	mov	r4, r2
 8001376:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 800137a:	f04f 0200 	mov.w	r2, #0
 800137e:	4b7f      	ldr	r3, [pc, #508]	@ (800157c <main+0x304>)
 8001380:	4620      	mov	r0, r4
 8001382:	4629      	mov	r1, r5
 8001384:	f7ff f8fc 	bl	8000580 <__aeabi_dmul>
 8001388:	4602      	mov	r2, r0
 800138a:	460b      	mov	r3, r1
 800138c:	4610      	mov	r0, r2
 800138e:	4619      	mov	r1, r3
 8001390:	f7ff fbce 	bl	8000b30 <__aeabi_d2f>
 8001394:	4603      	mov	r3, r0
 8001396:	4a7a      	ldr	r2, [pc, #488]	@ (8001580 <main+0x308>)
 8001398:	6013      	str	r3, [r2, #0]
	rotate = (int)rotate;
 800139a:	4b79      	ldr	r3, [pc, #484]	@ (8001580 <main+0x308>)
 800139c:	edd3 7a00 	vldr	s15, [r3]
 80013a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013a8:	4b75      	ldr	r3, [pc, #468]	@ (8001580 <main+0x308>)
 80013aa:	edc3 7a00 	vstr	s15, [r3]


	dtime = m_counter - d_pcounter;
 80013ae:	4b72      	ldr	r3, [pc, #456]	@ (8001578 <main+0x300>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	b29a      	uxth	r2, r3
 80013b4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80013b6:	b29b      	uxth	r3, r3
 80013b8:	1ad3      	subs	r3, r2, r3
 80013ba:	b29a      	uxth	r2, r3
 80013bc:	4b71      	ldr	r3, [pc, #452]	@ (8001584 <main+0x30c>)
 80013be:	801a      	strh	r2, [r3, #0]
	d_pcounter = m_counter;
 80013c0:	4b6d      	ldr	r3, [pc, #436]	@ (8001578 <main+0x300>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	67fb      	str	r3, [r7, #124]	@ 0x7c

	if(m_counter - set_pcounter > 10){
 80013c6:	4b6c      	ldr	r3, [pc, #432]	@ (8001578 <main+0x300>)
 80013c8:	681a      	ldr	r2, [r3, #0]
 80013ca:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80013ce:	1ad3      	subs	r3, r2, r3
 80013d0:	2b0a      	cmp	r3, #10
 80013d2:	d932      	bls.n	800143a <main+0x1c2>
	  set_pcounter = m_counter;
 80013d4:	4b68      	ldr	r3, [pc, #416]	@ (8001578 <main+0x300>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
	  trgt_degree = trgt_degree + 1;
 80013dc:	4b6a      	ldr	r3, [pc, #424]	@ (8001588 <main+0x310>)
 80013de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013e2:	b29b      	uxth	r3, r3
 80013e4:	3301      	adds	r3, #1
 80013e6:	b29b      	uxth	r3, r3
 80013e8:	b21a      	sxth	r2, r3
 80013ea:	4b67      	ldr	r3, [pc, #412]	@ (8001588 <main+0x310>)
 80013ec:	801a      	strh	r2, [r3, #0]

	  if(trgt_speed < 30){trgt_speed = trgt_speed + 10;}
 80013ee:	4b67      	ldr	r3, [pc, #412]	@ (800158c <main+0x314>)
 80013f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013f4:	2b1d      	cmp	r3, #29
 80013f6:	dc09      	bgt.n	800140c <main+0x194>
 80013f8:	4b64      	ldr	r3, [pc, #400]	@ (800158c <main+0x314>)
 80013fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013fe:	b29b      	uxth	r3, r3
 8001400:	330a      	adds	r3, #10
 8001402:	b29b      	uxth	r3, r3
 8001404:	b21a      	sxth	r2, r3
 8001406:	4b61      	ldr	r3, [pc, #388]	@ (800158c <main+0x314>)
 8001408:	801a      	strh	r2, [r3, #0]
 800140a:	e003      	b.n	8001414 <main+0x19c>
	  else{trgt_speed = 500;}
 800140c:	4b5f      	ldr	r3, [pc, #380]	@ (800158c <main+0x314>)
 800140e:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001412:	801a      	strh	r2, [r3, #0]

	  if(HAL_GPIO_ReadPin(STRTSW_GPIO_Port, STRTSW_Pin) == 0){
 8001414:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001418:	4856      	ldr	r0, [pc, #344]	@ (8001574 <main+0x2fc>)
 800141a:	f001 f813 	bl	8002444 <HAL_GPIO_ReadPin>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	bf0c      	ite	eq
 8001424:	2301      	moveq	r3, #1
 8001426:	2300      	movne	r3, #0
 8001428:	b2db      	uxtb	r3, r3
 800142a:	2b00      	cmp	r3, #0
 800142c:	d005      	beq.n	800143a <main+0x1c2>
		  trgt_degree = 0;
 800142e:	4b56      	ldr	r3, [pc, #344]	@ (8001588 <main+0x310>)
 8001430:	2200      	movs	r2, #0
 8001432:	801a      	strh	r2, [r3, #0]
		  trgt_speed = 0;
 8001434:	4b55      	ldr	r3, [pc, #340]	@ (800158c <main+0x314>)
 8001436:	2200      	movs	r2, #0
 8001438:	801a      	strh	r2, [r3, #0]
	  }
	}else{}

	speed_set(27, trgt_speed, trgt_degree, MTRS, 0.7);
 800143a:	4b54      	ldr	r3, [pc, #336]	@ (800158c <main+0x314>)
 800143c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001440:	4619      	mov	r1, r3
 8001442:	4b51      	ldr	r3, [pc, #324]	@ (8001588 <main+0x310>)
 8001444:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001448:	461a      	mov	r2, r3
 800144a:	ed9f 0a51 	vldr	s0, [pc, #324]	@ 8001590 <main+0x318>
 800144e:	4b51      	ldr	r3, [pc, #324]	@ (8001594 <main+0x31c>)
 8001450:	201b      	movs	r0, #27
 8001452:	f000 fa45 	bl	80018e0 <_Z9speed_setiiiPsf>
	set_array(MTRS, send_array);
 8001456:	4943      	ldr	r1, [pc, #268]	@ (8001564 <main+0x2ec>)
 8001458:	484e      	ldr	r0, [pc, #312]	@ (8001594 <main+0x31c>)
 800145a:	f000 fb2f 	bl	8001abc <_Z9set_arrayPsPh>

	if(m_counter - Tx_pcounter > 10){
 800145e:	4b46      	ldr	r3, [pc, #280]	@ (8001578 <main+0x300>)
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001466:	1ad3      	subs	r3, r2, r3
 8001468:	2b0a      	cmp	r3, #10
 800146a:	f67f af67 	bls.w	800133c <main+0xc4>
	  Tx_pcounter = m_counter;
 800146e:	4b42      	ldr	r3, [pc, #264]	@ (8001578 <main+0x300>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
	  if(HAL_GPIO_ReadPin(STRTSW_GPIO_Port, STRTSW_Pin) == 1){
 8001476:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800147a:	483e      	ldr	r0, [pc, #248]	@ (8001574 <main+0x2fc>)
 800147c:	f000 ffe2 	bl	8002444 <HAL_GPIO_ReadPin>
 8001480:	4603      	mov	r3, r0
 8001482:	2b01      	cmp	r3, #1
 8001484:	bf0c      	ite	eq
 8001486:	2301      	moveq	r3, #1
 8001488:	2300      	movne	r3, #0
 800148a:	b2db      	uxtb	r3, r3
 800148c:	2b00      	cmp	r3, #0
 800148e:	d006      	beq.n	800149e <main+0x226>
		  HAL_UART_Transmit(&huart6, send_array, 12, 10);
 8001490:	230a      	movs	r3, #10
 8001492:	220c      	movs	r2, #12
 8001494:	4933      	ldr	r1, [pc, #204]	@ (8001564 <main+0x2ec>)
 8001496:	4834      	ldr	r0, [pc, #208]	@ (8001568 <main+0x2f0>)
 8001498:	f003 fb18 	bl	8004acc <HAL_UART_Transmit>
 800149c:	e028      	b.n	80014f0 <main+0x278>
	  }else{
			for(int i=0; i<4; i++){
 800149e:	2300      	movs	r3, #0
 80014a0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80014a2:	e01c      	b.n	80014de <main+0x266>
			  send_array[3*i] = 250 + i;
 80014a4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80014a6:	b2d9      	uxtb	r1, r3
 80014a8:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80014aa:	4613      	mov	r3, r2
 80014ac:	005b      	lsls	r3, r3, #1
 80014ae:	4413      	add	r3, r2
 80014b0:	1f8a      	subs	r2, r1, #6
 80014b2:	b2d1      	uxtb	r1, r2
 80014b4:	4a2b      	ldr	r2, [pc, #172]	@ (8001564 <main+0x2ec>)
 80014b6:	54d1      	strb	r1, [r2, r3]
			  send_array[3*i + 1] = 0;
 80014b8:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80014ba:	4613      	mov	r3, r2
 80014bc:	005b      	lsls	r3, r3, #1
 80014be:	4413      	add	r3, r2
 80014c0:	3301      	adds	r3, #1
 80014c2:	4a28      	ldr	r2, [pc, #160]	@ (8001564 <main+0x2ec>)
 80014c4:	2100      	movs	r1, #0
 80014c6:	54d1      	strb	r1, [r2, r3]
			  send_array[3*i + 2] = 50;
 80014c8:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80014ca:	4613      	mov	r3, r2
 80014cc:	005b      	lsls	r3, r3, #1
 80014ce:	4413      	add	r3, r2
 80014d0:	3302      	adds	r3, #2
 80014d2:	4a24      	ldr	r2, [pc, #144]	@ (8001564 <main+0x2ec>)
 80014d4:	2132      	movs	r1, #50	@ 0x32
 80014d6:	54d1      	strb	r1, [r2, r3]
			for(int i=0; i<4; i++){
 80014d8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80014da:	3301      	adds	r3, #1
 80014dc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80014de:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80014e0:	2b03      	cmp	r3, #3
 80014e2:	dddf      	ble.n	80014a4 <main+0x22c>
			}
			HAL_UART_Transmit(&huart6, send_array, 12, 10);
 80014e4:	230a      	movs	r3, #10
 80014e6:	220c      	movs	r2, #12
 80014e8:	491e      	ldr	r1, [pc, #120]	@ (8001564 <main+0x2ec>)
 80014ea:	481f      	ldr	r0, [pc, #124]	@ (8001568 <main+0x2f0>)
 80014ec:	f003 faee 	bl	8004acc <HAL_UART_Transmit>
	  }
	  HAL_UART_Transmit(&huart6, &Odo_ID, 1, 10);
 80014f0:	f107 0176 	add.w	r1, r7, #118	@ 0x76
 80014f4:	230a      	movs	r3, #10
 80014f6:	2201      	movs	r2, #1
 80014f8:	481b      	ldr	r0, [pc, #108]	@ (8001568 <main+0x2f0>)
 80014fa:	f003 fae7 	bl	8004acc <HAL_UART_Transmit>
	  if(HAL_UART_Receive(&huart6, rxData, 3, 10) == HAL_OK){
 80014fe:	230a      	movs	r3, #10
 8001500:	2203      	movs	r2, #3
 8001502:	4925      	ldr	r1, [pc, #148]	@ (8001598 <main+0x320>)
 8001504:	4818      	ldr	r0, [pc, #96]	@ (8001568 <main+0x2f0>)
 8001506:	f003 fb6c 	bl	8004be2 <HAL_UART_Receive>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	bf0c      	ite	eq
 8001510:	2301      	moveq	r3, #1
 8001512:	2300      	movne	r3, #0
 8001514:	b2db      	uxtb	r3, r3
 8001516:	2b00      	cmp	r3, #0
 8001518:	d003      	beq.n	8001522 <main+0x2aa>
		  HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
 800151a:	2104      	movs	r1, #4
 800151c:	4815      	ldr	r0, [pc, #84]	@ (8001574 <main+0x2fc>)
 800151e:	f000 ffc2 	bl	80024a6 <HAL_GPIO_TogglePin>
	  }

	  position = rxData[1] + rxData[2]*200 - 20000;
 8001522:	4b1d      	ldr	r3, [pc, #116]	@ (8001598 <main+0x320>)
 8001524:	785b      	ldrb	r3, [r3, #1]
 8001526:	461a      	mov	r2, r3
 8001528:	4b1b      	ldr	r3, [pc, #108]	@ (8001598 <main+0x320>)
 800152a:	789b      	ldrb	r3, [r3, #2]
 800152c:	4619      	mov	r1, r3
 800152e:	0089      	lsls	r1, r1, #2
 8001530:	440b      	add	r3, r1
 8001532:	4619      	mov	r1, r3
 8001534:	0088      	lsls	r0, r1, #2
 8001536:	4619      	mov	r1, r3
 8001538:	4603      	mov	r3, r0
 800153a:	440b      	add	r3, r1
 800153c:	00db      	lsls	r3, r3, #3
 800153e:	b29b      	uxth	r3, r3
 8001540:	4413      	add	r3, r2
 8001542:	b29b      	uxth	r3, r3
 8001544:	f5a3 439c 	sub.w	r3, r3, #19968	@ 0x4e00
 8001548:	3b20      	subs	r3, #32
 800154a:	b29b      	uxth	r3, r3
 800154c:	b21a      	sxth	r2, r3
 800154e:	4b13      	ldr	r3, [pc, #76]	@ (800159c <main+0x324>)
 8001550:	801a      	strh	r2, [r3, #0]


    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 8001552:	e6f3      	b.n	800133c <main+0xc4>
 8001554:	f3af 8000 	nop.w
 8001558:	c083126f 	.word	0xc083126f
 800155c:	400921ca 	.word	0x400921ca
 8001560:	200000e8 	.word	0x200000e8
 8001564:	20000000 	.word	0x20000000
 8001568:	20000130 	.word	0x20000130
 800156c:	20000094 	.word	0x20000094
 8001570:	20000178 	.word	0x20000178
 8001574:	40020400 	.word	0x40020400
 8001578:	20000180 	.word	0x20000180
 800157c:	40668000 	.word	0x40668000
 8001580:	2000017c 	.word	0x2000017c
 8001584:	20000196 	.word	0x20000196
 8001588:	2000018e 	.word	0x2000018e
 800158c:	2000018c 	.word	0x2000018c
 8001590:	3f333333 	.word	0x3f333333
 8001594:	20000184 	.word	0x20000184
 8001598:	20000190 	.word	0x20000190
 800159c:	20000194 	.word	0x20000194

080015a0 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b094      	sub	sp, #80	@ 0x50
 80015a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015a6:	f107 031c 	add.w	r3, r7, #28
 80015aa:	2234      	movs	r2, #52	@ 0x34
 80015ac:	2100      	movs	r1, #0
 80015ae:	4618      	mov	r0, r3
 80015b0:	f005 fca2 	bl	8006ef8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015b4:	f107 0308 	add.w	r3, r7, #8
 80015b8:	2200      	movs	r2, #0
 80015ba:	601a      	str	r2, [r3, #0]
 80015bc:	605a      	str	r2, [r3, #4]
 80015be:	609a      	str	r2, [r3, #8]
 80015c0:	60da      	str	r2, [r3, #12]
 80015c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80015c4:	2300      	movs	r3, #0
 80015c6:	607b      	str	r3, [r7, #4]
 80015c8:	4b34      	ldr	r3, [pc, #208]	@ (800169c <_Z18SystemClock_Configv+0xfc>)
 80015ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015cc:	4a33      	ldr	r2, [pc, #204]	@ (800169c <_Z18SystemClock_Configv+0xfc>)
 80015ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015d2:	6413      	str	r3, [r2, #64]	@ 0x40
 80015d4:	4b31      	ldr	r3, [pc, #196]	@ (800169c <_Z18SystemClock_Configv+0xfc>)
 80015d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015dc:	607b      	str	r3, [r7, #4]
 80015de:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015e0:	2300      	movs	r3, #0
 80015e2:	603b      	str	r3, [r7, #0]
 80015e4:	4b2e      	ldr	r3, [pc, #184]	@ (80016a0 <_Z18SystemClock_Configv+0x100>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a2d      	ldr	r2, [pc, #180]	@ (80016a0 <_Z18SystemClock_Configv+0x100>)
 80015ea:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80015ee:	6013      	str	r3, [r2, #0]
 80015f0:	4b2b      	ldr	r3, [pc, #172]	@ (80016a0 <_Z18SystemClock_Configv+0x100>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80015f8:	603b      	str	r3, [r7, #0]
 80015fa:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80015fc:	2302      	movs	r3, #2
 80015fe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001600:	2301      	movs	r3, #1
 8001602:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001604:	2310      	movs	r3, #16
 8001606:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001608:	2302      	movs	r3, #2
 800160a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800160c:	2300      	movs	r3, #0
 800160e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001610:	2308      	movs	r3, #8
 8001612:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001614:	23b4      	movs	r3, #180	@ 0xb4
 8001616:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001618:	2302      	movs	r3, #2
 800161a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800161c:	2302      	movs	r3, #2
 800161e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001620:	2302      	movs	r3, #2
 8001622:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001624:	f107 031c 	add.w	r3, r7, #28
 8001628:	4618      	mov	r0, r3
 800162a:	f002 fc17 	bl	8003e5c <HAL_RCC_OscConfig>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	bf14      	ite	ne
 8001634:	2301      	movne	r3, #1
 8001636:	2300      	moveq	r3, #0
 8001638:	b2db      	uxtb	r3, r3
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 800163e:	f000 faa7 	bl	8001b90 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001642:	f002 f873 	bl	800372c <HAL_PWREx_EnableOverDrive>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	bf14      	ite	ne
 800164c:	2301      	movne	r3, #1
 800164e:	2300      	moveq	r3, #0
 8001650:	b2db      	uxtb	r3, r3
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <_Z18SystemClock_Configv+0xba>
  {
    Error_Handler();
 8001656:	f000 fa9b 	bl	8001b90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800165a:	230f      	movs	r3, #15
 800165c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800165e:	2302      	movs	r3, #2
 8001660:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001662:	2300      	movs	r3, #0
 8001664:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001666:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800166a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800166c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001670:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001672:	f107 0308 	add.w	r3, r7, #8
 8001676:	2105      	movs	r1, #5
 8001678:	4618      	mov	r0, r3
 800167a:	f002 f8a7 	bl	80037cc <HAL_RCC_ClockConfig>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	bf14      	ite	ne
 8001684:	2301      	movne	r3, #1
 8001686:	2300      	moveq	r3, #0
 8001688:	b2db      	uxtb	r3, r3
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <_Z18SystemClock_Configv+0xf2>
  {
    Error_Handler();
 800168e:	f000 fa7f 	bl	8001b90 <Error_Handler>
  }
}
 8001692:	bf00      	nop
 8001694:	3750      	adds	r7, #80	@ 0x50
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	40023800 	.word	0x40023800
 80016a0:	40007000 	.word	0x40007000

080016a4 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80016a8:	4b15      	ldr	r3, [pc, #84]	@ (8001700 <_ZL12MX_I2C1_Initv+0x5c>)
 80016aa:	4a16      	ldr	r2, [pc, #88]	@ (8001704 <_ZL12MX_I2C1_Initv+0x60>)
 80016ac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80016ae:	4b14      	ldr	r3, [pc, #80]	@ (8001700 <_ZL12MX_I2C1_Initv+0x5c>)
 80016b0:	4a15      	ldr	r2, [pc, #84]	@ (8001708 <_ZL12MX_I2C1_Initv+0x64>)
 80016b2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80016b4:	4b12      	ldr	r3, [pc, #72]	@ (8001700 <_ZL12MX_I2C1_Initv+0x5c>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80016ba:	4b11      	ldr	r3, [pc, #68]	@ (8001700 <_ZL12MX_I2C1_Initv+0x5c>)
 80016bc:	2200      	movs	r2, #0
 80016be:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016c0:	4b0f      	ldr	r3, [pc, #60]	@ (8001700 <_ZL12MX_I2C1_Initv+0x5c>)
 80016c2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80016c6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016c8:	4b0d      	ldr	r3, [pc, #52]	@ (8001700 <_ZL12MX_I2C1_Initv+0x5c>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80016ce:	4b0c      	ldr	r3, [pc, #48]	@ (8001700 <_ZL12MX_I2C1_Initv+0x5c>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016d4:	4b0a      	ldr	r3, [pc, #40]	@ (8001700 <_ZL12MX_I2C1_Initv+0x5c>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016da:	4b09      	ldr	r3, [pc, #36]	@ (8001700 <_ZL12MX_I2C1_Initv+0x5c>)
 80016dc:	2200      	movs	r2, #0
 80016de:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80016e0:	4807      	ldr	r0, [pc, #28]	@ (8001700 <_ZL12MX_I2C1_Initv+0x5c>)
 80016e2:	f000 fefb 	bl	80024dc <HAL_I2C_Init>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	bf14      	ite	ne
 80016ec:	2301      	movne	r3, #1
 80016ee:	2300      	moveq	r3, #0
 80016f0:	b2db      	uxtb	r3, r3
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 80016f6:	f000 fa4b 	bl	8001b90 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80016fa:	bf00      	nop
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	20000094 	.word	0x20000094
 8001704:	40005400 	.word	0x40005400
 8001708:	000186a0 	.word	0x000186a0

0800170c <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b086      	sub	sp, #24
 8001710:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001712:	f107 0308 	add.w	r3, r7, #8
 8001716:	2200      	movs	r2, #0
 8001718:	601a      	str	r2, [r3, #0]
 800171a:	605a      	str	r2, [r3, #4]
 800171c:	609a      	str	r2, [r3, #8]
 800171e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001720:	463b      	mov	r3, r7
 8001722:	2200      	movs	r2, #0
 8001724:	601a      	str	r2, [r3, #0]
 8001726:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001728:	4b25      	ldr	r3, [pc, #148]	@ (80017c0 <_ZL12MX_TIM2_Initv+0xb4>)
 800172a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800172e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 90-1;
 8001730:	4b23      	ldr	r3, [pc, #140]	@ (80017c0 <_ZL12MX_TIM2_Initv+0xb4>)
 8001732:	2259      	movs	r2, #89	@ 0x59
 8001734:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001736:	4b22      	ldr	r3, [pc, #136]	@ (80017c0 <_ZL12MX_TIM2_Initv+0xb4>)
 8001738:	2200      	movs	r2, #0
 800173a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 800173c:	4b20      	ldr	r3, [pc, #128]	@ (80017c0 <_ZL12MX_TIM2_Initv+0xb4>)
 800173e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001742:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001744:	4b1e      	ldr	r3, [pc, #120]	@ (80017c0 <_ZL12MX_TIM2_Initv+0xb4>)
 8001746:	2200      	movs	r2, #0
 8001748:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800174a:	4b1d      	ldr	r3, [pc, #116]	@ (80017c0 <_ZL12MX_TIM2_Initv+0xb4>)
 800174c:	2200      	movs	r2, #0
 800174e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001750:	481b      	ldr	r0, [pc, #108]	@ (80017c0 <_ZL12MX_TIM2_Initv+0xb4>)
 8001752:	f002 fe21 	bl	8004398 <HAL_TIM_Base_Init>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	bf14      	ite	ne
 800175c:	2301      	movne	r3, #1
 800175e:	2300      	moveq	r3, #0
 8001760:	b2db      	uxtb	r3, r3
 8001762:	2b00      	cmp	r3, #0
 8001764:	d001      	beq.n	800176a <_ZL12MX_TIM2_Initv+0x5e>
  {
    Error_Handler();
 8001766:	f000 fa13 	bl	8001b90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800176a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800176e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001770:	f107 0308 	add.w	r3, r7, #8
 8001774:	4619      	mov	r1, r3
 8001776:	4812      	ldr	r0, [pc, #72]	@ (80017c0 <_ZL12MX_TIM2_Initv+0xb4>)
 8001778:	f002 fece 	bl	8004518 <HAL_TIM_ConfigClockSource>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	bf14      	ite	ne
 8001782:	2301      	movne	r3, #1
 8001784:	2300      	moveq	r3, #0
 8001786:	b2db      	uxtb	r3, r3
 8001788:	2b00      	cmp	r3, #0
 800178a:	d001      	beq.n	8001790 <_ZL12MX_TIM2_Initv+0x84>
  {
    Error_Handler();
 800178c:	f000 fa00 	bl	8001b90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001790:	2300      	movs	r3, #0
 8001792:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001794:	2300      	movs	r3, #0
 8001796:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001798:	463b      	mov	r3, r7
 800179a:	4619      	mov	r1, r3
 800179c:	4808      	ldr	r0, [pc, #32]	@ (80017c0 <_ZL12MX_TIM2_Initv+0xb4>)
 800179e:	f003 f8c9 	bl	8004934 <HAL_TIMEx_MasterConfigSynchronization>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	bf14      	ite	ne
 80017a8:	2301      	movne	r3, #1
 80017aa:	2300      	moveq	r3, #0
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d001      	beq.n	80017b6 <_ZL12MX_TIM2_Initv+0xaa>
  {
    Error_Handler();
 80017b2:	f000 f9ed 	bl	8001b90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80017b6:	bf00      	nop
 80017b8:	3718      	adds	r7, #24
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	200000e8 	.word	0x200000e8

080017c4 <_ZL19MX_USART6_UART_Initv>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80017c8:	4b13      	ldr	r3, [pc, #76]	@ (8001818 <_ZL19MX_USART6_UART_Initv+0x54>)
 80017ca:	4a14      	ldr	r2, [pc, #80]	@ (800181c <_ZL19MX_USART6_UART_Initv+0x58>)
 80017cc:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80017ce:	4b12      	ldr	r3, [pc, #72]	@ (8001818 <_ZL19MX_USART6_UART_Initv+0x54>)
 80017d0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80017d4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80017d6:	4b10      	ldr	r3, [pc, #64]	@ (8001818 <_ZL19MX_USART6_UART_Initv+0x54>)
 80017d8:	2200      	movs	r2, #0
 80017da:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80017dc:	4b0e      	ldr	r3, [pc, #56]	@ (8001818 <_ZL19MX_USART6_UART_Initv+0x54>)
 80017de:	2200      	movs	r2, #0
 80017e0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80017e2:	4b0d      	ldr	r3, [pc, #52]	@ (8001818 <_ZL19MX_USART6_UART_Initv+0x54>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80017e8:	4b0b      	ldr	r3, [pc, #44]	@ (8001818 <_ZL19MX_USART6_UART_Initv+0x54>)
 80017ea:	220c      	movs	r2, #12
 80017ec:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017ee:	4b0a      	ldr	r3, [pc, #40]	@ (8001818 <_ZL19MX_USART6_UART_Initv+0x54>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80017f4:	4b08      	ldr	r3, [pc, #32]	@ (8001818 <_ZL19MX_USART6_UART_Initv+0x54>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80017fa:	4807      	ldr	r0, [pc, #28]	@ (8001818 <_ZL19MX_USART6_UART_Initv+0x54>)
 80017fc:	f003 f916 	bl	8004a2c <HAL_UART_Init>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	bf14      	ite	ne
 8001806:	2301      	movne	r3, #1
 8001808:	2300      	moveq	r3, #0
 800180a:	b2db      	uxtb	r3, r3
 800180c:	2b00      	cmp	r3, #0
 800180e:	d001      	beq.n	8001814 <_ZL19MX_USART6_UART_Initv+0x50>
  {
    Error_Handler();
 8001810:	f000 f9be 	bl	8001b90 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001814:	bf00      	nop
 8001816:	bd80      	pop	{r7, pc}
 8001818:	20000130 	.word	0x20000130
 800181c:	40011400 	.word	0x40011400

08001820 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b088      	sub	sp, #32
 8001824:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001826:	f107 030c 	add.w	r3, r7, #12
 800182a:	2200      	movs	r2, #0
 800182c:	601a      	str	r2, [r3, #0]
 800182e:	605a      	str	r2, [r3, #4]
 8001830:	609a      	str	r2, [r3, #8]
 8001832:	60da      	str	r2, [r3, #12]
 8001834:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001836:	2300      	movs	r3, #0
 8001838:	60bb      	str	r3, [r7, #8]
 800183a:	4b26      	ldr	r3, [pc, #152]	@ (80018d4 <_ZL12MX_GPIO_Initv+0xb4>)
 800183c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800183e:	4a25      	ldr	r2, [pc, #148]	@ (80018d4 <_ZL12MX_GPIO_Initv+0xb4>)
 8001840:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001844:	6313      	str	r3, [r2, #48]	@ 0x30
 8001846:	4b23      	ldr	r3, [pc, #140]	@ (80018d4 <_ZL12MX_GPIO_Initv+0xb4>)
 8001848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800184a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800184e:	60bb      	str	r3, [r7, #8]
 8001850:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001852:	2300      	movs	r3, #0
 8001854:	607b      	str	r3, [r7, #4]
 8001856:	4b1f      	ldr	r3, [pc, #124]	@ (80018d4 <_ZL12MX_GPIO_Initv+0xb4>)
 8001858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800185a:	4a1e      	ldr	r2, [pc, #120]	@ (80018d4 <_ZL12MX_GPIO_Initv+0xb4>)
 800185c:	f043 0302 	orr.w	r3, r3, #2
 8001860:	6313      	str	r3, [r2, #48]	@ 0x30
 8001862:	4b1c      	ldr	r3, [pc, #112]	@ (80018d4 <_ZL12MX_GPIO_Initv+0xb4>)
 8001864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001866:	f003 0302 	and.w	r3, r3, #2
 800186a:	607b      	str	r3, [r7, #4]
 800186c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800186e:	2300      	movs	r3, #0
 8001870:	603b      	str	r3, [r7, #0]
 8001872:	4b18      	ldr	r3, [pc, #96]	@ (80018d4 <_ZL12MX_GPIO_Initv+0xb4>)
 8001874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001876:	4a17      	ldr	r2, [pc, #92]	@ (80018d4 <_ZL12MX_GPIO_Initv+0xb4>)
 8001878:	f043 0304 	orr.w	r3, r3, #4
 800187c:	6313      	str	r3, [r2, #48]	@ 0x30
 800187e:	4b15      	ldr	r3, [pc, #84]	@ (80018d4 <_ZL12MX_GPIO_Initv+0xb4>)
 8001880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001882:	f003 0304 	and.w	r3, r3, #4
 8001886:	603b      	str	r3, [r7, #0]
 8001888:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
 800188a:	2200      	movs	r2, #0
 800188c:	2104      	movs	r1, #4
 800188e:	4812      	ldr	r0, [pc, #72]	@ (80018d8 <_ZL12MX_GPIO_Initv+0xb8>)
 8001890:	f000 fdf0 	bl	8002474 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED0_Pin */
  GPIO_InitStruct.Pin = LED0_Pin;
 8001894:	2304      	movs	r3, #4
 8001896:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001898:	2301      	movs	r3, #1
 800189a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189c:	2300      	movs	r3, #0
 800189e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a0:	2300      	movs	r3, #0
 80018a2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 80018a4:	f107 030c 	add.w	r3, r7, #12
 80018a8:	4619      	mov	r1, r3
 80018aa:	480b      	ldr	r0, [pc, #44]	@ (80018d8 <_ZL12MX_GPIO_Initv+0xb8>)
 80018ac:	f000 fc36 	bl	800211c <HAL_GPIO_Init>

  /*Configure GPIO pin : STRTSW_Pin */
  GPIO_InitStruct.Pin = STRTSW_Pin;
 80018b0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80018b4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018b6:	2300      	movs	r3, #0
 80018b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ba:	2300      	movs	r3, #0
 80018bc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(STRTSW_GPIO_Port, &GPIO_InitStruct);
 80018be:	f107 030c 	add.w	r3, r7, #12
 80018c2:	4619      	mov	r1, r3
 80018c4:	4804      	ldr	r0, [pc, #16]	@ (80018d8 <_ZL12MX_GPIO_Initv+0xb8>)
 80018c6:	f000 fc29 	bl	800211c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80018ca:	bf00      	nop
 80018cc:	3720      	adds	r7, #32
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	40023800 	.word	0x40023800
 80018d8:	40020400 	.word	0x40020400
 80018dc:	00000000 	.word	0x00000000

080018e0 <_Z9speed_setiiiPsf>:

/* USER CODE BEGIN 4 */
void speed_set(int gyro_degree, int goal_speed, int goal_degree, int16_t* mtrspeed, float motor_rate){
 80018e0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80018e4:	b08a      	sub	sp, #40	@ 0x28
 80018e6:	af00      	add	r7, sp, #0
 80018e8:	6178      	str	r0, [r7, #20]
 80018ea:	6139      	str	r1, [r7, #16]
 80018ec:	60fa      	str	r2, [r7, #12]
 80018ee:	60bb      	str	r3, [r7, #8]
 80018f0:	ed87 0a01 	vstr	s0, [r7, #4]
	goal_degree = goal_degree % 360;
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	4a6e      	ldr	r2, [pc, #440]	@ (8001ab0 <_Z9speed_setiiiPsf+0x1d0>)
 80018f8:	fb82 1203 	smull	r1, r2, r2, r3
 80018fc:	441a      	add	r2, r3
 80018fe:	1211      	asrs	r1, r2, #8
 8001900:	17da      	asrs	r2, r3, #31
 8001902:	1a8a      	subs	r2, r1, r2
 8001904:	f44f 71b4 	mov.w	r1, #360	@ 0x168
 8001908:	fb01 f202 	mul.w	r2, r1, r2
 800190c:	1a9b      	subs	r3, r3, r2
 800190e:	60fb      	str	r3, [r7, #12]
	if(goal_degree < 0){goal_degree += 360;}
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	2b00      	cmp	r3, #0
 8001914:	da03      	bge.n	800191e <_Z9speed_setiiiPsf+0x3e>
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800191c:	60fb      	str	r3, [r7, #12]
//    int roll_speed;
//	gyro_degree = gyro_degree % 360;
//	if(gyro_degree < 0){gyro_degree += 360;}

    int roll_speed;
    if(gyro_degree > 180){gyro_degree -= 360;}
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	2bb4      	cmp	r3, #180	@ 0xb4
 8001922:	dd04      	ble.n	800192e <_Z9speed_setiiiPsf+0x4e>
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800192a:	617b      	str	r3, [r7, #20]
 800192c:	e007      	b.n	800193e <_Z9speed_setiiiPsf+0x5e>
    else if(gyro_degree <-180){gyro_degree += 360;}
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	f113 0fb4 	cmn.w	r3, #180	@ 0xb4
 8001934:	da03      	bge.n	800193e <_Z9speed_setiiiPsf+0x5e>
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800193c:	617b      	str	r3, [r7, #20]
    else{}


    if (gyro_degree > 0){
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	2b00      	cmp	r3, #0
 8001942:	dd12      	ble.n	800196a <_Z9speed_setiiiPsf+0x8a>
        roll_speed = -10 + (-gyro_degree * 3);
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	461a      	mov	r2, r3
 8001948:	009b      	lsls	r3, r3, #2
 800194a:	1ad3      	subs	r3, r2, r3
 800194c:	3b0a      	subs	r3, #10
 800194e:	627b      	str	r3, [r7, #36]	@ 0x24
        if (gyro_degree < 6){
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	2b05      	cmp	r3, #5
 8001954:	dc01      	bgt.n	800195a <_Z9speed_setiiiPsf+0x7a>
            roll_speed = 0;
 8001956:	2300      	movs	r3, #0
 8001958:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        if (roll_speed < -150){
 800195a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800195c:	f113 0f96 	cmn.w	r3, #150	@ 0x96
 8001960:	da1a      	bge.n	8001998 <_Z9speed_setiiiPsf+0xb8>
            roll_speed = -150;
 8001962:	f06f 0395 	mvn.w	r3, #149	@ 0x95
 8001966:	627b      	str	r3, [r7, #36]	@ 0x24
 8001968:	e016      	b.n	8001998 <_Z9speed_setiiiPsf+0xb8>
        }
    }else if (gyro_degree < 0){
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	2b00      	cmp	r3, #0
 800196e:	da11      	bge.n	8001994 <_Z9speed_setiiiPsf+0xb4>
        roll_speed = 10 + (-gyro_degree * 3);
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	461a      	mov	r2, r3
 8001974:	009b      	lsls	r3, r3, #2
 8001976:	1ad3      	subs	r3, r2, r3
 8001978:	330a      	adds	r3, #10
 800197a:	627b      	str	r3, [r7, #36]	@ 0x24
        if (gyro_degree > -6){
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	f113 0f05 	cmn.w	r3, #5
 8001982:	db01      	blt.n	8001988 <_Z9speed_setiiiPsf+0xa8>
            roll_speed = 0;
 8001984:	2300      	movs	r3, #0
 8001986:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        if (roll_speed > 150){
 8001988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800198a:	2b96      	cmp	r3, #150	@ 0x96
 800198c:	dd04      	ble.n	8001998 <_Z9speed_setiiiPsf+0xb8>
            roll_speed = 150;
 800198e:	2396      	movs	r3, #150	@ 0x96
 8001990:	627b      	str	r3, [r7, #36]	@ 0x24
 8001992:	e001      	b.n	8001998 <_Z9speed_setiiiPsf+0xb8>
        }
    }else{
        roll_speed = 0;
 8001994:	2300      	movs	r3, #0
 8001996:	627b      	str	r3, [r7, #36]	@ 0x24
    }


	int conv_degree = -goal_degree + 45;
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	f1c3 032d 	rsb	r3, r3, #45	@ 0x2d
 800199e:	623b      	str	r3, [r7, #32]
	if(conv_degree < 0){conv_degree = conv_degree + 360;}
 80019a0:	6a3b      	ldr	r3, [r7, #32]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	da03      	bge.n	80019ae <_Z9speed_setiiiPsf+0xce>
 80019a6:	6a3b      	ldr	r3, [r7, #32]
 80019a8:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80019ac:	623b      	str	r3, [r7, #32]

	for(int i=0; i<4; i++){
 80019ae:	2300      	movs	r3, #0
 80019b0:	61fb      	str	r3, [r7, #28]
 80019b2:	e070      	b.n	8001a96 <_Z9speed_setiiiPsf+0x1b6>
		mtrspeed[i] = goal_speed * sin((conv_degree + 90.0*i) / 180.0 * 3.1415);
 80019b4:	6938      	ldr	r0, [r7, #16]
 80019b6:	f7fe fd79 	bl	80004ac <__aeabi_i2d>
 80019ba:	4604      	mov	r4, r0
 80019bc:	460d      	mov	r5, r1
 80019be:	6a38      	ldr	r0, [r7, #32]
 80019c0:	f7fe fd74 	bl	80004ac <__aeabi_i2d>
 80019c4:	4680      	mov	r8, r0
 80019c6:	4689      	mov	r9, r1
 80019c8:	69f8      	ldr	r0, [r7, #28]
 80019ca:	f7fe fd6f 	bl	80004ac <__aeabi_i2d>
 80019ce:	f04f 0200 	mov.w	r2, #0
 80019d2:	4b38      	ldr	r3, [pc, #224]	@ (8001ab4 <_Z9speed_setiiiPsf+0x1d4>)
 80019d4:	f7fe fdd4 	bl	8000580 <__aeabi_dmul>
 80019d8:	4602      	mov	r2, r0
 80019da:	460b      	mov	r3, r1
 80019dc:	4640      	mov	r0, r8
 80019de:	4649      	mov	r1, r9
 80019e0:	f7fe fc18 	bl	8000214 <__adddf3>
 80019e4:	4602      	mov	r2, r0
 80019e6:	460b      	mov	r3, r1
 80019e8:	4610      	mov	r0, r2
 80019ea:	4619      	mov	r1, r3
 80019ec:	f04f 0200 	mov.w	r2, #0
 80019f0:	4b31      	ldr	r3, [pc, #196]	@ (8001ab8 <_Z9speed_setiiiPsf+0x1d8>)
 80019f2:	f7fe feef 	bl	80007d4 <__aeabi_ddiv>
 80019f6:	4602      	mov	r2, r0
 80019f8:	460b      	mov	r3, r1
 80019fa:	4610      	mov	r0, r2
 80019fc:	4619      	mov	r1, r3
 80019fe:	a32a      	add	r3, pc, #168	@ (adr r3, 8001aa8 <_Z9speed_setiiiPsf+0x1c8>)
 8001a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a04:	f7fe fdbc 	bl	8000580 <__aeabi_dmul>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	460b      	mov	r3, r1
 8001a0c:	ec43 2b17 	vmov	d7, r2, r3
 8001a10:	eeb0 0a47 	vmov.f32	s0, s14
 8001a14:	eef0 0a67 	vmov.f32	s1, s15
 8001a18:	f003 fcea 	bl	80053f0 <sin>
 8001a1c:	ec53 2b10 	vmov	r2, r3, d0
 8001a20:	4620      	mov	r0, r4
 8001a22:	4629      	mov	r1, r5
 8001a24:	f7fe fdac 	bl	8000580 <__aeabi_dmul>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	460b      	mov	r3, r1
 8001a2c:	4610      	mov	r0, r2
 8001a2e:	4619      	mov	r1, r3
 8001a30:	69fb      	ldr	r3, [r7, #28]
 8001a32:	005b      	lsls	r3, r3, #1
 8001a34:	68ba      	ldr	r2, [r7, #8]
 8001a36:	18d4      	adds	r4, r2, r3
 8001a38:	f7ff f852 	bl	8000ae0 <__aeabi_d2iz>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	b21b      	sxth	r3, r3
 8001a40:	8023      	strh	r3, [r4, #0]
		mtrspeed[i] = (mtrspeed[i] * motor_rate) + (roll_speed * (1 - motor_rate));
 8001a42:	69fb      	ldr	r3, [r7, #28]
 8001a44:	005b      	lsls	r3, r3, #1
 8001a46:	68ba      	ldr	r2, [r7, #8]
 8001a48:	4413      	add	r3, r2
 8001a4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a4e:	ee07 3a90 	vmov	s15, r3
 8001a52:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a56:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a5a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a60:	ee07 3a90 	vmov	s15, r3
 8001a64:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001a68:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8001a6c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a70:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001a74:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a7c:	69fb      	ldr	r3, [r7, #28]
 8001a7e:	005b      	lsls	r3, r3, #1
 8001a80:	68ba      	ldr	r2, [r7, #8]
 8001a82:	4413      	add	r3, r2
 8001a84:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a88:	ee17 2a90 	vmov	r2, s15
 8001a8c:	b212      	sxth	r2, r2
 8001a8e:	801a      	strh	r2, [r3, #0]
	for(int i=0; i<4; i++){
 8001a90:	69fb      	ldr	r3, [r7, #28]
 8001a92:	3301      	adds	r3, #1
 8001a94:	61fb      	str	r3, [r7, #28]
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	2b03      	cmp	r3, #3
 8001a9a:	dd8b      	ble.n	80019b4 <_Z9speed_setiiiPsf+0xd4>
	}
}
 8001a9c:	bf00      	nop
 8001a9e:	bf00      	nop
 8001aa0:	3728      	adds	r7, #40	@ 0x28
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001aa8:	c083126f 	.word	0xc083126f
 8001aac:	400921ca 	.word	0x400921ca
 8001ab0:	b60b60b7 	.word	0xb60b60b7
 8001ab4:	40568000 	.word	0x40568000
 8001ab8:	40668000 	.word	0x40668000

08001abc <_Z9set_arrayPsPh>:

void set_array(int16_t* mtrspeed, uint8_t* sendarray){
 8001abc:	b480      	push	{r7}
 8001abe:	b087      	sub	sp, #28
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
 8001ac4:	6039      	str	r1, [r7, #0]
	uint16_t conv_mtrspeed[4];
	for(int i=0; i<4; i++){conv_mtrspeed[i] = mtrspeed[i] + 5000;}
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	617b      	str	r3, [r7, #20]
 8001aca:	e013      	b.n	8001af4 <_Z9set_arrayPsPh+0x38>
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	005b      	lsls	r3, r3, #1
 8001ad0:	687a      	ldr	r2, [r7, #4]
 8001ad2:	4413      	add	r3, r2
 8001ad4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ad8:	b29b      	uxth	r3, r3
 8001ada:	f503 539c 	add.w	r3, r3, #4992	@ 0x1380
 8001ade:	3308      	adds	r3, #8
 8001ae0:	b29a      	uxth	r2, r3
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	005b      	lsls	r3, r3, #1
 8001ae6:	3318      	adds	r3, #24
 8001ae8:	443b      	add	r3, r7
 8001aea:	f823 2c10 	strh.w	r2, [r3, #-16]
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	3301      	adds	r3, #1
 8001af2:	617b      	str	r3, [r7, #20]
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	2b03      	cmp	r3, #3
 8001af8:	dde8      	ble.n	8001acc <_Z9set_arrayPsPh+0x10>
	for(int i=0; i<4; i++){
 8001afa:	2300      	movs	r3, #0
 8001afc:	613b      	str	r3, [r7, #16]
 8001afe:	e03a      	b.n	8001b76 <_Z9set_arrayPsPh+0xba>
		sendarray[3*i] = 250+i;
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	b2d9      	uxtb	r1, r3
 8001b04:	693a      	ldr	r2, [r7, #16]
 8001b06:	4613      	mov	r3, r2
 8001b08:	005b      	lsls	r3, r3, #1
 8001b0a:	4413      	add	r3, r2
 8001b0c:	461a      	mov	r2, r3
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	4413      	add	r3, r2
 8001b12:	1f8a      	subs	r2, r1, #6
 8001b14:	b2d2      	uxtb	r2, r2
 8001b16:	701a      	strb	r2, [r3, #0]
		sendarray[3*i+1] = conv_mtrspeed[i] % 100;
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	005b      	lsls	r3, r3, #1
 8001b1c:	3318      	adds	r3, #24
 8001b1e:	443b      	add	r3, r7
 8001b20:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 8001b24:	4a19      	ldr	r2, [pc, #100]	@ (8001b8c <_Z9set_arrayPsPh+0xd0>)
 8001b26:	fba2 1203 	umull	r1, r2, r2, r3
 8001b2a:	0952      	lsrs	r2, r2, #5
 8001b2c:	2164      	movs	r1, #100	@ 0x64
 8001b2e:	fb01 f202 	mul.w	r2, r1, r2
 8001b32:	1a9b      	subs	r3, r3, r2
 8001b34:	b299      	uxth	r1, r3
 8001b36:	693a      	ldr	r2, [r7, #16]
 8001b38:	4613      	mov	r3, r2
 8001b3a:	005b      	lsls	r3, r3, #1
 8001b3c:	4413      	add	r3, r2
 8001b3e:	3301      	adds	r3, #1
 8001b40:	683a      	ldr	r2, [r7, #0]
 8001b42:	4413      	add	r3, r2
 8001b44:	b2ca      	uxtb	r2, r1
 8001b46:	701a      	strb	r2, [r3, #0]
		sendarray[3*i+2] = conv_mtrspeed[i] / 100;
 8001b48:	693b      	ldr	r3, [r7, #16]
 8001b4a:	005b      	lsls	r3, r3, #1
 8001b4c:	3318      	adds	r3, #24
 8001b4e:	443b      	add	r3, r7
 8001b50:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 8001b54:	4a0d      	ldr	r2, [pc, #52]	@ (8001b8c <_Z9set_arrayPsPh+0xd0>)
 8001b56:	fba2 2303 	umull	r2, r3, r2, r3
 8001b5a:	095b      	lsrs	r3, r3, #5
 8001b5c:	b299      	uxth	r1, r3
 8001b5e:	693a      	ldr	r2, [r7, #16]
 8001b60:	4613      	mov	r3, r2
 8001b62:	005b      	lsls	r3, r3, #1
 8001b64:	4413      	add	r3, r2
 8001b66:	3302      	adds	r3, #2
 8001b68:	683a      	ldr	r2, [r7, #0]
 8001b6a:	4413      	add	r3, r2
 8001b6c:	b2ca      	uxtb	r2, r1
 8001b6e:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<4; i++){
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	3301      	adds	r3, #1
 8001b74:	613b      	str	r3, [r7, #16]
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	2b03      	cmp	r3, #3
 8001b7a:	ddc1      	ble.n	8001b00 <_Z9set_arrayPsPh+0x44>
	}
}
 8001b7c:	bf00      	nop
 8001b7e:	bf00      	nop
 8001b80:	371c      	adds	r7, #28
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr
 8001b8a:	bf00      	nop
 8001b8c:	51eb851f 	.word	0x51eb851f

08001b90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b90:	b480      	push	{r7}
 8001b92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b94:	b672      	cpsid	i
}
 8001b96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b98:	bf00      	nop
 8001b9a:	e7fd      	b.n	8001b98 <Error_Handler+0x8>

08001b9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	607b      	str	r3, [r7, #4]
 8001ba6:	4b10      	ldr	r3, [pc, #64]	@ (8001be8 <HAL_MspInit+0x4c>)
 8001ba8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001baa:	4a0f      	ldr	r2, [pc, #60]	@ (8001be8 <HAL_MspInit+0x4c>)
 8001bac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001bb0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001bb2:	4b0d      	ldr	r3, [pc, #52]	@ (8001be8 <HAL_MspInit+0x4c>)
 8001bb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bb6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001bba:	607b      	str	r3, [r7, #4]
 8001bbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	603b      	str	r3, [r7, #0]
 8001bc2:	4b09      	ldr	r3, [pc, #36]	@ (8001be8 <HAL_MspInit+0x4c>)
 8001bc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bc6:	4a08      	ldr	r2, [pc, #32]	@ (8001be8 <HAL_MspInit+0x4c>)
 8001bc8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bcc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bce:	4b06      	ldr	r3, [pc, #24]	@ (8001be8 <HAL_MspInit+0x4c>)
 8001bd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bd6:	603b      	str	r3, [r7, #0]
 8001bd8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bda:	bf00      	nop
 8001bdc:	370c      	adds	r7, #12
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr
 8001be6:	bf00      	nop
 8001be8:	40023800 	.word	0x40023800

08001bec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b08a      	sub	sp, #40	@ 0x28
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bf4:	f107 0314 	add.w	r3, r7, #20
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	601a      	str	r2, [r3, #0]
 8001bfc:	605a      	str	r2, [r3, #4]
 8001bfe:	609a      	str	r2, [r3, #8]
 8001c00:	60da      	str	r2, [r3, #12]
 8001c02:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a19      	ldr	r2, [pc, #100]	@ (8001c70 <HAL_I2C_MspInit+0x84>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d12c      	bne.n	8001c68 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c0e:	2300      	movs	r3, #0
 8001c10:	613b      	str	r3, [r7, #16]
 8001c12:	4b18      	ldr	r3, [pc, #96]	@ (8001c74 <HAL_I2C_MspInit+0x88>)
 8001c14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c16:	4a17      	ldr	r2, [pc, #92]	@ (8001c74 <HAL_I2C_MspInit+0x88>)
 8001c18:	f043 0302 	orr.w	r3, r3, #2
 8001c1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c1e:	4b15      	ldr	r3, [pc, #84]	@ (8001c74 <HAL_I2C_MspInit+0x88>)
 8001c20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c22:	f003 0302 	and.w	r3, r3, #2
 8001c26:	613b      	str	r3, [r7, #16]
 8001c28:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001c2a:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001c2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c30:	2312      	movs	r3, #18
 8001c32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c34:	2300      	movs	r3, #0
 8001c36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c38:	2303      	movs	r3, #3
 8001c3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001c3c:	2304      	movs	r3, #4
 8001c3e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c40:	f107 0314 	add.w	r3, r7, #20
 8001c44:	4619      	mov	r1, r3
 8001c46:	480c      	ldr	r0, [pc, #48]	@ (8001c78 <HAL_I2C_MspInit+0x8c>)
 8001c48:	f000 fa68 	bl	800211c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	60fb      	str	r3, [r7, #12]
 8001c50:	4b08      	ldr	r3, [pc, #32]	@ (8001c74 <HAL_I2C_MspInit+0x88>)
 8001c52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c54:	4a07      	ldr	r2, [pc, #28]	@ (8001c74 <HAL_I2C_MspInit+0x88>)
 8001c56:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001c5a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c5c:	4b05      	ldr	r3, [pc, #20]	@ (8001c74 <HAL_I2C_MspInit+0x88>)
 8001c5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c60:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c64:	60fb      	str	r3, [r7, #12]
 8001c66:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001c68:	bf00      	nop
 8001c6a:	3728      	adds	r7, #40	@ 0x28
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	40005400 	.word	0x40005400
 8001c74:	40023800 	.word	0x40023800
 8001c78:	40020400 	.word	0x40020400

08001c7c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b085      	sub	sp, #20
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c8c:	d10d      	bne.n	8001caa <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c8e:	2300      	movs	r3, #0
 8001c90:	60fb      	str	r3, [r7, #12]
 8001c92:	4b09      	ldr	r3, [pc, #36]	@ (8001cb8 <HAL_TIM_Base_MspInit+0x3c>)
 8001c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c96:	4a08      	ldr	r2, [pc, #32]	@ (8001cb8 <HAL_TIM_Base_MspInit+0x3c>)
 8001c98:	f043 0301 	orr.w	r3, r3, #1
 8001c9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c9e:	4b06      	ldr	r3, [pc, #24]	@ (8001cb8 <HAL_TIM_Base_MspInit+0x3c>)
 8001ca0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ca2:	f003 0301 	and.w	r3, r3, #1
 8001ca6:	60fb      	str	r3, [r7, #12]
 8001ca8:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001caa:	bf00      	nop
 8001cac:	3714      	adds	r7, #20
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr
 8001cb6:	bf00      	nop
 8001cb8:	40023800 	.word	0x40023800

08001cbc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b08a      	sub	sp, #40	@ 0x28
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cc4:	f107 0314 	add.w	r3, r7, #20
 8001cc8:	2200      	movs	r2, #0
 8001cca:	601a      	str	r2, [r3, #0]
 8001ccc:	605a      	str	r2, [r3, #4]
 8001cce:	609a      	str	r2, [r3, #8]
 8001cd0:	60da      	str	r2, [r3, #12]
 8001cd2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a19      	ldr	r2, [pc, #100]	@ (8001d40 <HAL_UART_MspInit+0x84>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d12b      	bne.n	8001d36 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8001cde:	2300      	movs	r3, #0
 8001ce0:	613b      	str	r3, [r7, #16]
 8001ce2:	4b18      	ldr	r3, [pc, #96]	@ (8001d44 <HAL_UART_MspInit+0x88>)
 8001ce4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ce6:	4a17      	ldr	r2, [pc, #92]	@ (8001d44 <HAL_UART_MspInit+0x88>)
 8001ce8:	f043 0320 	orr.w	r3, r3, #32
 8001cec:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cee:	4b15      	ldr	r3, [pc, #84]	@ (8001d44 <HAL_UART_MspInit+0x88>)
 8001cf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cf2:	f003 0320 	and.w	r3, r3, #32
 8001cf6:	613b      	str	r3, [r7, #16]
 8001cf8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	60fb      	str	r3, [r7, #12]
 8001cfe:	4b11      	ldr	r3, [pc, #68]	@ (8001d44 <HAL_UART_MspInit+0x88>)
 8001d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d02:	4a10      	ldr	r2, [pc, #64]	@ (8001d44 <HAL_UART_MspInit+0x88>)
 8001d04:	f043 0304 	orr.w	r3, r3, #4
 8001d08:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d0a:	4b0e      	ldr	r3, [pc, #56]	@ (8001d44 <HAL_UART_MspInit+0x88>)
 8001d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d0e:	f003 0304 	and.w	r3, r3, #4
 8001d12:	60fb      	str	r3, [r7, #12]
 8001d14:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001d16:	23c0      	movs	r3, #192	@ 0xc0
 8001d18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d1a:	2302      	movs	r3, #2
 8001d1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d22:	2303      	movs	r3, #3
 8001d24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001d26:	2308      	movs	r3, #8
 8001d28:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d2a:	f107 0314 	add.w	r3, r7, #20
 8001d2e:	4619      	mov	r1, r3
 8001d30:	4805      	ldr	r0, [pc, #20]	@ (8001d48 <HAL_UART_MspInit+0x8c>)
 8001d32:	f000 f9f3 	bl	800211c <HAL_GPIO_Init>

  /* USER CODE END USART6_MspInit 1 */

  }

}
 8001d36:	bf00      	nop
 8001d38:	3728      	adds	r7, #40	@ 0x28
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	40011400 	.word	0x40011400
 8001d44:	40023800 	.word	0x40023800
 8001d48:	40020800 	.word	0x40020800

08001d4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d50:	bf00      	nop
 8001d52:	e7fd      	b.n	8001d50 <NMI_Handler+0x4>

08001d54 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d58:	bf00      	nop
 8001d5a:	e7fd      	b.n	8001d58 <HardFault_Handler+0x4>

08001d5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d60:	bf00      	nop
 8001d62:	e7fd      	b.n	8001d60 <MemManage_Handler+0x4>

08001d64 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d68:	bf00      	nop
 8001d6a:	e7fd      	b.n	8001d68 <BusFault_Handler+0x4>

08001d6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d70:	bf00      	nop
 8001d72:	e7fd      	b.n	8001d70 <UsageFault_Handler+0x4>

08001d74 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d78:	bf00      	nop
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr

08001d82 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d82:	b480      	push	{r7}
 8001d84:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d86:	bf00      	nop
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr

08001d90 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d94:	bf00      	nop
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr

08001d9e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d9e:	b580      	push	{r7, lr}
 8001da0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001da2:	f000 f891 	bl	8001ec8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001da6:	bf00      	nop
 8001da8:	bd80      	pop	{r7, pc}
	...

08001dac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001dac:	b480      	push	{r7}
 8001dae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001db0:	4b06      	ldr	r3, [pc, #24]	@ (8001dcc <SystemInit+0x20>)
 8001db2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001db6:	4a05      	ldr	r2, [pc, #20]	@ (8001dcc <SystemInit+0x20>)
 8001db8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001dbc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001dc0:	bf00      	nop
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr
 8001dca:	bf00      	nop
 8001dcc:	e000ed00 	.word	0xe000ed00

08001dd0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001dd0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001e08 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001dd4:	f7ff ffea 	bl	8001dac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001dd8:	480c      	ldr	r0, [pc, #48]	@ (8001e0c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001dda:	490d      	ldr	r1, [pc, #52]	@ (8001e10 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001ddc:	4a0d      	ldr	r2, [pc, #52]	@ (8001e14 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001dde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001de0:	e002      	b.n	8001de8 <LoopCopyDataInit>

08001de2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001de2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001de4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001de6:	3304      	adds	r3, #4

08001de8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001de8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001dec:	d3f9      	bcc.n	8001de2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dee:	4a0a      	ldr	r2, [pc, #40]	@ (8001e18 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001df0:	4c0a      	ldr	r4, [pc, #40]	@ (8001e1c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001df2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001df4:	e001      	b.n	8001dfa <LoopFillZerobss>

08001df6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001df6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001df8:	3204      	adds	r2, #4

08001dfa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dfa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001dfc:	d3fb      	bcc.n	8001df6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001dfe:	f005 f889 	bl	8006f14 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e02:	f7ff fa39 	bl	8001278 <main>
  bx  lr    
 8001e06:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001e08:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001e0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e10:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001e14:	08007208 	.word	0x08007208
  ldr r2, =_sbss
 8001e18:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001e1c:	200002d4 	.word	0x200002d4

08001e20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e20:	e7fe      	b.n	8001e20 <ADC_IRQHandler>
	...

08001e24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e28:	4b0e      	ldr	r3, [pc, #56]	@ (8001e64 <HAL_Init+0x40>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a0d      	ldr	r2, [pc, #52]	@ (8001e64 <HAL_Init+0x40>)
 8001e2e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001e32:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e34:	4b0b      	ldr	r3, [pc, #44]	@ (8001e64 <HAL_Init+0x40>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a0a      	ldr	r2, [pc, #40]	@ (8001e64 <HAL_Init+0x40>)
 8001e3a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001e3e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e40:	4b08      	ldr	r3, [pc, #32]	@ (8001e64 <HAL_Init+0x40>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a07      	ldr	r2, [pc, #28]	@ (8001e64 <HAL_Init+0x40>)
 8001e46:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e4c:	2003      	movs	r0, #3
 8001e4e:	f000 f931 	bl	80020b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e52:	200f      	movs	r0, #15
 8001e54:	f000 f808 	bl	8001e68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e58:	f7ff fea0 	bl	8001b9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e5c:	2300      	movs	r3, #0
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	40023c00 	.word	0x40023c00

08001e68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b082      	sub	sp, #8
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e70:	4b12      	ldr	r3, [pc, #72]	@ (8001ebc <HAL_InitTick+0x54>)
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	4b12      	ldr	r3, [pc, #72]	@ (8001ec0 <HAL_InitTick+0x58>)
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	4619      	mov	r1, r3
 8001e7a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e82:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e86:	4618      	mov	r0, r3
 8001e88:	f000 f93b 	bl	8002102 <HAL_SYSTICK_Config>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d001      	beq.n	8001e96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e00e      	b.n	8001eb4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2b0f      	cmp	r3, #15
 8001e9a:	d80a      	bhi.n	8001eb2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	6879      	ldr	r1, [r7, #4]
 8001ea0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ea4:	f000 f911 	bl	80020ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ea8:	4a06      	ldr	r2, [pc, #24]	@ (8001ec4 <HAL_InitTick+0x5c>)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	e000      	b.n	8001eb4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	3708      	adds	r7, #8
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	2000000c 	.word	0x2000000c
 8001ec0:	20000014 	.word	0x20000014
 8001ec4:	20000010 	.word	0x20000010

08001ec8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ecc:	4b06      	ldr	r3, [pc, #24]	@ (8001ee8 <HAL_IncTick+0x20>)
 8001ece:	781b      	ldrb	r3, [r3, #0]
 8001ed0:	461a      	mov	r2, r3
 8001ed2:	4b06      	ldr	r3, [pc, #24]	@ (8001eec <HAL_IncTick+0x24>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4413      	add	r3, r2
 8001ed8:	4a04      	ldr	r2, [pc, #16]	@ (8001eec <HAL_IncTick+0x24>)
 8001eda:	6013      	str	r3, [r2, #0]
}
 8001edc:	bf00      	nop
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	20000014 	.word	0x20000014
 8001eec:	20000198 	.word	0x20000198

08001ef0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ef4:	4b03      	ldr	r3, [pc, #12]	@ (8001f04 <HAL_GetTick+0x14>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr
 8001f02:	bf00      	nop
 8001f04:	20000198 	.word	0x20000198

08001f08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b084      	sub	sp, #16
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f10:	f7ff ffee 	bl	8001ef0 <HAL_GetTick>
 8001f14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f20:	d005      	beq.n	8001f2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f22:	4b0a      	ldr	r3, [pc, #40]	@ (8001f4c <HAL_Delay+0x44>)
 8001f24:	781b      	ldrb	r3, [r3, #0]
 8001f26:	461a      	mov	r2, r3
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	4413      	add	r3, r2
 8001f2c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f2e:	bf00      	nop
 8001f30:	f7ff ffde 	bl	8001ef0 <HAL_GetTick>
 8001f34:	4602      	mov	r2, r0
 8001f36:	68bb      	ldr	r3, [r7, #8]
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	68fa      	ldr	r2, [r7, #12]
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d8f7      	bhi.n	8001f30 <HAL_Delay+0x28>
  {
  }
}
 8001f40:	bf00      	nop
 8001f42:	bf00      	nop
 8001f44:	3710      	adds	r7, #16
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	20000014 	.word	0x20000014

08001f50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b085      	sub	sp, #20
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	f003 0307 	and.w	r3, r3, #7
 8001f5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f60:	4b0c      	ldr	r3, [pc, #48]	@ (8001f94 <__NVIC_SetPriorityGrouping+0x44>)
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f66:	68ba      	ldr	r2, [r7, #8]
 8001f68:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f78:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001f7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f82:	4a04      	ldr	r2, [pc, #16]	@ (8001f94 <__NVIC_SetPriorityGrouping+0x44>)
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	60d3      	str	r3, [r2, #12]
}
 8001f88:	bf00      	nop
 8001f8a:	3714      	adds	r7, #20
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr
 8001f94:	e000ed00 	.word	0xe000ed00

08001f98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f9c:	4b04      	ldr	r3, [pc, #16]	@ (8001fb0 <__NVIC_GetPriorityGrouping+0x18>)
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	0a1b      	lsrs	r3, r3, #8
 8001fa2:	f003 0307 	and.w	r3, r3, #7
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr
 8001fb0:	e000ed00 	.word	0xe000ed00

08001fb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	4603      	mov	r3, r0
 8001fbc:	6039      	str	r1, [r7, #0]
 8001fbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	db0a      	blt.n	8001fde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	b2da      	uxtb	r2, r3
 8001fcc:	490c      	ldr	r1, [pc, #48]	@ (8002000 <__NVIC_SetPriority+0x4c>)
 8001fce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fd2:	0112      	lsls	r2, r2, #4
 8001fd4:	b2d2      	uxtb	r2, r2
 8001fd6:	440b      	add	r3, r1
 8001fd8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fdc:	e00a      	b.n	8001ff4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	b2da      	uxtb	r2, r3
 8001fe2:	4908      	ldr	r1, [pc, #32]	@ (8002004 <__NVIC_SetPriority+0x50>)
 8001fe4:	79fb      	ldrb	r3, [r7, #7]
 8001fe6:	f003 030f 	and.w	r3, r3, #15
 8001fea:	3b04      	subs	r3, #4
 8001fec:	0112      	lsls	r2, r2, #4
 8001fee:	b2d2      	uxtb	r2, r2
 8001ff0:	440b      	add	r3, r1
 8001ff2:	761a      	strb	r2, [r3, #24]
}
 8001ff4:	bf00      	nop
 8001ff6:	370c      	adds	r7, #12
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr
 8002000:	e000e100 	.word	0xe000e100
 8002004:	e000ed00 	.word	0xe000ed00

08002008 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002008:	b480      	push	{r7}
 800200a:	b089      	sub	sp, #36	@ 0x24
 800200c:	af00      	add	r7, sp, #0
 800200e:	60f8      	str	r0, [r7, #12]
 8002010:	60b9      	str	r1, [r7, #8]
 8002012:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	f003 0307 	and.w	r3, r3, #7
 800201a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800201c:	69fb      	ldr	r3, [r7, #28]
 800201e:	f1c3 0307 	rsb	r3, r3, #7
 8002022:	2b04      	cmp	r3, #4
 8002024:	bf28      	it	cs
 8002026:	2304      	movcs	r3, #4
 8002028:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800202a:	69fb      	ldr	r3, [r7, #28]
 800202c:	3304      	adds	r3, #4
 800202e:	2b06      	cmp	r3, #6
 8002030:	d902      	bls.n	8002038 <NVIC_EncodePriority+0x30>
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	3b03      	subs	r3, #3
 8002036:	e000      	b.n	800203a <NVIC_EncodePriority+0x32>
 8002038:	2300      	movs	r3, #0
 800203a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800203c:	f04f 32ff 	mov.w	r2, #4294967295
 8002040:	69bb      	ldr	r3, [r7, #24]
 8002042:	fa02 f303 	lsl.w	r3, r2, r3
 8002046:	43da      	mvns	r2, r3
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	401a      	ands	r2, r3
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002050:	f04f 31ff 	mov.w	r1, #4294967295
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	fa01 f303 	lsl.w	r3, r1, r3
 800205a:	43d9      	mvns	r1, r3
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002060:	4313      	orrs	r3, r2
         );
}
 8002062:	4618      	mov	r0, r3
 8002064:	3724      	adds	r7, #36	@ 0x24
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr
	...

08002070 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b082      	sub	sp, #8
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	3b01      	subs	r3, #1
 800207c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002080:	d301      	bcc.n	8002086 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002082:	2301      	movs	r3, #1
 8002084:	e00f      	b.n	80020a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002086:	4a0a      	ldr	r2, [pc, #40]	@ (80020b0 <SysTick_Config+0x40>)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	3b01      	subs	r3, #1
 800208c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800208e:	210f      	movs	r1, #15
 8002090:	f04f 30ff 	mov.w	r0, #4294967295
 8002094:	f7ff ff8e 	bl	8001fb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002098:	4b05      	ldr	r3, [pc, #20]	@ (80020b0 <SysTick_Config+0x40>)
 800209a:	2200      	movs	r2, #0
 800209c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800209e:	4b04      	ldr	r3, [pc, #16]	@ (80020b0 <SysTick_Config+0x40>)
 80020a0:	2207      	movs	r2, #7
 80020a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020a4:	2300      	movs	r3, #0
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3708      	adds	r7, #8
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	e000e010 	.word	0xe000e010

080020b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b082      	sub	sp, #8
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020bc:	6878      	ldr	r0, [r7, #4]
 80020be:	f7ff ff47 	bl	8001f50 <__NVIC_SetPriorityGrouping>
}
 80020c2:	bf00      	nop
 80020c4:	3708      	adds	r7, #8
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}

080020ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020ca:	b580      	push	{r7, lr}
 80020cc:	b086      	sub	sp, #24
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	4603      	mov	r3, r0
 80020d2:	60b9      	str	r1, [r7, #8]
 80020d4:	607a      	str	r2, [r7, #4]
 80020d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020d8:	2300      	movs	r3, #0
 80020da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020dc:	f7ff ff5c 	bl	8001f98 <__NVIC_GetPriorityGrouping>
 80020e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020e2:	687a      	ldr	r2, [r7, #4]
 80020e4:	68b9      	ldr	r1, [r7, #8]
 80020e6:	6978      	ldr	r0, [r7, #20]
 80020e8:	f7ff ff8e 	bl	8002008 <NVIC_EncodePriority>
 80020ec:	4602      	mov	r2, r0
 80020ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020f2:	4611      	mov	r1, r2
 80020f4:	4618      	mov	r0, r3
 80020f6:	f7ff ff5d 	bl	8001fb4 <__NVIC_SetPriority>
}
 80020fa:	bf00      	nop
 80020fc:	3718      	adds	r7, #24
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}

08002102 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002102:	b580      	push	{r7, lr}
 8002104:	b082      	sub	sp, #8
 8002106:	af00      	add	r7, sp, #0
 8002108:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	f7ff ffb0 	bl	8002070 <SysTick_Config>
 8002110:	4603      	mov	r3, r0
}
 8002112:	4618      	mov	r0, r3
 8002114:	3708      	adds	r7, #8
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
	...

0800211c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800211c:	b480      	push	{r7}
 800211e:	b089      	sub	sp, #36	@ 0x24
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
 8002124:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002126:	2300      	movs	r3, #0
 8002128:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800212a:	2300      	movs	r3, #0
 800212c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800212e:	2300      	movs	r3, #0
 8002130:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002132:	2300      	movs	r3, #0
 8002134:	61fb      	str	r3, [r7, #28]
 8002136:	e165      	b.n	8002404 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002138:	2201      	movs	r2, #1
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	fa02 f303 	lsl.w	r3, r2, r3
 8002140:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	697a      	ldr	r2, [r7, #20]
 8002148:	4013      	ands	r3, r2
 800214a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800214c:	693a      	ldr	r2, [r7, #16]
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	429a      	cmp	r2, r3
 8002152:	f040 8154 	bne.w	80023fe <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	f003 0303 	and.w	r3, r3, #3
 800215e:	2b01      	cmp	r3, #1
 8002160:	d005      	beq.n	800216e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800216a:	2b02      	cmp	r3, #2
 800216c:	d130      	bne.n	80021d0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002174:	69fb      	ldr	r3, [r7, #28]
 8002176:	005b      	lsls	r3, r3, #1
 8002178:	2203      	movs	r2, #3
 800217a:	fa02 f303 	lsl.w	r3, r2, r3
 800217e:	43db      	mvns	r3, r3
 8002180:	69ba      	ldr	r2, [r7, #24]
 8002182:	4013      	ands	r3, r2
 8002184:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	68da      	ldr	r2, [r3, #12]
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	005b      	lsls	r3, r3, #1
 800218e:	fa02 f303 	lsl.w	r3, r2, r3
 8002192:	69ba      	ldr	r2, [r7, #24]
 8002194:	4313      	orrs	r3, r2
 8002196:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	69ba      	ldr	r2, [r7, #24]
 800219c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021a4:	2201      	movs	r2, #1
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ac:	43db      	mvns	r3, r3
 80021ae:	69ba      	ldr	r2, [r7, #24]
 80021b0:	4013      	ands	r3, r2
 80021b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	091b      	lsrs	r3, r3, #4
 80021ba:	f003 0201 	and.w	r2, r3, #1
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	fa02 f303 	lsl.w	r3, r2, r3
 80021c4:	69ba      	ldr	r2, [r7, #24]
 80021c6:	4313      	orrs	r3, r2
 80021c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	69ba      	ldr	r2, [r7, #24]
 80021ce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	f003 0303 	and.w	r3, r3, #3
 80021d8:	2b03      	cmp	r3, #3
 80021da:	d017      	beq.n	800220c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	68db      	ldr	r3, [r3, #12]
 80021e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80021e2:	69fb      	ldr	r3, [r7, #28]
 80021e4:	005b      	lsls	r3, r3, #1
 80021e6:	2203      	movs	r2, #3
 80021e8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ec:	43db      	mvns	r3, r3
 80021ee:	69ba      	ldr	r2, [r7, #24]
 80021f0:	4013      	ands	r3, r2
 80021f2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	689a      	ldr	r2, [r3, #8]
 80021f8:	69fb      	ldr	r3, [r7, #28]
 80021fa:	005b      	lsls	r3, r3, #1
 80021fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002200:	69ba      	ldr	r2, [r7, #24]
 8002202:	4313      	orrs	r3, r2
 8002204:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	69ba      	ldr	r2, [r7, #24]
 800220a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	f003 0303 	and.w	r3, r3, #3
 8002214:	2b02      	cmp	r3, #2
 8002216:	d123      	bne.n	8002260 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002218:	69fb      	ldr	r3, [r7, #28]
 800221a:	08da      	lsrs	r2, r3, #3
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	3208      	adds	r2, #8
 8002220:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002224:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	f003 0307 	and.w	r3, r3, #7
 800222c:	009b      	lsls	r3, r3, #2
 800222e:	220f      	movs	r2, #15
 8002230:	fa02 f303 	lsl.w	r3, r2, r3
 8002234:	43db      	mvns	r3, r3
 8002236:	69ba      	ldr	r2, [r7, #24]
 8002238:	4013      	ands	r3, r2
 800223a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	691a      	ldr	r2, [r3, #16]
 8002240:	69fb      	ldr	r3, [r7, #28]
 8002242:	f003 0307 	and.w	r3, r3, #7
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	fa02 f303 	lsl.w	r3, r2, r3
 800224c:	69ba      	ldr	r2, [r7, #24]
 800224e:	4313      	orrs	r3, r2
 8002250:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002252:	69fb      	ldr	r3, [r7, #28]
 8002254:	08da      	lsrs	r2, r3, #3
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	3208      	adds	r2, #8
 800225a:	69b9      	ldr	r1, [r7, #24]
 800225c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	005b      	lsls	r3, r3, #1
 800226a:	2203      	movs	r2, #3
 800226c:	fa02 f303 	lsl.w	r3, r2, r3
 8002270:	43db      	mvns	r3, r3
 8002272:	69ba      	ldr	r2, [r7, #24]
 8002274:	4013      	ands	r3, r2
 8002276:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f003 0203 	and.w	r2, r3, #3
 8002280:	69fb      	ldr	r3, [r7, #28]
 8002282:	005b      	lsls	r3, r3, #1
 8002284:	fa02 f303 	lsl.w	r3, r2, r3
 8002288:	69ba      	ldr	r2, [r7, #24]
 800228a:	4313      	orrs	r3, r2
 800228c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	69ba      	ldr	r2, [r7, #24]
 8002292:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800229c:	2b00      	cmp	r3, #0
 800229e:	f000 80ae 	beq.w	80023fe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022a2:	2300      	movs	r3, #0
 80022a4:	60fb      	str	r3, [r7, #12]
 80022a6:	4b5d      	ldr	r3, [pc, #372]	@ (800241c <HAL_GPIO_Init+0x300>)
 80022a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022aa:	4a5c      	ldr	r2, [pc, #368]	@ (800241c <HAL_GPIO_Init+0x300>)
 80022ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80022b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80022b2:	4b5a      	ldr	r3, [pc, #360]	@ (800241c <HAL_GPIO_Init+0x300>)
 80022b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80022ba:	60fb      	str	r3, [r7, #12]
 80022bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80022be:	4a58      	ldr	r2, [pc, #352]	@ (8002420 <HAL_GPIO_Init+0x304>)
 80022c0:	69fb      	ldr	r3, [r7, #28]
 80022c2:	089b      	lsrs	r3, r3, #2
 80022c4:	3302      	adds	r3, #2
 80022c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80022cc:	69fb      	ldr	r3, [r7, #28]
 80022ce:	f003 0303 	and.w	r3, r3, #3
 80022d2:	009b      	lsls	r3, r3, #2
 80022d4:	220f      	movs	r2, #15
 80022d6:	fa02 f303 	lsl.w	r3, r2, r3
 80022da:	43db      	mvns	r3, r3
 80022dc:	69ba      	ldr	r2, [r7, #24]
 80022de:	4013      	ands	r3, r2
 80022e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	4a4f      	ldr	r2, [pc, #316]	@ (8002424 <HAL_GPIO_Init+0x308>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d025      	beq.n	8002336 <HAL_GPIO_Init+0x21a>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	4a4e      	ldr	r2, [pc, #312]	@ (8002428 <HAL_GPIO_Init+0x30c>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d01f      	beq.n	8002332 <HAL_GPIO_Init+0x216>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	4a4d      	ldr	r2, [pc, #308]	@ (800242c <HAL_GPIO_Init+0x310>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d019      	beq.n	800232e <HAL_GPIO_Init+0x212>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	4a4c      	ldr	r2, [pc, #304]	@ (8002430 <HAL_GPIO_Init+0x314>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d013      	beq.n	800232a <HAL_GPIO_Init+0x20e>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	4a4b      	ldr	r2, [pc, #300]	@ (8002434 <HAL_GPIO_Init+0x318>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d00d      	beq.n	8002326 <HAL_GPIO_Init+0x20a>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	4a4a      	ldr	r2, [pc, #296]	@ (8002438 <HAL_GPIO_Init+0x31c>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d007      	beq.n	8002322 <HAL_GPIO_Init+0x206>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	4a49      	ldr	r2, [pc, #292]	@ (800243c <HAL_GPIO_Init+0x320>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d101      	bne.n	800231e <HAL_GPIO_Init+0x202>
 800231a:	2306      	movs	r3, #6
 800231c:	e00c      	b.n	8002338 <HAL_GPIO_Init+0x21c>
 800231e:	2307      	movs	r3, #7
 8002320:	e00a      	b.n	8002338 <HAL_GPIO_Init+0x21c>
 8002322:	2305      	movs	r3, #5
 8002324:	e008      	b.n	8002338 <HAL_GPIO_Init+0x21c>
 8002326:	2304      	movs	r3, #4
 8002328:	e006      	b.n	8002338 <HAL_GPIO_Init+0x21c>
 800232a:	2303      	movs	r3, #3
 800232c:	e004      	b.n	8002338 <HAL_GPIO_Init+0x21c>
 800232e:	2302      	movs	r3, #2
 8002330:	e002      	b.n	8002338 <HAL_GPIO_Init+0x21c>
 8002332:	2301      	movs	r3, #1
 8002334:	e000      	b.n	8002338 <HAL_GPIO_Init+0x21c>
 8002336:	2300      	movs	r3, #0
 8002338:	69fa      	ldr	r2, [r7, #28]
 800233a:	f002 0203 	and.w	r2, r2, #3
 800233e:	0092      	lsls	r2, r2, #2
 8002340:	4093      	lsls	r3, r2
 8002342:	69ba      	ldr	r2, [r7, #24]
 8002344:	4313      	orrs	r3, r2
 8002346:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002348:	4935      	ldr	r1, [pc, #212]	@ (8002420 <HAL_GPIO_Init+0x304>)
 800234a:	69fb      	ldr	r3, [r7, #28]
 800234c:	089b      	lsrs	r3, r3, #2
 800234e:	3302      	adds	r3, #2
 8002350:	69ba      	ldr	r2, [r7, #24]
 8002352:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002356:	4b3a      	ldr	r3, [pc, #232]	@ (8002440 <HAL_GPIO_Init+0x324>)
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	43db      	mvns	r3, r3
 8002360:	69ba      	ldr	r2, [r7, #24]
 8002362:	4013      	ands	r3, r2
 8002364:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800236e:	2b00      	cmp	r3, #0
 8002370:	d003      	beq.n	800237a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002372:	69ba      	ldr	r2, [r7, #24]
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	4313      	orrs	r3, r2
 8002378:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800237a:	4a31      	ldr	r2, [pc, #196]	@ (8002440 <HAL_GPIO_Init+0x324>)
 800237c:	69bb      	ldr	r3, [r7, #24]
 800237e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002380:	4b2f      	ldr	r3, [pc, #188]	@ (8002440 <HAL_GPIO_Init+0x324>)
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	43db      	mvns	r3, r3
 800238a:	69ba      	ldr	r2, [r7, #24]
 800238c:	4013      	ands	r3, r2
 800238e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002398:	2b00      	cmp	r3, #0
 800239a:	d003      	beq.n	80023a4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800239c:	69ba      	ldr	r2, [r7, #24]
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	4313      	orrs	r3, r2
 80023a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80023a4:	4a26      	ldr	r2, [pc, #152]	@ (8002440 <HAL_GPIO_Init+0x324>)
 80023a6:	69bb      	ldr	r3, [r7, #24]
 80023a8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80023aa:	4b25      	ldr	r3, [pc, #148]	@ (8002440 <HAL_GPIO_Init+0x324>)
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	43db      	mvns	r3, r3
 80023b4:	69ba      	ldr	r2, [r7, #24]
 80023b6:	4013      	ands	r3, r2
 80023b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d003      	beq.n	80023ce <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80023c6:	69ba      	ldr	r2, [r7, #24]
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	4313      	orrs	r3, r2
 80023cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80023ce:	4a1c      	ldr	r2, [pc, #112]	@ (8002440 <HAL_GPIO_Init+0x324>)
 80023d0:	69bb      	ldr	r3, [r7, #24]
 80023d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023d4:	4b1a      	ldr	r3, [pc, #104]	@ (8002440 <HAL_GPIO_Init+0x324>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	43db      	mvns	r3, r3
 80023de:	69ba      	ldr	r2, [r7, #24]
 80023e0:	4013      	ands	r3, r2
 80023e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d003      	beq.n	80023f8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80023f0:	69ba      	ldr	r2, [r7, #24]
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	4313      	orrs	r3, r2
 80023f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80023f8:	4a11      	ldr	r2, [pc, #68]	@ (8002440 <HAL_GPIO_Init+0x324>)
 80023fa:	69bb      	ldr	r3, [r7, #24]
 80023fc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023fe:	69fb      	ldr	r3, [r7, #28]
 8002400:	3301      	adds	r3, #1
 8002402:	61fb      	str	r3, [r7, #28]
 8002404:	69fb      	ldr	r3, [r7, #28]
 8002406:	2b0f      	cmp	r3, #15
 8002408:	f67f ae96 	bls.w	8002138 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800240c:	bf00      	nop
 800240e:	bf00      	nop
 8002410:	3724      	adds	r7, #36	@ 0x24
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr
 800241a:	bf00      	nop
 800241c:	40023800 	.word	0x40023800
 8002420:	40013800 	.word	0x40013800
 8002424:	40020000 	.word	0x40020000
 8002428:	40020400 	.word	0x40020400
 800242c:	40020800 	.word	0x40020800
 8002430:	40020c00 	.word	0x40020c00
 8002434:	40021000 	.word	0x40021000
 8002438:	40021400 	.word	0x40021400
 800243c:	40021800 	.word	0x40021800
 8002440:	40013c00 	.word	0x40013c00

08002444 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002444:	b480      	push	{r7}
 8002446:	b085      	sub	sp, #20
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
 800244c:	460b      	mov	r3, r1
 800244e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	691a      	ldr	r2, [r3, #16]
 8002454:	887b      	ldrh	r3, [r7, #2]
 8002456:	4013      	ands	r3, r2
 8002458:	2b00      	cmp	r3, #0
 800245a:	d002      	beq.n	8002462 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800245c:	2301      	movs	r3, #1
 800245e:	73fb      	strb	r3, [r7, #15]
 8002460:	e001      	b.n	8002466 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002462:	2300      	movs	r3, #0
 8002464:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002466:	7bfb      	ldrb	r3, [r7, #15]
}
 8002468:	4618      	mov	r0, r3
 800246a:	3714      	adds	r7, #20
 800246c:	46bd      	mov	sp, r7
 800246e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002472:	4770      	bx	lr

08002474 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002474:	b480      	push	{r7}
 8002476:	b083      	sub	sp, #12
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
 800247c:	460b      	mov	r3, r1
 800247e:	807b      	strh	r3, [r7, #2]
 8002480:	4613      	mov	r3, r2
 8002482:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002484:	787b      	ldrb	r3, [r7, #1]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d003      	beq.n	8002492 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800248a:	887a      	ldrh	r2, [r7, #2]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002490:	e003      	b.n	800249a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002492:	887b      	ldrh	r3, [r7, #2]
 8002494:	041a      	lsls	r2, r3, #16
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	619a      	str	r2, [r3, #24]
}
 800249a:	bf00      	nop
 800249c:	370c      	adds	r7, #12
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr

080024a6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80024a6:	b480      	push	{r7}
 80024a8:	b085      	sub	sp, #20
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	6078      	str	r0, [r7, #4]
 80024ae:	460b      	mov	r3, r1
 80024b0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	695b      	ldr	r3, [r3, #20]
 80024b6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80024b8:	887a      	ldrh	r2, [r7, #2]
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	4013      	ands	r3, r2
 80024be:	041a      	lsls	r2, r3, #16
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	43d9      	mvns	r1, r3
 80024c4:	887b      	ldrh	r3, [r7, #2]
 80024c6:	400b      	ands	r3, r1
 80024c8:	431a      	orrs	r2, r3
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	619a      	str	r2, [r3, #24]
}
 80024ce:	bf00      	nop
 80024d0:	3714      	adds	r7, #20
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr
	...

080024dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b084      	sub	sp, #16
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d101      	bne.n	80024ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e12b      	b.n	8002746 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d106      	bne.n	8002508 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2200      	movs	r2, #0
 80024fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002502:	6878      	ldr	r0, [r7, #4]
 8002504:	f7ff fb72 	bl	8001bec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2224      	movs	r2, #36	@ 0x24
 800250c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f022 0201 	bic.w	r2, r2, #1
 800251e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800252e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800253e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002540:	f001 fa36 	bl	80039b0 <HAL_RCC_GetPCLK1Freq>
 8002544:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	4a81      	ldr	r2, [pc, #516]	@ (8002750 <HAL_I2C_Init+0x274>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d807      	bhi.n	8002560 <HAL_I2C_Init+0x84>
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	4a80      	ldr	r2, [pc, #512]	@ (8002754 <HAL_I2C_Init+0x278>)
 8002554:	4293      	cmp	r3, r2
 8002556:	bf94      	ite	ls
 8002558:	2301      	movls	r3, #1
 800255a:	2300      	movhi	r3, #0
 800255c:	b2db      	uxtb	r3, r3
 800255e:	e006      	b.n	800256e <HAL_I2C_Init+0x92>
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	4a7d      	ldr	r2, [pc, #500]	@ (8002758 <HAL_I2C_Init+0x27c>)
 8002564:	4293      	cmp	r3, r2
 8002566:	bf94      	ite	ls
 8002568:	2301      	movls	r3, #1
 800256a:	2300      	movhi	r3, #0
 800256c:	b2db      	uxtb	r3, r3
 800256e:	2b00      	cmp	r3, #0
 8002570:	d001      	beq.n	8002576 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e0e7      	b.n	8002746 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	4a78      	ldr	r2, [pc, #480]	@ (800275c <HAL_I2C_Init+0x280>)
 800257a:	fba2 2303 	umull	r2, r3, r2, r3
 800257e:	0c9b      	lsrs	r3, r3, #18
 8002580:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	68ba      	ldr	r2, [r7, #8]
 8002592:	430a      	orrs	r2, r1
 8002594:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	6a1b      	ldr	r3, [r3, #32]
 800259c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	4a6a      	ldr	r2, [pc, #424]	@ (8002750 <HAL_I2C_Init+0x274>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d802      	bhi.n	80025b0 <HAL_I2C_Init+0xd4>
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	3301      	adds	r3, #1
 80025ae:	e009      	b.n	80025c4 <HAL_I2C_Init+0xe8>
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80025b6:	fb02 f303 	mul.w	r3, r2, r3
 80025ba:	4a69      	ldr	r2, [pc, #420]	@ (8002760 <HAL_I2C_Init+0x284>)
 80025bc:	fba2 2303 	umull	r2, r3, r2, r3
 80025c0:	099b      	lsrs	r3, r3, #6
 80025c2:	3301      	adds	r3, #1
 80025c4:	687a      	ldr	r2, [r7, #4]
 80025c6:	6812      	ldr	r2, [r2, #0]
 80025c8:	430b      	orrs	r3, r1
 80025ca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	69db      	ldr	r3, [r3, #28]
 80025d2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80025d6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	495c      	ldr	r1, [pc, #368]	@ (8002750 <HAL_I2C_Init+0x274>)
 80025e0:	428b      	cmp	r3, r1
 80025e2:	d819      	bhi.n	8002618 <HAL_I2C_Init+0x13c>
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	1e59      	subs	r1, r3, #1
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	005b      	lsls	r3, r3, #1
 80025ee:	fbb1 f3f3 	udiv	r3, r1, r3
 80025f2:	1c59      	adds	r1, r3, #1
 80025f4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80025f8:	400b      	ands	r3, r1
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d00a      	beq.n	8002614 <HAL_I2C_Init+0x138>
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	1e59      	subs	r1, r3, #1
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	005b      	lsls	r3, r3, #1
 8002608:	fbb1 f3f3 	udiv	r3, r1, r3
 800260c:	3301      	adds	r3, #1
 800260e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002612:	e051      	b.n	80026b8 <HAL_I2C_Init+0x1dc>
 8002614:	2304      	movs	r3, #4
 8002616:	e04f      	b.n	80026b8 <HAL_I2C_Init+0x1dc>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d111      	bne.n	8002644 <HAL_I2C_Init+0x168>
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	1e58      	subs	r0, r3, #1
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6859      	ldr	r1, [r3, #4]
 8002628:	460b      	mov	r3, r1
 800262a:	005b      	lsls	r3, r3, #1
 800262c:	440b      	add	r3, r1
 800262e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002632:	3301      	adds	r3, #1
 8002634:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002638:	2b00      	cmp	r3, #0
 800263a:	bf0c      	ite	eq
 800263c:	2301      	moveq	r3, #1
 800263e:	2300      	movne	r3, #0
 8002640:	b2db      	uxtb	r3, r3
 8002642:	e012      	b.n	800266a <HAL_I2C_Init+0x18e>
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	1e58      	subs	r0, r3, #1
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6859      	ldr	r1, [r3, #4]
 800264c:	460b      	mov	r3, r1
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	440b      	add	r3, r1
 8002652:	0099      	lsls	r1, r3, #2
 8002654:	440b      	add	r3, r1
 8002656:	fbb0 f3f3 	udiv	r3, r0, r3
 800265a:	3301      	adds	r3, #1
 800265c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002660:	2b00      	cmp	r3, #0
 8002662:	bf0c      	ite	eq
 8002664:	2301      	moveq	r3, #1
 8002666:	2300      	movne	r3, #0
 8002668:	b2db      	uxtb	r3, r3
 800266a:	2b00      	cmp	r3, #0
 800266c:	d001      	beq.n	8002672 <HAL_I2C_Init+0x196>
 800266e:	2301      	movs	r3, #1
 8002670:	e022      	b.n	80026b8 <HAL_I2C_Init+0x1dc>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d10e      	bne.n	8002698 <HAL_I2C_Init+0x1bc>
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	1e58      	subs	r0, r3, #1
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6859      	ldr	r1, [r3, #4]
 8002682:	460b      	mov	r3, r1
 8002684:	005b      	lsls	r3, r3, #1
 8002686:	440b      	add	r3, r1
 8002688:	fbb0 f3f3 	udiv	r3, r0, r3
 800268c:	3301      	adds	r3, #1
 800268e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002692:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002696:	e00f      	b.n	80026b8 <HAL_I2C_Init+0x1dc>
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	1e58      	subs	r0, r3, #1
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6859      	ldr	r1, [r3, #4]
 80026a0:	460b      	mov	r3, r1
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	440b      	add	r3, r1
 80026a6:	0099      	lsls	r1, r3, #2
 80026a8:	440b      	add	r3, r1
 80026aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80026ae:	3301      	adds	r3, #1
 80026b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026b4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80026b8:	6879      	ldr	r1, [r7, #4]
 80026ba:	6809      	ldr	r1, [r1, #0]
 80026bc:	4313      	orrs	r3, r2
 80026be:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	69da      	ldr	r2, [r3, #28]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6a1b      	ldr	r3, [r3, #32]
 80026d2:	431a      	orrs	r2, r3
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	430a      	orrs	r2, r1
 80026da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80026e6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80026ea:	687a      	ldr	r2, [r7, #4]
 80026ec:	6911      	ldr	r1, [r2, #16]
 80026ee:	687a      	ldr	r2, [r7, #4]
 80026f0:	68d2      	ldr	r2, [r2, #12]
 80026f2:	4311      	orrs	r1, r2
 80026f4:	687a      	ldr	r2, [r7, #4]
 80026f6:	6812      	ldr	r2, [r2, #0]
 80026f8:	430b      	orrs	r3, r1
 80026fa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	68db      	ldr	r3, [r3, #12]
 8002702:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	695a      	ldr	r2, [r3, #20]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	699b      	ldr	r3, [r3, #24]
 800270e:	431a      	orrs	r2, r3
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	430a      	orrs	r2, r1
 8002716:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f042 0201 	orr.w	r2, r2, #1
 8002726:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2200      	movs	r2, #0
 800272c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2220      	movs	r2, #32
 8002732:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2200      	movs	r2, #0
 800273a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2200      	movs	r2, #0
 8002740:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002744:	2300      	movs	r3, #0
}
 8002746:	4618      	mov	r0, r3
 8002748:	3710      	adds	r7, #16
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	000186a0 	.word	0x000186a0
 8002754:	001e847f 	.word	0x001e847f
 8002758:	003d08ff 	.word	0x003d08ff
 800275c:	431bde83 	.word	0x431bde83
 8002760:	10624dd3 	.word	0x10624dd3

08002764 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b088      	sub	sp, #32
 8002768:	af02      	add	r7, sp, #8
 800276a:	60f8      	str	r0, [r7, #12]
 800276c:	607a      	str	r2, [r7, #4]
 800276e:	461a      	mov	r2, r3
 8002770:	460b      	mov	r3, r1
 8002772:	817b      	strh	r3, [r7, #10]
 8002774:	4613      	mov	r3, r2
 8002776:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002778:	f7ff fbba 	bl	8001ef0 <HAL_GetTick>
 800277c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002784:	b2db      	uxtb	r3, r3
 8002786:	2b20      	cmp	r3, #32
 8002788:	f040 80e0 	bne.w	800294c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	9300      	str	r3, [sp, #0]
 8002790:	2319      	movs	r3, #25
 8002792:	2201      	movs	r2, #1
 8002794:	4970      	ldr	r1, [pc, #448]	@ (8002958 <HAL_I2C_Master_Transmit+0x1f4>)
 8002796:	68f8      	ldr	r0, [r7, #12]
 8002798:	f000 fd92 	bl	80032c0 <I2C_WaitOnFlagUntilTimeout>
 800279c:	4603      	mov	r3, r0
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d001      	beq.n	80027a6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80027a2:	2302      	movs	r3, #2
 80027a4:	e0d3      	b.n	800294e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d101      	bne.n	80027b4 <HAL_I2C_Master_Transmit+0x50>
 80027b0:	2302      	movs	r3, #2
 80027b2:	e0cc      	b.n	800294e <HAL_I2C_Master_Transmit+0x1ea>
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	2201      	movs	r2, #1
 80027b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 0301 	and.w	r3, r3, #1
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d007      	beq.n	80027da <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f042 0201 	orr.w	r2, r2, #1
 80027d8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80027e8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	2221      	movs	r2, #33	@ 0x21
 80027ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	2210      	movs	r2, #16
 80027f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	2200      	movs	r2, #0
 80027fe:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	687a      	ldr	r2, [r7, #4]
 8002804:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	893a      	ldrh	r2, [r7, #8]
 800280a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002810:	b29a      	uxth	r2, r3
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	4a50      	ldr	r2, [pc, #320]	@ (800295c <HAL_I2C_Master_Transmit+0x1f8>)
 800281a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800281c:	8979      	ldrh	r1, [r7, #10]
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	6a3a      	ldr	r2, [r7, #32]
 8002822:	68f8      	ldr	r0, [r7, #12]
 8002824:	f000 fbfc 	bl	8003020 <I2C_MasterRequestWrite>
 8002828:	4603      	mov	r3, r0
 800282a:	2b00      	cmp	r3, #0
 800282c:	d001      	beq.n	8002832 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	e08d      	b.n	800294e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002832:	2300      	movs	r3, #0
 8002834:	613b      	str	r3, [r7, #16]
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	695b      	ldr	r3, [r3, #20]
 800283c:	613b      	str	r3, [r7, #16]
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	699b      	ldr	r3, [r3, #24]
 8002844:	613b      	str	r3, [r7, #16]
 8002846:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002848:	e066      	b.n	8002918 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800284a:	697a      	ldr	r2, [r7, #20]
 800284c:	6a39      	ldr	r1, [r7, #32]
 800284e:	68f8      	ldr	r0, [r7, #12]
 8002850:	f000 fe50 	bl	80034f4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002854:	4603      	mov	r3, r0
 8002856:	2b00      	cmp	r3, #0
 8002858:	d00d      	beq.n	8002876 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800285e:	2b04      	cmp	r3, #4
 8002860:	d107      	bne.n	8002872 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002870:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e06b      	b.n	800294e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800287a:	781a      	ldrb	r2, [r3, #0]
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002886:	1c5a      	adds	r2, r3, #1
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002890:	b29b      	uxth	r3, r3
 8002892:	3b01      	subs	r3, #1
 8002894:	b29a      	uxth	r2, r3
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800289e:	3b01      	subs	r3, #1
 80028a0:	b29a      	uxth	r2, r3
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	695b      	ldr	r3, [r3, #20]
 80028ac:	f003 0304 	and.w	r3, r3, #4
 80028b0:	2b04      	cmp	r3, #4
 80028b2:	d11b      	bne.n	80028ec <HAL_I2C_Master_Transmit+0x188>
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d017      	beq.n	80028ec <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028c0:	781a      	ldrb	r2, [r3, #0]
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028cc:	1c5a      	adds	r2, r3, #1
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028d6:	b29b      	uxth	r3, r3
 80028d8:	3b01      	subs	r3, #1
 80028da:	b29a      	uxth	r2, r3
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028e4:	3b01      	subs	r3, #1
 80028e6:	b29a      	uxth	r2, r3
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028ec:	697a      	ldr	r2, [r7, #20]
 80028ee:	6a39      	ldr	r1, [r7, #32]
 80028f0:	68f8      	ldr	r0, [r7, #12]
 80028f2:	f000 fe47 	bl	8003584 <I2C_WaitOnBTFFlagUntilTimeout>
 80028f6:	4603      	mov	r3, r0
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d00d      	beq.n	8002918 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002900:	2b04      	cmp	r3, #4
 8002902:	d107      	bne.n	8002914 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002912:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	e01a      	b.n	800294e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800291c:	2b00      	cmp	r3, #0
 800291e:	d194      	bne.n	800284a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800292e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	2220      	movs	r2, #32
 8002934:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	2200      	movs	r2, #0
 800293c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2200      	movs	r2, #0
 8002944:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002948:	2300      	movs	r3, #0
 800294a:	e000      	b.n	800294e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800294c:	2302      	movs	r3, #2
  }
}
 800294e:	4618      	mov	r0, r3
 8002950:	3718      	adds	r7, #24
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	00100002 	.word	0x00100002
 800295c:	ffff0000 	.word	0xffff0000

08002960 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b08c      	sub	sp, #48	@ 0x30
 8002964:	af02      	add	r7, sp, #8
 8002966:	60f8      	str	r0, [r7, #12]
 8002968:	607a      	str	r2, [r7, #4]
 800296a:	461a      	mov	r2, r3
 800296c:	460b      	mov	r3, r1
 800296e:	817b      	strh	r3, [r7, #10]
 8002970:	4613      	mov	r3, r2
 8002972:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002974:	f7ff fabc 	bl	8001ef0 <HAL_GetTick>
 8002978:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002980:	b2db      	uxtb	r3, r3
 8002982:	2b20      	cmp	r3, #32
 8002984:	f040 8217 	bne.w	8002db6 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800298a:	9300      	str	r3, [sp, #0]
 800298c:	2319      	movs	r3, #25
 800298e:	2201      	movs	r2, #1
 8002990:	497c      	ldr	r1, [pc, #496]	@ (8002b84 <HAL_I2C_Master_Receive+0x224>)
 8002992:	68f8      	ldr	r0, [r7, #12]
 8002994:	f000 fc94 	bl	80032c0 <I2C_WaitOnFlagUntilTimeout>
 8002998:	4603      	mov	r3, r0
 800299a:	2b00      	cmp	r3, #0
 800299c:	d001      	beq.n	80029a2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800299e:	2302      	movs	r3, #2
 80029a0:	e20a      	b.n	8002db8 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	d101      	bne.n	80029b0 <HAL_I2C_Master_Receive+0x50>
 80029ac:	2302      	movs	r3, #2
 80029ae:	e203      	b.n	8002db8 <HAL_I2C_Master_Receive+0x458>
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	2201      	movs	r2, #1
 80029b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 0301 	and.w	r3, r3, #1
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d007      	beq.n	80029d6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f042 0201 	orr.w	r2, r2, #1
 80029d4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80029e4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	2222      	movs	r2, #34	@ 0x22
 80029ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	2210      	movs	r2, #16
 80029f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2200      	movs	r2, #0
 80029fa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	687a      	ldr	r2, [r7, #4]
 8002a00:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	893a      	ldrh	r2, [r7, #8]
 8002a06:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a0c:	b29a      	uxth	r2, r3
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	4a5c      	ldr	r2, [pc, #368]	@ (8002b88 <HAL_I2C_Master_Receive+0x228>)
 8002a16:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002a18:	8979      	ldrh	r1, [r7, #10]
 8002a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a1c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002a1e:	68f8      	ldr	r0, [r7, #12]
 8002a20:	f000 fb80 	bl	8003124 <I2C_MasterRequestRead>
 8002a24:	4603      	mov	r3, r0
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d001      	beq.n	8002a2e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e1c4      	b.n	8002db8 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d113      	bne.n	8002a5e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a36:	2300      	movs	r3, #0
 8002a38:	623b      	str	r3, [r7, #32]
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	695b      	ldr	r3, [r3, #20]
 8002a40:	623b      	str	r3, [r7, #32]
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	699b      	ldr	r3, [r3, #24]
 8002a48:	623b      	str	r3, [r7, #32]
 8002a4a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a5a:	601a      	str	r2, [r3, #0]
 8002a5c:	e198      	b.n	8002d90 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a62:	2b01      	cmp	r3, #1
 8002a64:	d11b      	bne.n	8002a9e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a74:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a76:	2300      	movs	r3, #0
 8002a78:	61fb      	str	r3, [r7, #28]
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	695b      	ldr	r3, [r3, #20]
 8002a80:	61fb      	str	r3, [r7, #28]
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	699b      	ldr	r3, [r3, #24]
 8002a88:	61fb      	str	r3, [r7, #28]
 8002a8a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a9a:	601a      	str	r2, [r3, #0]
 8002a9c:	e178      	b.n	8002d90 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002aa2:	2b02      	cmp	r3, #2
 8002aa4:	d11b      	bne.n	8002ade <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ab4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002ac4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	61bb      	str	r3, [r7, #24]
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	695b      	ldr	r3, [r3, #20]
 8002ad0:	61bb      	str	r3, [r7, #24]
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	699b      	ldr	r3, [r3, #24]
 8002ad8:	61bb      	str	r3, [r7, #24]
 8002ada:	69bb      	ldr	r3, [r7, #24]
 8002adc:	e158      	b.n	8002d90 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002aec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002aee:	2300      	movs	r3, #0
 8002af0:	617b      	str	r3, [r7, #20]
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	695b      	ldr	r3, [r3, #20]
 8002af8:	617b      	str	r3, [r7, #20]
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	699b      	ldr	r3, [r3, #24]
 8002b00:	617b      	str	r3, [r7, #20]
 8002b02:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002b04:	e144      	b.n	8002d90 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b0a:	2b03      	cmp	r3, #3
 8002b0c:	f200 80f1 	bhi.w	8002cf2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d123      	bne.n	8002b60 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b1a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002b1c:	68f8      	ldr	r0, [r7, #12]
 8002b1e:	f000 fd79 	bl	8003614 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002b22:	4603      	mov	r3, r0
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d001      	beq.n	8002b2c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	e145      	b.n	8002db8 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	691a      	ldr	r2, [r3, #16]
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b36:	b2d2      	uxtb	r2, r2
 8002b38:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b3e:	1c5a      	adds	r2, r3, #1
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b48:	3b01      	subs	r3, #1
 8002b4a:	b29a      	uxth	r2, r3
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b54:	b29b      	uxth	r3, r3
 8002b56:	3b01      	subs	r3, #1
 8002b58:	b29a      	uxth	r2, r3
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002b5e:	e117      	b.n	8002d90 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b64:	2b02      	cmp	r3, #2
 8002b66:	d14e      	bne.n	8002c06 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002b68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b6a:	9300      	str	r3, [sp, #0]
 8002b6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b6e:	2200      	movs	r2, #0
 8002b70:	4906      	ldr	r1, [pc, #24]	@ (8002b8c <HAL_I2C_Master_Receive+0x22c>)
 8002b72:	68f8      	ldr	r0, [r7, #12]
 8002b74:	f000 fba4 	bl	80032c0 <I2C_WaitOnFlagUntilTimeout>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d008      	beq.n	8002b90 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e11a      	b.n	8002db8 <HAL_I2C_Master_Receive+0x458>
 8002b82:	bf00      	nop
 8002b84:	00100002 	.word	0x00100002
 8002b88:	ffff0000 	.word	0xffff0000
 8002b8c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b9e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	691a      	ldr	r2, [r3, #16]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002baa:	b2d2      	uxtb	r2, r2
 8002bac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bb2:	1c5a      	adds	r2, r3, #1
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bbc:	3b01      	subs	r3, #1
 8002bbe:	b29a      	uxth	r2, r3
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bc8:	b29b      	uxth	r3, r3
 8002bca:	3b01      	subs	r3, #1
 8002bcc:	b29a      	uxth	r2, r3
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	691a      	ldr	r2, [r3, #16]
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bdc:	b2d2      	uxtb	r2, r2
 8002bde:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002be4:	1c5a      	adds	r2, r3, #1
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bee:	3b01      	subs	r3, #1
 8002bf0:	b29a      	uxth	r2, r3
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bfa:	b29b      	uxth	r3, r3
 8002bfc:	3b01      	subs	r3, #1
 8002bfe:	b29a      	uxth	r2, r3
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002c04:	e0c4      	b.n	8002d90 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c08:	9300      	str	r3, [sp, #0]
 8002c0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	496c      	ldr	r1, [pc, #432]	@ (8002dc0 <HAL_I2C_Master_Receive+0x460>)
 8002c10:	68f8      	ldr	r0, [r7, #12]
 8002c12:	f000 fb55 	bl	80032c0 <I2C_WaitOnFlagUntilTimeout>
 8002c16:	4603      	mov	r3, r0
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d001      	beq.n	8002c20 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	e0cb      	b.n	8002db8 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	681a      	ldr	r2, [r3, #0]
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c2e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	691a      	ldr	r2, [r3, #16]
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c3a:	b2d2      	uxtb	r2, r2
 8002c3c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c42:	1c5a      	adds	r2, r3, #1
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c4c:	3b01      	subs	r3, #1
 8002c4e:	b29a      	uxth	r2, r3
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c58:	b29b      	uxth	r3, r3
 8002c5a:	3b01      	subs	r3, #1
 8002c5c:	b29a      	uxth	r2, r3
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002c62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c64:	9300      	str	r3, [sp, #0]
 8002c66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c68:	2200      	movs	r2, #0
 8002c6a:	4955      	ldr	r1, [pc, #340]	@ (8002dc0 <HAL_I2C_Master_Receive+0x460>)
 8002c6c:	68f8      	ldr	r0, [r7, #12]
 8002c6e:	f000 fb27 	bl	80032c0 <I2C_WaitOnFlagUntilTimeout>
 8002c72:	4603      	mov	r3, r0
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d001      	beq.n	8002c7c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e09d      	b.n	8002db8 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c8a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	691a      	ldr	r2, [r3, #16]
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c96:	b2d2      	uxtb	r2, r2
 8002c98:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c9e:	1c5a      	adds	r2, r3, #1
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ca8:	3b01      	subs	r3, #1
 8002caa:	b29a      	uxth	r2, r3
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cb4:	b29b      	uxth	r3, r3
 8002cb6:	3b01      	subs	r3, #1
 8002cb8:	b29a      	uxth	r2, r3
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	691a      	ldr	r2, [r3, #16]
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cc8:	b2d2      	uxtb	r2, r2
 8002cca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cd0:	1c5a      	adds	r2, r3, #1
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cda:	3b01      	subs	r3, #1
 8002cdc:	b29a      	uxth	r2, r3
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ce6:	b29b      	uxth	r3, r3
 8002ce8:	3b01      	subs	r3, #1
 8002cea:	b29a      	uxth	r2, r3
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002cf0:	e04e      	b.n	8002d90 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cf2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002cf4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002cf6:	68f8      	ldr	r0, [r7, #12]
 8002cf8:	f000 fc8c 	bl	8003614 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d001      	beq.n	8002d06 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	e058      	b.n	8002db8 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	691a      	ldr	r2, [r3, #16]
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d10:	b2d2      	uxtb	r2, r2
 8002d12:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d18:	1c5a      	adds	r2, r3, #1
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d22:	3b01      	subs	r3, #1
 8002d24:	b29a      	uxth	r2, r3
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	3b01      	subs	r3, #1
 8002d32:	b29a      	uxth	r2, r3
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	695b      	ldr	r3, [r3, #20]
 8002d3e:	f003 0304 	and.w	r3, r3, #4
 8002d42:	2b04      	cmp	r3, #4
 8002d44:	d124      	bne.n	8002d90 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d4a:	2b03      	cmp	r3, #3
 8002d4c:	d107      	bne.n	8002d5e <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d5c:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	691a      	ldr	r2, [r3, #16]
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d68:	b2d2      	uxtb	r2, r2
 8002d6a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d70:	1c5a      	adds	r2, r3, #1
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d7a:	3b01      	subs	r3, #1
 8002d7c:	b29a      	uxth	r2, r3
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d86:	b29b      	uxth	r3, r3
 8002d88:	3b01      	subs	r3, #1
 8002d8a:	b29a      	uxth	r2, r3
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	f47f aeb6 	bne.w	8002b06 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2220      	movs	r2, #32
 8002d9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	2200      	movs	r2, #0
 8002da6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2200      	movs	r2, #0
 8002dae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002db2:	2300      	movs	r3, #0
 8002db4:	e000      	b.n	8002db8 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002db6:	2302      	movs	r3, #2
  }
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	3728      	adds	r7, #40	@ 0x28
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}
 8002dc0:	00010004 	.word	0x00010004

08002dc4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b08a      	sub	sp, #40	@ 0x28
 8002dc8:	af02      	add	r7, sp, #8
 8002dca:	60f8      	str	r0, [r7, #12]
 8002dcc:	607a      	str	r2, [r7, #4]
 8002dce:	603b      	str	r3, [r7, #0]
 8002dd0:	460b      	mov	r3, r1
 8002dd2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002dd4:	f7ff f88c 	bl	8001ef0 <HAL_GetTick>
 8002dd8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	2b20      	cmp	r3, #32
 8002de8:	f040 8111 	bne.w	800300e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002dec:	69fb      	ldr	r3, [r7, #28]
 8002dee:	9300      	str	r3, [sp, #0]
 8002df0:	2319      	movs	r3, #25
 8002df2:	2201      	movs	r2, #1
 8002df4:	4988      	ldr	r1, [pc, #544]	@ (8003018 <HAL_I2C_IsDeviceReady+0x254>)
 8002df6:	68f8      	ldr	r0, [r7, #12]
 8002df8:	f000 fa62 	bl	80032c0 <I2C_WaitOnFlagUntilTimeout>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d001      	beq.n	8002e06 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002e02:	2302      	movs	r3, #2
 8002e04:	e104      	b.n	8003010 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d101      	bne.n	8002e14 <HAL_I2C_IsDeviceReady+0x50>
 8002e10:	2302      	movs	r3, #2
 8002e12:	e0fd      	b.n	8003010 <HAL_I2C_IsDeviceReady+0x24c>
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2201      	movs	r2, #1
 8002e18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f003 0301 	and.w	r3, r3, #1
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d007      	beq.n	8002e3a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f042 0201 	orr.w	r2, r2, #1
 8002e38:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	681a      	ldr	r2, [r3, #0]
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e48:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	2224      	movs	r2, #36	@ 0x24
 8002e4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2200      	movs	r2, #0
 8002e56:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	4a70      	ldr	r2, [pc, #448]	@ (800301c <HAL_I2C_IsDeviceReady+0x258>)
 8002e5c:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002e6c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002e6e:	69fb      	ldr	r3, [r7, #28]
 8002e70:	9300      	str	r3, [sp, #0]
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	2200      	movs	r2, #0
 8002e76:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002e7a:	68f8      	ldr	r0, [r7, #12]
 8002e7c:	f000 fa20 	bl	80032c0 <I2C_WaitOnFlagUntilTimeout>
 8002e80:	4603      	mov	r3, r0
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d00d      	beq.n	8002ea2 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e90:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e94:	d103      	bne.n	8002e9e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e9c:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	e0b6      	b.n	8003010 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002ea2:	897b      	ldrh	r3, [r7, #10]
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	461a      	mov	r2, r3
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002eb0:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002eb2:	f7ff f81d 	bl	8001ef0 <HAL_GetTick>
 8002eb6:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	695b      	ldr	r3, [r3, #20]
 8002ebe:	f003 0302 	and.w	r3, r3, #2
 8002ec2:	2b02      	cmp	r3, #2
 8002ec4:	bf0c      	ite	eq
 8002ec6:	2301      	moveq	r3, #1
 8002ec8:	2300      	movne	r3, #0
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	695b      	ldr	r3, [r3, #20]
 8002ed4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ed8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002edc:	bf0c      	ite	eq
 8002ede:	2301      	moveq	r3, #1
 8002ee0:	2300      	movne	r3, #0
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002ee6:	e025      	b.n	8002f34 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002ee8:	f7ff f802 	bl	8001ef0 <HAL_GetTick>
 8002eec:	4602      	mov	r2, r0
 8002eee:	69fb      	ldr	r3, [r7, #28]
 8002ef0:	1ad3      	subs	r3, r2, r3
 8002ef2:	683a      	ldr	r2, [r7, #0]
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	d302      	bcc.n	8002efe <HAL_I2C_IsDeviceReady+0x13a>
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d103      	bne.n	8002f06 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	22a0      	movs	r2, #160	@ 0xa0
 8002f02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	695b      	ldr	r3, [r3, #20]
 8002f0c:	f003 0302 	and.w	r3, r3, #2
 8002f10:	2b02      	cmp	r3, #2
 8002f12:	bf0c      	ite	eq
 8002f14:	2301      	moveq	r3, #1
 8002f16:	2300      	movne	r3, #0
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	695b      	ldr	r3, [r3, #20]
 8002f22:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f26:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f2a:	bf0c      	ite	eq
 8002f2c:	2301      	moveq	r3, #1
 8002f2e:	2300      	movne	r3, #0
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f3a:	b2db      	uxtb	r3, r3
 8002f3c:	2ba0      	cmp	r3, #160	@ 0xa0
 8002f3e:	d005      	beq.n	8002f4c <HAL_I2C_IsDeviceReady+0x188>
 8002f40:	7dfb      	ldrb	r3, [r7, #23]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d102      	bne.n	8002f4c <HAL_I2C_IsDeviceReady+0x188>
 8002f46:	7dbb      	ldrb	r3, [r7, #22]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d0cd      	beq.n	8002ee8 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2220      	movs	r2, #32
 8002f50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	695b      	ldr	r3, [r3, #20]
 8002f5a:	f003 0302 	and.w	r3, r3, #2
 8002f5e:	2b02      	cmp	r3, #2
 8002f60:	d129      	bne.n	8002fb6 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f70:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f72:	2300      	movs	r3, #0
 8002f74:	613b      	str	r3, [r7, #16]
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	695b      	ldr	r3, [r3, #20]
 8002f7c:	613b      	str	r3, [r7, #16]
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	699b      	ldr	r3, [r3, #24]
 8002f84:	613b      	str	r3, [r7, #16]
 8002f86:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f88:	69fb      	ldr	r3, [r7, #28]
 8002f8a:	9300      	str	r3, [sp, #0]
 8002f8c:	2319      	movs	r3, #25
 8002f8e:	2201      	movs	r2, #1
 8002f90:	4921      	ldr	r1, [pc, #132]	@ (8003018 <HAL_I2C_IsDeviceReady+0x254>)
 8002f92:	68f8      	ldr	r0, [r7, #12]
 8002f94:	f000 f994 	bl	80032c0 <I2C_WaitOnFlagUntilTimeout>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d001      	beq.n	8002fa2 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e036      	b.n	8003010 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	2220      	movs	r2, #32
 8002fa6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	2200      	movs	r2, #0
 8002fae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	e02c      	b.n	8003010 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	681a      	ldr	r2, [r3, #0]
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002fc4:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002fce:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002fd0:	69fb      	ldr	r3, [r7, #28]
 8002fd2:	9300      	str	r3, [sp, #0]
 8002fd4:	2319      	movs	r3, #25
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	490f      	ldr	r1, [pc, #60]	@ (8003018 <HAL_I2C_IsDeviceReady+0x254>)
 8002fda:	68f8      	ldr	r0, [r7, #12]
 8002fdc:	f000 f970 	bl	80032c0 <I2C_WaitOnFlagUntilTimeout>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d001      	beq.n	8002fea <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e012      	b.n	8003010 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002fea:	69bb      	ldr	r3, [r7, #24]
 8002fec:	3301      	adds	r3, #1
 8002fee:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002ff0:	69ba      	ldr	r2, [r7, #24]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	f4ff af32 	bcc.w	8002e5e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2220      	movs	r2, #32
 8002ffe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2200      	movs	r2, #0
 8003006:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	e000      	b.n	8003010 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800300e:	2302      	movs	r3, #2
  }
}
 8003010:	4618      	mov	r0, r3
 8003012:	3720      	adds	r7, #32
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}
 8003018:	00100002 	.word	0x00100002
 800301c:	ffff0000 	.word	0xffff0000

08003020 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b088      	sub	sp, #32
 8003024:	af02      	add	r7, sp, #8
 8003026:	60f8      	str	r0, [r7, #12]
 8003028:	607a      	str	r2, [r7, #4]
 800302a:	603b      	str	r3, [r7, #0]
 800302c:	460b      	mov	r3, r1
 800302e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003034:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	2b08      	cmp	r3, #8
 800303a:	d006      	beq.n	800304a <I2C_MasterRequestWrite+0x2a>
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	2b01      	cmp	r3, #1
 8003040:	d003      	beq.n	800304a <I2C_MasterRequestWrite+0x2a>
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003048:	d108      	bne.n	800305c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003058:	601a      	str	r2, [r3, #0]
 800305a:	e00b      	b.n	8003074 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003060:	2b12      	cmp	r3, #18
 8003062:	d107      	bne.n	8003074 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003072:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	9300      	str	r3, [sp, #0]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2200      	movs	r2, #0
 800307c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003080:	68f8      	ldr	r0, [r7, #12]
 8003082:	f000 f91d 	bl	80032c0 <I2C_WaitOnFlagUntilTimeout>
 8003086:	4603      	mov	r3, r0
 8003088:	2b00      	cmp	r3, #0
 800308a:	d00d      	beq.n	80030a8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003096:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800309a:	d103      	bne.n	80030a4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80030a2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80030a4:	2303      	movs	r3, #3
 80030a6:	e035      	b.n	8003114 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	691b      	ldr	r3, [r3, #16]
 80030ac:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80030b0:	d108      	bne.n	80030c4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80030b2:	897b      	ldrh	r3, [r7, #10]
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	461a      	mov	r2, r3
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80030c0:	611a      	str	r2, [r3, #16]
 80030c2:	e01b      	b.n	80030fc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80030c4:	897b      	ldrh	r3, [r7, #10]
 80030c6:	11db      	asrs	r3, r3, #7
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	f003 0306 	and.w	r3, r3, #6
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	f063 030f 	orn	r3, r3, #15
 80030d4:	b2da      	uxtb	r2, r3
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	687a      	ldr	r2, [r7, #4]
 80030e0:	490e      	ldr	r1, [pc, #56]	@ (800311c <I2C_MasterRequestWrite+0xfc>)
 80030e2:	68f8      	ldr	r0, [r7, #12]
 80030e4:	f000 f966 	bl	80033b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80030e8:	4603      	mov	r3, r0
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d001      	beq.n	80030f2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e010      	b.n	8003114 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80030f2:	897b      	ldrh	r3, [r7, #10]
 80030f4:	b2da      	uxtb	r2, r3
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	687a      	ldr	r2, [r7, #4]
 8003100:	4907      	ldr	r1, [pc, #28]	@ (8003120 <I2C_MasterRequestWrite+0x100>)
 8003102:	68f8      	ldr	r0, [r7, #12]
 8003104:	f000 f956 	bl	80033b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003108:	4603      	mov	r3, r0
 800310a:	2b00      	cmp	r3, #0
 800310c:	d001      	beq.n	8003112 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e000      	b.n	8003114 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003112:	2300      	movs	r3, #0
}
 8003114:	4618      	mov	r0, r3
 8003116:	3718      	adds	r7, #24
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}
 800311c:	00010008 	.word	0x00010008
 8003120:	00010002 	.word	0x00010002

08003124 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b088      	sub	sp, #32
 8003128:	af02      	add	r7, sp, #8
 800312a:	60f8      	str	r0, [r7, #12]
 800312c:	607a      	str	r2, [r7, #4]
 800312e:	603b      	str	r3, [r7, #0]
 8003130:	460b      	mov	r3, r1
 8003132:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003138:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	681a      	ldr	r2, [r3, #0]
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003148:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	2b08      	cmp	r3, #8
 800314e:	d006      	beq.n	800315e <I2C_MasterRequestRead+0x3a>
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	2b01      	cmp	r3, #1
 8003154:	d003      	beq.n	800315e <I2C_MasterRequestRead+0x3a>
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800315c:	d108      	bne.n	8003170 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	681a      	ldr	r2, [r3, #0]
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800316c:	601a      	str	r2, [r3, #0]
 800316e:	e00b      	b.n	8003188 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003174:	2b11      	cmp	r3, #17
 8003176:	d107      	bne.n	8003188 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003186:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	9300      	str	r3, [sp, #0]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2200      	movs	r2, #0
 8003190:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003194:	68f8      	ldr	r0, [r7, #12]
 8003196:	f000 f893 	bl	80032c0 <I2C_WaitOnFlagUntilTimeout>
 800319a:	4603      	mov	r3, r0
 800319c:	2b00      	cmp	r3, #0
 800319e:	d00d      	beq.n	80031bc <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80031ae:	d103      	bne.n	80031b8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80031b6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80031b8:	2303      	movs	r3, #3
 80031ba:	e079      	b.n	80032b0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	691b      	ldr	r3, [r3, #16]
 80031c0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80031c4:	d108      	bne.n	80031d8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80031c6:	897b      	ldrh	r3, [r7, #10]
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	f043 0301 	orr.w	r3, r3, #1
 80031ce:	b2da      	uxtb	r2, r3
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	611a      	str	r2, [r3, #16]
 80031d6:	e05f      	b.n	8003298 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80031d8:	897b      	ldrh	r3, [r7, #10]
 80031da:	11db      	asrs	r3, r3, #7
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	f003 0306 	and.w	r3, r3, #6
 80031e2:	b2db      	uxtb	r3, r3
 80031e4:	f063 030f 	orn	r3, r3, #15
 80031e8:	b2da      	uxtb	r2, r3
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	687a      	ldr	r2, [r7, #4]
 80031f4:	4930      	ldr	r1, [pc, #192]	@ (80032b8 <I2C_MasterRequestRead+0x194>)
 80031f6:	68f8      	ldr	r0, [r7, #12]
 80031f8:	f000 f8dc 	bl	80033b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80031fc:	4603      	mov	r3, r0
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d001      	beq.n	8003206 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e054      	b.n	80032b0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003206:	897b      	ldrh	r3, [r7, #10]
 8003208:	b2da      	uxtb	r2, r3
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	687a      	ldr	r2, [r7, #4]
 8003214:	4929      	ldr	r1, [pc, #164]	@ (80032bc <I2C_MasterRequestRead+0x198>)
 8003216:	68f8      	ldr	r0, [r7, #12]
 8003218:	f000 f8cc 	bl	80033b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800321c:	4603      	mov	r3, r0
 800321e:	2b00      	cmp	r3, #0
 8003220:	d001      	beq.n	8003226 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	e044      	b.n	80032b0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003226:	2300      	movs	r3, #0
 8003228:	613b      	str	r3, [r7, #16]
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	695b      	ldr	r3, [r3, #20]
 8003230:	613b      	str	r3, [r7, #16]
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	699b      	ldr	r3, [r3, #24]
 8003238:	613b      	str	r3, [r7, #16]
 800323a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800324a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	9300      	str	r3, [sp, #0]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2200      	movs	r2, #0
 8003254:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003258:	68f8      	ldr	r0, [r7, #12]
 800325a:	f000 f831 	bl	80032c0 <I2C_WaitOnFlagUntilTimeout>
 800325e:	4603      	mov	r3, r0
 8003260:	2b00      	cmp	r3, #0
 8003262:	d00d      	beq.n	8003280 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800326e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003272:	d103      	bne.n	800327c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800327a:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 800327c:	2303      	movs	r3, #3
 800327e:	e017      	b.n	80032b0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003280:	897b      	ldrh	r3, [r7, #10]
 8003282:	11db      	asrs	r3, r3, #7
 8003284:	b2db      	uxtb	r3, r3
 8003286:	f003 0306 	and.w	r3, r3, #6
 800328a:	b2db      	uxtb	r3, r3
 800328c:	f063 030e 	orn	r3, r3, #14
 8003290:	b2da      	uxtb	r2, r3
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	687a      	ldr	r2, [r7, #4]
 800329c:	4907      	ldr	r1, [pc, #28]	@ (80032bc <I2C_MasterRequestRead+0x198>)
 800329e:	68f8      	ldr	r0, [r7, #12]
 80032a0:	f000 f888 	bl	80033b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80032a4:	4603      	mov	r3, r0
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d001      	beq.n	80032ae <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	e000      	b.n	80032b0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80032ae:	2300      	movs	r3, #0
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	3718      	adds	r7, #24
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}
 80032b8:	00010008 	.word	0x00010008
 80032bc:	00010002 	.word	0x00010002

080032c0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b084      	sub	sp, #16
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	60f8      	str	r0, [r7, #12]
 80032c8:	60b9      	str	r1, [r7, #8]
 80032ca:	603b      	str	r3, [r7, #0]
 80032cc:	4613      	mov	r3, r2
 80032ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80032d0:	e048      	b.n	8003364 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032d8:	d044      	beq.n	8003364 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032da:	f7fe fe09 	bl	8001ef0 <HAL_GetTick>
 80032de:	4602      	mov	r2, r0
 80032e0:	69bb      	ldr	r3, [r7, #24]
 80032e2:	1ad3      	subs	r3, r2, r3
 80032e4:	683a      	ldr	r2, [r7, #0]
 80032e6:	429a      	cmp	r2, r3
 80032e8:	d302      	bcc.n	80032f0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d139      	bne.n	8003364 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	0c1b      	lsrs	r3, r3, #16
 80032f4:	b2db      	uxtb	r3, r3
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d10d      	bne.n	8003316 <I2C_WaitOnFlagUntilTimeout+0x56>
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	695b      	ldr	r3, [r3, #20]
 8003300:	43da      	mvns	r2, r3
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	4013      	ands	r3, r2
 8003306:	b29b      	uxth	r3, r3
 8003308:	2b00      	cmp	r3, #0
 800330a:	bf0c      	ite	eq
 800330c:	2301      	moveq	r3, #1
 800330e:	2300      	movne	r3, #0
 8003310:	b2db      	uxtb	r3, r3
 8003312:	461a      	mov	r2, r3
 8003314:	e00c      	b.n	8003330 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	699b      	ldr	r3, [r3, #24]
 800331c:	43da      	mvns	r2, r3
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	4013      	ands	r3, r2
 8003322:	b29b      	uxth	r3, r3
 8003324:	2b00      	cmp	r3, #0
 8003326:	bf0c      	ite	eq
 8003328:	2301      	moveq	r3, #1
 800332a:	2300      	movne	r3, #0
 800332c:	b2db      	uxtb	r3, r3
 800332e:	461a      	mov	r2, r3
 8003330:	79fb      	ldrb	r3, [r7, #7]
 8003332:	429a      	cmp	r2, r3
 8003334:	d116      	bne.n	8003364 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	2200      	movs	r2, #0
 800333a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2220      	movs	r2, #32
 8003340:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2200      	movs	r2, #0
 8003348:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003350:	f043 0220 	orr.w	r2, r3, #32
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	2200      	movs	r2, #0
 800335c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	e023      	b.n	80033ac <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	0c1b      	lsrs	r3, r3, #16
 8003368:	b2db      	uxtb	r3, r3
 800336a:	2b01      	cmp	r3, #1
 800336c:	d10d      	bne.n	800338a <I2C_WaitOnFlagUntilTimeout+0xca>
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	695b      	ldr	r3, [r3, #20]
 8003374:	43da      	mvns	r2, r3
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	4013      	ands	r3, r2
 800337a:	b29b      	uxth	r3, r3
 800337c:	2b00      	cmp	r3, #0
 800337e:	bf0c      	ite	eq
 8003380:	2301      	moveq	r3, #1
 8003382:	2300      	movne	r3, #0
 8003384:	b2db      	uxtb	r3, r3
 8003386:	461a      	mov	r2, r3
 8003388:	e00c      	b.n	80033a4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	699b      	ldr	r3, [r3, #24]
 8003390:	43da      	mvns	r2, r3
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	4013      	ands	r3, r2
 8003396:	b29b      	uxth	r3, r3
 8003398:	2b00      	cmp	r3, #0
 800339a:	bf0c      	ite	eq
 800339c:	2301      	moveq	r3, #1
 800339e:	2300      	movne	r3, #0
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	461a      	mov	r2, r3
 80033a4:	79fb      	ldrb	r3, [r7, #7]
 80033a6:	429a      	cmp	r2, r3
 80033a8:	d093      	beq.n	80032d2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80033aa:	2300      	movs	r3, #0
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	3710      	adds	r7, #16
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}

080033b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b084      	sub	sp, #16
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	60f8      	str	r0, [r7, #12]
 80033bc:	60b9      	str	r1, [r7, #8]
 80033be:	607a      	str	r2, [r7, #4]
 80033c0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80033c2:	e071      	b.n	80034a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	695b      	ldr	r3, [r3, #20]
 80033ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033d2:	d123      	bne.n	800341c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033e2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80033ec:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2200      	movs	r2, #0
 80033f2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	2220      	movs	r2, #32
 80033f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2200      	movs	r2, #0
 8003400:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003408:	f043 0204 	orr.w	r2, r3, #4
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2200      	movs	r2, #0
 8003414:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	e067      	b.n	80034ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003422:	d041      	beq.n	80034a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003424:	f7fe fd64 	bl	8001ef0 <HAL_GetTick>
 8003428:	4602      	mov	r2, r0
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	687a      	ldr	r2, [r7, #4]
 8003430:	429a      	cmp	r2, r3
 8003432:	d302      	bcc.n	800343a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d136      	bne.n	80034a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	0c1b      	lsrs	r3, r3, #16
 800343e:	b2db      	uxtb	r3, r3
 8003440:	2b01      	cmp	r3, #1
 8003442:	d10c      	bne.n	800345e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	695b      	ldr	r3, [r3, #20]
 800344a:	43da      	mvns	r2, r3
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	4013      	ands	r3, r2
 8003450:	b29b      	uxth	r3, r3
 8003452:	2b00      	cmp	r3, #0
 8003454:	bf14      	ite	ne
 8003456:	2301      	movne	r3, #1
 8003458:	2300      	moveq	r3, #0
 800345a:	b2db      	uxtb	r3, r3
 800345c:	e00b      	b.n	8003476 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	699b      	ldr	r3, [r3, #24]
 8003464:	43da      	mvns	r2, r3
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	4013      	ands	r3, r2
 800346a:	b29b      	uxth	r3, r3
 800346c:	2b00      	cmp	r3, #0
 800346e:	bf14      	ite	ne
 8003470:	2301      	movne	r3, #1
 8003472:	2300      	moveq	r3, #0
 8003474:	b2db      	uxtb	r3, r3
 8003476:	2b00      	cmp	r3, #0
 8003478:	d016      	beq.n	80034a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2200      	movs	r2, #0
 800347e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2220      	movs	r2, #32
 8003484:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2200      	movs	r2, #0
 800348c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003494:	f043 0220 	orr.w	r2, r3, #32
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2200      	movs	r2, #0
 80034a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80034a4:	2301      	movs	r3, #1
 80034a6:	e021      	b.n	80034ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	0c1b      	lsrs	r3, r3, #16
 80034ac:	b2db      	uxtb	r3, r3
 80034ae:	2b01      	cmp	r3, #1
 80034b0:	d10c      	bne.n	80034cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	695b      	ldr	r3, [r3, #20]
 80034b8:	43da      	mvns	r2, r3
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	4013      	ands	r3, r2
 80034be:	b29b      	uxth	r3, r3
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	bf14      	ite	ne
 80034c4:	2301      	movne	r3, #1
 80034c6:	2300      	moveq	r3, #0
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	e00b      	b.n	80034e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	699b      	ldr	r3, [r3, #24]
 80034d2:	43da      	mvns	r2, r3
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	4013      	ands	r3, r2
 80034d8:	b29b      	uxth	r3, r3
 80034da:	2b00      	cmp	r3, #0
 80034dc:	bf14      	ite	ne
 80034de:	2301      	movne	r3, #1
 80034e0:	2300      	moveq	r3, #0
 80034e2:	b2db      	uxtb	r3, r3
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	f47f af6d 	bne.w	80033c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80034ea:	2300      	movs	r3, #0
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	3710      	adds	r7, #16
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}

080034f4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b084      	sub	sp, #16
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	60f8      	str	r0, [r7, #12]
 80034fc:	60b9      	str	r1, [r7, #8]
 80034fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003500:	e034      	b.n	800356c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003502:	68f8      	ldr	r0, [r7, #12]
 8003504:	f000 f8e3 	bl	80036ce <I2C_IsAcknowledgeFailed>
 8003508:	4603      	mov	r3, r0
 800350a:	2b00      	cmp	r3, #0
 800350c:	d001      	beq.n	8003512 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	e034      	b.n	800357c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003518:	d028      	beq.n	800356c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800351a:	f7fe fce9 	bl	8001ef0 <HAL_GetTick>
 800351e:	4602      	mov	r2, r0
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	1ad3      	subs	r3, r2, r3
 8003524:	68ba      	ldr	r2, [r7, #8]
 8003526:	429a      	cmp	r2, r3
 8003528:	d302      	bcc.n	8003530 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d11d      	bne.n	800356c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	695b      	ldr	r3, [r3, #20]
 8003536:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800353a:	2b80      	cmp	r3, #128	@ 0x80
 800353c:	d016      	beq.n	800356c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2200      	movs	r2, #0
 8003542:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2220      	movs	r2, #32
 8003548:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2200      	movs	r2, #0
 8003550:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003558:	f043 0220 	orr.w	r2, r3, #32
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2200      	movs	r2, #0
 8003564:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	e007      	b.n	800357c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	695b      	ldr	r3, [r3, #20]
 8003572:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003576:	2b80      	cmp	r3, #128	@ 0x80
 8003578:	d1c3      	bne.n	8003502 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800357a:	2300      	movs	r3, #0
}
 800357c:	4618      	mov	r0, r3
 800357e:	3710      	adds	r7, #16
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}

08003584 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b084      	sub	sp, #16
 8003588:	af00      	add	r7, sp, #0
 800358a:	60f8      	str	r0, [r7, #12]
 800358c:	60b9      	str	r1, [r7, #8]
 800358e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003590:	e034      	b.n	80035fc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003592:	68f8      	ldr	r0, [r7, #12]
 8003594:	f000 f89b 	bl	80036ce <I2C_IsAcknowledgeFailed>
 8003598:	4603      	mov	r3, r0
 800359a:	2b00      	cmp	r3, #0
 800359c:	d001      	beq.n	80035a2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e034      	b.n	800360c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035a8:	d028      	beq.n	80035fc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035aa:	f7fe fca1 	bl	8001ef0 <HAL_GetTick>
 80035ae:	4602      	mov	r2, r0
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	1ad3      	subs	r3, r2, r3
 80035b4:	68ba      	ldr	r2, [r7, #8]
 80035b6:	429a      	cmp	r2, r3
 80035b8:	d302      	bcc.n	80035c0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d11d      	bne.n	80035fc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	695b      	ldr	r3, [r3, #20]
 80035c6:	f003 0304 	and.w	r3, r3, #4
 80035ca:	2b04      	cmp	r3, #4
 80035cc:	d016      	beq.n	80035fc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2200      	movs	r2, #0
 80035d2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2220      	movs	r2, #32
 80035d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2200      	movs	r2, #0
 80035e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035e8:	f043 0220 	orr.w	r2, r3, #32
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2200      	movs	r2, #0
 80035f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80035f8:	2301      	movs	r3, #1
 80035fa:	e007      	b.n	800360c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	695b      	ldr	r3, [r3, #20]
 8003602:	f003 0304 	and.w	r3, r3, #4
 8003606:	2b04      	cmp	r3, #4
 8003608:	d1c3      	bne.n	8003592 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800360a:	2300      	movs	r3, #0
}
 800360c:	4618      	mov	r0, r3
 800360e:	3710      	adds	r7, #16
 8003610:	46bd      	mov	sp, r7
 8003612:	bd80      	pop	{r7, pc}

08003614 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b084      	sub	sp, #16
 8003618:	af00      	add	r7, sp, #0
 800361a:	60f8      	str	r0, [r7, #12]
 800361c:	60b9      	str	r1, [r7, #8]
 800361e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003620:	e049      	b.n	80036b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	695b      	ldr	r3, [r3, #20]
 8003628:	f003 0310 	and.w	r3, r3, #16
 800362c:	2b10      	cmp	r3, #16
 800362e:	d119      	bne.n	8003664 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f06f 0210 	mvn.w	r2, #16
 8003638:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	2200      	movs	r2, #0
 800363e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2220      	movs	r2, #32
 8003644:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2200      	movs	r2, #0
 800364c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2200      	movs	r2, #0
 800365c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	e030      	b.n	80036c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003664:	f7fe fc44 	bl	8001ef0 <HAL_GetTick>
 8003668:	4602      	mov	r2, r0
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	1ad3      	subs	r3, r2, r3
 800366e:	68ba      	ldr	r2, [r7, #8]
 8003670:	429a      	cmp	r2, r3
 8003672:	d302      	bcc.n	800367a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d11d      	bne.n	80036b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	695b      	ldr	r3, [r3, #20]
 8003680:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003684:	2b40      	cmp	r3, #64	@ 0x40
 8003686:	d016      	beq.n	80036b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2200      	movs	r2, #0
 800368c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2220      	movs	r2, #32
 8003692:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2200      	movs	r2, #0
 800369a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036a2:	f043 0220 	orr.w	r2, r3, #32
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	2200      	movs	r2, #0
 80036ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	e007      	b.n	80036c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	695b      	ldr	r3, [r3, #20]
 80036bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036c0:	2b40      	cmp	r3, #64	@ 0x40
 80036c2:	d1ae      	bne.n	8003622 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80036c4:	2300      	movs	r3, #0
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	3710      	adds	r7, #16
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}

080036ce <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80036ce:	b480      	push	{r7}
 80036d0:	b083      	sub	sp, #12
 80036d2:	af00      	add	r7, sp, #0
 80036d4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	695b      	ldr	r3, [r3, #20]
 80036dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036e4:	d11b      	bne.n	800371e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80036ee:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2200      	movs	r2, #0
 80036f4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2220      	movs	r2, #32
 80036fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2200      	movs	r2, #0
 8003702:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800370a:	f043 0204 	orr.w	r2, r3, #4
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2200      	movs	r2, #0
 8003716:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	e000      	b.n	8003720 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800371e:	2300      	movs	r3, #0
}
 8003720:	4618      	mov	r0, r3
 8003722:	370c      	adds	r7, #12
 8003724:	46bd      	mov	sp, r7
 8003726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372a:	4770      	bx	lr

0800372c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b082      	sub	sp, #8
 8003730:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8003732:	2300      	movs	r3, #0
 8003734:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003736:	2300      	movs	r3, #0
 8003738:	603b      	str	r3, [r7, #0]
 800373a:	4b20      	ldr	r3, [pc, #128]	@ (80037bc <HAL_PWREx_EnableOverDrive+0x90>)
 800373c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800373e:	4a1f      	ldr	r2, [pc, #124]	@ (80037bc <HAL_PWREx_EnableOverDrive+0x90>)
 8003740:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003744:	6413      	str	r3, [r2, #64]	@ 0x40
 8003746:	4b1d      	ldr	r3, [pc, #116]	@ (80037bc <HAL_PWREx_EnableOverDrive+0x90>)
 8003748:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800374a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800374e:	603b      	str	r3, [r7, #0]
 8003750:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003752:	4b1b      	ldr	r3, [pc, #108]	@ (80037c0 <HAL_PWREx_EnableOverDrive+0x94>)
 8003754:	2201      	movs	r2, #1
 8003756:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003758:	f7fe fbca 	bl	8001ef0 <HAL_GetTick>
 800375c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800375e:	e009      	b.n	8003774 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003760:	f7fe fbc6 	bl	8001ef0 <HAL_GetTick>
 8003764:	4602      	mov	r2, r0
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	1ad3      	subs	r3, r2, r3
 800376a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800376e:	d901      	bls.n	8003774 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003770:	2303      	movs	r3, #3
 8003772:	e01f      	b.n	80037b4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003774:	4b13      	ldr	r3, [pc, #76]	@ (80037c4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800377c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003780:	d1ee      	bne.n	8003760 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003782:	4b11      	ldr	r3, [pc, #68]	@ (80037c8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003784:	2201      	movs	r2, #1
 8003786:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003788:	f7fe fbb2 	bl	8001ef0 <HAL_GetTick>
 800378c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800378e:	e009      	b.n	80037a4 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003790:	f7fe fbae 	bl	8001ef0 <HAL_GetTick>
 8003794:	4602      	mov	r2, r0
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	1ad3      	subs	r3, r2, r3
 800379a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800379e:	d901      	bls.n	80037a4 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80037a0:	2303      	movs	r3, #3
 80037a2:	e007      	b.n	80037b4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80037a4:	4b07      	ldr	r3, [pc, #28]	@ (80037c4 <HAL_PWREx_EnableOverDrive+0x98>)
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037ac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80037b0:	d1ee      	bne.n	8003790 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80037b2:	2300      	movs	r3, #0
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	3708      	adds	r7, #8
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}
 80037bc:	40023800 	.word	0x40023800
 80037c0:	420e0040 	.word	0x420e0040
 80037c4:	40007000 	.word	0x40007000
 80037c8:	420e0044 	.word	0x420e0044

080037cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b084      	sub	sp, #16
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
 80037d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d101      	bne.n	80037e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037dc:	2301      	movs	r3, #1
 80037de:	e0cc      	b.n	800397a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80037e0:	4b68      	ldr	r3, [pc, #416]	@ (8003984 <HAL_RCC_ClockConfig+0x1b8>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f003 030f 	and.w	r3, r3, #15
 80037e8:	683a      	ldr	r2, [r7, #0]
 80037ea:	429a      	cmp	r2, r3
 80037ec:	d90c      	bls.n	8003808 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037ee:	4b65      	ldr	r3, [pc, #404]	@ (8003984 <HAL_RCC_ClockConfig+0x1b8>)
 80037f0:	683a      	ldr	r2, [r7, #0]
 80037f2:	b2d2      	uxtb	r2, r2
 80037f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037f6:	4b63      	ldr	r3, [pc, #396]	@ (8003984 <HAL_RCC_ClockConfig+0x1b8>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 030f 	and.w	r3, r3, #15
 80037fe:	683a      	ldr	r2, [r7, #0]
 8003800:	429a      	cmp	r2, r3
 8003802:	d001      	beq.n	8003808 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003804:	2301      	movs	r3, #1
 8003806:	e0b8      	b.n	800397a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f003 0302 	and.w	r3, r3, #2
 8003810:	2b00      	cmp	r3, #0
 8003812:	d020      	beq.n	8003856 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f003 0304 	and.w	r3, r3, #4
 800381c:	2b00      	cmp	r3, #0
 800381e:	d005      	beq.n	800382c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003820:	4b59      	ldr	r3, [pc, #356]	@ (8003988 <HAL_RCC_ClockConfig+0x1bc>)
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	4a58      	ldr	r2, [pc, #352]	@ (8003988 <HAL_RCC_ClockConfig+0x1bc>)
 8003826:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800382a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f003 0308 	and.w	r3, r3, #8
 8003834:	2b00      	cmp	r3, #0
 8003836:	d005      	beq.n	8003844 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003838:	4b53      	ldr	r3, [pc, #332]	@ (8003988 <HAL_RCC_ClockConfig+0x1bc>)
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	4a52      	ldr	r2, [pc, #328]	@ (8003988 <HAL_RCC_ClockConfig+0x1bc>)
 800383e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003842:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003844:	4b50      	ldr	r3, [pc, #320]	@ (8003988 <HAL_RCC_ClockConfig+0x1bc>)
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	494d      	ldr	r1, [pc, #308]	@ (8003988 <HAL_RCC_ClockConfig+0x1bc>)
 8003852:	4313      	orrs	r3, r2
 8003854:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 0301 	and.w	r3, r3, #1
 800385e:	2b00      	cmp	r3, #0
 8003860:	d044      	beq.n	80038ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	2b01      	cmp	r3, #1
 8003868:	d107      	bne.n	800387a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800386a:	4b47      	ldr	r3, [pc, #284]	@ (8003988 <HAL_RCC_ClockConfig+0x1bc>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003872:	2b00      	cmp	r3, #0
 8003874:	d119      	bne.n	80038aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	e07f      	b.n	800397a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	2b02      	cmp	r3, #2
 8003880:	d003      	beq.n	800388a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003886:	2b03      	cmp	r3, #3
 8003888:	d107      	bne.n	800389a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800388a:	4b3f      	ldr	r3, [pc, #252]	@ (8003988 <HAL_RCC_ClockConfig+0x1bc>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003892:	2b00      	cmp	r3, #0
 8003894:	d109      	bne.n	80038aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	e06f      	b.n	800397a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800389a:	4b3b      	ldr	r3, [pc, #236]	@ (8003988 <HAL_RCC_ClockConfig+0x1bc>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f003 0302 	and.w	r3, r3, #2
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d101      	bne.n	80038aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	e067      	b.n	800397a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038aa:	4b37      	ldr	r3, [pc, #220]	@ (8003988 <HAL_RCC_ClockConfig+0x1bc>)
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	f023 0203 	bic.w	r2, r3, #3
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	4934      	ldr	r1, [pc, #208]	@ (8003988 <HAL_RCC_ClockConfig+0x1bc>)
 80038b8:	4313      	orrs	r3, r2
 80038ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038bc:	f7fe fb18 	bl	8001ef0 <HAL_GetTick>
 80038c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038c2:	e00a      	b.n	80038da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038c4:	f7fe fb14 	bl	8001ef0 <HAL_GetTick>
 80038c8:	4602      	mov	r2, r0
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	1ad3      	subs	r3, r2, r3
 80038ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d901      	bls.n	80038da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80038d6:	2303      	movs	r3, #3
 80038d8:	e04f      	b.n	800397a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038da:	4b2b      	ldr	r3, [pc, #172]	@ (8003988 <HAL_RCC_ClockConfig+0x1bc>)
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	f003 020c 	and.w	r2, r3, #12
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	009b      	lsls	r3, r3, #2
 80038e8:	429a      	cmp	r2, r3
 80038ea:	d1eb      	bne.n	80038c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80038ec:	4b25      	ldr	r3, [pc, #148]	@ (8003984 <HAL_RCC_ClockConfig+0x1b8>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f003 030f 	and.w	r3, r3, #15
 80038f4:	683a      	ldr	r2, [r7, #0]
 80038f6:	429a      	cmp	r2, r3
 80038f8:	d20c      	bcs.n	8003914 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038fa:	4b22      	ldr	r3, [pc, #136]	@ (8003984 <HAL_RCC_ClockConfig+0x1b8>)
 80038fc:	683a      	ldr	r2, [r7, #0]
 80038fe:	b2d2      	uxtb	r2, r2
 8003900:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003902:	4b20      	ldr	r3, [pc, #128]	@ (8003984 <HAL_RCC_ClockConfig+0x1b8>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f003 030f 	and.w	r3, r3, #15
 800390a:	683a      	ldr	r2, [r7, #0]
 800390c:	429a      	cmp	r2, r3
 800390e:	d001      	beq.n	8003914 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003910:	2301      	movs	r3, #1
 8003912:	e032      	b.n	800397a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f003 0304 	and.w	r3, r3, #4
 800391c:	2b00      	cmp	r3, #0
 800391e:	d008      	beq.n	8003932 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003920:	4b19      	ldr	r3, [pc, #100]	@ (8003988 <HAL_RCC_ClockConfig+0x1bc>)
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	68db      	ldr	r3, [r3, #12]
 800392c:	4916      	ldr	r1, [pc, #88]	@ (8003988 <HAL_RCC_ClockConfig+0x1bc>)
 800392e:	4313      	orrs	r3, r2
 8003930:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 0308 	and.w	r3, r3, #8
 800393a:	2b00      	cmp	r3, #0
 800393c:	d009      	beq.n	8003952 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800393e:	4b12      	ldr	r3, [pc, #72]	@ (8003988 <HAL_RCC_ClockConfig+0x1bc>)
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	691b      	ldr	r3, [r3, #16]
 800394a:	00db      	lsls	r3, r3, #3
 800394c:	490e      	ldr	r1, [pc, #56]	@ (8003988 <HAL_RCC_ClockConfig+0x1bc>)
 800394e:	4313      	orrs	r3, r2
 8003950:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003952:	f000 f855 	bl	8003a00 <HAL_RCC_GetSysClockFreq>
 8003956:	4602      	mov	r2, r0
 8003958:	4b0b      	ldr	r3, [pc, #44]	@ (8003988 <HAL_RCC_ClockConfig+0x1bc>)
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	091b      	lsrs	r3, r3, #4
 800395e:	f003 030f 	and.w	r3, r3, #15
 8003962:	490a      	ldr	r1, [pc, #40]	@ (800398c <HAL_RCC_ClockConfig+0x1c0>)
 8003964:	5ccb      	ldrb	r3, [r1, r3]
 8003966:	fa22 f303 	lsr.w	r3, r2, r3
 800396a:	4a09      	ldr	r2, [pc, #36]	@ (8003990 <HAL_RCC_ClockConfig+0x1c4>)
 800396c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800396e:	4b09      	ldr	r3, [pc, #36]	@ (8003994 <HAL_RCC_ClockConfig+0x1c8>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4618      	mov	r0, r3
 8003974:	f7fe fa78 	bl	8001e68 <HAL_InitTick>

  return HAL_OK;
 8003978:	2300      	movs	r3, #0
}
 800397a:	4618      	mov	r0, r3
 800397c:	3710      	adds	r7, #16
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}
 8003982:	bf00      	nop
 8003984:	40023c00 	.word	0x40023c00
 8003988:	40023800 	.word	0x40023800
 800398c:	08006f90 	.word	0x08006f90
 8003990:	2000000c 	.word	0x2000000c
 8003994:	20000010 	.word	0x20000010

08003998 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003998:	b480      	push	{r7}
 800399a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800399c:	4b03      	ldr	r3, [pc, #12]	@ (80039ac <HAL_RCC_GetHCLKFreq+0x14>)
 800399e:	681b      	ldr	r3, [r3, #0]
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	46bd      	mov	sp, r7
 80039a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a8:	4770      	bx	lr
 80039aa:	bf00      	nop
 80039ac:	2000000c 	.word	0x2000000c

080039b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80039b4:	f7ff fff0 	bl	8003998 <HAL_RCC_GetHCLKFreq>
 80039b8:	4602      	mov	r2, r0
 80039ba:	4b05      	ldr	r3, [pc, #20]	@ (80039d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	0a9b      	lsrs	r3, r3, #10
 80039c0:	f003 0307 	and.w	r3, r3, #7
 80039c4:	4903      	ldr	r1, [pc, #12]	@ (80039d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80039c6:	5ccb      	ldrb	r3, [r1, r3]
 80039c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	bd80      	pop	{r7, pc}
 80039d0:	40023800 	.word	0x40023800
 80039d4:	08006fa0 	.word	0x08006fa0

080039d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80039dc:	f7ff ffdc 	bl	8003998 <HAL_RCC_GetHCLKFreq>
 80039e0:	4602      	mov	r2, r0
 80039e2:	4b05      	ldr	r3, [pc, #20]	@ (80039f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	0b5b      	lsrs	r3, r3, #13
 80039e8:	f003 0307 	and.w	r3, r3, #7
 80039ec:	4903      	ldr	r1, [pc, #12]	@ (80039fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80039ee:	5ccb      	ldrb	r3, [r1, r3]
 80039f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	bd80      	pop	{r7, pc}
 80039f8:	40023800 	.word	0x40023800
 80039fc:	08006fa0 	.word	0x08006fa0

08003a00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a04:	b0ae      	sub	sp, #184	@ 0xb8
 8003a06:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8003a14:	2300      	movs	r3, #0
 8003a16:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8003a20:	2300      	movs	r3, #0
 8003a22:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a26:	4bcb      	ldr	r3, [pc, #812]	@ (8003d54 <HAL_RCC_GetSysClockFreq+0x354>)
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	f003 030c 	and.w	r3, r3, #12
 8003a2e:	2b0c      	cmp	r3, #12
 8003a30:	f200 8204 	bhi.w	8003e3c <HAL_RCC_GetSysClockFreq+0x43c>
 8003a34:	a201      	add	r2, pc, #4	@ (adr r2, 8003a3c <HAL_RCC_GetSysClockFreq+0x3c>)
 8003a36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a3a:	bf00      	nop
 8003a3c:	08003a71 	.word	0x08003a71
 8003a40:	08003e3d 	.word	0x08003e3d
 8003a44:	08003e3d 	.word	0x08003e3d
 8003a48:	08003e3d 	.word	0x08003e3d
 8003a4c:	08003a79 	.word	0x08003a79
 8003a50:	08003e3d 	.word	0x08003e3d
 8003a54:	08003e3d 	.word	0x08003e3d
 8003a58:	08003e3d 	.word	0x08003e3d
 8003a5c:	08003a81 	.word	0x08003a81
 8003a60:	08003e3d 	.word	0x08003e3d
 8003a64:	08003e3d 	.word	0x08003e3d
 8003a68:	08003e3d 	.word	0x08003e3d
 8003a6c:	08003c71 	.word	0x08003c71
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a70:	4bb9      	ldr	r3, [pc, #740]	@ (8003d58 <HAL_RCC_GetSysClockFreq+0x358>)
 8003a72:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 8003a76:	e1e5      	b.n	8003e44 <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a78:	4bb7      	ldr	r3, [pc, #732]	@ (8003d58 <HAL_RCC_GetSysClockFreq+0x358>)
 8003a7a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003a7e:	e1e1      	b.n	8003e44 <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a80:	4bb4      	ldr	r3, [pc, #720]	@ (8003d54 <HAL_RCC_GetSysClockFreq+0x354>)
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003a88:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a8c:	4bb1      	ldr	r3, [pc, #708]	@ (8003d54 <HAL_RCC_GetSysClockFreq+0x354>)
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d071      	beq.n	8003b7c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a98:	4bae      	ldr	r3, [pc, #696]	@ (8003d54 <HAL_RCC_GetSysClockFreq+0x354>)
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	099b      	lsrs	r3, r3, #6
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003aa4:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8003aa8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003aac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ab0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003aba:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003abe:	4622      	mov	r2, r4
 8003ac0:	462b      	mov	r3, r5
 8003ac2:	f04f 0000 	mov.w	r0, #0
 8003ac6:	f04f 0100 	mov.w	r1, #0
 8003aca:	0159      	lsls	r1, r3, #5
 8003acc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ad0:	0150      	lsls	r0, r2, #5
 8003ad2:	4602      	mov	r2, r0
 8003ad4:	460b      	mov	r3, r1
 8003ad6:	4621      	mov	r1, r4
 8003ad8:	1a51      	subs	r1, r2, r1
 8003ada:	6439      	str	r1, [r7, #64]	@ 0x40
 8003adc:	4629      	mov	r1, r5
 8003ade:	eb63 0301 	sbc.w	r3, r3, r1
 8003ae2:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ae4:	f04f 0200 	mov.w	r2, #0
 8003ae8:	f04f 0300 	mov.w	r3, #0
 8003aec:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8003af0:	4649      	mov	r1, r9
 8003af2:	018b      	lsls	r3, r1, #6
 8003af4:	4641      	mov	r1, r8
 8003af6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003afa:	4641      	mov	r1, r8
 8003afc:	018a      	lsls	r2, r1, #6
 8003afe:	4641      	mov	r1, r8
 8003b00:	1a51      	subs	r1, r2, r1
 8003b02:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003b04:	4649      	mov	r1, r9
 8003b06:	eb63 0301 	sbc.w	r3, r3, r1
 8003b0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003b0c:	f04f 0200 	mov.w	r2, #0
 8003b10:	f04f 0300 	mov.w	r3, #0
 8003b14:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8003b18:	4649      	mov	r1, r9
 8003b1a:	00cb      	lsls	r3, r1, #3
 8003b1c:	4641      	mov	r1, r8
 8003b1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b22:	4641      	mov	r1, r8
 8003b24:	00ca      	lsls	r2, r1, #3
 8003b26:	4610      	mov	r0, r2
 8003b28:	4619      	mov	r1, r3
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	4622      	mov	r2, r4
 8003b2e:	189b      	adds	r3, r3, r2
 8003b30:	633b      	str	r3, [r7, #48]	@ 0x30
 8003b32:	462b      	mov	r3, r5
 8003b34:	460a      	mov	r2, r1
 8003b36:	eb42 0303 	adc.w	r3, r2, r3
 8003b3a:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b3c:	f04f 0200 	mov.w	r2, #0
 8003b40:	f04f 0300 	mov.w	r3, #0
 8003b44:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003b48:	4629      	mov	r1, r5
 8003b4a:	028b      	lsls	r3, r1, #10
 8003b4c:	4621      	mov	r1, r4
 8003b4e:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003b52:	4621      	mov	r1, r4
 8003b54:	028a      	lsls	r2, r1, #10
 8003b56:	4610      	mov	r0, r2
 8003b58:	4619      	mov	r1, r3
 8003b5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003b5e:	2200      	movs	r2, #0
 8003b60:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003b64:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003b68:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003b6c:	f7fd f830 	bl	8000bd0 <__aeabi_uldivmod>
 8003b70:	4602      	mov	r2, r0
 8003b72:	460b      	mov	r3, r1
 8003b74:	4613      	mov	r3, r2
 8003b76:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003b7a:	e067      	b.n	8003c4c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b7c:	4b75      	ldr	r3, [pc, #468]	@ (8003d54 <HAL_RCC_GetSysClockFreq+0x354>)
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	099b      	lsrs	r3, r3, #6
 8003b82:	2200      	movs	r2, #0
 8003b84:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003b88:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003b8c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003b90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b94:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003b96:	2300      	movs	r3, #0
 8003b98:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003b9a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8003b9e:	4622      	mov	r2, r4
 8003ba0:	462b      	mov	r3, r5
 8003ba2:	f04f 0000 	mov.w	r0, #0
 8003ba6:	f04f 0100 	mov.w	r1, #0
 8003baa:	0159      	lsls	r1, r3, #5
 8003bac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003bb0:	0150      	lsls	r0, r2, #5
 8003bb2:	4602      	mov	r2, r0
 8003bb4:	460b      	mov	r3, r1
 8003bb6:	4621      	mov	r1, r4
 8003bb8:	1a51      	subs	r1, r2, r1
 8003bba:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003bbc:	4629      	mov	r1, r5
 8003bbe:	eb63 0301 	sbc.w	r3, r3, r1
 8003bc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003bc4:	f04f 0200 	mov.w	r2, #0
 8003bc8:	f04f 0300 	mov.w	r3, #0
 8003bcc:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8003bd0:	4649      	mov	r1, r9
 8003bd2:	018b      	lsls	r3, r1, #6
 8003bd4:	4641      	mov	r1, r8
 8003bd6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003bda:	4641      	mov	r1, r8
 8003bdc:	018a      	lsls	r2, r1, #6
 8003bde:	4641      	mov	r1, r8
 8003be0:	ebb2 0a01 	subs.w	sl, r2, r1
 8003be4:	4649      	mov	r1, r9
 8003be6:	eb63 0b01 	sbc.w	fp, r3, r1
 8003bea:	f04f 0200 	mov.w	r2, #0
 8003bee:	f04f 0300 	mov.w	r3, #0
 8003bf2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003bf6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003bfa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003bfe:	4692      	mov	sl, r2
 8003c00:	469b      	mov	fp, r3
 8003c02:	4623      	mov	r3, r4
 8003c04:	eb1a 0303 	adds.w	r3, sl, r3
 8003c08:	623b      	str	r3, [r7, #32]
 8003c0a:	462b      	mov	r3, r5
 8003c0c:	eb4b 0303 	adc.w	r3, fp, r3
 8003c10:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c12:	f04f 0200 	mov.w	r2, #0
 8003c16:	f04f 0300 	mov.w	r3, #0
 8003c1a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003c1e:	4629      	mov	r1, r5
 8003c20:	028b      	lsls	r3, r1, #10
 8003c22:	4621      	mov	r1, r4
 8003c24:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003c28:	4621      	mov	r1, r4
 8003c2a:	028a      	lsls	r2, r1, #10
 8003c2c:	4610      	mov	r0, r2
 8003c2e:	4619      	mov	r1, r3
 8003c30:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003c34:	2200      	movs	r2, #0
 8003c36:	673b      	str	r3, [r7, #112]	@ 0x70
 8003c38:	677a      	str	r2, [r7, #116]	@ 0x74
 8003c3a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003c3e:	f7fc ffc7 	bl	8000bd0 <__aeabi_uldivmod>
 8003c42:	4602      	mov	r2, r0
 8003c44:	460b      	mov	r3, r1
 8003c46:	4613      	mov	r3, r2
 8003c48:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003c4c:	4b41      	ldr	r3, [pc, #260]	@ (8003d54 <HAL_RCC_GetSysClockFreq+0x354>)
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	0c1b      	lsrs	r3, r3, #16
 8003c52:	f003 0303 	and.w	r3, r3, #3
 8003c56:	3301      	adds	r3, #1
 8003c58:	005b      	lsls	r3, r3, #1
 8003c5a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 8003c5e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003c62:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003c66:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c6a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003c6e:	e0e9      	b.n	8003e44 <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c70:	4b38      	ldr	r3, [pc, #224]	@ (8003d54 <HAL_RCC_GetSysClockFreq+0x354>)
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003c78:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c7c:	4b35      	ldr	r3, [pc, #212]	@ (8003d54 <HAL_RCC_GetSysClockFreq+0x354>)
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d069      	beq.n	8003d5c <HAL_RCC_GetSysClockFreq+0x35c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c88:	4b32      	ldr	r3, [pc, #200]	@ (8003d54 <HAL_RCC_GetSysClockFreq+0x354>)
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	099b      	lsrs	r3, r3, #6
 8003c8e:	2200      	movs	r2, #0
 8003c90:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003c92:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003c94:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003c96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c9a:	663b      	str	r3, [r7, #96]	@ 0x60
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	667b      	str	r3, [r7, #100]	@ 0x64
 8003ca0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003ca4:	4622      	mov	r2, r4
 8003ca6:	462b      	mov	r3, r5
 8003ca8:	f04f 0000 	mov.w	r0, #0
 8003cac:	f04f 0100 	mov.w	r1, #0
 8003cb0:	0159      	lsls	r1, r3, #5
 8003cb2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003cb6:	0150      	lsls	r0, r2, #5
 8003cb8:	4602      	mov	r2, r0
 8003cba:	460b      	mov	r3, r1
 8003cbc:	4621      	mov	r1, r4
 8003cbe:	1a51      	subs	r1, r2, r1
 8003cc0:	61b9      	str	r1, [r7, #24]
 8003cc2:	4629      	mov	r1, r5
 8003cc4:	eb63 0301 	sbc.w	r3, r3, r1
 8003cc8:	61fb      	str	r3, [r7, #28]
 8003cca:	f04f 0200 	mov.w	r2, #0
 8003cce:	f04f 0300 	mov.w	r3, #0
 8003cd2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003cd6:	4659      	mov	r1, fp
 8003cd8:	018b      	lsls	r3, r1, #6
 8003cda:	4651      	mov	r1, sl
 8003cdc:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003ce0:	4651      	mov	r1, sl
 8003ce2:	018a      	lsls	r2, r1, #6
 8003ce4:	4651      	mov	r1, sl
 8003ce6:	ebb2 0801 	subs.w	r8, r2, r1
 8003cea:	4659      	mov	r1, fp
 8003cec:	eb63 0901 	sbc.w	r9, r3, r1
 8003cf0:	f04f 0200 	mov.w	r2, #0
 8003cf4:	f04f 0300 	mov.w	r3, #0
 8003cf8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003cfc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003d00:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003d04:	4690      	mov	r8, r2
 8003d06:	4699      	mov	r9, r3
 8003d08:	4623      	mov	r3, r4
 8003d0a:	eb18 0303 	adds.w	r3, r8, r3
 8003d0e:	613b      	str	r3, [r7, #16]
 8003d10:	462b      	mov	r3, r5
 8003d12:	eb49 0303 	adc.w	r3, r9, r3
 8003d16:	617b      	str	r3, [r7, #20]
 8003d18:	f04f 0200 	mov.w	r2, #0
 8003d1c:	f04f 0300 	mov.w	r3, #0
 8003d20:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003d24:	4629      	mov	r1, r5
 8003d26:	028b      	lsls	r3, r1, #10
 8003d28:	4621      	mov	r1, r4
 8003d2a:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d2e:	4621      	mov	r1, r4
 8003d30:	028a      	lsls	r2, r1, #10
 8003d32:	4610      	mov	r0, r2
 8003d34:	4619      	mov	r1, r3
 8003d36:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003d3e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003d40:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003d44:	f7fc ff44 	bl	8000bd0 <__aeabi_uldivmod>
 8003d48:	4602      	mov	r2, r0
 8003d4a:	460b      	mov	r3, r1
 8003d4c:	4613      	mov	r3, r2
 8003d4e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003d52:	e063      	b.n	8003e1c <HAL_RCC_GetSysClockFreq+0x41c>
 8003d54:	40023800 	.word	0x40023800
 8003d58:	00f42400 	.word	0x00f42400
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d5c:	4b3d      	ldr	r3, [pc, #244]	@ (8003e54 <HAL_RCC_GetSysClockFreq+0x454>)
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	099b      	lsrs	r3, r3, #6
 8003d62:	2200      	movs	r2, #0
 8003d64:	4618      	mov	r0, r3
 8003d66:	4611      	mov	r1, r2
 8003d68:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003d6c:	653b      	str	r3, [r7, #80]	@ 0x50
 8003d6e:	2300      	movs	r3, #0
 8003d70:	657b      	str	r3, [r7, #84]	@ 0x54
 8003d72:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8003d76:	4642      	mov	r2, r8
 8003d78:	464b      	mov	r3, r9
 8003d7a:	f04f 0000 	mov.w	r0, #0
 8003d7e:	f04f 0100 	mov.w	r1, #0
 8003d82:	0159      	lsls	r1, r3, #5
 8003d84:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d88:	0150      	lsls	r0, r2, #5
 8003d8a:	4602      	mov	r2, r0
 8003d8c:	460b      	mov	r3, r1
 8003d8e:	4641      	mov	r1, r8
 8003d90:	1a51      	subs	r1, r2, r1
 8003d92:	60b9      	str	r1, [r7, #8]
 8003d94:	4649      	mov	r1, r9
 8003d96:	eb63 0301 	sbc.w	r3, r3, r1
 8003d9a:	60fb      	str	r3, [r7, #12]
 8003d9c:	f04f 0200 	mov.w	r2, #0
 8003da0:	f04f 0300 	mov.w	r3, #0
 8003da4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003da8:	4659      	mov	r1, fp
 8003daa:	018b      	lsls	r3, r1, #6
 8003dac:	4651      	mov	r1, sl
 8003dae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003db2:	4651      	mov	r1, sl
 8003db4:	018a      	lsls	r2, r1, #6
 8003db6:	4651      	mov	r1, sl
 8003db8:	1a54      	subs	r4, r2, r1
 8003dba:	4659      	mov	r1, fp
 8003dbc:	eb63 0501 	sbc.w	r5, r3, r1
 8003dc0:	f04f 0200 	mov.w	r2, #0
 8003dc4:	f04f 0300 	mov.w	r3, #0
 8003dc8:	00eb      	lsls	r3, r5, #3
 8003dca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003dce:	00e2      	lsls	r2, r4, #3
 8003dd0:	4614      	mov	r4, r2
 8003dd2:	461d      	mov	r5, r3
 8003dd4:	4643      	mov	r3, r8
 8003dd6:	18e3      	adds	r3, r4, r3
 8003dd8:	603b      	str	r3, [r7, #0]
 8003dda:	464b      	mov	r3, r9
 8003ddc:	eb45 0303 	adc.w	r3, r5, r3
 8003de0:	607b      	str	r3, [r7, #4]
 8003de2:	f04f 0200 	mov.w	r2, #0
 8003de6:	f04f 0300 	mov.w	r3, #0
 8003dea:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003dee:	4629      	mov	r1, r5
 8003df0:	028b      	lsls	r3, r1, #10
 8003df2:	4621      	mov	r1, r4
 8003df4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003df8:	4621      	mov	r1, r4
 8003dfa:	028a      	lsls	r2, r1, #10
 8003dfc:	4610      	mov	r0, r2
 8003dfe:	4619      	mov	r1, r3
 8003e00:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003e04:	2200      	movs	r2, #0
 8003e06:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003e08:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003e0a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003e0e:	f7fc fedf 	bl	8000bd0 <__aeabi_uldivmod>
 8003e12:	4602      	mov	r2, r0
 8003e14:	460b      	mov	r3, r1
 8003e16:	4613      	mov	r3, r2
 8003e18:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003e1c:	4b0d      	ldr	r3, [pc, #52]	@ (8003e54 <HAL_RCC_GetSysClockFreq+0x454>)
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	0f1b      	lsrs	r3, r3, #28
 8003e22:	f003 0307 	and.w	r3, r3, #7
 8003e26:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 8003e2a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003e2e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003e32:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e36:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003e3a:	e003      	b.n	8003e44 <HAL_RCC_GetSysClockFreq+0x444>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003e3c:	4b06      	ldr	r3, [pc, #24]	@ (8003e58 <HAL_RCC_GetSysClockFreq+0x458>)
 8003e3e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003e42:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e44:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	37b8      	adds	r7, #184	@ 0xb8
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e52:	bf00      	nop
 8003e54:	40023800 	.word	0x40023800
 8003e58:	00f42400 	.word	0x00f42400

08003e5c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b086      	sub	sp, #24
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d101      	bne.n	8003e6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	e28d      	b.n	800438a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f003 0301 	and.w	r3, r3, #1
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	f000 8083 	beq.w	8003f82 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003e7c:	4b94      	ldr	r3, [pc, #592]	@ (80040d0 <HAL_RCC_OscConfig+0x274>)
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	f003 030c 	and.w	r3, r3, #12
 8003e84:	2b04      	cmp	r3, #4
 8003e86:	d019      	beq.n	8003ebc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003e88:	4b91      	ldr	r3, [pc, #580]	@ (80040d0 <HAL_RCC_OscConfig+0x274>)
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003e90:	2b08      	cmp	r3, #8
 8003e92:	d106      	bne.n	8003ea2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003e94:	4b8e      	ldr	r3, [pc, #568]	@ (80040d0 <HAL_RCC_OscConfig+0x274>)
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e9c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003ea0:	d00c      	beq.n	8003ebc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ea2:	4b8b      	ldr	r3, [pc, #556]	@ (80040d0 <HAL_RCC_OscConfig+0x274>)
 8003ea4:	689b      	ldr	r3, [r3, #8]
 8003ea6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003eaa:	2b0c      	cmp	r3, #12
 8003eac:	d112      	bne.n	8003ed4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003eae:	4b88      	ldr	r3, [pc, #544]	@ (80040d0 <HAL_RCC_OscConfig+0x274>)
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003eb6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003eba:	d10b      	bne.n	8003ed4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ebc:	4b84      	ldr	r3, [pc, #528]	@ (80040d0 <HAL_RCC_OscConfig+0x274>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d05b      	beq.n	8003f80 <HAL_RCC_OscConfig+0x124>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d157      	bne.n	8003f80 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	e25a      	b.n	800438a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003edc:	d106      	bne.n	8003eec <HAL_RCC_OscConfig+0x90>
 8003ede:	4b7c      	ldr	r3, [pc, #496]	@ (80040d0 <HAL_RCC_OscConfig+0x274>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a7b      	ldr	r2, [pc, #492]	@ (80040d0 <HAL_RCC_OscConfig+0x274>)
 8003ee4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ee8:	6013      	str	r3, [r2, #0]
 8003eea:	e01d      	b.n	8003f28 <HAL_RCC_OscConfig+0xcc>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003ef4:	d10c      	bne.n	8003f10 <HAL_RCC_OscConfig+0xb4>
 8003ef6:	4b76      	ldr	r3, [pc, #472]	@ (80040d0 <HAL_RCC_OscConfig+0x274>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a75      	ldr	r2, [pc, #468]	@ (80040d0 <HAL_RCC_OscConfig+0x274>)
 8003efc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003f00:	6013      	str	r3, [r2, #0]
 8003f02:	4b73      	ldr	r3, [pc, #460]	@ (80040d0 <HAL_RCC_OscConfig+0x274>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a72      	ldr	r2, [pc, #456]	@ (80040d0 <HAL_RCC_OscConfig+0x274>)
 8003f08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f0c:	6013      	str	r3, [r2, #0]
 8003f0e:	e00b      	b.n	8003f28 <HAL_RCC_OscConfig+0xcc>
 8003f10:	4b6f      	ldr	r3, [pc, #444]	@ (80040d0 <HAL_RCC_OscConfig+0x274>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a6e      	ldr	r2, [pc, #440]	@ (80040d0 <HAL_RCC_OscConfig+0x274>)
 8003f16:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f1a:	6013      	str	r3, [r2, #0]
 8003f1c:	4b6c      	ldr	r3, [pc, #432]	@ (80040d0 <HAL_RCC_OscConfig+0x274>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a6b      	ldr	r2, [pc, #428]	@ (80040d0 <HAL_RCC_OscConfig+0x274>)
 8003f22:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003f26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d013      	beq.n	8003f58 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f30:	f7fd ffde 	bl	8001ef0 <HAL_GetTick>
 8003f34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f36:	e008      	b.n	8003f4a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f38:	f7fd ffda 	bl	8001ef0 <HAL_GetTick>
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	1ad3      	subs	r3, r2, r3
 8003f42:	2b64      	cmp	r3, #100	@ 0x64
 8003f44:	d901      	bls.n	8003f4a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003f46:	2303      	movs	r3, #3
 8003f48:	e21f      	b.n	800438a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f4a:	4b61      	ldr	r3, [pc, #388]	@ (80040d0 <HAL_RCC_OscConfig+0x274>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d0f0      	beq.n	8003f38 <HAL_RCC_OscConfig+0xdc>
 8003f56:	e014      	b.n	8003f82 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f58:	f7fd ffca 	bl	8001ef0 <HAL_GetTick>
 8003f5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f5e:	e008      	b.n	8003f72 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f60:	f7fd ffc6 	bl	8001ef0 <HAL_GetTick>
 8003f64:	4602      	mov	r2, r0
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	1ad3      	subs	r3, r2, r3
 8003f6a:	2b64      	cmp	r3, #100	@ 0x64
 8003f6c:	d901      	bls.n	8003f72 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003f6e:	2303      	movs	r3, #3
 8003f70:	e20b      	b.n	800438a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f72:	4b57      	ldr	r3, [pc, #348]	@ (80040d0 <HAL_RCC_OscConfig+0x274>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d1f0      	bne.n	8003f60 <HAL_RCC_OscConfig+0x104>
 8003f7e:	e000      	b.n	8003f82 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f003 0302 	and.w	r3, r3, #2
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d06f      	beq.n	800406e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003f8e:	4b50      	ldr	r3, [pc, #320]	@ (80040d0 <HAL_RCC_OscConfig+0x274>)
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	f003 030c 	and.w	r3, r3, #12
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d017      	beq.n	8003fca <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003f9a:	4b4d      	ldr	r3, [pc, #308]	@ (80040d0 <HAL_RCC_OscConfig+0x274>)
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003fa2:	2b08      	cmp	r3, #8
 8003fa4:	d105      	bne.n	8003fb2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003fa6:	4b4a      	ldr	r3, [pc, #296]	@ (80040d0 <HAL_RCC_OscConfig+0x274>)
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d00b      	beq.n	8003fca <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003fb2:	4b47      	ldr	r3, [pc, #284]	@ (80040d0 <HAL_RCC_OscConfig+0x274>)
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003fba:	2b0c      	cmp	r3, #12
 8003fbc:	d11c      	bne.n	8003ff8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003fbe:	4b44      	ldr	r3, [pc, #272]	@ (80040d0 <HAL_RCC_OscConfig+0x274>)
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d116      	bne.n	8003ff8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fca:	4b41      	ldr	r3, [pc, #260]	@ (80040d0 <HAL_RCC_OscConfig+0x274>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f003 0302 	and.w	r3, r3, #2
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d005      	beq.n	8003fe2 <HAL_RCC_OscConfig+0x186>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	68db      	ldr	r3, [r3, #12]
 8003fda:	2b01      	cmp	r3, #1
 8003fdc:	d001      	beq.n	8003fe2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e1d3      	b.n	800438a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fe2:	4b3b      	ldr	r3, [pc, #236]	@ (80040d0 <HAL_RCC_OscConfig+0x274>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	691b      	ldr	r3, [r3, #16]
 8003fee:	00db      	lsls	r3, r3, #3
 8003ff0:	4937      	ldr	r1, [pc, #220]	@ (80040d0 <HAL_RCC_OscConfig+0x274>)
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ff6:	e03a      	b.n	800406e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	68db      	ldr	r3, [r3, #12]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d020      	beq.n	8004042 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004000:	4b34      	ldr	r3, [pc, #208]	@ (80040d4 <HAL_RCC_OscConfig+0x278>)
 8004002:	2201      	movs	r2, #1
 8004004:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004006:	f7fd ff73 	bl	8001ef0 <HAL_GetTick>
 800400a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800400c:	e008      	b.n	8004020 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800400e:	f7fd ff6f 	bl	8001ef0 <HAL_GetTick>
 8004012:	4602      	mov	r2, r0
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	1ad3      	subs	r3, r2, r3
 8004018:	2b02      	cmp	r3, #2
 800401a:	d901      	bls.n	8004020 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800401c:	2303      	movs	r3, #3
 800401e:	e1b4      	b.n	800438a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004020:	4b2b      	ldr	r3, [pc, #172]	@ (80040d0 <HAL_RCC_OscConfig+0x274>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f003 0302 	and.w	r3, r3, #2
 8004028:	2b00      	cmp	r3, #0
 800402a:	d0f0      	beq.n	800400e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800402c:	4b28      	ldr	r3, [pc, #160]	@ (80040d0 <HAL_RCC_OscConfig+0x274>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	691b      	ldr	r3, [r3, #16]
 8004038:	00db      	lsls	r3, r3, #3
 800403a:	4925      	ldr	r1, [pc, #148]	@ (80040d0 <HAL_RCC_OscConfig+0x274>)
 800403c:	4313      	orrs	r3, r2
 800403e:	600b      	str	r3, [r1, #0]
 8004040:	e015      	b.n	800406e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004042:	4b24      	ldr	r3, [pc, #144]	@ (80040d4 <HAL_RCC_OscConfig+0x278>)
 8004044:	2200      	movs	r2, #0
 8004046:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004048:	f7fd ff52 	bl	8001ef0 <HAL_GetTick>
 800404c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800404e:	e008      	b.n	8004062 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004050:	f7fd ff4e 	bl	8001ef0 <HAL_GetTick>
 8004054:	4602      	mov	r2, r0
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	1ad3      	subs	r3, r2, r3
 800405a:	2b02      	cmp	r3, #2
 800405c:	d901      	bls.n	8004062 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800405e:	2303      	movs	r3, #3
 8004060:	e193      	b.n	800438a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004062:	4b1b      	ldr	r3, [pc, #108]	@ (80040d0 <HAL_RCC_OscConfig+0x274>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f003 0302 	and.w	r3, r3, #2
 800406a:	2b00      	cmp	r3, #0
 800406c:	d1f0      	bne.n	8004050 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f003 0308 	and.w	r3, r3, #8
 8004076:	2b00      	cmp	r3, #0
 8004078:	d036      	beq.n	80040e8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	695b      	ldr	r3, [r3, #20]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d016      	beq.n	80040b0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004082:	4b15      	ldr	r3, [pc, #84]	@ (80040d8 <HAL_RCC_OscConfig+0x27c>)
 8004084:	2201      	movs	r2, #1
 8004086:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004088:	f7fd ff32 	bl	8001ef0 <HAL_GetTick>
 800408c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800408e:	e008      	b.n	80040a2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004090:	f7fd ff2e 	bl	8001ef0 <HAL_GetTick>
 8004094:	4602      	mov	r2, r0
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	1ad3      	subs	r3, r2, r3
 800409a:	2b02      	cmp	r3, #2
 800409c:	d901      	bls.n	80040a2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800409e:	2303      	movs	r3, #3
 80040a0:	e173      	b.n	800438a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040a2:	4b0b      	ldr	r3, [pc, #44]	@ (80040d0 <HAL_RCC_OscConfig+0x274>)
 80040a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040a6:	f003 0302 	and.w	r3, r3, #2
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d0f0      	beq.n	8004090 <HAL_RCC_OscConfig+0x234>
 80040ae:	e01b      	b.n	80040e8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040b0:	4b09      	ldr	r3, [pc, #36]	@ (80040d8 <HAL_RCC_OscConfig+0x27c>)
 80040b2:	2200      	movs	r2, #0
 80040b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040b6:	f7fd ff1b 	bl	8001ef0 <HAL_GetTick>
 80040ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040bc:	e00e      	b.n	80040dc <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80040be:	f7fd ff17 	bl	8001ef0 <HAL_GetTick>
 80040c2:	4602      	mov	r2, r0
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	1ad3      	subs	r3, r2, r3
 80040c8:	2b02      	cmp	r3, #2
 80040ca:	d907      	bls.n	80040dc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80040cc:	2303      	movs	r3, #3
 80040ce:	e15c      	b.n	800438a <HAL_RCC_OscConfig+0x52e>
 80040d0:	40023800 	.word	0x40023800
 80040d4:	42470000 	.word	0x42470000
 80040d8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040dc:	4b8a      	ldr	r3, [pc, #552]	@ (8004308 <HAL_RCC_OscConfig+0x4ac>)
 80040de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040e0:	f003 0302 	and.w	r3, r3, #2
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d1ea      	bne.n	80040be <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f003 0304 	and.w	r3, r3, #4
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	f000 8097 	beq.w	8004224 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040f6:	2300      	movs	r3, #0
 80040f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040fa:	4b83      	ldr	r3, [pc, #524]	@ (8004308 <HAL_RCC_OscConfig+0x4ac>)
 80040fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004102:	2b00      	cmp	r3, #0
 8004104:	d10f      	bne.n	8004126 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004106:	2300      	movs	r3, #0
 8004108:	60bb      	str	r3, [r7, #8]
 800410a:	4b7f      	ldr	r3, [pc, #508]	@ (8004308 <HAL_RCC_OscConfig+0x4ac>)
 800410c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800410e:	4a7e      	ldr	r2, [pc, #504]	@ (8004308 <HAL_RCC_OscConfig+0x4ac>)
 8004110:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004114:	6413      	str	r3, [r2, #64]	@ 0x40
 8004116:	4b7c      	ldr	r3, [pc, #496]	@ (8004308 <HAL_RCC_OscConfig+0x4ac>)
 8004118:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800411a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800411e:	60bb      	str	r3, [r7, #8]
 8004120:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004122:	2301      	movs	r3, #1
 8004124:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004126:	4b79      	ldr	r3, [pc, #484]	@ (800430c <HAL_RCC_OscConfig+0x4b0>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800412e:	2b00      	cmp	r3, #0
 8004130:	d118      	bne.n	8004164 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004132:	4b76      	ldr	r3, [pc, #472]	@ (800430c <HAL_RCC_OscConfig+0x4b0>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a75      	ldr	r2, [pc, #468]	@ (800430c <HAL_RCC_OscConfig+0x4b0>)
 8004138:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800413c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800413e:	f7fd fed7 	bl	8001ef0 <HAL_GetTick>
 8004142:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004144:	e008      	b.n	8004158 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004146:	f7fd fed3 	bl	8001ef0 <HAL_GetTick>
 800414a:	4602      	mov	r2, r0
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	1ad3      	subs	r3, r2, r3
 8004150:	2b02      	cmp	r3, #2
 8004152:	d901      	bls.n	8004158 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004154:	2303      	movs	r3, #3
 8004156:	e118      	b.n	800438a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004158:	4b6c      	ldr	r3, [pc, #432]	@ (800430c <HAL_RCC_OscConfig+0x4b0>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004160:	2b00      	cmp	r3, #0
 8004162:	d0f0      	beq.n	8004146 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	2b01      	cmp	r3, #1
 800416a:	d106      	bne.n	800417a <HAL_RCC_OscConfig+0x31e>
 800416c:	4b66      	ldr	r3, [pc, #408]	@ (8004308 <HAL_RCC_OscConfig+0x4ac>)
 800416e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004170:	4a65      	ldr	r2, [pc, #404]	@ (8004308 <HAL_RCC_OscConfig+0x4ac>)
 8004172:	f043 0301 	orr.w	r3, r3, #1
 8004176:	6713      	str	r3, [r2, #112]	@ 0x70
 8004178:	e01c      	b.n	80041b4 <HAL_RCC_OscConfig+0x358>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	2b05      	cmp	r3, #5
 8004180:	d10c      	bne.n	800419c <HAL_RCC_OscConfig+0x340>
 8004182:	4b61      	ldr	r3, [pc, #388]	@ (8004308 <HAL_RCC_OscConfig+0x4ac>)
 8004184:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004186:	4a60      	ldr	r2, [pc, #384]	@ (8004308 <HAL_RCC_OscConfig+0x4ac>)
 8004188:	f043 0304 	orr.w	r3, r3, #4
 800418c:	6713      	str	r3, [r2, #112]	@ 0x70
 800418e:	4b5e      	ldr	r3, [pc, #376]	@ (8004308 <HAL_RCC_OscConfig+0x4ac>)
 8004190:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004192:	4a5d      	ldr	r2, [pc, #372]	@ (8004308 <HAL_RCC_OscConfig+0x4ac>)
 8004194:	f043 0301 	orr.w	r3, r3, #1
 8004198:	6713      	str	r3, [r2, #112]	@ 0x70
 800419a:	e00b      	b.n	80041b4 <HAL_RCC_OscConfig+0x358>
 800419c:	4b5a      	ldr	r3, [pc, #360]	@ (8004308 <HAL_RCC_OscConfig+0x4ac>)
 800419e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041a0:	4a59      	ldr	r2, [pc, #356]	@ (8004308 <HAL_RCC_OscConfig+0x4ac>)
 80041a2:	f023 0301 	bic.w	r3, r3, #1
 80041a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80041a8:	4b57      	ldr	r3, [pc, #348]	@ (8004308 <HAL_RCC_OscConfig+0x4ac>)
 80041aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041ac:	4a56      	ldr	r2, [pc, #344]	@ (8004308 <HAL_RCC_OscConfig+0x4ac>)
 80041ae:	f023 0304 	bic.w	r3, r3, #4
 80041b2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d015      	beq.n	80041e8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041bc:	f7fd fe98 	bl	8001ef0 <HAL_GetTick>
 80041c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041c2:	e00a      	b.n	80041da <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041c4:	f7fd fe94 	bl	8001ef0 <HAL_GetTick>
 80041c8:	4602      	mov	r2, r0
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	1ad3      	subs	r3, r2, r3
 80041ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d901      	bls.n	80041da <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80041d6:	2303      	movs	r3, #3
 80041d8:	e0d7      	b.n	800438a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041da:	4b4b      	ldr	r3, [pc, #300]	@ (8004308 <HAL_RCC_OscConfig+0x4ac>)
 80041dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041de:	f003 0302 	and.w	r3, r3, #2
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d0ee      	beq.n	80041c4 <HAL_RCC_OscConfig+0x368>
 80041e6:	e014      	b.n	8004212 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041e8:	f7fd fe82 	bl	8001ef0 <HAL_GetTick>
 80041ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041ee:	e00a      	b.n	8004206 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041f0:	f7fd fe7e 	bl	8001ef0 <HAL_GetTick>
 80041f4:	4602      	mov	r2, r0
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	1ad3      	subs	r3, r2, r3
 80041fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041fe:	4293      	cmp	r3, r2
 8004200:	d901      	bls.n	8004206 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004202:	2303      	movs	r3, #3
 8004204:	e0c1      	b.n	800438a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004206:	4b40      	ldr	r3, [pc, #256]	@ (8004308 <HAL_RCC_OscConfig+0x4ac>)
 8004208:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800420a:	f003 0302 	and.w	r3, r3, #2
 800420e:	2b00      	cmp	r3, #0
 8004210:	d1ee      	bne.n	80041f0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004212:	7dfb      	ldrb	r3, [r7, #23]
 8004214:	2b01      	cmp	r3, #1
 8004216:	d105      	bne.n	8004224 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004218:	4b3b      	ldr	r3, [pc, #236]	@ (8004308 <HAL_RCC_OscConfig+0x4ac>)
 800421a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800421c:	4a3a      	ldr	r2, [pc, #232]	@ (8004308 <HAL_RCC_OscConfig+0x4ac>)
 800421e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004222:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	699b      	ldr	r3, [r3, #24]
 8004228:	2b00      	cmp	r3, #0
 800422a:	f000 80ad 	beq.w	8004388 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800422e:	4b36      	ldr	r3, [pc, #216]	@ (8004308 <HAL_RCC_OscConfig+0x4ac>)
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	f003 030c 	and.w	r3, r3, #12
 8004236:	2b08      	cmp	r3, #8
 8004238:	d060      	beq.n	80042fc <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	699b      	ldr	r3, [r3, #24]
 800423e:	2b02      	cmp	r3, #2
 8004240:	d145      	bne.n	80042ce <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004242:	4b33      	ldr	r3, [pc, #204]	@ (8004310 <HAL_RCC_OscConfig+0x4b4>)
 8004244:	2200      	movs	r2, #0
 8004246:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004248:	f7fd fe52 	bl	8001ef0 <HAL_GetTick>
 800424c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800424e:	e008      	b.n	8004262 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004250:	f7fd fe4e 	bl	8001ef0 <HAL_GetTick>
 8004254:	4602      	mov	r2, r0
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	1ad3      	subs	r3, r2, r3
 800425a:	2b02      	cmp	r3, #2
 800425c:	d901      	bls.n	8004262 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800425e:	2303      	movs	r3, #3
 8004260:	e093      	b.n	800438a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004262:	4b29      	ldr	r3, [pc, #164]	@ (8004308 <HAL_RCC_OscConfig+0x4ac>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800426a:	2b00      	cmp	r3, #0
 800426c:	d1f0      	bne.n	8004250 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	69da      	ldr	r2, [r3, #28]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6a1b      	ldr	r3, [r3, #32]
 8004276:	431a      	orrs	r2, r3
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800427c:	019b      	lsls	r3, r3, #6
 800427e:	431a      	orrs	r2, r3
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004284:	085b      	lsrs	r3, r3, #1
 8004286:	3b01      	subs	r3, #1
 8004288:	041b      	lsls	r3, r3, #16
 800428a:	431a      	orrs	r2, r3
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004290:	061b      	lsls	r3, r3, #24
 8004292:	431a      	orrs	r2, r3
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004298:	071b      	lsls	r3, r3, #28
 800429a:	491b      	ldr	r1, [pc, #108]	@ (8004308 <HAL_RCC_OscConfig+0x4ac>)
 800429c:	4313      	orrs	r3, r2
 800429e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80042a0:	4b1b      	ldr	r3, [pc, #108]	@ (8004310 <HAL_RCC_OscConfig+0x4b4>)
 80042a2:	2201      	movs	r2, #1
 80042a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042a6:	f7fd fe23 	bl	8001ef0 <HAL_GetTick>
 80042aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042ac:	e008      	b.n	80042c0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042ae:	f7fd fe1f 	bl	8001ef0 <HAL_GetTick>
 80042b2:	4602      	mov	r2, r0
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	1ad3      	subs	r3, r2, r3
 80042b8:	2b02      	cmp	r3, #2
 80042ba:	d901      	bls.n	80042c0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80042bc:	2303      	movs	r3, #3
 80042be:	e064      	b.n	800438a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042c0:	4b11      	ldr	r3, [pc, #68]	@ (8004308 <HAL_RCC_OscConfig+0x4ac>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d0f0      	beq.n	80042ae <HAL_RCC_OscConfig+0x452>
 80042cc:	e05c      	b.n	8004388 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042ce:	4b10      	ldr	r3, [pc, #64]	@ (8004310 <HAL_RCC_OscConfig+0x4b4>)
 80042d0:	2200      	movs	r2, #0
 80042d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042d4:	f7fd fe0c 	bl	8001ef0 <HAL_GetTick>
 80042d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042da:	e008      	b.n	80042ee <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042dc:	f7fd fe08 	bl	8001ef0 <HAL_GetTick>
 80042e0:	4602      	mov	r2, r0
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	1ad3      	subs	r3, r2, r3
 80042e6:	2b02      	cmp	r3, #2
 80042e8:	d901      	bls.n	80042ee <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80042ea:	2303      	movs	r3, #3
 80042ec:	e04d      	b.n	800438a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042ee:	4b06      	ldr	r3, [pc, #24]	@ (8004308 <HAL_RCC_OscConfig+0x4ac>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d1f0      	bne.n	80042dc <HAL_RCC_OscConfig+0x480>
 80042fa:	e045      	b.n	8004388 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	699b      	ldr	r3, [r3, #24]
 8004300:	2b01      	cmp	r3, #1
 8004302:	d107      	bne.n	8004314 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004304:	2301      	movs	r3, #1
 8004306:	e040      	b.n	800438a <HAL_RCC_OscConfig+0x52e>
 8004308:	40023800 	.word	0x40023800
 800430c:	40007000 	.word	0x40007000
 8004310:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004314:	4b1f      	ldr	r3, [pc, #124]	@ (8004394 <HAL_RCC_OscConfig+0x538>)
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	699b      	ldr	r3, [r3, #24]
 800431e:	2b01      	cmp	r3, #1
 8004320:	d030      	beq.n	8004384 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800432c:	429a      	cmp	r2, r3
 800432e:	d129      	bne.n	8004384 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800433a:	429a      	cmp	r2, r3
 800433c:	d122      	bne.n	8004384 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800433e:	68fa      	ldr	r2, [r7, #12]
 8004340:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004344:	4013      	ands	r3, r2
 8004346:	687a      	ldr	r2, [r7, #4]
 8004348:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800434a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800434c:	4293      	cmp	r3, r2
 800434e:	d119      	bne.n	8004384 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800435a:	085b      	lsrs	r3, r3, #1
 800435c:	3b01      	subs	r3, #1
 800435e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004360:	429a      	cmp	r2, r3
 8004362:	d10f      	bne.n	8004384 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800436e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004370:	429a      	cmp	r2, r3
 8004372:	d107      	bne.n	8004384 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800437e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004380:	429a      	cmp	r2, r3
 8004382:	d001      	beq.n	8004388 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004384:	2301      	movs	r3, #1
 8004386:	e000      	b.n	800438a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004388:	2300      	movs	r3, #0
}
 800438a:	4618      	mov	r0, r3
 800438c:	3718      	adds	r7, #24
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}
 8004392:	bf00      	nop
 8004394:	40023800 	.word	0x40023800

08004398 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b082      	sub	sp, #8
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d101      	bne.n	80043aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	e041      	b.n	800442e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043b0:	b2db      	uxtb	r3, r3
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d106      	bne.n	80043c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2200      	movs	r2, #0
 80043ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80043be:	6878      	ldr	r0, [r7, #4]
 80043c0:	f7fd fc5c 	bl	8001c7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2202      	movs	r2, #2
 80043c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681a      	ldr	r2, [r3, #0]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	3304      	adds	r3, #4
 80043d4:	4619      	mov	r1, r3
 80043d6:	4610      	mov	r0, r2
 80043d8:	f000 f966 	bl	80046a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2201      	movs	r2, #1
 80043e0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2201      	movs	r2, #1
 80043e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2201      	movs	r2, #1
 80043f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2201      	movs	r2, #1
 80043f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2201      	movs	r2, #1
 8004400:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2201      	movs	r2, #1
 8004408:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2201      	movs	r2, #1
 8004410:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2201      	movs	r2, #1
 8004418:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2201      	movs	r2, #1
 8004420:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2201      	movs	r2, #1
 8004428:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800442c:	2300      	movs	r3, #0
}
 800442e:	4618      	mov	r0, r3
 8004430:	3708      	adds	r7, #8
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}
	...

08004438 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004438:	b480      	push	{r7}
 800443a:	b085      	sub	sp, #20
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004446:	b2db      	uxtb	r3, r3
 8004448:	2b01      	cmp	r3, #1
 800444a:	d001      	beq.n	8004450 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800444c:	2301      	movs	r3, #1
 800444e:	e04e      	b.n	80044ee <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2202      	movs	r2, #2
 8004454:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	68da      	ldr	r2, [r3, #12]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f042 0201 	orr.w	r2, r2, #1
 8004466:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a23      	ldr	r2, [pc, #140]	@ (80044fc <HAL_TIM_Base_Start_IT+0xc4>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d022      	beq.n	80044b8 <HAL_TIM_Base_Start_IT+0x80>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800447a:	d01d      	beq.n	80044b8 <HAL_TIM_Base_Start_IT+0x80>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a1f      	ldr	r2, [pc, #124]	@ (8004500 <HAL_TIM_Base_Start_IT+0xc8>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d018      	beq.n	80044b8 <HAL_TIM_Base_Start_IT+0x80>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a1e      	ldr	r2, [pc, #120]	@ (8004504 <HAL_TIM_Base_Start_IT+0xcc>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d013      	beq.n	80044b8 <HAL_TIM_Base_Start_IT+0x80>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a1c      	ldr	r2, [pc, #112]	@ (8004508 <HAL_TIM_Base_Start_IT+0xd0>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d00e      	beq.n	80044b8 <HAL_TIM_Base_Start_IT+0x80>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a1b      	ldr	r2, [pc, #108]	@ (800450c <HAL_TIM_Base_Start_IT+0xd4>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d009      	beq.n	80044b8 <HAL_TIM_Base_Start_IT+0x80>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a19      	ldr	r2, [pc, #100]	@ (8004510 <HAL_TIM_Base_Start_IT+0xd8>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d004      	beq.n	80044b8 <HAL_TIM_Base_Start_IT+0x80>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a18      	ldr	r2, [pc, #96]	@ (8004514 <HAL_TIM_Base_Start_IT+0xdc>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d111      	bne.n	80044dc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	f003 0307 	and.w	r3, r3, #7
 80044c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	2b06      	cmp	r3, #6
 80044c8:	d010      	beq.n	80044ec <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	681a      	ldr	r2, [r3, #0]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f042 0201 	orr.w	r2, r2, #1
 80044d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044da:	e007      	b.n	80044ec <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	681a      	ldr	r2, [r3, #0]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f042 0201 	orr.w	r2, r2, #1
 80044ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80044ec:	2300      	movs	r3, #0
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	3714      	adds	r7, #20
 80044f2:	46bd      	mov	sp, r7
 80044f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f8:	4770      	bx	lr
 80044fa:	bf00      	nop
 80044fc:	40010000 	.word	0x40010000
 8004500:	40000400 	.word	0x40000400
 8004504:	40000800 	.word	0x40000800
 8004508:	40000c00 	.word	0x40000c00
 800450c:	40010400 	.word	0x40010400
 8004510:	40014000 	.word	0x40014000
 8004514:	40001800 	.word	0x40001800

08004518 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b084      	sub	sp, #16
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
 8004520:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004522:	2300      	movs	r3, #0
 8004524:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800452c:	2b01      	cmp	r3, #1
 800452e:	d101      	bne.n	8004534 <HAL_TIM_ConfigClockSource+0x1c>
 8004530:	2302      	movs	r3, #2
 8004532:	e0b4      	b.n	800469e <HAL_TIM_ConfigClockSource+0x186>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2201      	movs	r2, #1
 8004538:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2202      	movs	r2, #2
 8004540:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	689b      	ldr	r3, [r3, #8]
 800454a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004552:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800455a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	68ba      	ldr	r2, [r7, #8]
 8004562:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800456c:	d03e      	beq.n	80045ec <HAL_TIM_ConfigClockSource+0xd4>
 800456e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004572:	f200 8087 	bhi.w	8004684 <HAL_TIM_ConfigClockSource+0x16c>
 8004576:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800457a:	f000 8086 	beq.w	800468a <HAL_TIM_ConfigClockSource+0x172>
 800457e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004582:	d87f      	bhi.n	8004684 <HAL_TIM_ConfigClockSource+0x16c>
 8004584:	2b70      	cmp	r3, #112	@ 0x70
 8004586:	d01a      	beq.n	80045be <HAL_TIM_ConfigClockSource+0xa6>
 8004588:	2b70      	cmp	r3, #112	@ 0x70
 800458a:	d87b      	bhi.n	8004684 <HAL_TIM_ConfigClockSource+0x16c>
 800458c:	2b60      	cmp	r3, #96	@ 0x60
 800458e:	d050      	beq.n	8004632 <HAL_TIM_ConfigClockSource+0x11a>
 8004590:	2b60      	cmp	r3, #96	@ 0x60
 8004592:	d877      	bhi.n	8004684 <HAL_TIM_ConfigClockSource+0x16c>
 8004594:	2b50      	cmp	r3, #80	@ 0x50
 8004596:	d03c      	beq.n	8004612 <HAL_TIM_ConfigClockSource+0xfa>
 8004598:	2b50      	cmp	r3, #80	@ 0x50
 800459a:	d873      	bhi.n	8004684 <HAL_TIM_ConfigClockSource+0x16c>
 800459c:	2b40      	cmp	r3, #64	@ 0x40
 800459e:	d058      	beq.n	8004652 <HAL_TIM_ConfigClockSource+0x13a>
 80045a0:	2b40      	cmp	r3, #64	@ 0x40
 80045a2:	d86f      	bhi.n	8004684 <HAL_TIM_ConfigClockSource+0x16c>
 80045a4:	2b30      	cmp	r3, #48	@ 0x30
 80045a6:	d064      	beq.n	8004672 <HAL_TIM_ConfigClockSource+0x15a>
 80045a8:	2b30      	cmp	r3, #48	@ 0x30
 80045aa:	d86b      	bhi.n	8004684 <HAL_TIM_ConfigClockSource+0x16c>
 80045ac:	2b20      	cmp	r3, #32
 80045ae:	d060      	beq.n	8004672 <HAL_TIM_ConfigClockSource+0x15a>
 80045b0:	2b20      	cmp	r3, #32
 80045b2:	d867      	bhi.n	8004684 <HAL_TIM_ConfigClockSource+0x16c>
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d05c      	beq.n	8004672 <HAL_TIM_ConfigClockSource+0x15a>
 80045b8:	2b10      	cmp	r3, #16
 80045ba:	d05a      	beq.n	8004672 <HAL_TIM_ConfigClockSource+0x15a>
 80045bc:	e062      	b.n	8004684 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80045ce:	f000 f991 	bl	80048f4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80045e0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	68ba      	ldr	r2, [r7, #8]
 80045e8:	609a      	str	r2, [r3, #8]
      break;
 80045ea:	e04f      	b.n	800468c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80045fc:	f000 f97a 	bl	80048f4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	689a      	ldr	r2, [r3, #8]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800460e:	609a      	str	r2, [r3, #8]
      break;
 8004610:	e03c      	b.n	800468c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800461e:	461a      	mov	r2, r3
 8004620:	f000 f8ee 	bl	8004800 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	2150      	movs	r1, #80	@ 0x50
 800462a:	4618      	mov	r0, r3
 800462c:	f000 f947 	bl	80048be <TIM_ITRx_SetConfig>
      break;
 8004630:	e02c      	b.n	800468c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800463e:	461a      	mov	r2, r3
 8004640:	f000 f90d 	bl	800485e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	2160      	movs	r1, #96	@ 0x60
 800464a:	4618      	mov	r0, r3
 800464c:	f000 f937 	bl	80048be <TIM_ITRx_SetConfig>
      break;
 8004650:	e01c      	b.n	800468c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800465e:	461a      	mov	r2, r3
 8004660:	f000 f8ce 	bl	8004800 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	2140      	movs	r1, #64	@ 0x40
 800466a:	4618      	mov	r0, r3
 800466c:	f000 f927 	bl	80048be <TIM_ITRx_SetConfig>
      break;
 8004670:	e00c      	b.n	800468c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681a      	ldr	r2, [r3, #0]
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4619      	mov	r1, r3
 800467c:	4610      	mov	r0, r2
 800467e:	f000 f91e 	bl	80048be <TIM_ITRx_SetConfig>
      break;
 8004682:	e003      	b.n	800468c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004684:	2301      	movs	r3, #1
 8004686:	73fb      	strb	r3, [r7, #15]
      break;
 8004688:	e000      	b.n	800468c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800468a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2201      	movs	r2, #1
 8004690:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2200      	movs	r2, #0
 8004698:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800469c:	7bfb      	ldrb	r3, [r7, #15]
}
 800469e:	4618      	mov	r0, r3
 80046a0:	3710      	adds	r7, #16
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}
	...

080046a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b085      	sub	sp, #20
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
 80046b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	4a46      	ldr	r2, [pc, #280]	@ (80047d4 <TIM_Base_SetConfig+0x12c>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d013      	beq.n	80046e8 <TIM_Base_SetConfig+0x40>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046c6:	d00f      	beq.n	80046e8 <TIM_Base_SetConfig+0x40>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	4a43      	ldr	r2, [pc, #268]	@ (80047d8 <TIM_Base_SetConfig+0x130>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d00b      	beq.n	80046e8 <TIM_Base_SetConfig+0x40>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	4a42      	ldr	r2, [pc, #264]	@ (80047dc <TIM_Base_SetConfig+0x134>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d007      	beq.n	80046e8 <TIM_Base_SetConfig+0x40>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	4a41      	ldr	r2, [pc, #260]	@ (80047e0 <TIM_Base_SetConfig+0x138>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d003      	beq.n	80046e8 <TIM_Base_SetConfig+0x40>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	4a40      	ldr	r2, [pc, #256]	@ (80047e4 <TIM_Base_SetConfig+0x13c>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d108      	bne.n	80046fa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	68fa      	ldr	r2, [r7, #12]
 80046f6:	4313      	orrs	r3, r2
 80046f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	4a35      	ldr	r2, [pc, #212]	@ (80047d4 <TIM_Base_SetConfig+0x12c>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d02b      	beq.n	800475a <TIM_Base_SetConfig+0xb2>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004708:	d027      	beq.n	800475a <TIM_Base_SetConfig+0xb2>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	4a32      	ldr	r2, [pc, #200]	@ (80047d8 <TIM_Base_SetConfig+0x130>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d023      	beq.n	800475a <TIM_Base_SetConfig+0xb2>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	4a31      	ldr	r2, [pc, #196]	@ (80047dc <TIM_Base_SetConfig+0x134>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d01f      	beq.n	800475a <TIM_Base_SetConfig+0xb2>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	4a30      	ldr	r2, [pc, #192]	@ (80047e0 <TIM_Base_SetConfig+0x138>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d01b      	beq.n	800475a <TIM_Base_SetConfig+0xb2>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	4a2f      	ldr	r2, [pc, #188]	@ (80047e4 <TIM_Base_SetConfig+0x13c>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d017      	beq.n	800475a <TIM_Base_SetConfig+0xb2>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	4a2e      	ldr	r2, [pc, #184]	@ (80047e8 <TIM_Base_SetConfig+0x140>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d013      	beq.n	800475a <TIM_Base_SetConfig+0xb2>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	4a2d      	ldr	r2, [pc, #180]	@ (80047ec <TIM_Base_SetConfig+0x144>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d00f      	beq.n	800475a <TIM_Base_SetConfig+0xb2>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	4a2c      	ldr	r2, [pc, #176]	@ (80047f0 <TIM_Base_SetConfig+0x148>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d00b      	beq.n	800475a <TIM_Base_SetConfig+0xb2>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	4a2b      	ldr	r2, [pc, #172]	@ (80047f4 <TIM_Base_SetConfig+0x14c>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d007      	beq.n	800475a <TIM_Base_SetConfig+0xb2>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	4a2a      	ldr	r2, [pc, #168]	@ (80047f8 <TIM_Base_SetConfig+0x150>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d003      	beq.n	800475a <TIM_Base_SetConfig+0xb2>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	4a29      	ldr	r2, [pc, #164]	@ (80047fc <TIM_Base_SetConfig+0x154>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d108      	bne.n	800476c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004760:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	68db      	ldr	r3, [r3, #12]
 8004766:	68fa      	ldr	r2, [r7, #12]
 8004768:	4313      	orrs	r3, r2
 800476a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	695b      	ldr	r3, [r3, #20]
 8004776:	4313      	orrs	r3, r2
 8004778:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	68fa      	ldr	r2, [r7, #12]
 800477e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	689a      	ldr	r2, [r3, #8]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	681a      	ldr	r2, [r3, #0]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	4a10      	ldr	r2, [pc, #64]	@ (80047d4 <TIM_Base_SetConfig+0x12c>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d003      	beq.n	80047a0 <TIM_Base_SetConfig+0xf8>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	4a12      	ldr	r2, [pc, #72]	@ (80047e4 <TIM_Base_SetConfig+0x13c>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d103      	bne.n	80047a8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	691a      	ldr	r2, [r3, #16]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2201      	movs	r2, #1
 80047ac:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	691b      	ldr	r3, [r3, #16]
 80047b2:	f003 0301 	and.w	r3, r3, #1
 80047b6:	2b01      	cmp	r3, #1
 80047b8:	d105      	bne.n	80047c6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	691b      	ldr	r3, [r3, #16]
 80047be:	f023 0201 	bic.w	r2, r3, #1
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	611a      	str	r2, [r3, #16]
  }
}
 80047c6:	bf00      	nop
 80047c8:	3714      	adds	r7, #20
 80047ca:	46bd      	mov	sp, r7
 80047cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d0:	4770      	bx	lr
 80047d2:	bf00      	nop
 80047d4:	40010000 	.word	0x40010000
 80047d8:	40000400 	.word	0x40000400
 80047dc:	40000800 	.word	0x40000800
 80047e0:	40000c00 	.word	0x40000c00
 80047e4:	40010400 	.word	0x40010400
 80047e8:	40014000 	.word	0x40014000
 80047ec:	40014400 	.word	0x40014400
 80047f0:	40014800 	.word	0x40014800
 80047f4:	40001800 	.word	0x40001800
 80047f8:	40001c00 	.word	0x40001c00
 80047fc:	40002000 	.word	0x40002000

08004800 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004800:	b480      	push	{r7}
 8004802:	b087      	sub	sp, #28
 8004804:	af00      	add	r7, sp, #0
 8004806:	60f8      	str	r0, [r7, #12]
 8004808:	60b9      	str	r1, [r7, #8]
 800480a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	6a1b      	ldr	r3, [r3, #32]
 8004810:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	6a1b      	ldr	r3, [r3, #32]
 8004816:	f023 0201 	bic.w	r2, r3, #1
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	699b      	ldr	r3, [r3, #24]
 8004822:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800482a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	011b      	lsls	r3, r3, #4
 8004830:	693a      	ldr	r2, [r7, #16]
 8004832:	4313      	orrs	r3, r2
 8004834:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	f023 030a 	bic.w	r3, r3, #10
 800483c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800483e:	697a      	ldr	r2, [r7, #20]
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	4313      	orrs	r3, r2
 8004844:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	693a      	ldr	r2, [r7, #16]
 800484a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	697a      	ldr	r2, [r7, #20]
 8004850:	621a      	str	r2, [r3, #32]
}
 8004852:	bf00      	nop
 8004854:	371c      	adds	r7, #28
 8004856:	46bd      	mov	sp, r7
 8004858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485c:	4770      	bx	lr

0800485e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800485e:	b480      	push	{r7}
 8004860:	b087      	sub	sp, #28
 8004862:	af00      	add	r7, sp, #0
 8004864:	60f8      	str	r0, [r7, #12]
 8004866:	60b9      	str	r1, [r7, #8]
 8004868:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	6a1b      	ldr	r3, [r3, #32]
 800486e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	6a1b      	ldr	r3, [r3, #32]
 8004874:	f023 0210 	bic.w	r2, r3, #16
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	699b      	ldr	r3, [r3, #24]
 8004880:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004888:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	031b      	lsls	r3, r3, #12
 800488e:	693a      	ldr	r2, [r7, #16]
 8004890:	4313      	orrs	r3, r2
 8004892:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004894:	697b      	ldr	r3, [r7, #20]
 8004896:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800489a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	011b      	lsls	r3, r3, #4
 80048a0:	697a      	ldr	r2, [r7, #20]
 80048a2:	4313      	orrs	r3, r2
 80048a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	693a      	ldr	r2, [r7, #16]
 80048aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	697a      	ldr	r2, [r7, #20]
 80048b0:	621a      	str	r2, [r3, #32]
}
 80048b2:	bf00      	nop
 80048b4:	371c      	adds	r7, #28
 80048b6:	46bd      	mov	sp, r7
 80048b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048bc:	4770      	bx	lr

080048be <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80048be:	b480      	push	{r7}
 80048c0:	b085      	sub	sp, #20
 80048c2:	af00      	add	r7, sp, #0
 80048c4:	6078      	str	r0, [r7, #4]
 80048c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	689b      	ldr	r3, [r3, #8]
 80048cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80048d6:	683a      	ldr	r2, [r7, #0]
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	4313      	orrs	r3, r2
 80048dc:	f043 0307 	orr.w	r3, r3, #7
 80048e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	68fa      	ldr	r2, [r7, #12]
 80048e6:	609a      	str	r2, [r3, #8]
}
 80048e8:	bf00      	nop
 80048ea:	3714      	adds	r7, #20
 80048ec:	46bd      	mov	sp, r7
 80048ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f2:	4770      	bx	lr

080048f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b087      	sub	sp, #28
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	60f8      	str	r0, [r7, #12]
 80048fc:	60b9      	str	r1, [r7, #8]
 80048fe:	607a      	str	r2, [r7, #4]
 8004900:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	689b      	ldr	r3, [r3, #8]
 8004906:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800490e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	021a      	lsls	r2, r3, #8
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	431a      	orrs	r2, r3
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	4313      	orrs	r3, r2
 800491c:	697a      	ldr	r2, [r7, #20]
 800491e:	4313      	orrs	r3, r2
 8004920:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	697a      	ldr	r2, [r7, #20]
 8004926:	609a      	str	r2, [r3, #8]
}
 8004928:	bf00      	nop
 800492a:	371c      	adds	r7, #28
 800492c:	46bd      	mov	sp, r7
 800492e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004932:	4770      	bx	lr

08004934 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004934:	b480      	push	{r7}
 8004936:	b085      	sub	sp, #20
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
 800493c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004944:	2b01      	cmp	r3, #1
 8004946:	d101      	bne.n	800494c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004948:	2302      	movs	r3, #2
 800494a:	e05a      	b.n	8004a02 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2201      	movs	r2, #1
 8004950:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2202      	movs	r2, #2
 8004958:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	689b      	ldr	r3, [r3, #8]
 800496a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004972:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	68fa      	ldr	r2, [r7, #12]
 800497a:	4313      	orrs	r3, r2
 800497c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	68fa      	ldr	r2, [r7, #12]
 8004984:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a21      	ldr	r2, [pc, #132]	@ (8004a10 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d022      	beq.n	80049d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004998:	d01d      	beq.n	80049d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a1d      	ldr	r2, [pc, #116]	@ (8004a14 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d018      	beq.n	80049d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a1b      	ldr	r2, [pc, #108]	@ (8004a18 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d013      	beq.n	80049d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a1a      	ldr	r2, [pc, #104]	@ (8004a1c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d00e      	beq.n	80049d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a18      	ldr	r2, [pc, #96]	@ (8004a20 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d009      	beq.n	80049d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a17      	ldr	r2, [pc, #92]	@ (8004a24 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d004      	beq.n	80049d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a15      	ldr	r2, [pc, #84]	@ (8004a28 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d10c      	bne.n	80049f0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80049dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	68ba      	ldr	r2, [r7, #8]
 80049e4:	4313      	orrs	r3, r2
 80049e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	68ba      	ldr	r2, [r7, #8]
 80049ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2201      	movs	r2, #1
 80049f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2200      	movs	r2, #0
 80049fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004a00:	2300      	movs	r3, #0
}
 8004a02:	4618      	mov	r0, r3
 8004a04:	3714      	adds	r7, #20
 8004a06:	46bd      	mov	sp, r7
 8004a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0c:	4770      	bx	lr
 8004a0e:	bf00      	nop
 8004a10:	40010000 	.word	0x40010000
 8004a14:	40000400 	.word	0x40000400
 8004a18:	40000800 	.word	0x40000800
 8004a1c:	40000c00 	.word	0x40000c00
 8004a20:	40010400 	.word	0x40010400
 8004a24:	40014000 	.word	0x40014000
 8004a28:	40001800 	.word	0x40001800

08004a2c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b082      	sub	sp, #8
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d101      	bne.n	8004a3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	e042      	b.n	8004ac4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a44:	b2db      	uxtb	r3, r3
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d106      	bne.n	8004a58 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f7fd f932 	bl	8001cbc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2224      	movs	r2, #36	@ 0x24
 8004a5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	68da      	ldr	r2, [r3, #12]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004a6e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004a70:	6878      	ldr	r0, [r7, #4]
 8004a72:	f000 fa09 	bl	8004e88 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	691a      	ldr	r2, [r3, #16]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004a84:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	695a      	ldr	r2, [r3, #20]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004a94:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	68da      	ldr	r2, [r3, #12]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004aa4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2220      	movs	r2, #32
 8004ab0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2220      	movs	r2, #32
 8004ab8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004ac2:	2300      	movs	r3, #0
}
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	3708      	adds	r7, #8
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bd80      	pop	{r7, pc}

08004acc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b08a      	sub	sp, #40	@ 0x28
 8004ad0:	af02      	add	r7, sp, #8
 8004ad2:	60f8      	str	r0, [r7, #12]
 8004ad4:	60b9      	str	r1, [r7, #8]
 8004ad6:	603b      	str	r3, [r7, #0]
 8004ad8:	4613      	mov	r3, r2
 8004ada:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004adc:	2300      	movs	r3, #0
 8004ade:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ae6:	b2db      	uxtb	r3, r3
 8004ae8:	2b20      	cmp	r3, #32
 8004aea:	d175      	bne.n	8004bd8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d002      	beq.n	8004af8 <HAL_UART_Transmit+0x2c>
 8004af2:	88fb      	ldrh	r3, [r7, #6]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d101      	bne.n	8004afc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004af8:	2301      	movs	r3, #1
 8004afa:	e06e      	b.n	8004bda <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	2200      	movs	r2, #0
 8004b00:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2221      	movs	r2, #33	@ 0x21
 8004b06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004b0a:	f7fd f9f1 	bl	8001ef0 <HAL_GetTick>
 8004b0e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	88fa      	ldrh	r2, [r7, #6]
 8004b14:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	88fa      	ldrh	r2, [r7, #6]
 8004b1a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	689b      	ldr	r3, [r3, #8]
 8004b20:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b24:	d108      	bne.n	8004b38 <HAL_UART_Transmit+0x6c>
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	691b      	ldr	r3, [r3, #16]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d104      	bne.n	8004b38 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	61bb      	str	r3, [r7, #24]
 8004b36:	e003      	b.n	8004b40 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004b40:	e02e      	b.n	8004ba0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	9300      	str	r3, [sp, #0]
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	2180      	movs	r1, #128	@ 0x80
 8004b4c:	68f8      	ldr	r0, [r7, #12]
 8004b4e:	f000 f8df 	bl	8004d10 <UART_WaitOnFlagUntilTimeout>
 8004b52:	4603      	mov	r3, r0
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d005      	beq.n	8004b64 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	2220      	movs	r2, #32
 8004b5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004b60:	2303      	movs	r3, #3
 8004b62:	e03a      	b.n	8004bda <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004b64:	69fb      	ldr	r3, [r7, #28]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d10b      	bne.n	8004b82 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004b6a:	69bb      	ldr	r3, [r7, #24]
 8004b6c:	881b      	ldrh	r3, [r3, #0]
 8004b6e:	461a      	mov	r2, r3
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b78:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004b7a:	69bb      	ldr	r3, [r7, #24]
 8004b7c:	3302      	adds	r3, #2
 8004b7e:	61bb      	str	r3, [r7, #24]
 8004b80:	e007      	b.n	8004b92 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004b82:	69fb      	ldr	r3, [r7, #28]
 8004b84:	781a      	ldrb	r2, [r3, #0]
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004b8c:	69fb      	ldr	r3, [r7, #28]
 8004b8e:	3301      	adds	r3, #1
 8004b90:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004b96:	b29b      	uxth	r3, r3
 8004b98:	3b01      	subs	r3, #1
 8004b9a:	b29a      	uxth	r2, r3
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004ba4:	b29b      	uxth	r3, r3
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d1cb      	bne.n	8004b42 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	9300      	str	r3, [sp, #0]
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	2140      	movs	r1, #64	@ 0x40
 8004bb4:	68f8      	ldr	r0, [r7, #12]
 8004bb6:	f000 f8ab 	bl	8004d10 <UART_WaitOnFlagUntilTimeout>
 8004bba:	4603      	mov	r3, r0
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d005      	beq.n	8004bcc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	2220      	movs	r2, #32
 8004bc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004bc8:	2303      	movs	r3, #3
 8004bca:	e006      	b.n	8004bda <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	2220      	movs	r2, #32
 8004bd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	e000      	b.n	8004bda <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004bd8:	2302      	movs	r3, #2
  }
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	3720      	adds	r7, #32
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}

08004be2 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004be2:	b580      	push	{r7, lr}
 8004be4:	b08a      	sub	sp, #40	@ 0x28
 8004be6:	af02      	add	r7, sp, #8
 8004be8:	60f8      	str	r0, [r7, #12]
 8004bea:	60b9      	str	r1, [r7, #8]
 8004bec:	603b      	str	r3, [r7, #0]
 8004bee:	4613      	mov	r3, r2
 8004bf0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004bfc:	b2db      	uxtb	r3, r3
 8004bfe:	2b20      	cmp	r3, #32
 8004c00:	f040 8081 	bne.w	8004d06 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d002      	beq.n	8004c10 <HAL_UART_Receive+0x2e>
 8004c0a:	88fb      	ldrh	r3, [r7, #6]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d101      	bne.n	8004c14 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004c10:	2301      	movs	r3, #1
 8004c12:	e079      	b.n	8004d08 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2200      	movs	r2, #0
 8004c18:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2222      	movs	r2, #34	@ 0x22
 8004c1e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	2200      	movs	r2, #0
 8004c26:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004c28:	f7fd f962 	bl	8001ef0 <HAL_GetTick>
 8004c2c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	88fa      	ldrh	r2, [r7, #6]
 8004c32:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	88fa      	ldrh	r2, [r7, #6]
 8004c38:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	689b      	ldr	r3, [r3, #8]
 8004c3e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c42:	d108      	bne.n	8004c56 <HAL_UART_Receive+0x74>
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	691b      	ldr	r3, [r3, #16]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d104      	bne.n	8004c56 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	61bb      	str	r3, [r7, #24]
 8004c54:	e003      	b.n	8004c5e <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004c5e:	e047      	b.n	8004cf0 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	9300      	str	r3, [sp, #0]
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	2200      	movs	r2, #0
 8004c68:	2120      	movs	r1, #32
 8004c6a:	68f8      	ldr	r0, [r7, #12]
 8004c6c:	f000 f850 	bl	8004d10 <UART_WaitOnFlagUntilTimeout>
 8004c70:	4603      	mov	r3, r0
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d005      	beq.n	8004c82 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	2220      	movs	r2, #32
 8004c7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8004c7e:	2303      	movs	r3, #3
 8004c80:	e042      	b.n	8004d08 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8004c82:	69fb      	ldr	r3, [r7, #28]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d10c      	bne.n	8004ca2 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	b29b      	uxth	r3, r3
 8004c90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c94:	b29a      	uxth	r2, r3
 8004c96:	69bb      	ldr	r3, [r7, #24]
 8004c98:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004c9a:	69bb      	ldr	r3, [r7, #24]
 8004c9c:	3302      	adds	r3, #2
 8004c9e:	61bb      	str	r3, [r7, #24]
 8004ca0:	e01f      	b.n	8004ce2 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	689b      	ldr	r3, [r3, #8]
 8004ca6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004caa:	d007      	beq.n	8004cbc <HAL_UART_Receive+0xda>
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d10a      	bne.n	8004cca <HAL_UART_Receive+0xe8>
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	691b      	ldr	r3, [r3, #16]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d106      	bne.n	8004cca <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	b2da      	uxtb	r2, r3
 8004cc4:	69fb      	ldr	r3, [r7, #28]
 8004cc6:	701a      	strb	r2, [r3, #0]
 8004cc8:	e008      	b.n	8004cdc <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	b2db      	uxtb	r3, r3
 8004cd2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004cd6:	b2da      	uxtb	r2, r3
 8004cd8:	69fb      	ldr	r3, [r7, #28]
 8004cda:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8004cdc:	69fb      	ldr	r3, [r7, #28]
 8004cde:	3301      	adds	r3, #1
 8004ce0:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004ce6:	b29b      	uxth	r3, r3
 8004ce8:	3b01      	subs	r3, #1
 8004cea:	b29a      	uxth	r2, r3
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004cf4:	b29b      	uxth	r3, r3
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d1b2      	bne.n	8004c60 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	2220      	movs	r2, #32
 8004cfe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8004d02:	2300      	movs	r3, #0
 8004d04:	e000      	b.n	8004d08 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8004d06:	2302      	movs	r3, #2
  }
}
 8004d08:	4618      	mov	r0, r3
 8004d0a:	3720      	adds	r7, #32
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	bd80      	pop	{r7, pc}

08004d10 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b086      	sub	sp, #24
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	60f8      	str	r0, [r7, #12]
 8004d18:	60b9      	str	r1, [r7, #8]
 8004d1a:	603b      	str	r3, [r7, #0]
 8004d1c:	4613      	mov	r3, r2
 8004d1e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d20:	e03b      	b.n	8004d9a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d22:	6a3b      	ldr	r3, [r7, #32]
 8004d24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d28:	d037      	beq.n	8004d9a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d2a:	f7fd f8e1 	bl	8001ef0 <HAL_GetTick>
 8004d2e:	4602      	mov	r2, r0
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	1ad3      	subs	r3, r2, r3
 8004d34:	6a3a      	ldr	r2, [r7, #32]
 8004d36:	429a      	cmp	r2, r3
 8004d38:	d302      	bcc.n	8004d40 <UART_WaitOnFlagUntilTimeout+0x30>
 8004d3a:	6a3b      	ldr	r3, [r7, #32]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d101      	bne.n	8004d44 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004d40:	2303      	movs	r3, #3
 8004d42:	e03a      	b.n	8004dba <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	68db      	ldr	r3, [r3, #12]
 8004d4a:	f003 0304 	and.w	r3, r3, #4
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d023      	beq.n	8004d9a <UART_WaitOnFlagUntilTimeout+0x8a>
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	2b80      	cmp	r3, #128	@ 0x80
 8004d56:	d020      	beq.n	8004d9a <UART_WaitOnFlagUntilTimeout+0x8a>
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	2b40      	cmp	r3, #64	@ 0x40
 8004d5c:	d01d      	beq.n	8004d9a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f003 0308 	and.w	r3, r3, #8
 8004d68:	2b08      	cmp	r3, #8
 8004d6a:	d116      	bne.n	8004d9a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	617b      	str	r3, [r7, #20]
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	617b      	str	r3, [r7, #20]
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	617b      	str	r3, [r7, #20]
 8004d80:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004d82:	68f8      	ldr	r0, [r7, #12]
 8004d84:	f000 f81d 	bl	8004dc2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	2208      	movs	r2, #8
 8004d8c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2200      	movs	r2, #0
 8004d92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004d96:	2301      	movs	r3, #1
 8004d98:	e00f      	b.n	8004dba <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	681a      	ldr	r2, [r3, #0]
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	4013      	ands	r3, r2
 8004da4:	68ba      	ldr	r2, [r7, #8]
 8004da6:	429a      	cmp	r2, r3
 8004da8:	bf0c      	ite	eq
 8004daa:	2301      	moveq	r3, #1
 8004dac:	2300      	movne	r3, #0
 8004dae:	b2db      	uxtb	r3, r3
 8004db0:	461a      	mov	r2, r3
 8004db2:	79fb      	ldrb	r3, [r7, #7]
 8004db4:	429a      	cmp	r2, r3
 8004db6:	d0b4      	beq.n	8004d22 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004db8:	2300      	movs	r3, #0
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	3718      	adds	r7, #24
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}

08004dc2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004dc2:	b480      	push	{r7}
 8004dc4:	b095      	sub	sp, #84	@ 0x54
 8004dc6:	af00      	add	r7, sp, #0
 8004dc8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	330c      	adds	r3, #12
 8004dd0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004dd4:	e853 3f00 	ldrex	r3, [r3]
 8004dd8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004dda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ddc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004de0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	330c      	adds	r3, #12
 8004de8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004dea:	643a      	str	r2, [r7, #64]	@ 0x40
 8004dec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dee:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004df0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004df2:	e841 2300 	strex	r3, r2, [r1]
 8004df6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004df8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d1e5      	bne.n	8004dca <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	3314      	adds	r3, #20
 8004e04:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e06:	6a3b      	ldr	r3, [r7, #32]
 8004e08:	e853 3f00 	ldrex	r3, [r3]
 8004e0c:	61fb      	str	r3, [r7, #28]
   return(result);
 8004e0e:	69fb      	ldr	r3, [r7, #28]
 8004e10:	f023 0301 	bic.w	r3, r3, #1
 8004e14:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	3314      	adds	r3, #20
 8004e1c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004e1e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004e20:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e22:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004e24:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004e26:	e841 2300 	strex	r3, r2, [r1]
 8004e2a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004e2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d1e5      	bne.n	8004dfe <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e36:	2b01      	cmp	r3, #1
 8004e38:	d119      	bne.n	8004e6e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	330c      	adds	r3, #12
 8004e40:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	e853 3f00 	ldrex	r3, [r3]
 8004e48:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	f023 0310 	bic.w	r3, r3, #16
 8004e50:	647b      	str	r3, [r7, #68]	@ 0x44
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	330c      	adds	r3, #12
 8004e58:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004e5a:	61ba      	str	r2, [r7, #24]
 8004e5c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e5e:	6979      	ldr	r1, [r7, #20]
 8004e60:	69ba      	ldr	r2, [r7, #24]
 8004e62:	e841 2300 	strex	r3, r2, [r1]
 8004e66:	613b      	str	r3, [r7, #16]
   return(result);
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d1e5      	bne.n	8004e3a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2220      	movs	r2, #32
 8004e72:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004e7c:	bf00      	nop
 8004e7e:	3754      	adds	r7, #84	@ 0x54
 8004e80:	46bd      	mov	sp, r7
 8004e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e86:	4770      	bx	lr

08004e88 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e8c:	b0c0      	sub	sp, #256	@ 0x100
 8004e8e:	af00      	add	r7, sp, #0
 8004e90:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	691b      	ldr	r3, [r3, #16]
 8004e9c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004ea0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ea4:	68d9      	ldr	r1, [r3, #12]
 8004ea6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004eaa:	681a      	ldr	r2, [r3, #0]
 8004eac:	ea40 0301 	orr.w	r3, r0, r1
 8004eb0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004eb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004eb6:	689a      	ldr	r2, [r3, #8]
 8004eb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ebc:	691b      	ldr	r3, [r3, #16]
 8004ebe:	431a      	orrs	r2, r3
 8004ec0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ec4:	695b      	ldr	r3, [r3, #20]
 8004ec6:	431a      	orrs	r2, r3
 8004ec8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ecc:	69db      	ldr	r3, [r3, #28]
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004ed4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	68db      	ldr	r3, [r3, #12]
 8004edc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004ee0:	f021 010c 	bic.w	r1, r1, #12
 8004ee4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ee8:	681a      	ldr	r2, [r3, #0]
 8004eea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004eee:	430b      	orrs	r3, r1
 8004ef0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004ef2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	695b      	ldr	r3, [r3, #20]
 8004efa:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004efe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f02:	6999      	ldr	r1, [r3, #24]
 8004f04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f08:	681a      	ldr	r2, [r3, #0]
 8004f0a:	ea40 0301 	orr.w	r3, r0, r1
 8004f0e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004f10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f14:	681a      	ldr	r2, [r3, #0]
 8004f16:	4b8f      	ldr	r3, [pc, #572]	@ (8005154 <UART_SetConfig+0x2cc>)
 8004f18:	429a      	cmp	r2, r3
 8004f1a:	d005      	beq.n	8004f28 <UART_SetConfig+0xa0>
 8004f1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f20:	681a      	ldr	r2, [r3, #0]
 8004f22:	4b8d      	ldr	r3, [pc, #564]	@ (8005158 <UART_SetConfig+0x2d0>)
 8004f24:	429a      	cmp	r2, r3
 8004f26:	d104      	bne.n	8004f32 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004f28:	f7fe fd56 	bl	80039d8 <HAL_RCC_GetPCLK2Freq>
 8004f2c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004f30:	e003      	b.n	8004f3a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004f32:	f7fe fd3d 	bl	80039b0 <HAL_RCC_GetPCLK1Freq>
 8004f36:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f3e:	69db      	ldr	r3, [r3, #28]
 8004f40:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004f44:	f040 810c 	bne.w	8005160 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004f48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004f52:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004f56:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004f5a:	4622      	mov	r2, r4
 8004f5c:	462b      	mov	r3, r5
 8004f5e:	1891      	adds	r1, r2, r2
 8004f60:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004f62:	415b      	adcs	r3, r3
 8004f64:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004f66:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004f6a:	4621      	mov	r1, r4
 8004f6c:	eb12 0801 	adds.w	r8, r2, r1
 8004f70:	4629      	mov	r1, r5
 8004f72:	eb43 0901 	adc.w	r9, r3, r1
 8004f76:	f04f 0200 	mov.w	r2, #0
 8004f7a:	f04f 0300 	mov.w	r3, #0
 8004f7e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004f82:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004f86:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004f8a:	4690      	mov	r8, r2
 8004f8c:	4699      	mov	r9, r3
 8004f8e:	4623      	mov	r3, r4
 8004f90:	eb18 0303 	adds.w	r3, r8, r3
 8004f94:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004f98:	462b      	mov	r3, r5
 8004f9a:	eb49 0303 	adc.w	r3, r9, r3
 8004f9e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004fa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004fae:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004fb2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004fb6:	460b      	mov	r3, r1
 8004fb8:	18db      	adds	r3, r3, r3
 8004fba:	653b      	str	r3, [r7, #80]	@ 0x50
 8004fbc:	4613      	mov	r3, r2
 8004fbe:	eb42 0303 	adc.w	r3, r2, r3
 8004fc2:	657b      	str	r3, [r7, #84]	@ 0x54
 8004fc4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004fc8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004fcc:	f7fb fe00 	bl	8000bd0 <__aeabi_uldivmod>
 8004fd0:	4602      	mov	r2, r0
 8004fd2:	460b      	mov	r3, r1
 8004fd4:	4b61      	ldr	r3, [pc, #388]	@ (800515c <UART_SetConfig+0x2d4>)
 8004fd6:	fba3 2302 	umull	r2, r3, r3, r2
 8004fda:	095b      	lsrs	r3, r3, #5
 8004fdc:	011c      	lsls	r4, r3, #4
 8004fde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004fe8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004fec:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004ff0:	4642      	mov	r2, r8
 8004ff2:	464b      	mov	r3, r9
 8004ff4:	1891      	adds	r1, r2, r2
 8004ff6:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004ff8:	415b      	adcs	r3, r3
 8004ffa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ffc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005000:	4641      	mov	r1, r8
 8005002:	eb12 0a01 	adds.w	sl, r2, r1
 8005006:	4649      	mov	r1, r9
 8005008:	eb43 0b01 	adc.w	fp, r3, r1
 800500c:	f04f 0200 	mov.w	r2, #0
 8005010:	f04f 0300 	mov.w	r3, #0
 8005014:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005018:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800501c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005020:	4692      	mov	sl, r2
 8005022:	469b      	mov	fp, r3
 8005024:	4643      	mov	r3, r8
 8005026:	eb1a 0303 	adds.w	r3, sl, r3
 800502a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800502e:	464b      	mov	r3, r9
 8005030:	eb4b 0303 	adc.w	r3, fp, r3
 8005034:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005038:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	2200      	movs	r2, #0
 8005040:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005044:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005048:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800504c:	460b      	mov	r3, r1
 800504e:	18db      	adds	r3, r3, r3
 8005050:	643b      	str	r3, [r7, #64]	@ 0x40
 8005052:	4613      	mov	r3, r2
 8005054:	eb42 0303 	adc.w	r3, r2, r3
 8005058:	647b      	str	r3, [r7, #68]	@ 0x44
 800505a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800505e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005062:	f7fb fdb5 	bl	8000bd0 <__aeabi_uldivmod>
 8005066:	4602      	mov	r2, r0
 8005068:	460b      	mov	r3, r1
 800506a:	4611      	mov	r1, r2
 800506c:	4b3b      	ldr	r3, [pc, #236]	@ (800515c <UART_SetConfig+0x2d4>)
 800506e:	fba3 2301 	umull	r2, r3, r3, r1
 8005072:	095b      	lsrs	r3, r3, #5
 8005074:	2264      	movs	r2, #100	@ 0x64
 8005076:	fb02 f303 	mul.w	r3, r2, r3
 800507a:	1acb      	subs	r3, r1, r3
 800507c:	00db      	lsls	r3, r3, #3
 800507e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005082:	4b36      	ldr	r3, [pc, #216]	@ (800515c <UART_SetConfig+0x2d4>)
 8005084:	fba3 2302 	umull	r2, r3, r3, r2
 8005088:	095b      	lsrs	r3, r3, #5
 800508a:	005b      	lsls	r3, r3, #1
 800508c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005090:	441c      	add	r4, r3
 8005092:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005096:	2200      	movs	r2, #0
 8005098:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800509c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80050a0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80050a4:	4642      	mov	r2, r8
 80050a6:	464b      	mov	r3, r9
 80050a8:	1891      	adds	r1, r2, r2
 80050aa:	63b9      	str	r1, [r7, #56]	@ 0x38
 80050ac:	415b      	adcs	r3, r3
 80050ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80050b0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80050b4:	4641      	mov	r1, r8
 80050b6:	1851      	adds	r1, r2, r1
 80050b8:	6339      	str	r1, [r7, #48]	@ 0x30
 80050ba:	4649      	mov	r1, r9
 80050bc:	414b      	adcs	r3, r1
 80050be:	637b      	str	r3, [r7, #52]	@ 0x34
 80050c0:	f04f 0200 	mov.w	r2, #0
 80050c4:	f04f 0300 	mov.w	r3, #0
 80050c8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80050cc:	4659      	mov	r1, fp
 80050ce:	00cb      	lsls	r3, r1, #3
 80050d0:	4651      	mov	r1, sl
 80050d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80050d6:	4651      	mov	r1, sl
 80050d8:	00ca      	lsls	r2, r1, #3
 80050da:	4610      	mov	r0, r2
 80050dc:	4619      	mov	r1, r3
 80050de:	4603      	mov	r3, r0
 80050e0:	4642      	mov	r2, r8
 80050e2:	189b      	adds	r3, r3, r2
 80050e4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80050e8:	464b      	mov	r3, r9
 80050ea:	460a      	mov	r2, r1
 80050ec:	eb42 0303 	adc.w	r3, r2, r3
 80050f0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80050f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	2200      	movs	r2, #0
 80050fc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005100:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005104:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005108:	460b      	mov	r3, r1
 800510a:	18db      	adds	r3, r3, r3
 800510c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800510e:	4613      	mov	r3, r2
 8005110:	eb42 0303 	adc.w	r3, r2, r3
 8005114:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005116:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800511a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800511e:	f7fb fd57 	bl	8000bd0 <__aeabi_uldivmod>
 8005122:	4602      	mov	r2, r0
 8005124:	460b      	mov	r3, r1
 8005126:	4b0d      	ldr	r3, [pc, #52]	@ (800515c <UART_SetConfig+0x2d4>)
 8005128:	fba3 1302 	umull	r1, r3, r3, r2
 800512c:	095b      	lsrs	r3, r3, #5
 800512e:	2164      	movs	r1, #100	@ 0x64
 8005130:	fb01 f303 	mul.w	r3, r1, r3
 8005134:	1ad3      	subs	r3, r2, r3
 8005136:	00db      	lsls	r3, r3, #3
 8005138:	3332      	adds	r3, #50	@ 0x32
 800513a:	4a08      	ldr	r2, [pc, #32]	@ (800515c <UART_SetConfig+0x2d4>)
 800513c:	fba2 2303 	umull	r2, r3, r2, r3
 8005140:	095b      	lsrs	r3, r3, #5
 8005142:	f003 0207 	and.w	r2, r3, #7
 8005146:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4422      	add	r2, r4
 800514e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005150:	e106      	b.n	8005360 <UART_SetConfig+0x4d8>
 8005152:	bf00      	nop
 8005154:	40011000 	.word	0x40011000
 8005158:	40011400 	.word	0x40011400
 800515c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005160:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005164:	2200      	movs	r2, #0
 8005166:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800516a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800516e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005172:	4642      	mov	r2, r8
 8005174:	464b      	mov	r3, r9
 8005176:	1891      	adds	r1, r2, r2
 8005178:	6239      	str	r1, [r7, #32]
 800517a:	415b      	adcs	r3, r3
 800517c:	627b      	str	r3, [r7, #36]	@ 0x24
 800517e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005182:	4641      	mov	r1, r8
 8005184:	1854      	adds	r4, r2, r1
 8005186:	4649      	mov	r1, r9
 8005188:	eb43 0501 	adc.w	r5, r3, r1
 800518c:	f04f 0200 	mov.w	r2, #0
 8005190:	f04f 0300 	mov.w	r3, #0
 8005194:	00eb      	lsls	r3, r5, #3
 8005196:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800519a:	00e2      	lsls	r2, r4, #3
 800519c:	4614      	mov	r4, r2
 800519e:	461d      	mov	r5, r3
 80051a0:	4643      	mov	r3, r8
 80051a2:	18e3      	adds	r3, r4, r3
 80051a4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80051a8:	464b      	mov	r3, r9
 80051aa:	eb45 0303 	adc.w	r3, r5, r3
 80051ae:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80051b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	2200      	movs	r2, #0
 80051ba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80051be:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80051c2:	f04f 0200 	mov.w	r2, #0
 80051c6:	f04f 0300 	mov.w	r3, #0
 80051ca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80051ce:	4629      	mov	r1, r5
 80051d0:	008b      	lsls	r3, r1, #2
 80051d2:	4621      	mov	r1, r4
 80051d4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80051d8:	4621      	mov	r1, r4
 80051da:	008a      	lsls	r2, r1, #2
 80051dc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80051e0:	f7fb fcf6 	bl	8000bd0 <__aeabi_uldivmod>
 80051e4:	4602      	mov	r2, r0
 80051e6:	460b      	mov	r3, r1
 80051e8:	4b60      	ldr	r3, [pc, #384]	@ (800536c <UART_SetConfig+0x4e4>)
 80051ea:	fba3 2302 	umull	r2, r3, r3, r2
 80051ee:	095b      	lsrs	r3, r3, #5
 80051f0:	011c      	lsls	r4, r3, #4
 80051f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80051f6:	2200      	movs	r2, #0
 80051f8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80051fc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005200:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005204:	4642      	mov	r2, r8
 8005206:	464b      	mov	r3, r9
 8005208:	1891      	adds	r1, r2, r2
 800520a:	61b9      	str	r1, [r7, #24]
 800520c:	415b      	adcs	r3, r3
 800520e:	61fb      	str	r3, [r7, #28]
 8005210:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005214:	4641      	mov	r1, r8
 8005216:	1851      	adds	r1, r2, r1
 8005218:	6139      	str	r1, [r7, #16]
 800521a:	4649      	mov	r1, r9
 800521c:	414b      	adcs	r3, r1
 800521e:	617b      	str	r3, [r7, #20]
 8005220:	f04f 0200 	mov.w	r2, #0
 8005224:	f04f 0300 	mov.w	r3, #0
 8005228:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800522c:	4659      	mov	r1, fp
 800522e:	00cb      	lsls	r3, r1, #3
 8005230:	4651      	mov	r1, sl
 8005232:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005236:	4651      	mov	r1, sl
 8005238:	00ca      	lsls	r2, r1, #3
 800523a:	4610      	mov	r0, r2
 800523c:	4619      	mov	r1, r3
 800523e:	4603      	mov	r3, r0
 8005240:	4642      	mov	r2, r8
 8005242:	189b      	adds	r3, r3, r2
 8005244:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005248:	464b      	mov	r3, r9
 800524a:	460a      	mov	r2, r1
 800524c:	eb42 0303 	adc.w	r3, r2, r3
 8005250:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005254:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	2200      	movs	r2, #0
 800525c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800525e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005260:	f04f 0200 	mov.w	r2, #0
 8005264:	f04f 0300 	mov.w	r3, #0
 8005268:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800526c:	4649      	mov	r1, r9
 800526e:	008b      	lsls	r3, r1, #2
 8005270:	4641      	mov	r1, r8
 8005272:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005276:	4641      	mov	r1, r8
 8005278:	008a      	lsls	r2, r1, #2
 800527a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800527e:	f7fb fca7 	bl	8000bd0 <__aeabi_uldivmod>
 8005282:	4602      	mov	r2, r0
 8005284:	460b      	mov	r3, r1
 8005286:	4611      	mov	r1, r2
 8005288:	4b38      	ldr	r3, [pc, #224]	@ (800536c <UART_SetConfig+0x4e4>)
 800528a:	fba3 2301 	umull	r2, r3, r3, r1
 800528e:	095b      	lsrs	r3, r3, #5
 8005290:	2264      	movs	r2, #100	@ 0x64
 8005292:	fb02 f303 	mul.w	r3, r2, r3
 8005296:	1acb      	subs	r3, r1, r3
 8005298:	011b      	lsls	r3, r3, #4
 800529a:	3332      	adds	r3, #50	@ 0x32
 800529c:	4a33      	ldr	r2, [pc, #204]	@ (800536c <UART_SetConfig+0x4e4>)
 800529e:	fba2 2303 	umull	r2, r3, r2, r3
 80052a2:	095b      	lsrs	r3, r3, #5
 80052a4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80052a8:	441c      	add	r4, r3
 80052aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80052ae:	2200      	movs	r2, #0
 80052b0:	673b      	str	r3, [r7, #112]	@ 0x70
 80052b2:	677a      	str	r2, [r7, #116]	@ 0x74
 80052b4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80052b8:	4642      	mov	r2, r8
 80052ba:	464b      	mov	r3, r9
 80052bc:	1891      	adds	r1, r2, r2
 80052be:	60b9      	str	r1, [r7, #8]
 80052c0:	415b      	adcs	r3, r3
 80052c2:	60fb      	str	r3, [r7, #12]
 80052c4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80052c8:	4641      	mov	r1, r8
 80052ca:	1851      	adds	r1, r2, r1
 80052cc:	6039      	str	r1, [r7, #0]
 80052ce:	4649      	mov	r1, r9
 80052d0:	414b      	adcs	r3, r1
 80052d2:	607b      	str	r3, [r7, #4]
 80052d4:	f04f 0200 	mov.w	r2, #0
 80052d8:	f04f 0300 	mov.w	r3, #0
 80052dc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80052e0:	4659      	mov	r1, fp
 80052e2:	00cb      	lsls	r3, r1, #3
 80052e4:	4651      	mov	r1, sl
 80052e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80052ea:	4651      	mov	r1, sl
 80052ec:	00ca      	lsls	r2, r1, #3
 80052ee:	4610      	mov	r0, r2
 80052f0:	4619      	mov	r1, r3
 80052f2:	4603      	mov	r3, r0
 80052f4:	4642      	mov	r2, r8
 80052f6:	189b      	adds	r3, r3, r2
 80052f8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80052fa:	464b      	mov	r3, r9
 80052fc:	460a      	mov	r2, r1
 80052fe:	eb42 0303 	adc.w	r3, r2, r3
 8005302:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005304:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005308:	685b      	ldr	r3, [r3, #4]
 800530a:	2200      	movs	r2, #0
 800530c:	663b      	str	r3, [r7, #96]	@ 0x60
 800530e:	667a      	str	r2, [r7, #100]	@ 0x64
 8005310:	f04f 0200 	mov.w	r2, #0
 8005314:	f04f 0300 	mov.w	r3, #0
 8005318:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800531c:	4649      	mov	r1, r9
 800531e:	008b      	lsls	r3, r1, #2
 8005320:	4641      	mov	r1, r8
 8005322:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005326:	4641      	mov	r1, r8
 8005328:	008a      	lsls	r2, r1, #2
 800532a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800532e:	f7fb fc4f 	bl	8000bd0 <__aeabi_uldivmod>
 8005332:	4602      	mov	r2, r0
 8005334:	460b      	mov	r3, r1
 8005336:	4b0d      	ldr	r3, [pc, #52]	@ (800536c <UART_SetConfig+0x4e4>)
 8005338:	fba3 1302 	umull	r1, r3, r3, r2
 800533c:	095b      	lsrs	r3, r3, #5
 800533e:	2164      	movs	r1, #100	@ 0x64
 8005340:	fb01 f303 	mul.w	r3, r1, r3
 8005344:	1ad3      	subs	r3, r2, r3
 8005346:	011b      	lsls	r3, r3, #4
 8005348:	3332      	adds	r3, #50	@ 0x32
 800534a:	4a08      	ldr	r2, [pc, #32]	@ (800536c <UART_SetConfig+0x4e4>)
 800534c:	fba2 2303 	umull	r2, r3, r2, r3
 8005350:	095b      	lsrs	r3, r3, #5
 8005352:	f003 020f 	and.w	r2, r3, #15
 8005356:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4422      	add	r2, r4
 800535e:	609a      	str	r2, [r3, #8]
}
 8005360:	bf00      	nop
 8005362:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005366:	46bd      	mov	sp, r7
 8005368:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800536c:	51eb851f 	.word	0x51eb851f

08005370 <asin>:
 8005370:	b538      	push	{r3, r4, r5, lr}
 8005372:	ed2d 8b02 	vpush	{d8}
 8005376:	ec55 4b10 	vmov	r4, r5, d0
 800537a:	f000 fa2d 	bl	80057d8 <__ieee754_asin>
 800537e:	4622      	mov	r2, r4
 8005380:	462b      	mov	r3, r5
 8005382:	4620      	mov	r0, r4
 8005384:	4629      	mov	r1, r5
 8005386:	eeb0 8a40 	vmov.f32	s16, s0
 800538a:	eef0 8a60 	vmov.f32	s17, s1
 800538e:	f7fb fb91 	bl	8000ab4 <__aeabi_dcmpun>
 8005392:	b9a8      	cbnz	r0, 80053c0 <asin+0x50>
 8005394:	ec45 4b10 	vmov	d0, r4, r5
 8005398:	f000 f820 	bl	80053dc <fabs>
 800539c:	4b0c      	ldr	r3, [pc, #48]	@ (80053d0 <asin+0x60>)
 800539e:	ec51 0b10 	vmov	r0, r1, d0
 80053a2:	2200      	movs	r2, #0
 80053a4:	f7fb fb7c 	bl	8000aa0 <__aeabi_dcmpgt>
 80053a8:	b150      	cbz	r0, 80053c0 <asin+0x50>
 80053aa:	f001 fdad 	bl	8006f08 <__errno>
 80053ae:	ecbd 8b02 	vpop	{d8}
 80053b2:	2321      	movs	r3, #33	@ 0x21
 80053b4:	6003      	str	r3, [r0, #0]
 80053b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80053ba:	4806      	ldr	r0, [pc, #24]	@ (80053d4 <asin+0x64>)
 80053bc:	f000 b880 	b.w	80054c0 <nan>
 80053c0:	eeb0 0a48 	vmov.f32	s0, s16
 80053c4:	eef0 0a68 	vmov.f32	s1, s17
 80053c8:	ecbd 8b02 	vpop	{d8}
 80053cc:	bd38      	pop	{r3, r4, r5, pc}
 80053ce:	bf00      	nop
 80053d0:	3ff00000 	.word	0x3ff00000
 80053d4:	08006fa8 	.word	0x08006fa8

080053d8 <atan2>:
 80053d8:	f000 bc02 	b.w	8005be0 <__ieee754_atan2>

080053dc <fabs>:
 80053dc:	ec51 0b10 	vmov	r0, r1, d0
 80053e0:	4602      	mov	r2, r0
 80053e2:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80053e6:	ec43 2b10 	vmov	d0, r2, r3
 80053ea:	4770      	bx	lr
 80053ec:	0000      	movs	r0, r0
	...

080053f0 <sin>:
 80053f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80053f2:	ec53 2b10 	vmov	r2, r3, d0
 80053f6:	4826      	ldr	r0, [pc, #152]	@ (8005490 <sin+0xa0>)
 80053f8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80053fc:	4281      	cmp	r1, r0
 80053fe:	d807      	bhi.n	8005410 <sin+0x20>
 8005400:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8005488 <sin+0x98>
 8005404:	2000      	movs	r0, #0
 8005406:	b005      	add	sp, #20
 8005408:	f85d eb04 	ldr.w	lr, [sp], #4
 800540c:	f000 b928 	b.w	8005660 <__kernel_sin>
 8005410:	4820      	ldr	r0, [pc, #128]	@ (8005494 <sin+0xa4>)
 8005412:	4281      	cmp	r1, r0
 8005414:	d908      	bls.n	8005428 <sin+0x38>
 8005416:	4610      	mov	r0, r2
 8005418:	4619      	mov	r1, r3
 800541a:	f7fa fef9 	bl	8000210 <__aeabi_dsub>
 800541e:	ec41 0b10 	vmov	d0, r0, r1
 8005422:	b005      	add	sp, #20
 8005424:	f85d fb04 	ldr.w	pc, [sp], #4
 8005428:	4668      	mov	r0, sp
 800542a:	f000 fca1 	bl	8005d70 <__ieee754_rem_pio2>
 800542e:	f000 0003 	and.w	r0, r0, #3
 8005432:	2801      	cmp	r0, #1
 8005434:	d00c      	beq.n	8005450 <sin+0x60>
 8005436:	2802      	cmp	r0, #2
 8005438:	d011      	beq.n	800545e <sin+0x6e>
 800543a:	b9e8      	cbnz	r0, 8005478 <sin+0x88>
 800543c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005440:	ed9d 0b00 	vldr	d0, [sp]
 8005444:	2001      	movs	r0, #1
 8005446:	f000 f90b 	bl	8005660 <__kernel_sin>
 800544a:	ec51 0b10 	vmov	r0, r1, d0
 800544e:	e7e6      	b.n	800541e <sin+0x2e>
 8005450:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005454:	ed9d 0b00 	vldr	d0, [sp]
 8005458:	f000 f83a 	bl	80054d0 <__kernel_cos>
 800545c:	e7f5      	b.n	800544a <sin+0x5a>
 800545e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005462:	ed9d 0b00 	vldr	d0, [sp]
 8005466:	2001      	movs	r0, #1
 8005468:	f000 f8fa 	bl	8005660 <__kernel_sin>
 800546c:	ec53 2b10 	vmov	r2, r3, d0
 8005470:	4610      	mov	r0, r2
 8005472:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8005476:	e7d2      	b.n	800541e <sin+0x2e>
 8005478:	ed9d 1b02 	vldr	d1, [sp, #8]
 800547c:	ed9d 0b00 	vldr	d0, [sp]
 8005480:	f000 f826 	bl	80054d0 <__kernel_cos>
 8005484:	e7f2      	b.n	800546c <sin+0x7c>
 8005486:	bf00      	nop
	...
 8005490:	3fe921fb 	.word	0x3fe921fb
 8005494:	7fefffff 	.word	0x7fefffff

08005498 <copysign>:
 8005498:	b082      	sub	sp, #8
 800549a:	ec51 0b10 	vmov	r0, r1, d0
 800549e:	ed8d 1b00 	vstr	d1, [sp]
 80054a2:	4602      	mov	r2, r0
 80054a4:	f021 4000 	bic.w	r0, r1, #2147483648	@ 0x80000000
 80054a8:	9901      	ldr	r1, [sp, #4]
 80054aa:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80054ae:	ea40 0301 	orr.w	r3, r0, r1
 80054b2:	ec43 2b10 	vmov	d0, r2, r3
 80054b6:	b002      	add	sp, #8
 80054b8:	4770      	bx	lr
 80054ba:	0000      	movs	r0, r0
 80054bc:	0000      	movs	r0, r0
	...

080054c0 <nan>:
 80054c0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80054c8 <nan+0x8>
 80054c4:	4770      	bx	lr
 80054c6:	bf00      	nop
 80054c8:	00000000 	.word	0x00000000
 80054cc:	7ff80000 	.word	0x7ff80000

080054d0 <__kernel_cos>:
 80054d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054d4:	ec57 6b10 	vmov	r6, r7, d0
 80054d8:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 80054dc:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 80054e0:	ed8d 1b00 	vstr	d1, [sp]
 80054e4:	d206      	bcs.n	80054f4 <__kernel_cos+0x24>
 80054e6:	4630      	mov	r0, r6
 80054e8:	4639      	mov	r1, r7
 80054ea:	f7fb faf9 	bl	8000ae0 <__aeabi_d2iz>
 80054ee:	2800      	cmp	r0, #0
 80054f0:	f000 8088 	beq.w	8005604 <__kernel_cos+0x134>
 80054f4:	4632      	mov	r2, r6
 80054f6:	463b      	mov	r3, r7
 80054f8:	4630      	mov	r0, r6
 80054fa:	4639      	mov	r1, r7
 80054fc:	f7fb f840 	bl	8000580 <__aeabi_dmul>
 8005500:	4b51      	ldr	r3, [pc, #324]	@ (8005648 <__kernel_cos+0x178>)
 8005502:	2200      	movs	r2, #0
 8005504:	4604      	mov	r4, r0
 8005506:	460d      	mov	r5, r1
 8005508:	f7fb f83a 	bl	8000580 <__aeabi_dmul>
 800550c:	a340      	add	r3, pc, #256	@ (adr r3, 8005610 <__kernel_cos+0x140>)
 800550e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005512:	4682      	mov	sl, r0
 8005514:	468b      	mov	fp, r1
 8005516:	4620      	mov	r0, r4
 8005518:	4629      	mov	r1, r5
 800551a:	f7fb f831 	bl	8000580 <__aeabi_dmul>
 800551e:	a33e      	add	r3, pc, #248	@ (adr r3, 8005618 <__kernel_cos+0x148>)
 8005520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005524:	f7fa fe76 	bl	8000214 <__adddf3>
 8005528:	4622      	mov	r2, r4
 800552a:	462b      	mov	r3, r5
 800552c:	f7fb f828 	bl	8000580 <__aeabi_dmul>
 8005530:	a33b      	add	r3, pc, #236	@ (adr r3, 8005620 <__kernel_cos+0x150>)
 8005532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005536:	f7fa fe6b 	bl	8000210 <__aeabi_dsub>
 800553a:	4622      	mov	r2, r4
 800553c:	462b      	mov	r3, r5
 800553e:	f7fb f81f 	bl	8000580 <__aeabi_dmul>
 8005542:	a339      	add	r3, pc, #228	@ (adr r3, 8005628 <__kernel_cos+0x158>)
 8005544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005548:	f7fa fe64 	bl	8000214 <__adddf3>
 800554c:	4622      	mov	r2, r4
 800554e:	462b      	mov	r3, r5
 8005550:	f7fb f816 	bl	8000580 <__aeabi_dmul>
 8005554:	a336      	add	r3, pc, #216	@ (adr r3, 8005630 <__kernel_cos+0x160>)
 8005556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800555a:	f7fa fe59 	bl	8000210 <__aeabi_dsub>
 800555e:	4622      	mov	r2, r4
 8005560:	462b      	mov	r3, r5
 8005562:	f7fb f80d 	bl	8000580 <__aeabi_dmul>
 8005566:	a334      	add	r3, pc, #208	@ (adr r3, 8005638 <__kernel_cos+0x168>)
 8005568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800556c:	f7fa fe52 	bl	8000214 <__adddf3>
 8005570:	4622      	mov	r2, r4
 8005572:	462b      	mov	r3, r5
 8005574:	f7fb f804 	bl	8000580 <__aeabi_dmul>
 8005578:	4622      	mov	r2, r4
 800557a:	462b      	mov	r3, r5
 800557c:	f7fb f800 	bl	8000580 <__aeabi_dmul>
 8005580:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005584:	4604      	mov	r4, r0
 8005586:	460d      	mov	r5, r1
 8005588:	4630      	mov	r0, r6
 800558a:	4639      	mov	r1, r7
 800558c:	f7fa fff8 	bl	8000580 <__aeabi_dmul>
 8005590:	460b      	mov	r3, r1
 8005592:	4602      	mov	r2, r0
 8005594:	4629      	mov	r1, r5
 8005596:	4620      	mov	r0, r4
 8005598:	f7fa fe3a 	bl	8000210 <__aeabi_dsub>
 800559c:	4b2b      	ldr	r3, [pc, #172]	@ (800564c <__kernel_cos+0x17c>)
 800559e:	4598      	cmp	r8, r3
 80055a0:	4606      	mov	r6, r0
 80055a2:	460f      	mov	r7, r1
 80055a4:	d810      	bhi.n	80055c8 <__kernel_cos+0xf8>
 80055a6:	4602      	mov	r2, r0
 80055a8:	460b      	mov	r3, r1
 80055aa:	4650      	mov	r0, sl
 80055ac:	4659      	mov	r1, fp
 80055ae:	f7fa fe2f 	bl	8000210 <__aeabi_dsub>
 80055b2:	460b      	mov	r3, r1
 80055b4:	4926      	ldr	r1, [pc, #152]	@ (8005650 <__kernel_cos+0x180>)
 80055b6:	4602      	mov	r2, r0
 80055b8:	2000      	movs	r0, #0
 80055ba:	f7fa fe29 	bl	8000210 <__aeabi_dsub>
 80055be:	ec41 0b10 	vmov	d0, r0, r1
 80055c2:	b003      	add	sp, #12
 80055c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055c8:	4b22      	ldr	r3, [pc, #136]	@ (8005654 <__kernel_cos+0x184>)
 80055ca:	4921      	ldr	r1, [pc, #132]	@ (8005650 <__kernel_cos+0x180>)
 80055cc:	4598      	cmp	r8, r3
 80055ce:	bf8c      	ite	hi
 80055d0:	4d21      	ldrhi	r5, [pc, #132]	@ (8005658 <__kernel_cos+0x188>)
 80055d2:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 80055d6:	2400      	movs	r4, #0
 80055d8:	4622      	mov	r2, r4
 80055da:	462b      	mov	r3, r5
 80055dc:	2000      	movs	r0, #0
 80055de:	f7fa fe17 	bl	8000210 <__aeabi_dsub>
 80055e2:	4622      	mov	r2, r4
 80055e4:	4680      	mov	r8, r0
 80055e6:	4689      	mov	r9, r1
 80055e8:	462b      	mov	r3, r5
 80055ea:	4650      	mov	r0, sl
 80055ec:	4659      	mov	r1, fp
 80055ee:	f7fa fe0f 	bl	8000210 <__aeabi_dsub>
 80055f2:	4632      	mov	r2, r6
 80055f4:	463b      	mov	r3, r7
 80055f6:	f7fa fe0b 	bl	8000210 <__aeabi_dsub>
 80055fa:	4602      	mov	r2, r0
 80055fc:	460b      	mov	r3, r1
 80055fe:	4640      	mov	r0, r8
 8005600:	4649      	mov	r1, r9
 8005602:	e7da      	b.n	80055ba <__kernel_cos+0xea>
 8005604:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8005640 <__kernel_cos+0x170>
 8005608:	e7db      	b.n	80055c2 <__kernel_cos+0xf2>
 800560a:	bf00      	nop
 800560c:	f3af 8000 	nop.w
 8005610:	be8838d4 	.word	0xbe8838d4
 8005614:	bda8fae9 	.word	0xbda8fae9
 8005618:	bdb4b1c4 	.word	0xbdb4b1c4
 800561c:	3e21ee9e 	.word	0x3e21ee9e
 8005620:	809c52ad 	.word	0x809c52ad
 8005624:	3e927e4f 	.word	0x3e927e4f
 8005628:	19cb1590 	.word	0x19cb1590
 800562c:	3efa01a0 	.word	0x3efa01a0
 8005630:	16c15177 	.word	0x16c15177
 8005634:	3f56c16c 	.word	0x3f56c16c
 8005638:	5555554c 	.word	0x5555554c
 800563c:	3fa55555 	.word	0x3fa55555
 8005640:	00000000 	.word	0x00000000
 8005644:	3ff00000 	.word	0x3ff00000
 8005648:	3fe00000 	.word	0x3fe00000
 800564c:	3fd33332 	.word	0x3fd33332
 8005650:	3ff00000 	.word	0x3ff00000
 8005654:	3fe90000 	.word	0x3fe90000
 8005658:	3fd20000 	.word	0x3fd20000
 800565c:	00000000 	.word	0x00000000

08005660 <__kernel_sin>:
 8005660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005664:	ec55 4b10 	vmov	r4, r5, d0
 8005668:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800566c:	b085      	sub	sp, #20
 800566e:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8005672:	ed8d 1b02 	vstr	d1, [sp, #8]
 8005676:	4680      	mov	r8, r0
 8005678:	d205      	bcs.n	8005686 <__kernel_sin+0x26>
 800567a:	4620      	mov	r0, r4
 800567c:	4629      	mov	r1, r5
 800567e:	f7fb fa2f 	bl	8000ae0 <__aeabi_d2iz>
 8005682:	2800      	cmp	r0, #0
 8005684:	d052      	beq.n	800572c <__kernel_sin+0xcc>
 8005686:	4622      	mov	r2, r4
 8005688:	462b      	mov	r3, r5
 800568a:	4620      	mov	r0, r4
 800568c:	4629      	mov	r1, r5
 800568e:	f7fa ff77 	bl	8000580 <__aeabi_dmul>
 8005692:	4682      	mov	sl, r0
 8005694:	468b      	mov	fp, r1
 8005696:	4602      	mov	r2, r0
 8005698:	460b      	mov	r3, r1
 800569a:	4620      	mov	r0, r4
 800569c:	4629      	mov	r1, r5
 800569e:	f7fa ff6f 	bl	8000580 <__aeabi_dmul>
 80056a2:	a342      	add	r3, pc, #264	@ (adr r3, 80057ac <__kernel_sin+0x14c>)
 80056a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056a8:	e9cd 0100 	strd	r0, r1, [sp]
 80056ac:	4650      	mov	r0, sl
 80056ae:	4659      	mov	r1, fp
 80056b0:	f7fa ff66 	bl	8000580 <__aeabi_dmul>
 80056b4:	a33f      	add	r3, pc, #252	@ (adr r3, 80057b4 <__kernel_sin+0x154>)
 80056b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056ba:	f7fa fda9 	bl	8000210 <__aeabi_dsub>
 80056be:	4652      	mov	r2, sl
 80056c0:	465b      	mov	r3, fp
 80056c2:	f7fa ff5d 	bl	8000580 <__aeabi_dmul>
 80056c6:	a33d      	add	r3, pc, #244	@ (adr r3, 80057bc <__kernel_sin+0x15c>)
 80056c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056cc:	f7fa fda2 	bl	8000214 <__adddf3>
 80056d0:	4652      	mov	r2, sl
 80056d2:	465b      	mov	r3, fp
 80056d4:	f7fa ff54 	bl	8000580 <__aeabi_dmul>
 80056d8:	a33a      	add	r3, pc, #232	@ (adr r3, 80057c4 <__kernel_sin+0x164>)
 80056da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056de:	f7fa fd97 	bl	8000210 <__aeabi_dsub>
 80056e2:	4652      	mov	r2, sl
 80056e4:	465b      	mov	r3, fp
 80056e6:	f7fa ff4b 	bl	8000580 <__aeabi_dmul>
 80056ea:	a338      	add	r3, pc, #224	@ (adr r3, 80057cc <__kernel_sin+0x16c>)
 80056ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056f0:	f7fa fd90 	bl	8000214 <__adddf3>
 80056f4:	4606      	mov	r6, r0
 80056f6:	460f      	mov	r7, r1
 80056f8:	f1b8 0f00 	cmp.w	r8, #0
 80056fc:	d11b      	bne.n	8005736 <__kernel_sin+0xd6>
 80056fe:	4602      	mov	r2, r0
 8005700:	460b      	mov	r3, r1
 8005702:	4650      	mov	r0, sl
 8005704:	4659      	mov	r1, fp
 8005706:	f7fa ff3b 	bl	8000580 <__aeabi_dmul>
 800570a:	a325      	add	r3, pc, #148	@ (adr r3, 80057a0 <__kernel_sin+0x140>)
 800570c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005710:	f7fa fd7e 	bl	8000210 <__aeabi_dsub>
 8005714:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005718:	f7fa ff32 	bl	8000580 <__aeabi_dmul>
 800571c:	4602      	mov	r2, r0
 800571e:	460b      	mov	r3, r1
 8005720:	4620      	mov	r0, r4
 8005722:	4629      	mov	r1, r5
 8005724:	f7fa fd76 	bl	8000214 <__adddf3>
 8005728:	4604      	mov	r4, r0
 800572a:	460d      	mov	r5, r1
 800572c:	ec45 4b10 	vmov	d0, r4, r5
 8005730:	b005      	add	sp, #20
 8005732:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005736:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800573a:	4b1b      	ldr	r3, [pc, #108]	@ (80057a8 <__kernel_sin+0x148>)
 800573c:	2200      	movs	r2, #0
 800573e:	f7fa ff1f 	bl	8000580 <__aeabi_dmul>
 8005742:	4632      	mov	r2, r6
 8005744:	4680      	mov	r8, r0
 8005746:	4689      	mov	r9, r1
 8005748:	463b      	mov	r3, r7
 800574a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800574e:	f7fa ff17 	bl	8000580 <__aeabi_dmul>
 8005752:	4602      	mov	r2, r0
 8005754:	460b      	mov	r3, r1
 8005756:	4640      	mov	r0, r8
 8005758:	4649      	mov	r1, r9
 800575a:	f7fa fd59 	bl	8000210 <__aeabi_dsub>
 800575e:	4652      	mov	r2, sl
 8005760:	465b      	mov	r3, fp
 8005762:	f7fa ff0d 	bl	8000580 <__aeabi_dmul>
 8005766:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800576a:	f7fa fd51 	bl	8000210 <__aeabi_dsub>
 800576e:	a30c      	add	r3, pc, #48	@ (adr r3, 80057a0 <__kernel_sin+0x140>)
 8005770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005774:	4606      	mov	r6, r0
 8005776:	460f      	mov	r7, r1
 8005778:	e9dd 0100 	ldrd	r0, r1, [sp]
 800577c:	f7fa ff00 	bl	8000580 <__aeabi_dmul>
 8005780:	4602      	mov	r2, r0
 8005782:	460b      	mov	r3, r1
 8005784:	4630      	mov	r0, r6
 8005786:	4639      	mov	r1, r7
 8005788:	f7fa fd44 	bl	8000214 <__adddf3>
 800578c:	4602      	mov	r2, r0
 800578e:	460b      	mov	r3, r1
 8005790:	4620      	mov	r0, r4
 8005792:	4629      	mov	r1, r5
 8005794:	f7fa fd3c 	bl	8000210 <__aeabi_dsub>
 8005798:	e7c6      	b.n	8005728 <__kernel_sin+0xc8>
 800579a:	bf00      	nop
 800579c:	f3af 8000 	nop.w
 80057a0:	55555549 	.word	0x55555549
 80057a4:	3fc55555 	.word	0x3fc55555
 80057a8:	3fe00000 	.word	0x3fe00000
 80057ac:	5acfd57c 	.word	0x5acfd57c
 80057b0:	3de5d93a 	.word	0x3de5d93a
 80057b4:	8a2b9ceb 	.word	0x8a2b9ceb
 80057b8:	3e5ae5e6 	.word	0x3e5ae5e6
 80057bc:	57b1fe7d 	.word	0x57b1fe7d
 80057c0:	3ec71de3 	.word	0x3ec71de3
 80057c4:	19c161d5 	.word	0x19c161d5
 80057c8:	3f2a01a0 	.word	0x3f2a01a0
 80057cc:	1110f8a6 	.word	0x1110f8a6
 80057d0:	3f811111 	.word	0x3f811111
 80057d4:	00000000 	.word	0x00000000

080057d8 <__ieee754_asin>:
 80057d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057dc:	ec55 4b10 	vmov	r4, r5, d0
 80057e0:	4bc7      	ldr	r3, [pc, #796]	@ (8005b00 <__ieee754_asin+0x328>)
 80057e2:	b087      	sub	sp, #28
 80057e4:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 80057e8:	429e      	cmp	r6, r3
 80057ea:	9501      	str	r5, [sp, #4]
 80057ec:	d92d      	bls.n	800584a <__ieee754_asin+0x72>
 80057ee:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 80057f2:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 80057f6:	4326      	orrs	r6, r4
 80057f8:	d116      	bne.n	8005828 <__ieee754_asin+0x50>
 80057fa:	a3a7      	add	r3, pc, #668	@ (adr r3, 8005a98 <__ieee754_asin+0x2c0>)
 80057fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005800:	4620      	mov	r0, r4
 8005802:	4629      	mov	r1, r5
 8005804:	f7fa febc 	bl	8000580 <__aeabi_dmul>
 8005808:	a3a5      	add	r3, pc, #660	@ (adr r3, 8005aa0 <__ieee754_asin+0x2c8>)
 800580a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800580e:	4606      	mov	r6, r0
 8005810:	460f      	mov	r7, r1
 8005812:	4620      	mov	r0, r4
 8005814:	4629      	mov	r1, r5
 8005816:	f7fa feb3 	bl	8000580 <__aeabi_dmul>
 800581a:	4602      	mov	r2, r0
 800581c:	460b      	mov	r3, r1
 800581e:	4630      	mov	r0, r6
 8005820:	4639      	mov	r1, r7
 8005822:	f7fa fcf7 	bl	8000214 <__adddf3>
 8005826:	e009      	b.n	800583c <__ieee754_asin+0x64>
 8005828:	4622      	mov	r2, r4
 800582a:	462b      	mov	r3, r5
 800582c:	4620      	mov	r0, r4
 800582e:	4629      	mov	r1, r5
 8005830:	f7fa fcee 	bl	8000210 <__aeabi_dsub>
 8005834:	4602      	mov	r2, r0
 8005836:	460b      	mov	r3, r1
 8005838:	f7fa ffcc 	bl	80007d4 <__aeabi_ddiv>
 800583c:	4604      	mov	r4, r0
 800583e:	460d      	mov	r5, r1
 8005840:	ec45 4b10 	vmov	d0, r4, r5
 8005844:	b007      	add	sp, #28
 8005846:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800584a:	4bae      	ldr	r3, [pc, #696]	@ (8005b04 <__ieee754_asin+0x32c>)
 800584c:	429e      	cmp	r6, r3
 800584e:	d810      	bhi.n	8005872 <__ieee754_asin+0x9a>
 8005850:	f1b6 5f79 	cmp.w	r6, #1044381696	@ 0x3e400000
 8005854:	f080 80ad 	bcs.w	80059b2 <__ieee754_asin+0x1da>
 8005858:	a393      	add	r3, pc, #588	@ (adr r3, 8005aa8 <__ieee754_asin+0x2d0>)
 800585a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800585e:	4620      	mov	r0, r4
 8005860:	4629      	mov	r1, r5
 8005862:	f7fa fcd7 	bl	8000214 <__adddf3>
 8005866:	4ba8      	ldr	r3, [pc, #672]	@ (8005b08 <__ieee754_asin+0x330>)
 8005868:	2200      	movs	r2, #0
 800586a:	f7fb f919 	bl	8000aa0 <__aeabi_dcmpgt>
 800586e:	2800      	cmp	r0, #0
 8005870:	d1e6      	bne.n	8005840 <__ieee754_asin+0x68>
 8005872:	ec45 4b10 	vmov	d0, r4, r5
 8005876:	f7ff fdb1 	bl	80053dc <fabs>
 800587a:	49a3      	ldr	r1, [pc, #652]	@ (8005b08 <__ieee754_asin+0x330>)
 800587c:	ec53 2b10 	vmov	r2, r3, d0
 8005880:	2000      	movs	r0, #0
 8005882:	f7fa fcc5 	bl	8000210 <__aeabi_dsub>
 8005886:	4ba1      	ldr	r3, [pc, #644]	@ (8005b0c <__ieee754_asin+0x334>)
 8005888:	2200      	movs	r2, #0
 800588a:	f7fa fe79 	bl	8000580 <__aeabi_dmul>
 800588e:	a388      	add	r3, pc, #544	@ (adr r3, 8005ab0 <__ieee754_asin+0x2d8>)
 8005890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005894:	4604      	mov	r4, r0
 8005896:	460d      	mov	r5, r1
 8005898:	f7fa fe72 	bl	8000580 <__aeabi_dmul>
 800589c:	a386      	add	r3, pc, #536	@ (adr r3, 8005ab8 <__ieee754_asin+0x2e0>)
 800589e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058a2:	f7fa fcb7 	bl	8000214 <__adddf3>
 80058a6:	4622      	mov	r2, r4
 80058a8:	462b      	mov	r3, r5
 80058aa:	f7fa fe69 	bl	8000580 <__aeabi_dmul>
 80058ae:	a384      	add	r3, pc, #528	@ (adr r3, 8005ac0 <__ieee754_asin+0x2e8>)
 80058b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058b4:	f7fa fcac 	bl	8000210 <__aeabi_dsub>
 80058b8:	4622      	mov	r2, r4
 80058ba:	462b      	mov	r3, r5
 80058bc:	f7fa fe60 	bl	8000580 <__aeabi_dmul>
 80058c0:	a381      	add	r3, pc, #516	@ (adr r3, 8005ac8 <__ieee754_asin+0x2f0>)
 80058c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058c6:	f7fa fca5 	bl	8000214 <__adddf3>
 80058ca:	4622      	mov	r2, r4
 80058cc:	462b      	mov	r3, r5
 80058ce:	f7fa fe57 	bl	8000580 <__aeabi_dmul>
 80058d2:	a37f      	add	r3, pc, #508	@ (adr r3, 8005ad0 <__ieee754_asin+0x2f8>)
 80058d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058d8:	f7fa fc9a 	bl	8000210 <__aeabi_dsub>
 80058dc:	4622      	mov	r2, r4
 80058de:	462b      	mov	r3, r5
 80058e0:	f7fa fe4e 	bl	8000580 <__aeabi_dmul>
 80058e4:	a37c      	add	r3, pc, #496	@ (adr r3, 8005ad8 <__ieee754_asin+0x300>)
 80058e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058ea:	f7fa fc93 	bl	8000214 <__adddf3>
 80058ee:	4622      	mov	r2, r4
 80058f0:	462b      	mov	r3, r5
 80058f2:	f7fa fe45 	bl	8000580 <__aeabi_dmul>
 80058f6:	a37a      	add	r3, pc, #488	@ (adr r3, 8005ae0 <__ieee754_asin+0x308>)
 80058f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005900:	4620      	mov	r0, r4
 8005902:	4629      	mov	r1, r5
 8005904:	f7fa fe3c 	bl	8000580 <__aeabi_dmul>
 8005908:	a377      	add	r3, pc, #476	@ (adr r3, 8005ae8 <__ieee754_asin+0x310>)
 800590a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800590e:	f7fa fc7f 	bl	8000210 <__aeabi_dsub>
 8005912:	4622      	mov	r2, r4
 8005914:	462b      	mov	r3, r5
 8005916:	f7fa fe33 	bl	8000580 <__aeabi_dmul>
 800591a:	a375      	add	r3, pc, #468	@ (adr r3, 8005af0 <__ieee754_asin+0x318>)
 800591c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005920:	f7fa fc78 	bl	8000214 <__adddf3>
 8005924:	4622      	mov	r2, r4
 8005926:	462b      	mov	r3, r5
 8005928:	f7fa fe2a 	bl	8000580 <__aeabi_dmul>
 800592c:	a372      	add	r3, pc, #456	@ (adr r3, 8005af8 <__ieee754_asin+0x320>)
 800592e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005932:	f7fa fc6d 	bl	8000210 <__aeabi_dsub>
 8005936:	4622      	mov	r2, r4
 8005938:	462b      	mov	r3, r5
 800593a:	f7fa fe21 	bl	8000580 <__aeabi_dmul>
 800593e:	4b72      	ldr	r3, [pc, #456]	@ (8005b08 <__ieee754_asin+0x330>)
 8005940:	2200      	movs	r2, #0
 8005942:	f7fa fc67 	bl	8000214 <__adddf3>
 8005946:	ec45 4b10 	vmov	d0, r4, r5
 800594a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800594e:	f000 fda3 	bl	8006498 <__ieee754_sqrt>
 8005952:	4b6f      	ldr	r3, [pc, #444]	@ (8005b10 <__ieee754_asin+0x338>)
 8005954:	429e      	cmp	r6, r3
 8005956:	ec5b ab10 	vmov	sl, fp, d0
 800595a:	f240 80db 	bls.w	8005b14 <__ieee754_asin+0x33c>
 800595e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005962:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005966:	f7fa ff35 	bl	80007d4 <__aeabi_ddiv>
 800596a:	4652      	mov	r2, sl
 800596c:	465b      	mov	r3, fp
 800596e:	f7fa fe07 	bl	8000580 <__aeabi_dmul>
 8005972:	4652      	mov	r2, sl
 8005974:	465b      	mov	r3, fp
 8005976:	f7fa fc4d 	bl	8000214 <__adddf3>
 800597a:	4602      	mov	r2, r0
 800597c:	460b      	mov	r3, r1
 800597e:	f7fa fc49 	bl	8000214 <__adddf3>
 8005982:	a347      	add	r3, pc, #284	@ (adr r3, 8005aa0 <__ieee754_asin+0x2c8>)
 8005984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005988:	f7fa fc42 	bl	8000210 <__aeabi_dsub>
 800598c:	4602      	mov	r2, r0
 800598e:	460b      	mov	r3, r1
 8005990:	a141      	add	r1, pc, #260	@ (adr r1, 8005a98 <__ieee754_asin+0x2c0>)
 8005992:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005996:	f7fa fc3b 	bl	8000210 <__aeabi_dsub>
 800599a:	9b01      	ldr	r3, [sp, #4]
 800599c:	2b00      	cmp	r3, #0
 800599e:	bfdc      	itt	le
 80059a0:	4602      	movle	r2, r0
 80059a2:	f101 4300 	addle.w	r3, r1, #2147483648	@ 0x80000000
 80059a6:	4604      	mov	r4, r0
 80059a8:	460d      	mov	r5, r1
 80059aa:	bfdc      	itt	le
 80059ac:	4614      	movle	r4, r2
 80059ae:	461d      	movle	r5, r3
 80059b0:	e746      	b.n	8005840 <__ieee754_asin+0x68>
 80059b2:	4622      	mov	r2, r4
 80059b4:	462b      	mov	r3, r5
 80059b6:	4620      	mov	r0, r4
 80059b8:	4629      	mov	r1, r5
 80059ba:	f7fa fde1 	bl	8000580 <__aeabi_dmul>
 80059be:	a33c      	add	r3, pc, #240	@ (adr r3, 8005ab0 <__ieee754_asin+0x2d8>)
 80059c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059c4:	4606      	mov	r6, r0
 80059c6:	460f      	mov	r7, r1
 80059c8:	f7fa fdda 	bl	8000580 <__aeabi_dmul>
 80059cc:	a33a      	add	r3, pc, #232	@ (adr r3, 8005ab8 <__ieee754_asin+0x2e0>)
 80059ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059d2:	f7fa fc1f 	bl	8000214 <__adddf3>
 80059d6:	4632      	mov	r2, r6
 80059d8:	463b      	mov	r3, r7
 80059da:	f7fa fdd1 	bl	8000580 <__aeabi_dmul>
 80059de:	a338      	add	r3, pc, #224	@ (adr r3, 8005ac0 <__ieee754_asin+0x2e8>)
 80059e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059e4:	f7fa fc14 	bl	8000210 <__aeabi_dsub>
 80059e8:	4632      	mov	r2, r6
 80059ea:	463b      	mov	r3, r7
 80059ec:	f7fa fdc8 	bl	8000580 <__aeabi_dmul>
 80059f0:	a335      	add	r3, pc, #212	@ (adr r3, 8005ac8 <__ieee754_asin+0x2f0>)
 80059f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059f6:	f7fa fc0d 	bl	8000214 <__adddf3>
 80059fa:	4632      	mov	r2, r6
 80059fc:	463b      	mov	r3, r7
 80059fe:	f7fa fdbf 	bl	8000580 <__aeabi_dmul>
 8005a02:	a333      	add	r3, pc, #204	@ (adr r3, 8005ad0 <__ieee754_asin+0x2f8>)
 8005a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a08:	f7fa fc02 	bl	8000210 <__aeabi_dsub>
 8005a0c:	4632      	mov	r2, r6
 8005a0e:	463b      	mov	r3, r7
 8005a10:	f7fa fdb6 	bl	8000580 <__aeabi_dmul>
 8005a14:	a330      	add	r3, pc, #192	@ (adr r3, 8005ad8 <__ieee754_asin+0x300>)
 8005a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a1a:	f7fa fbfb 	bl	8000214 <__adddf3>
 8005a1e:	4632      	mov	r2, r6
 8005a20:	463b      	mov	r3, r7
 8005a22:	f7fa fdad 	bl	8000580 <__aeabi_dmul>
 8005a26:	a32e      	add	r3, pc, #184	@ (adr r3, 8005ae0 <__ieee754_asin+0x308>)
 8005a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a2c:	4680      	mov	r8, r0
 8005a2e:	4689      	mov	r9, r1
 8005a30:	4630      	mov	r0, r6
 8005a32:	4639      	mov	r1, r7
 8005a34:	f7fa fda4 	bl	8000580 <__aeabi_dmul>
 8005a38:	a32b      	add	r3, pc, #172	@ (adr r3, 8005ae8 <__ieee754_asin+0x310>)
 8005a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a3e:	f7fa fbe7 	bl	8000210 <__aeabi_dsub>
 8005a42:	4632      	mov	r2, r6
 8005a44:	463b      	mov	r3, r7
 8005a46:	f7fa fd9b 	bl	8000580 <__aeabi_dmul>
 8005a4a:	a329      	add	r3, pc, #164	@ (adr r3, 8005af0 <__ieee754_asin+0x318>)
 8005a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a50:	f7fa fbe0 	bl	8000214 <__adddf3>
 8005a54:	4632      	mov	r2, r6
 8005a56:	463b      	mov	r3, r7
 8005a58:	f7fa fd92 	bl	8000580 <__aeabi_dmul>
 8005a5c:	a326      	add	r3, pc, #152	@ (adr r3, 8005af8 <__ieee754_asin+0x320>)
 8005a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a62:	f7fa fbd5 	bl	8000210 <__aeabi_dsub>
 8005a66:	4632      	mov	r2, r6
 8005a68:	463b      	mov	r3, r7
 8005a6a:	f7fa fd89 	bl	8000580 <__aeabi_dmul>
 8005a6e:	4b26      	ldr	r3, [pc, #152]	@ (8005b08 <__ieee754_asin+0x330>)
 8005a70:	2200      	movs	r2, #0
 8005a72:	f7fa fbcf 	bl	8000214 <__adddf3>
 8005a76:	4602      	mov	r2, r0
 8005a78:	460b      	mov	r3, r1
 8005a7a:	4640      	mov	r0, r8
 8005a7c:	4649      	mov	r1, r9
 8005a7e:	f7fa fea9 	bl	80007d4 <__aeabi_ddiv>
 8005a82:	4622      	mov	r2, r4
 8005a84:	462b      	mov	r3, r5
 8005a86:	f7fa fd7b 	bl	8000580 <__aeabi_dmul>
 8005a8a:	4602      	mov	r2, r0
 8005a8c:	460b      	mov	r3, r1
 8005a8e:	4620      	mov	r0, r4
 8005a90:	4629      	mov	r1, r5
 8005a92:	e6c6      	b.n	8005822 <__ieee754_asin+0x4a>
 8005a94:	f3af 8000 	nop.w
 8005a98:	54442d18 	.word	0x54442d18
 8005a9c:	3ff921fb 	.word	0x3ff921fb
 8005aa0:	33145c07 	.word	0x33145c07
 8005aa4:	3c91a626 	.word	0x3c91a626
 8005aa8:	8800759c 	.word	0x8800759c
 8005aac:	7e37e43c 	.word	0x7e37e43c
 8005ab0:	0dfdf709 	.word	0x0dfdf709
 8005ab4:	3f023de1 	.word	0x3f023de1
 8005ab8:	7501b288 	.word	0x7501b288
 8005abc:	3f49efe0 	.word	0x3f49efe0
 8005ac0:	b5688f3b 	.word	0xb5688f3b
 8005ac4:	3fa48228 	.word	0x3fa48228
 8005ac8:	0e884455 	.word	0x0e884455
 8005acc:	3fc9c155 	.word	0x3fc9c155
 8005ad0:	03eb6f7d 	.word	0x03eb6f7d
 8005ad4:	3fd4d612 	.word	0x3fd4d612
 8005ad8:	55555555 	.word	0x55555555
 8005adc:	3fc55555 	.word	0x3fc55555
 8005ae0:	b12e9282 	.word	0xb12e9282
 8005ae4:	3fb3b8c5 	.word	0x3fb3b8c5
 8005ae8:	1b8d0159 	.word	0x1b8d0159
 8005aec:	3fe6066c 	.word	0x3fe6066c
 8005af0:	9c598ac8 	.word	0x9c598ac8
 8005af4:	40002ae5 	.word	0x40002ae5
 8005af8:	1c8a2d4b 	.word	0x1c8a2d4b
 8005afc:	40033a27 	.word	0x40033a27
 8005b00:	3fefffff 	.word	0x3fefffff
 8005b04:	3fdfffff 	.word	0x3fdfffff
 8005b08:	3ff00000 	.word	0x3ff00000
 8005b0c:	3fe00000 	.word	0x3fe00000
 8005b10:	3fef3332 	.word	0x3fef3332
 8005b14:	4652      	mov	r2, sl
 8005b16:	465b      	mov	r3, fp
 8005b18:	4650      	mov	r0, sl
 8005b1a:	4659      	mov	r1, fp
 8005b1c:	f7fa fb7a 	bl	8000214 <__adddf3>
 8005b20:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005b24:	4606      	mov	r6, r0
 8005b26:	460f      	mov	r7, r1
 8005b28:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005b2c:	f7fa fe52 	bl	80007d4 <__aeabi_ddiv>
 8005b30:	4602      	mov	r2, r0
 8005b32:	460b      	mov	r3, r1
 8005b34:	4630      	mov	r0, r6
 8005b36:	4639      	mov	r1, r7
 8005b38:	f7fa fd22 	bl	8000580 <__aeabi_dmul>
 8005b3c:	f04f 0800 	mov.w	r8, #0
 8005b40:	4606      	mov	r6, r0
 8005b42:	460f      	mov	r7, r1
 8005b44:	4642      	mov	r2, r8
 8005b46:	465b      	mov	r3, fp
 8005b48:	4640      	mov	r0, r8
 8005b4a:	4659      	mov	r1, fp
 8005b4c:	f7fa fd18 	bl	8000580 <__aeabi_dmul>
 8005b50:	4602      	mov	r2, r0
 8005b52:	460b      	mov	r3, r1
 8005b54:	4620      	mov	r0, r4
 8005b56:	4629      	mov	r1, r5
 8005b58:	f7fa fb5a 	bl	8000210 <__aeabi_dsub>
 8005b5c:	4642      	mov	r2, r8
 8005b5e:	4604      	mov	r4, r0
 8005b60:	460d      	mov	r5, r1
 8005b62:	465b      	mov	r3, fp
 8005b64:	4650      	mov	r0, sl
 8005b66:	4659      	mov	r1, fp
 8005b68:	f7fa fb54 	bl	8000214 <__adddf3>
 8005b6c:	4602      	mov	r2, r0
 8005b6e:	460b      	mov	r3, r1
 8005b70:	4620      	mov	r0, r4
 8005b72:	4629      	mov	r1, r5
 8005b74:	f7fa fe2e 	bl	80007d4 <__aeabi_ddiv>
 8005b78:	4602      	mov	r2, r0
 8005b7a:	460b      	mov	r3, r1
 8005b7c:	f7fa fb4a 	bl	8000214 <__adddf3>
 8005b80:	4602      	mov	r2, r0
 8005b82:	460b      	mov	r3, r1
 8005b84:	a112      	add	r1, pc, #72	@ (adr r1, 8005bd0 <__ieee754_asin+0x3f8>)
 8005b86:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005b8a:	f7fa fb41 	bl	8000210 <__aeabi_dsub>
 8005b8e:	4602      	mov	r2, r0
 8005b90:	460b      	mov	r3, r1
 8005b92:	4630      	mov	r0, r6
 8005b94:	4639      	mov	r1, r7
 8005b96:	f7fa fb3b 	bl	8000210 <__aeabi_dsub>
 8005b9a:	4642      	mov	r2, r8
 8005b9c:	4604      	mov	r4, r0
 8005b9e:	460d      	mov	r5, r1
 8005ba0:	465b      	mov	r3, fp
 8005ba2:	4640      	mov	r0, r8
 8005ba4:	4659      	mov	r1, fp
 8005ba6:	f7fa fb35 	bl	8000214 <__adddf3>
 8005baa:	4602      	mov	r2, r0
 8005bac:	460b      	mov	r3, r1
 8005bae:	a10a      	add	r1, pc, #40	@ (adr r1, 8005bd8 <__ieee754_asin+0x400>)
 8005bb0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005bb4:	f7fa fb2c 	bl	8000210 <__aeabi_dsub>
 8005bb8:	4602      	mov	r2, r0
 8005bba:	460b      	mov	r3, r1
 8005bbc:	4620      	mov	r0, r4
 8005bbe:	4629      	mov	r1, r5
 8005bc0:	f7fa fb26 	bl	8000210 <__aeabi_dsub>
 8005bc4:	4602      	mov	r2, r0
 8005bc6:	460b      	mov	r3, r1
 8005bc8:	a103      	add	r1, pc, #12	@ (adr r1, 8005bd8 <__ieee754_asin+0x400>)
 8005bca:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005bce:	e6e2      	b.n	8005996 <__ieee754_asin+0x1be>
 8005bd0:	33145c07 	.word	0x33145c07
 8005bd4:	3c91a626 	.word	0x3c91a626
 8005bd8:	54442d18 	.word	0x54442d18
 8005bdc:	3fe921fb 	.word	0x3fe921fb

08005be0 <__ieee754_atan2>:
 8005be0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005be4:	ec57 6b11 	vmov	r6, r7, d1
 8005be8:	4273      	negs	r3, r6
 8005bea:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 8005d68 <__ieee754_atan2+0x188>
 8005bee:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 8005bf2:	4333      	orrs	r3, r6
 8005bf4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8005bf8:	4543      	cmp	r3, r8
 8005bfa:	ec51 0b10 	vmov	r0, r1, d0
 8005bfe:	4635      	mov	r5, r6
 8005c00:	d809      	bhi.n	8005c16 <__ieee754_atan2+0x36>
 8005c02:	4244      	negs	r4, r0
 8005c04:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8005c08:	4304      	orrs	r4, r0
 8005c0a:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8005c0e:	4544      	cmp	r4, r8
 8005c10:	468e      	mov	lr, r1
 8005c12:	4681      	mov	r9, r0
 8005c14:	d907      	bls.n	8005c26 <__ieee754_atan2+0x46>
 8005c16:	4632      	mov	r2, r6
 8005c18:	463b      	mov	r3, r7
 8005c1a:	f7fa fafb 	bl	8000214 <__adddf3>
 8005c1e:	ec41 0b10 	vmov	d0, r0, r1
 8005c22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c26:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 8005c2a:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 8005c2e:	4334      	orrs	r4, r6
 8005c30:	d103      	bne.n	8005c3a <__ieee754_atan2+0x5a>
 8005c32:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c36:	f000 ba97 	b.w	8006168 <atan>
 8005c3a:	17bc      	asrs	r4, r7, #30
 8005c3c:	f004 0402 	and.w	r4, r4, #2
 8005c40:	ea53 0909 	orrs.w	r9, r3, r9
 8005c44:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8005c48:	d107      	bne.n	8005c5a <__ieee754_atan2+0x7a>
 8005c4a:	2c02      	cmp	r4, #2
 8005c4c:	d05f      	beq.n	8005d0e <__ieee754_atan2+0x12e>
 8005c4e:	2c03      	cmp	r4, #3
 8005c50:	d1e5      	bne.n	8005c1e <__ieee754_atan2+0x3e>
 8005c52:	a141      	add	r1, pc, #260	@ (adr r1, 8005d58 <__ieee754_atan2+0x178>)
 8005c54:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005c58:	e7e1      	b.n	8005c1e <__ieee754_atan2+0x3e>
 8005c5a:	4315      	orrs	r5, r2
 8005c5c:	d106      	bne.n	8005c6c <__ieee754_atan2+0x8c>
 8005c5e:	f1be 0f00 	cmp.w	lr, #0
 8005c62:	da5f      	bge.n	8005d24 <__ieee754_atan2+0x144>
 8005c64:	a13e      	add	r1, pc, #248	@ (adr r1, 8005d60 <__ieee754_atan2+0x180>)
 8005c66:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005c6a:	e7d8      	b.n	8005c1e <__ieee754_atan2+0x3e>
 8005c6c:	4542      	cmp	r2, r8
 8005c6e:	d10f      	bne.n	8005c90 <__ieee754_atan2+0xb0>
 8005c70:	4293      	cmp	r3, r2
 8005c72:	f104 34ff 	add.w	r4, r4, #4294967295
 8005c76:	d107      	bne.n	8005c88 <__ieee754_atan2+0xa8>
 8005c78:	2c02      	cmp	r4, #2
 8005c7a:	d84c      	bhi.n	8005d16 <__ieee754_atan2+0x136>
 8005c7c:	4b34      	ldr	r3, [pc, #208]	@ (8005d50 <__ieee754_atan2+0x170>)
 8005c7e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005c82:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005c86:	e7ca      	b.n	8005c1e <__ieee754_atan2+0x3e>
 8005c88:	2c02      	cmp	r4, #2
 8005c8a:	d848      	bhi.n	8005d1e <__ieee754_atan2+0x13e>
 8005c8c:	4b31      	ldr	r3, [pc, #196]	@ (8005d54 <__ieee754_atan2+0x174>)
 8005c8e:	e7f6      	b.n	8005c7e <__ieee754_atan2+0x9e>
 8005c90:	4543      	cmp	r3, r8
 8005c92:	d0e4      	beq.n	8005c5e <__ieee754_atan2+0x7e>
 8005c94:	1a9b      	subs	r3, r3, r2
 8005c96:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 8005c9a:	ea4f 5223 	mov.w	r2, r3, asr #20
 8005c9e:	da1e      	bge.n	8005cde <__ieee754_atan2+0xfe>
 8005ca0:	2f00      	cmp	r7, #0
 8005ca2:	da01      	bge.n	8005ca8 <__ieee754_atan2+0xc8>
 8005ca4:	323c      	adds	r2, #60	@ 0x3c
 8005ca6:	db1e      	blt.n	8005ce6 <__ieee754_atan2+0x106>
 8005ca8:	4632      	mov	r2, r6
 8005caa:	463b      	mov	r3, r7
 8005cac:	f7fa fd92 	bl	80007d4 <__aeabi_ddiv>
 8005cb0:	ec41 0b10 	vmov	d0, r0, r1
 8005cb4:	f7ff fb92 	bl	80053dc <fabs>
 8005cb8:	f000 fa56 	bl	8006168 <atan>
 8005cbc:	ec51 0b10 	vmov	r0, r1, d0
 8005cc0:	2c01      	cmp	r4, #1
 8005cc2:	d013      	beq.n	8005cec <__ieee754_atan2+0x10c>
 8005cc4:	2c02      	cmp	r4, #2
 8005cc6:	d015      	beq.n	8005cf4 <__ieee754_atan2+0x114>
 8005cc8:	2c00      	cmp	r4, #0
 8005cca:	d0a8      	beq.n	8005c1e <__ieee754_atan2+0x3e>
 8005ccc:	a318      	add	r3, pc, #96	@ (adr r3, 8005d30 <__ieee754_atan2+0x150>)
 8005cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cd2:	f7fa fa9d 	bl	8000210 <__aeabi_dsub>
 8005cd6:	a318      	add	r3, pc, #96	@ (adr r3, 8005d38 <__ieee754_atan2+0x158>)
 8005cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cdc:	e014      	b.n	8005d08 <__ieee754_atan2+0x128>
 8005cde:	a118      	add	r1, pc, #96	@ (adr r1, 8005d40 <__ieee754_atan2+0x160>)
 8005ce0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005ce4:	e7ec      	b.n	8005cc0 <__ieee754_atan2+0xe0>
 8005ce6:	2000      	movs	r0, #0
 8005ce8:	2100      	movs	r1, #0
 8005cea:	e7e9      	b.n	8005cc0 <__ieee754_atan2+0xe0>
 8005cec:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005cf0:	4619      	mov	r1, r3
 8005cf2:	e794      	b.n	8005c1e <__ieee754_atan2+0x3e>
 8005cf4:	a30e      	add	r3, pc, #56	@ (adr r3, 8005d30 <__ieee754_atan2+0x150>)
 8005cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cfa:	f7fa fa89 	bl	8000210 <__aeabi_dsub>
 8005cfe:	4602      	mov	r2, r0
 8005d00:	460b      	mov	r3, r1
 8005d02:	a10d      	add	r1, pc, #52	@ (adr r1, 8005d38 <__ieee754_atan2+0x158>)
 8005d04:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005d08:	f7fa fa82 	bl	8000210 <__aeabi_dsub>
 8005d0c:	e787      	b.n	8005c1e <__ieee754_atan2+0x3e>
 8005d0e:	a10a      	add	r1, pc, #40	@ (adr r1, 8005d38 <__ieee754_atan2+0x158>)
 8005d10:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005d14:	e783      	b.n	8005c1e <__ieee754_atan2+0x3e>
 8005d16:	a10c      	add	r1, pc, #48	@ (adr r1, 8005d48 <__ieee754_atan2+0x168>)
 8005d18:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005d1c:	e77f      	b.n	8005c1e <__ieee754_atan2+0x3e>
 8005d1e:	2000      	movs	r0, #0
 8005d20:	2100      	movs	r1, #0
 8005d22:	e77c      	b.n	8005c1e <__ieee754_atan2+0x3e>
 8005d24:	a106      	add	r1, pc, #24	@ (adr r1, 8005d40 <__ieee754_atan2+0x160>)
 8005d26:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005d2a:	e778      	b.n	8005c1e <__ieee754_atan2+0x3e>
 8005d2c:	f3af 8000 	nop.w
 8005d30:	33145c07 	.word	0x33145c07
 8005d34:	3ca1a626 	.word	0x3ca1a626
 8005d38:	54442d18 	.word	0x54442d18
 8005d3c:	400921fb 	.word	0x400921fb
 8005d40:	54442d18 	.word	0x54442d18
 8005d44:	3ff921fb 	.word	0x3ff921fb
 8005d48:	54442d18 	.word	0x54442d18
 8005d4c:	3fe921fb 	.word	0x3fe921fb
 8005d50:	08006fc8 	.word	0x08006fc8
 8005d54:	08006fb0 	.word	0x08006fb0
 8005d58:	54442d18 	.word	0x54442d18
 8005d5c:	c00921fb 	.word	0xc00921fb
 8005d60:	54442d18 	.word	0x54442d18
 8005d64:	bff921fb 	.word	0xbff921fb
 8005d68:	7ff00000 	.word	0x7ff00000
 8005d6c:	00000000 	.word	0x00000000

08005d70 <__ieee754_rem_pio2>:
 8005d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d74:	ec57 6b10 	vmov	r6, r7, d0
 8005d78:	4bc5      	ldr	r3, [pc, #788]	@ (8006090 <__ieee754_rem_pio2+0x320>)
 8005d7a:	b08d      	sub	sp, #52	@ 0x34
 8005d7c:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8005d80:	4598      	cmp	r8, r3
 8005d82:	4604      	mov	r4, r0
 8005d84:	9704      	str	r7, [sp, #16]
 8005d86:	d807      	bhi.n	8005d98 <__ieee754_rem_pio2+0x28>
 8005d88:	2200      	movs	r2, #0
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	ed80 0b00 	vstr	d0, [r0]
 8005d90:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8005d94:	2500      	movs	r5, #0
 8005d96:	e028      	b.n	8005dea <__ieee754_rem_pio2+0x7a>
 8005d98:	4bbe      	ldr	r3, [pc, #760]	@ (8006094 <__ieee754_rem_pio2+0x324>)
 8005d9a:	4598      	cmp	r8, r3
 8005d9c:	d878      	bhi.n	8005e90 <__ieee754_rem_pio2+0x120>
 8005d9e:	9b04      	ldr	r3, [sp, #16]
 8005da0:	4dbd      	ldr	r5, [pc, #756]	@ (8006098 <__ieee754_rem_pio2+0x328>)
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	4630      	mov	r0, r6
 8005da6:	a3ac      	add	r3, pc, #688	@ (adr r3, 8006058 <__ieee754_rem_pio2+0x2e8>)
 8005da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dac:	4639      	mov	r1, r7
 8005dae:	dd38      	ble.n	8005e22 <__ieee754_rem_pio2+0xb2>
 8005db0:	f7fa fa2e 	bl	8000210 <__aeabi_dsub>
 8005db4:	45a8      	cmp	r8, r5
 8005db6:	4606      	mov	r6, r0
 8005db8:	460f      	mov	r7, r1
 8005dba:	d01a      	beq.n	8005df2 <__ieee754_rem_pio2+0x82>
 8005dbc:	a3a8      	add	r3, pc, #672	@ (adr r3, 8006060 <__ieee754_rem_pio2+0x2f0>)
 8005dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dc2:	f7fa fa25 	bl	8000210 <__aeabi_dsub>
 8005dc6:	4602      	mov	r2, r0
 8005dc8:	460b      	mov	r3, r1
 8005dca:	4680      	mov	r8, r0
 8005dcc:	4689      	mov	r9, r1
 8005dce:	4630      	mov	r0, r6
 8005dd0:	4639      	mov	r1, r7
 8005dd2:	f7fa fa1d 	bl	8000210 <__aeabi_dsub>
 8005dd6:	a3a2      	add	r3, pc, #648	@ (adr r3, 8006060 <__ieee754_rem_pio2+0x2f0>)
 8005dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ddc:	f7fa fa18 	bl	8000210 <__aeabi_dsub>
 8005de0:	e9c4 8900 	strd	r8, r9, [r4]
 8005de4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005de8:	2501      	movs	r5, #1
 8005dea:	4628      	mov	r0, r5
 8005dec:	b00d      	add	sp, #52	@ 0x34
 8005dee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005df2:	a39d      	add	r3, pc, #628	@ (adr r3, 8006068 <__ieee754_rem_pio2+0x2f8>)
 8005df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005df8:	f7fa fa0a 	bl	8000210 <__aeabi_dsub>
 8005dfc:	a39c      	add	r3, pc, #624	@ (adr r3, 8006070 <__ieee754_rem_pio2+0x300>)
 8005dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e02:	4606      	mov	r6, r0
 8005e04:	460f      	mov	r7, r1
 8005e06:	f7fa fa03 	bl	8000210 <__aeabi_dsub>
 8005e0a:	4602      	mov	r2, r0
 8005e0c:	460b      	mov	r3, r1
 8005e0e:	4680      	mov	r8, r0
 8005e10:	4689      	mov	r9, r1
 8005e12:	4630      	mov	r0, r6
 8005e14:	4639      	mov	r1, r7
 8005e16:	f7fa f9fb 	bl	8000210 <__aeabi_dsub>
 8005e1a:	a395      	add	r3, pc, #596	@ (adr r3, 8006070 <__ieee754_rem_pio2+0x300>)
 8005e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e20:	e7dc      	b.n	8005ddc <__ieee754_rem_pio2+0x6c>
 8005e22:	f7fa f9f7 	bl	8000214 <__adddf3>
 8005e26:	45a8      	cmp	r8, r5
 8005e28:	4606      	mov	r6, r0
 8005e2a:	460f      	mov	r7, r1
 8005e2c:	d018      	beq.n	8005e60 <__ieee754_rem_pio2+0xf0>
 8005e2e:	a38c      	add	r3, pc, #560	@ (adr r3, 8006060 <__ieee754_rem_pio2+0x2f0>)
 8005e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e34:	f7fa f9ee 	bl	8000214 <__adddf3>
 8005e38:	4602      	mov	r2, r0
 8005e3a:	460b      	mov	r3, r1
 8005e3c:	4680      	mov	r8, r0
 8005e3e:	4689      	mov	r9, r1
 8005e40:	4630      	mov	r0, r6
 8005e42:	4639      	mov	r1, r7
 8005e44:	f7fa f9e4 	bl	8000210 <__aeabi_dsub>
 8005e48:	a385      	add	r3, pc, #532	@ (adr r3, 8006060 <__ieee754_rem_pio2+0x2f0>)
 8005e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e4e:	f7fa f9e1 	bl	8000214 <__adddf3>
 8005e52:	f04f 35ff 	mov.w	r5, #4294967295
 8005e56:	e9c4 8900 	strd	r8, r9, [r4]
 8005e5a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005e5e:	e7c4      	b.n	8005dea <__ieee754_rem_pio2+0x7a>
 8005e60:	a381      	add	r3, pc, #516	@ (adr r3, 8006068 <__ieee754_rem_pio2+0x2f8>)
 8005e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e66:	f7fa f9d5 	bl	8000214 <__adddf3>
 8005e6a:	a381      	add	r3, pc, #516	@ (adr r3, 8006070 <__ieee754_rem_pio2+0x300>)
 8005e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e70:	4606      	mov	r6, r0
 8005e72:	460f      	mov	r7, r1
 8005e74:	f7fa f9ce 	bl	8000214 <__adddf3>
 8005e78:	4602      	mov	r2, r0
 8005e7a:	460b      	mov	r3, r1
 8005e7c:	4680      	mov	r8, r0
 8005e7e:	4689      	mov	r9, r1
 8005e80:	4630      	mov	r0, r6
 8005e82:	4639      	mov	r1, r7
 8005e84:	f7fa f9c4 	bl	8000210 <__aeabi_dsub>
 8005e88:	a379      	add	r3, pc, #484	@ (adr r3, 8006070 <__ieee754_rem_pio2+0x300>)
 8005e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e8e:	e7de      	b.n	8005e4e <__ieee754_rem_pio2+0xde>
 8005e90:	4b82      	ldr	r3, [pc, #520]	@ (800609c <__ieee754_rem_pio2+0x32c>)
 8005e92:	4598      	cmp	r8, r3
 8005e94:	f200 80d1 	bhi.w	800603a <__ieee754_rem_pio2+0x2ca>
 8005e98:	f7ff faa0 	bl	80053dc <fabs>
 8005e9c:	ec57 6b10 	vmov	r6, r7, d0
 8005ea0:	a375      	add	r3, pc, #468	@ (adr r3, 8006078 <__ieee754_rem_pio2+0x308>)
 8005ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ea6:	4630      	mov	r0, r6
 8005ea8:	4639      	mov	r1, r7
 8005eaa:	f7fa fb69 	bl	8000580 <__aeabi_dmul>
 8005eae:	4b7c      	ldr	r3, [pc, #496]	@ (80060a0 <__ieee754_rem_pio2+0x330>)
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	f7fa f9af 	bl	8000214 <__adddf3>
 8005eb6:	f7fa fe13 	bl	8000ae0 <__aeabi_d2iz>
 8005eba:	4605      	mov	r5, r0
 8005ebc:	f7fa faf6 	bl	80004ac <__aeabi_i2d>
 8005ec0:	4602      	mov	r2, r0
 8005ec2:	460b      	mov	r3, r1
 8005ec4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005ec8:	a363      	add	r3, pc, #396	@ (adr r3, 8006058 <__ieee754_rem_pio2+0x2e8>)
 8005eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ece:	f7fa fb57 	bl	8000580 <__aeabi_dmul>
 8005ed2:	4602      	mov	r2, r0
 8005ed4:	460b      	mov	r3, r1
 8005ed6:	4630      	mov	r0, r6
 8005ed8:	4639      	mov	r1, r7
 8005eda:	f7fa f999 	bl	8000210 <__aeabi_dsub>
 8005ede:	a360      	add	r3, pc, #384	@ (adr r3, 8006060 <__ieee754_rem_pio2+0x2f0>)
 8005ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ee4:	4682      	mov	sl, r0
 8005ee6:	468b      	mov	fp, r1
 8005ee8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005eec:	f7fa fb48 	bl	8000580 <__aeabi_dmul>
 8005ef0:	2d1f      	cmp	r5, #31
 8005ef2:	4606      	mov	r6, r0
 8005ef4:	460f      	mov	r7, r1
 8005ef6:	dc0c      	bgt.n	8005f12 <__ieee754_rem_pio2+0x1a2>
 8005ef8:	4b6a      	ldr	r3, [pc, #424]	@ (80060a4 <__ieee754_rem_pio2+0x334>)
 8005efa:	1e6a      	subs	r2, r5, #1
 8005efc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f00:	4543      	cmp	r3, r8
 8005f02:	d006      	beq.n	8005f12 <__ieee754_rem_pio2+0x1a2>
 8005f04:	4632      	mov	r2, r6
 8005f06:	463b      	mov	r3, r7
 8005f08:	4650      	mov	r0, sl
 8005f0a:	4659      	mov	r1, fp
 8005f0c:	f7fa f980 	bl	8000210 <__aeabi_dsub>
 8005f10:	e00e      	b.n	8005f30 <__ieee754_rem_pio2+0x1c0>
 8005f12:	463b      	mov	r3, r7
 8005f14:	4632      	mov	r2, r6
 8005f16:	4650      	mov	r0, sl
 8005f18:	4659      	mov	r1, fp
 8005f1a:	f7fa f979 	bl	8000210 <__aeabi_dsub>
 8005f1e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8005f22:	9305      	str	r3, [sp, #20]
 8005f24:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005f28:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8005f2c:	2b10      	cmp	r3, #16
 8005f2e:	dc02      	bgt.n	8005f36 <__ieee754_rem_pio2+0x1c6>
 8005f30:	e9c4 0100 	strd	r0, r1, [r4]
 8005f34:	e039      	b.n	8005faa <__ieee754_rem_pio2+0x23a>
 8005f36:	a34c      	add	r3, pc, #304	@ (adr r3, 8006068 <__ieee754_rem_pio2+0x2f8>)
 8005f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f3c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005f40:	f7fa fb1e 	bl	8000580 <__aeabi_dmul>
 8005f44:	4606      	mov	r6, r0
 8005f46:	460f      	mov	r7, r1
 8005f48:	4602      	mov	r2, r0
 8005f4a:	460b      	mov	r3, r1
 8005f4c:	4650      	mov	r0, sl
 8005f4e:	4659      	mov	r1, fp
 8005f50:	f7fa f95e 	bl	8000210 <__aeabi_dsub>
 8005f54:	4602      	mov	r2, r0
 8005f56:	460b      	mov	r3, r1
 8005f58:	4680      	mov	r8, r0
 8005f5a:	4689      	mov	r9, r1
 8005f5c:	4650      	mov	r0, sl
 8005f5e:	4659      	mov	r1, fp
 8005f60:	f7fa f956 	bl	8000210 <__aeabi_dsub>
 8005f64:	4632      	mov	r2, r6
 8005f66:	463b      	mov	r3, r7
 8005f68:	f7fa f952 	bl	8000210 <__aeabi_dsub>
 8005f6c:	a340      	add	r3, pc, #256	@ (adr r3, 8006070 <__ieee754_rem_pio2+0x300>)
 8005f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f72:	4606      	mov	r6, r0
 8005f74:	460f      	mov	r7, r1
 8005f76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005f7a:	f7fa fb01 	bl	8000580 <__aeabi_dmul>
 8005f7e:	4632      	mov	r2, r6
 8005f80:	463b      	mov	r3, r7
 8005f82:	f7fa f945 	bl	8000210 <__aeabi_dsub>
 8005f86:	4602      	mov	r2, r0
 8005f88:	460b      	mov	r3, r1
 8005f8a:	4606      	mov	r6, r0
 8005f8c:	460f      	mov	r7, r1
 8005f8e:	4640      	mov	r0, r8
 8005f90:	4649      	mov	r1, r9
 8005f92:	f7fa f93d 	bl	8000210 <__aeabi_dsub>
 8005f96:	9a05      	ldr	r2, [sp, #20]
 8005f98:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005f9c:	1ad3      	subs	r3, r2, r3
 8005f9e:	2b31      	cmp	r3, #49	@ 0x31
 8005fa0:	dc20      	bgt.n	8005fe4 <__ieee754_rem_pio2+0x274>
 8005fa2:	e9c4 0100 	strd	r0, r1, [r4]
 8005fa6:	46c2      	mov	sl, r8
 8005fa8:	46cb      	mov	fp, r9
 8005faa:	e9d4 8900 	ldrd	r8, r9, [r4]
 8005fae:	4650      	mov	r0, sl
 8005fb0:	4642      	mov	r2, r8
 8005fb2:	464b      	mov	r3, r9
 8005fb4:	4659      	mov	r1, fp
 8005fb6:	f7fa f92b 	bl	8000210 <__aeabi_dsub>
 8005fba:	463b      	mov	r3, r7
 8005fbc:	4632      	mov	r2, r6
 8005fbe:	f7fa f927 	bl	8000210 <__aeabi_dsub>
 8005fc2:	9b04      	ldr	r3, [sp, #16]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005fca:	f6bf af0e 	bge.w	8005dea <__ieee754_rem_pio2+0x7a>
 8005fce:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8005fd2:	6063      	str	r3, [r4, #4]
 8005fd4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005fd8:	f8c4 8000 	str.w	r8, [r4]
 8005fdc:	60a0      	str	r0, [r4, #8]
 8005fde:	60e3      	str	r3, [r4, #12]
 8005fe0:	426d      	negs	r5, r5
 8005fe2:	e702      	b.n	8005dea <__ieee754_rem_pio2+0x7a>
 8005fe4:	a326      	add	r3, pc, #152	@ (adr r3, 8006080 <__ieee754_rem_pio2+0x310>)
 8005fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005fee:	f7fa fac7 	bl	8000580 <__aeabi_dmul>
 8005ff2:	4606      	mov	r6, r0
 8005ff4:	460f      	mov	r7, r1
 8005ff6:	4602      	mov	r2, r0
 8005ff8:	460b      	mov	r3, r1
 8005ffa:	4640      	mov	r0, r8
 8005ffc:	4649      	mov	r1, r9
 8005ffe:	f7fa f907 	bl	8000210 <__aeabi_dsub>
 8006002:	4602      	mov	r2, r0
 8006004:	460b      	mov	r3, r1
 8006006:	4682      	mov	sl, r0
 8006008:	468b      	mov	fp, r1
 800600a:	4640      	mov	r0, r8
 800600c:	4649      	mov	r1, r9
 800600e:	f7fa f8ff 	bl	8000210 <__aeabi_dsub>
 8006012:	4632      	mov	r2, r6
 8006014:	463b      	mov	r3, r7
 8006016:	f7fa f8fb 	bl	8000210 <__aeabi_dsub>
 800601a:	a31b      	add	r3, pc, #108	@ (adr r3, 8006088 <__ieee754_rem_pio2+0x318>)
 800601c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006020:	4606      	mov	r6, r0
 8006022:	460f      	mov	r7, r1
 8006024:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006028:	f7fa faaa 	bl	8000580 <__aeabi_dmul>
 800602c:	4632      	mov	r2, r6
 800602e:	463b      	mov	r3, r7
 8006030:	f7fa f8ee 	bl	8000210 <__aeabi_dsub>
 8006034:	4606      	mov	r6, r0
 8006036:	460f      	mov	r7, r1
 8006038:	e764      	b.n	8005f04 <__ieee754_rem_pio2+0x194>
 800603a:	4b1b      	ldr	r3, [pc, #108]	@ (80060a8 <__ieee754_rem_pio2+0x338>)
 800603c:	4598      	cmp	r8, r3
 800603e:	d935      	bls.n	80060ac <__ieee754_rem_pio2+0x33c>
 8006040:	4632      	mov	r2, r6
 8006042:	463b      	mov	r3, r7
 8006044:	4630      	mov	r0, r6
 8006046:	4639      	mov	r1, r7
 8006048:	f7fa f8e2 	bl	8000210 <__aeabi_dsub>
 800604c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006050:	e9c4 0100 	strd	r0, r1, [r4]
 8006054:	e69e      	b.n	8005d94 <__ieee754_rem_pio2+0x24>
 8006056:	bf00      	nop
 8006058:	54400000 	.word	0x54400000
 800605c:	3ff921fb 	.word	0x3ff921fb
 8006060:	1a626331 	.word	0x1a626331
 8006064:	3dd0b461 	.word	0x3dd0b461
 8006068:	1a600000 	.word	0x1a600000
 800606c:	3dd0b461 	.word	0x3dd0b461
 8006070:	2e037073 	.word	0x2e037073
 8006074:	3ba3198a 	.word	0x3ba3198a
 8006078:	6dc9c883 	.word	0x6dc9c883
 800607c:	3fe45f30 	.word	0x3fe45f30
 8006080:	2e000000 	.word	0x2e000000
 8006084:	3ba3198a 	.word	0x3ba3198a
 8006088:	252049c1 	.word	0x252049c1
 800608c:	397b839a 	.word	0x397b839a
 8006090:	3fe921fb 	.word	0x3fe921fb
 8006094:	4002d97b 	.word	0x4002d97b
 8006098:	3ff921fb 	.word	0x3ff921fb
 800609c:	413921fb 	.word	0x413921fb
 80060a0:	3fe00000 	.word	0x3fe00000
 80060a4:	08006fe0 	.word	0x08006fe0
 80060a8:	7fefffff 	.word	0x7fefffff
 80060ac:	ea4f 5528 	mov.w	r5, r8, asr #20
 80060b0:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 80060b4:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 80060b8:	4630      	mov	r0, r6
 80060ba:	460f      	mov	r7, r1
 80060bc:	f7fa fd10 	bl	8000ae0 <__aeabi_d2iz>
 80060c0:	f7fa f9f4 	bl	80004ac <__aeabi_i2d>
 80060c4:	4602      	mov	r2, r0
 80060c6:	460b      	mov	r3, r1
 80060c8:	4630      	mov	r0, r6
 80060ca:	4639      	mov	r1, r7
 80060cc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80060d0:	f7fa f89e 	bl	8000210 <__aeabi_dsub>
 80060d4:	4b22      	ldr	r3, [pc, #136]	@ (8006160 <__ieee754_rem_pio2+0x3f0>)
 80060d6:	2200      	movs	r2, #0
 80060d8:	f7fa fa52 	bl	8000580 <__aeabi_dmul>
 80060dc:	460f      	mov	r7, r1
 80060de:	4606      	mov	r6, r0
 80060e0:	f7fa fcfe 	bl	8000ae0 <__aeabi_d2iz>
 80060e4:	f7fa f9e2 	bl	80004ac <__aeabi_i2d>
 80060e8:	4602      	mov	r2, r0
 80060ea:	460b      	mov	r3, r1
 80060ec:	4630      	mov	r0, r6
 80060ee:	4639      	mov	r1, r7
 80060f0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80060f4:	f7fa f88c 	bl	8000210 <__aeabi_dsub>
 80060f8:	4b19      	ldr	r3, [pc, #100]	@ (8006160 <__ieee754_rem_pio2+0x3f0>)
 80060fa:	2200      	movs	r2, #0
 80060fc:	f7fa fa40 	bl	8000580 <__aeabi_dmul>
 8006100:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8006104:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8006108:	f04f 0803 	mov.w	r8, #3
 800610c:	2600      	movs	r6, #0
 800610e:	2700      	movs	r7, #0
 8006110:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8006114:	4632      	mov	r2, r6
 8006116:	463b      	mov	r3, r7
 8006118:	46c2      	mov	sl, r8
 800611a:	f108 38ff 	add.w	r8, r8, #4294967295
 800611e:	f7fa fc97 	bl	8000a50 <__aeabi_dcmpeq>
 8006122:	2800      	cmp	r0, #0
 8006124:	d1f4      	bne.n	8006110 <__ieee754_rem_pio2+0x3a0>
 8006126:	4b0f      	ldr	r3, [pc, #60]	@ (8006164 <__ieee754_rem_pio2+0x3f4>)
 8006128:	9301      	str	r3, [sp, #4]
 800612a:	2302      	movs	r3, #2
 800612c:	9300      	str	r3, [sp, #0]
 800612e:	462a      	mov	r2, r5
 8006130:	4653      	mov	r3, sl
 8006132:	4621      	mov	r1, r4
 8006134:	a806      	add	r0, sp, #24
 8006136:	f000 fa8b 	bl	8006650 <__kernel_rem_pio2>
 800613a:	9b04      	ldr	r3, [sp, #16]
 800613c:	2b00      	cmp	r3, #0
 800613e:	4605      	mov	r5, r0
 8006140:	f6bf ae53 	bge.w	8005dea <__ieee754_rem_pio2+0x7a>
 8006144:	e9d4 2100 	ldrd	r2, r1, [r4]
 8006148:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800614c:	e9c4 2300 	strd	r2, r3, [r4]
 8006150:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8006154:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006158:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800615c:	e740      	b.n	8005fe0 <__ieee754_rem_pio2+0x270>
 800615e:	bf00      	nop
 8006160:	41700000 	.word	0x41700000
 8006164:	08007060 	.word	0x08007060

08006168 <atan>:
 8006168:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800616c:	ec55 4b10 	vmov	r4, r5, d0
 8006170:	4bbf      	ldr	r3, [pc, #764]	@ (8006470 <atan+0x308>)
 8006172:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8006176:	429e      	cmp	r6, r3
 8006178:	46ab      	mov	fp, r5
 800617a:	d918      	bls.n	80061ae <atan+0x46>
 800617c:	4bbd      	ldr	r3, [pc, #756]	@ (8006474 <atan+0x30c>)
 800617e:	429e      	cmp	r6, r3
 8006180:	d801      	bhi.n	8006186 <atan+0x1e>
 8006182:	d109      	bne.n	8006198 <atan+0x30>
 8006184:	b144      	cbz	r4, 8006198 <atan+0x30>
 8006186:	4622      	mov	r2, r4
 8006188:	462b      	mov	r3, r5
 800618a:	4620      	mov	r0, r4
 800618c:	4629      	mov	r1, r5
 800618e:	f7fa f841 	bl	8000214 <__adddf3>
 8006192:	4604      	mov	r4, r0
 8006194:	460d      	mov	r5, r1
 8006196:	e006      	b.n	80061a6 <atan+0x3e>
 8006198:	f1bb 0f00 	cmp.w	fp, #0
 800619c:	f340 812b 	ble.w	80063f6 <atan+0x28e>
 80061a0:	a597      	add	r5, pc, #604	@ (adr r5, 8006400 <atan+0x298>)
 80061a2:	e9d5 4500 	ldrd	r4, r5, [r5]
 80061a6:	ec45 4b10 	vmov	d0, r4, r5
 80061aa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061ae:	4bb2      	ldr	r3, [pc, #712]	@ (8006478 <atan+0x310>)
 80061b0:	429e      	cmp	r6, r3
 80061b2:	d813      	bhi.n	80061dc <atan+0x74>
 80061b4:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 80061b8:	429e      	cmp	r6, r3
 80061ba:	d80c      	bhi.n	80061d6 <atan+0x6e>
 80061bc:	a392      	add	r3, pc, #584	@ (adr r3, 8006408 <atan+0x2a0>)
 80061be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061c2:	4620      	mov	r0, r4
 80061c4:	4629      	mov	r1, r5
 80061c6:	f7fa f825 	bl	8000214 <__adddf3>
 80061ca:	4bac      	ldr	r3, [pc, #688]	@ (800647c <atan+0x314>)
 80061cc:	2200      	movs	r2, #0
 80061ce:	f7fa fc67 	bl	8000aa0 <__aeabi_dcmpgt>
 80061d2:	2800      	cmp	r0, #0
 80061d4:	d1e7      	bne.n	80061a6 <atan+0x3e>
 80061d6:	f04f 3aff 	mov.w	sl, #4294967295
 80061da:	e029      	b.n	8006230 <atan+0xc8>
 80061dc:	f7ff f8fe 	bl	80053dc <fabs>
 80061e0:	4ba7      	ldr	r3, [pc, #668]	@ (8006480 <atan+0x318>)
 80061e2:	429e      	cmp	r6, r3
 80061e4:	ec55 4b10 	vmov	r4, r5, d0
 80061e8:	f200 80bc 	bhi.w	8006364 <atan+0x1fc>
 80061ec:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 80061f0:	429e      	cmp	r6, r3
 80061f2:	f200 809e 	bhi.w	8006332 <atan+0x1ca>
 80061f6:	4622      	mov	r2, r4
 80061f8:	462b      	mov	r3, r5
 80061fa:	4620      	mov	r0, r4
 80061fc:	4629      	mov	r1, r5
 80061fe:	f7fa f809 	bl	8000214 <__adddf3>
 8006202:	4b9e      	ldr	r3, [pc, #632]	@ (800647c <atan+0x314>)
 8006204:	2200      	movs	r2, #0
 8006206:	f7fa f803 	bl	8000210 <__aeabi_dsub>
 800620a:	2200      	movs	r2, #0
 800620c:	4606      	mov	r6, r0
 800620e:	460f      	mov	r7, r1
 8006210:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8006214:	4620      	mov	r0, r4
 8006216:	4629      	mov	r1, r5
 8006218:	f7f9 fffc 	bl	8000214 <__adddf3>
 800621c:	4602      	mov	r2, r0
 800621e:	460b      	mov	r3, r1
 8006220:	4630      	mov	r0, r6
 8006222:	4639      	mov	r1, r7
 8006224:	f7fa fad6 	bl	80007d4 <__aeabi_ddiv>
 8006228:	f04f 0a00 	mov.w	sl, #0
 800622c:	4604      	mov	r4, r0
 800622e:	460d      	mov	r5, r1
 8006230:	4622      	mov	r2, r4
 8006232:	462b      	mov	r3, r5
 8006234:	4620      	mov	r0, r4
 8006236:	4629      	mov	r1, r5
 8006238:	f7fa f9a2 	bl	8000580 <__aeabi_dmul>
 800623c:	4602      	mov	r2, r0
 800623e:	460b      	mov	r3, r1
 8006240:	4680      	mov	r8, r0
 8006242:	4689      	mov	r9, r1
 8006244:	f7fa f99c 	bl	8000580 <__aeabi_dmul>
 8006248:	a371      	add	r3, pc, #452	@ (adr r3, 8006410 <atan+0x2a8>)
 800624a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800624e:	4606      	mov	r6, r0
 8006250:	460f      	mov	r7, r1
 8006252:	f7fa f995 	bl	8000580 <__aeabi_dmul>
 8006256:	a370      	add	r3, pc, #448	@ (adr r3, 8006418 <atan+0x2b0>)
 8006258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800625c:	f7f9 ffda 	bl	8000214 <__adddf3>
 8006260:	4632      	mov	r2, r6
 8006262:	463b      	mov	r3, r7
 8006264:	f7fa f98c 	bl	8000580 <__aeabi_dmul>
 8006268:	a36d      	add	r3, pc, #436	@ (adr r3, 8006420 <atan+0x2b8>)
 800626a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800626e:	f7f9 ffd1 	bl	8000214 <__adddf3>
 8006272:	4632      	mov	r2, r6
 8006274:	463b      	mov	r3, r7
 8006276:	f7fa f983 	bl	8000580 <__aeabi_dmul>
 800627a:	a36b      	add	r3, pc, #428	@ (adr r3, 8006428 <atan+0x2c0>)
 800627c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006280:	f7f9 ffc8 	bl	8000214 <__adddf3>
 8006284:	4632      	mov	r2, r6
 8006286:	463b      	mov	r3, r7
 8006288:	f7fa f97a 	bl	8000580 <__aeabi_dmul>
 800628c:	a368      	add	r3, pc, #416	@ (adr r3, 8006430 <atan+0x2c8>)
 800628e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006292:	f7f9 ffbf 	bl	8000214 <__adddf3>
 8006296:	4632      	mov	r2, r6
 8006298:	463b      	mov	r3, r7
 800629a:	f7fa f971 	bl	8000580 <__aeabi_dmul>
 800629e:	a366      	add	r3, pc, #408	@ (adr r3, 8006438 <atan+0x2d0>)
 80062a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062a4:	f7f9 ffb6 	bl	8000214 <__adddf3>
 80062a8:	4642      	mov	r2, r8
 80062aa:	464b      	mov	r3, r9
 80062ac:	f7fa f968 	bl	8000580 <__aeabi_dmul>
 80062b0:	a363      	add	r3, pc, #396	@ (adr r3, 8006440 <atan+0x2d8>)
 80062b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062b6:	4680      	mov	r8, r0
 80062b8:	4689      	mov	r9, r1
 80062ba:	4630      	mov	r0, r6
 80062bc:	4639      	mov	r1, r7
 80062be:	f7fa f95f 	bl	8000580 <__aeabi_dmul>
 80062c2:	a361      	add	r3, pc, #388	@ (adr r3, 8006448 <atan+0x2e0>)
 80062c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062c8:	f7f9 ffa2 	bl	8000210 <__aeabi_dsub>
 80062cc:	4632      	mov	r2, r6
 80062ce:	463b      	mov	r3, r7
 80062d0:	f7fa f956 	bl	8000580 <__aeabi_dmul>
 80062d4:	a35e      	add	r3, pc, #376	@ (adr r3, 8006450 <atan+0x2e8>)
 80062d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062da:	f7f9 ff99 	bl	8000210 <__aeabi_dsub>
 80062de:	4632      	mov	r2, r6
 80062e0:	463b      	mov	r3, r7
 80062e2:	f7fa f94d 	bl	8000580 <__aeabi_dmul>
 80062e6:	a35c      	add	r3, pc, #368	@ (adr r3, 8006458 <atan+0x2f0>)
 80062e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062ec:	f7f9 ff90 	bl	8000210 <__aeabi_dsub>
 80062f0:	4632      	mov	r2, r6
 80062f2:	463b      	mov	r3, r7
 80062f4:	f7fa f944 	bl	8000580 <__aeabi_dmul>
 80062f8:	a359      	add	r3, pc, #356	@ (adr r3, 8006460 <atan+0x2f8>)
 80062fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062fe:	f7f9 ff87 	bl	8000210 <__aeabi_dsub>
 8006302:	4632      	mov	r2, r6
 8006304:	463b      	mov	r3, r7
 8006306:	f7fa f93b 	bl	8000580 <__aeabi_dmul>
 800630a:	4602      	mov	r2, r0
 800630c:	460b      	mov	r3, r1
 800630e:	4640      	mov	r0, r8
 8006310:	4649      	mov	r1, r9
 8006312:	f7f9 ff7f 	bl	8000214 <__adddf3>
 8006316:	4622      	mov	r2, r4
 8006318:	462b      	mov	r3, r5
 800631a:	f7fa f931 	bl	8000580 <__aeabi_dmul>
 800631e:	f1ba 3fff 	cmp.w	sl, #4294967295
 8006322:	4602      	mov	r2, r0
 8006324:	460b      	mov	r3, r1
 8006326:	d148      	bne.n	80063ba <atan+0x252>
 8006328:	4620      	mov	r0, r4
 800632a:	4629      	mov	r1, r5
 800632c:	f7f9 ff70 	bl	8000210 <__aeabi_dsub>
 8006330:	e72f      	b.n	8006192 <atan+0x2a>
 8006332:	4b52      	ldr	r3, [pc, #328]	@ (800647c <atan+0x314>)
 8006334:	2200      	movs	r2, #0
 8006336:	4620      	mov	r0, r4
 8006338:	4629      	mov	r1, r5
 800633a:	f7f9 ff69 	bl	8000210 <__aeabi_dsub>
 800633e:	4b4f      	ldr	r3, [pc, #316]	@ (800647c <atan+0x314>)
 8006340:	4606      	mov	r6, r0
 8006342:	460f      	mov	r7, r1
 8006344:	2200      	movs	r2, #0
 8006346:	4620      	mov	r0, r4
 8006348:	4629      	mov	r1, r5
 800634a:	f7f9 ff63 	bl	8000214 <__adddf3>
 800634e:	4602      	mov	r2, r0
 8006350:	460b      	mov	r3, r1
 8006352:	4630      	mov	r0, r6
 8006354:	4639      	mov	r1, r7
 8006356:	f7fa fa3d 	bl	80007d4 <__aeabi_ddiv>
 800635a:	f04f 0a01 	mov.w	sl, #1
 800635e:	4604      	mov	r4, r0
 8006360:	460d      	mov	r5, r1
 8006362:	e765      	b.n	8006230 <atan+0xc8>
 8006364:	4b47      	ldr	r3, [pc, #284]	@ (8006484 <atan+0x31c>)
 8006366:	429e      	cmp	r6, r3
 8006368:	d21c      	bcs.n	80063a4 <atan+0x23c>
 800636a:	4b47      	ldr	r3, [pc, #284]	@ (8006488 <atan+0x320>)
 800636c:	2200      	movs	r2, #0
 800636e:	4620      	mov	r0, r4
 8006370:	4629      	mov	r1, r5
 8006372:	f7f9 ff4d 	bl	8000210 <__aeabi_dsub>
 8006376:	4b44      	ldr	r3, [pc, #272]	@ (8006488 <atan+0x320>)
 8006378:	4606      	mov	r6, r0
 800637a:	460f      	mov	r7, r1
 800637c:	2200      	movs	r2, #0
 800637e:	4620      	mov	r0, r4
 8006380:	4629      	mov	r1, r5
 8006382:	f7fa f8fd 	bl	8000580 <__aeabi_dmul>
 8006386:	4b3d      	ldr	r3, [pc, #244]	@ (800647c <atan+0x314>)
 8006388:	2200      	movs	r2, #0
 800638a:	f7f9 ff43 	bl	8000214 <__adddf3>
 800638e:	4602      	mov	r2, r0
 8006390:	460b      	mov	r3, r1
 8006392:	4630      	mov	r0, r6
 8006394:	4639      	mov	r1, r7
 8006396:	f7fa fa1d 	bl	80007d4 <__aeabi_ddiv>
 800639a:	f04f 0a02 	mov.w	sl, #2
 800639e:	4604      	mov	r4, r0
 80063a0:	460d      	mov	r5, r1
 80063a2:	e745      	b.n	8006230 <atan+0xc8>
 80063a4:	4622      	mov	r2, r4
 80063a6:	462b      	mov	r3, r5
 80063a8:	4938      	ldr	r1, [pc, #224]	@ (800648c <atan+0x324>)
 80063aa:	2000      	movs	r0, #0
 80063ac:	f7fa fa12 	bl	80007d4 <__aeabi_ddiv>
 80063b0:	f04f 0a03 	mov.w	sl, #3
 80063b4:	4604      	mov	r4, r0
 80063b6:	460d      	mov	r5, r1
 80063b8:	e73a      	b.n	8006230 <atan+0xc8>
 80063ba:	4b35      	ldr	r3, [pc, #212]	@ (8006490 <atan+0x328>)
 80063bc:	4e35      	ldr	r6, [pc, #212]	@ (8006494 <atan+0x32c>)
 80063be:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80063c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063c6:	f7f9 ff23 	bl	8000210 <__aeabi_dsub>
 80063ca:	4622      	mov	r2, r4
 80063cc:	462b      	mov	r3, r5
 80063ce:	f7f9 ff1f 	bl	8000210 <__aeabi_dsub>
 80063d2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 80063d6:	4602      	mov	r2, r0
 80063d8:	460b      	mov	r3, r1
 80063da:	e9d6 0100 	ldrd	r0, r1, [r6]
 80063de:	f7f9 ff17 	bl	8000210 <__aeabi_dsub>
 80063e2:	f1bb 0f00 	cmp.w	fp, #0
 80063e6:	4604      	mov	r4, r0
 80063e8:	460d      	mov	r5, r1
 80063ea:	f6bf aedc 	bge.w	80061a6 <atan+0x3e>
 80063ee:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80063f2:	461d      	mov	r5, r3
 80063f4:	e6d7      	b.n	80061a6 <atan+0x3e>
 80063f6:	a51c      	add	r5, pc, #112	@ (adr r5, 8006468 <atan+0x300>)
 80063f8:	e9d5 4500 	ldrd	r4, r5, [r5]
 80063fc:	e6d3      	b.n	80061a6 <atan+0x3e>
 80063fe:	bf00      	nop
 8006400:	54442d18 	.word	0x54442d18
 8006404:	3ff921fb 	.word	0x3ff921fb
 8006408:	8800759c 	.word	0x8800759c
 800640c:	7e37e43c 	.word	0x7e37e43c
 8006410:	e322da11 	.word	0xe322da11
 8006414:	3f90ad3a 	.word	0x3f90ad3a
 8006418:	24760deb 	.word	0x24760deb
 800641c:	3fa97b4b 	.word	0x3fa97b4b
 8006420:	a0d03d51 	.word	0xa0d03d51
 8006424:	3fb10d66 	.word	0x3fb10d66
 8006428:	c54c206e 	.word	0xc54c206e
 800642c:	3fb745cd 	.word	0x3fb745cd
 8006430:	920083ff 	.word	0x920083ff
 8006434:	3fc24924 	.word	0x3fc24924
 8006438:	5555550d 	.word	0x5555550d
 800643c:	3fd55555 	.word	0x3fd55555
 8006440:	2c6a6c2f 	.word	0x2c6a6c2f
 8006444:	bfa2b444 	.word	0xbfa2b444
 8006448:	52defd9a 	.word	0x52defd9a
 800644c:	3fadde2d 	.word	0x3fadde2d
 8006450:	af749a6d 	.word	0xaf749a6d
 8006454:	3fb3b0f2 	.word	0x3fb3b0f2
 8006458:	fe231671 	.word	0xfe231671
 800645c:	3fbc71c6 	.word	0x3fbc71c6
 8006460:	9998ebc4 	.word	0x9998ebc4
 8006464:	3fc99999 	.word	0x3fc99999
 8006468:	54442d18 	.word	0x54442d18
 800646c:	bff921fb 	.word	0xbff921fb
 8006470:	440fffff 	.word	0x440fffff
 8006474:	7ff00000 	.word	0x7ff00000
 8006478:	3fdbffff 	.word	0x3fdbffff
 800647c:	3ff00000 	.word	0x3ff00000
 8006480:	3ff2ffff 	.word	0x3ff2ffff
 8006484:	40038000 	.word	0x40038000
 8006488:	3ff80000 	.word	0x3ff80000
 800648c:	bff00000 	.word	0xbff00000
 8006490:	08007168 	.word	0x08007168
 8006494:	08007188 	.word	0x08007188

08006498 <__ieee754_sqrt>:
 8006498:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800649c:	4a68      	ldr	r2, [pc, #416]	@ (8006640 <__ieee754_sqrt+0x1a8>)
 800649e:	ec55 4b10 	vmov	r4, r5, d0
 80064a2:	43aa      	bics	r2, r5
 80064a4:	462b      	mov	r3, r5
 80064a6:	4621      	mov	r1, r4
 80064a8:	d110      	bne.n	80064cc <__ieee754_sqrt+0x34>
 80064aa:	4622      	mov	r2, r4
 80064ac:	4620      	mov	r0, r4
 80064ae:	4629      	mov	r1, r5
 80064b0:	f7fa f866 	bl	8000580 <__aeabi_dmul>
 80064b4:	4602      	mov	r2, r0
 80064b6:	460b      	mov	r3, r1
 80064b8:	4620      	mov	r0, r4
 80064ba:	4629      	mov	r1, r5
 80064bc:	f7f9 feaa 	bl	8000214 <__adddf3>
 80064c0:	4604      	mov	r4, r0
 80064c2:	460d      	mov	r5, r1
 80064c4:	ec45 4b10 	vmov	d0, r4, r5
 80064c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064cc:	2d00      	cmp	r5, #0
 80064ce:	dc0e      	bgt.n	80064ee <__ieee754_sqrt+0x56>
 80064d0:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 80064d4:	4322      	orrs	r2, r4
 80064d6:	d0f5      	beq.n	80064c4 <__ieee754_sqrt+0x2c>
 80064d8:	b19d      	cbz	r5, 8006502 <__ieee754_sqrt+0x6a>
 80064da:	4622      	mov	r2, r4
 80064dc:	4620      	mov	r0, r4
 80064de:	4629      	mov	r1, r5
 80064e0:	f7f9 fe96 	bl	8000210 <__aeabi_dsub>
 80064e4:	4602      	mov	r2, r0
 80064e6:	460b      	mov	r3, r1
 80064e8:	f7fa f974 	bl	80007d4 <__aeabi_ddiv>
 80064ec:	e7e8      	b.n	80064c0 <__ieee754_sqrt+0x28>
 80064ee:	152a      	asrs	r2, r5, #20
 80064f0:	d115      	bne.n	800651e <__ieee754_sqrt+0x86>
 80064f2:	2000      	movs	r0, #0
 80064f4:	e009      	b.n	800650a <__ieee754_sqrt+0x72>
 80064f6:	0acb      	lsrs	r3, r1, #11
 80064f8:	3a15      	subs	r2, #21
 80064fa:	0549      	lsls	r1, r1, #21
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d0fa      	beq.n	80064f6 <__ieee754_sqrt+0x5e>
 8006500:	e7f7      	b.n	80064f2 <__ieee754_sqrt+0x5a>
 8006502:	462a      	mov	r2, r5
 8006504:	e7fa      	b.n	80064fc <__ieee754_sqrt+0x64>
 8006506:	005b      	lsls	r3, r3, #1
 8006508:	3001      	adds	r0, #1
 800650a:	02dc      	lsls	r4, r3, #11
 800650c:	d5fb      	bpl.n	8006506 <__ieee754_sqrt+0x6e>
 800650e:	1e44      	subs	r4, r0, #1
 8006510:	1b12      	subs	r2, r2, r4
 8006512:	f1c0 0420 	rsb	r4, r0, #32
 8006516:	fa21 f404 	lsr.w	r4, r1, r4
 800651a:	4323      	orrs	r3, r4
 800651c:	4081      	lsls	r1, r0
 800651e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006522:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8006526:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800652a:	07d2      	lsls	r2, r2, #31
 800652c:	bf5c      	itt	pl
 800652e:	005b      	lslpl	r3, r3, #1
 8006530:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8006534:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006538:	bf58      	it	pl
 800653a:	0049      	lslpl	r1, r1, #1
 800653c:	2600      	movs	r6, #0
 800653e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8006542:	106d      	asrs	r5, r5, #1
 8006544:	0049      	lsls	r1, r1, #1
 8006546:	2016      	movs	r0, #22
 8006548:	4632      	mov	r2, r6
 800654a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800654e:	1917      	adds	r7, r2, r4
 8006550:	429f      	cmp	r7, r3
 8006552:	bfde      	ittt	le
 8006554:	193a      	addle	r2, r7, r4
 8006556:	1bdb      	suble	r3, r3, r7
 8006558:	1936      	addle	r6, r6, r4
 800655a:	0fcf      	lsrs	r7, r1, #31
 800655c:	3801      	subs	r0, #1
 800655e:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8006562:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8006566:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800656a:	d1f0      	bne.n	800654e <__ieee754_sqrt+0xb6>
 800656c:	4604      	mov	r4, r0
 800656e:	2720      	movs	r7, #32
 8006570:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8006574:	429a      	cmp	r2, r3
 8006576:	eb00 0e0c 	add.w	lr, r0, ip
 800657a:	db02      	blt.n	8006582 <__ieee754_sqrt+0xea>
 800657c:	d113      	bne.n	80065a6 <__ieee754_sqrt+0x10e>
 800657e:	458e      	cmp	lr, r1
 8006580:	d811      	bhi.n	80065a6 <__ieee754_sqrt+0x10e>
 8006582:	f1be 0f00 	cmp.w	lr, #0
 8006586:	eb0e 000c 	add.w	r0, lr, ip
 800658a:	da42      	bge.n	8006612 <__ieee754_sqrt+0x17a>
 800658c:	2800      	cmp	r0, #0
 800658e:	db40      	blt.n	8006612 <__ieee754_sqrt+0x17a>
 8006590:	f102 0801 	add.w	r8, r2, #1
 8006594:	1a9b      	subs	r3, r3, r2
 8006596:	458e      	cmp	lr, r1
 8006598:	bf88      	it	hi
 800659a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800659e:	eba1 010e 	sub.w	r1, r1, lr
 80065a2:	4464      	add	r4, ip
 80065a4:	4642      	mov	r2, r8
 80065a6:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 80065aa:	3f01      	subs	r7, #1
 80065ac:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 80065b0:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80065b4:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 80065b8:	d1dc      	bne.n	8006574 <__ieee754_sqrt+0xdc>
 80065ba:	4319      	orrs	r1, r3
 80065bc:	d01b      	beq.n	80065f6 <__ieee754_sqrt+0x15e>
 80065be:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8006644 <__ieee754_sqrt+0x1ac>
 80065c2:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8006648 <__ieee754_sqrt+0x1b0>
 80065c6:	e9da 0100 	ldrd	r0, r1, [sl]
 80065ca:	e9db 2300 	ldrd	r2, r3, [fp]
 80065ce:	f7f9 fe1f 	bl	8000210 <__aeabi_dsub>
 80065d2:	e9da 8900 	ldrd	r8, r9, [sl]
 80065d6:	4602      	mov	r2, r0
 80065d8:	460b      	mov	r3, r1
 80065da:	4640      	mov	r0, r8
 80065dc:	4649      	mov	r1, r9
 80065de:	f7fa fa4b 	bl	8000a78 <__aeabi_dcmple>
 80065e2:	b140      	cbz	r0, 80065f6 <__ieee754_sqrt+0x15e>
 80065e4:	f1b4 3fff 	cmp.w	r4, #4294967295
 80065e8:	e9da 0100 	ldrd	r0, r1, [sl]
 80065ec:	e9db 2300 	ldrd	r2, r3, [fp]
 80065f0:	d111      	bne.n	8006616 <__ieee754_sqrt+0x17e>
 80065f2:	3601      	adds	r6, #1
 80065f4:	463c      	mov	r4, r7
 80065f6:	1072      	asrs	r2, r6, #1
 80065f8:	0863      	lsrs	r3, r4, #1
 80065fa:	07f1      	lsls	r1, r6, #31
 80065fc:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8006600:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8006604:	bf48      	it	mi
 8006606:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800660a:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800660e:	4618      	mov	r0, r3
 8006610:	e756      	b.n	80064c0 <__ieee754_sqrt+0x28>
 8006612:	4690      	mov	r8, r2
 8006614:	e7be      	b.n	8006594 <__ieee754_sqrt+0xfc>
 8006616:	f7f9 fdfd 	bl	8000214 <__adddf3>
 800661a:	e9da 8900 	ldrd	r8, r9, [sl]
 800661e:	4602      	mov	r2, r0
 8006620:	460b      	mov	r3, r1
 8006622:	4640      	mov	r0, r8
 8006624:	4649      	mov	r1, r9
 8006626:	f7fa fa1d 	bl	8000a64 <__aeabi_dcmplt>
 800662a:	b120      	cbz	r0, 8006636 <__ieee754_sqrt+0x19e>
 800662c:	1ca0      	adds	r0, r4, #2
 800662e:	bf08      	it	eq
 8006630:	3601      	addeq	r6, #1
 8006632:	3402      	adds	r4, #2
 8006634:	e7df      	b.n	80065f6 <__ieee754_sqrt+0x15e>
 8006636:	1c63      	adds	r3, r4, #1
 8006638:	f023 0401 	bic.w	r4, r3, #1
 800663c:	e7db      	b.n	80065f6 <__ieee754_sqrt+0x15e>
 800663e:	bf00      	nop
 8006640:	7ff00000 	.word	0x7ff00000
 8006644:	20000020 	.word	0x20000020
 8006648:	20000018 	.word	0x20000018
 800664c:	00000000 	.word	0x00000000

08006650 <__kernel_rem_pio2>:
 8006650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006654:	ed2d 8b02 	vpush	{d8}
 8006658:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800665c:	f112 0f14 	cmn.w	r2, #20
 8006660:	9306      	str	r3, [sp, #24]
 8006662:	9104      	str	r1, [sp, #16]
 8006664:	4bbe      	ldr	r3, [pc, #760]	@ (8006960 <__kernel_rem_pio2+0x310>)
 8006666:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8006668:	9008      	str	r0, [sp, #32]
 800666a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800666e:	9300      	str	r3, [sp, #0]
 8006670:	9b06      	ldr	r3, [sp, #24]
 8006672:	f103 33ff 	add.w	r3, r3, #4294967295
 8006676:	bfa8      	it	ge
 8006678:	1ed4      	subge	r4, r2, #3
 800667a:	9305      	str	r3, [sp, #20]
 800667c:	bfb2      	itee	lt
 800667e:	2400      	movlt	r4, #0
 8006680:	2318      	movge	r3, #24
 8006682:	fb94 f4f3 	sdivge	r4, r4, r3
 8006686:	f06f 0317 	mvn.w	r3, #23
 800668a:	fb04 3303 	mla	r3, r4, r3, r3
 800668e:	eb03 0b02 	add.w	fp, r3, r2
 8006692:	9b00      	ldr	r3, [sp, #0]
 8006694:	9a05      	ldr	r2, [sp, #20]
 8006696:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 8006950 <__kernel_rem_pio2+0x300>
 800669a:	eb03 0802 	add.w	r8, r3, r2
 800669e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 80066a0:	1aa7      	subs	r7, r4, r2
 80066a2:	ae20      	add	r6, sp, #128	@ 0x80
 80066a4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80066a8:	2500      	movs	r5, #0
 80066aa:	4545      	cmp	r5, r8
 80066ac:	dd13      	ble.n	80066d6 <__kernel_rem_pio2+0x86>
 80066ae:	9b06      	ldr	r3, [sp, #24]
 80066b0:	aa20      	add	r2, sp, #128	@ 0x80
 80066b2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80066b6:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 80066ba:	f04f 0800 	mov.w	r8, #0
 80066be:	9b00      	ldr	r3, [sp, #0]
 80066c0:	4598      	cmp	r8, r3
 80066c2:	dc31      	bgt.n	8006728 <__kernel_rem_pio2+0xd8>
 80066c4:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 8006950 <__kernel_rem_pio2+0x300>
 80066c8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80066cc:	ed8d 7b02 	vstr	d7, [sp, #8]
 80066d0:	462f      	mov	r7, r5
 80066d2:	2600      	movs	r6, #0
 80066d4:	e01b      	b.n	800670e <__kernel_rem_pio2+0xbe>
 80066d6:	42ef      	cmn	r7, r5
 80066d8:	d407      	bmi.n	80066ea <__kernel_rem_pio2+0x9a>
 80066da:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80066de:	f7f9 fee5 	bl	80004ac <__aeabi_i2d>
 80066e2:	e8e6 0102 	strd	r0, r1, [r6], #8
 80066e6:	3501      	adds	r5, #1
 80066e8:	e7df      	b.n	80066aa <__kernel_rem_pio2+0x5a>
 80066ea:	ec51 0b18 	vmov	r0, r1, d8
 80066ee:	e7f8      	b.n	80066e2 <__kernel_rem_pio2+0x92>
 80066f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80066f4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80066f8:	f7f9 ff42 	bl	8000580 <__aeabi_dmul>
 80066fc:	4602      	mov	r2, r0
 80066fe:	460b      	mov	r3, r1
 8006700:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006704:	f7f9 fd86 	bl	8000214 <__adddf3>
 8006708:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800670c:	3601      	adds	r6, #1
 800670e:	9b05      	ldr	r3, [sp, #20]
 8006710:	429e      	cmp	r6, r3
 8006712:	f1a7 0708 	sub.w	r7, r7, #8
 8006716:	ddeb      	ble.n	80066f0 <__kernel_rem_pio2+0xa0>
 8006718:	ed9d 7b02 	vldr	d7, [sp, #8]
 800671c:	f108 0801 	add.w	r8, r8, #1
 8006720:	ecaa 7b02 	vstmia	sl!, {d7}
 8006724:	3508      	adds	r5, #8
 8006726:	e7ca      	b.n	80066be <__kernel_rem_pio2+0x6e>
 8006728:	9b00      	ldr	r3, [sp, #0]
 800672a:	f8dd 8000 	ldr.w	r8, [sp]
 800672e:	aa0c      	add	r2, sp, #48	@ 0x30
 8006730:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006734:	930a      	str	r3, [sp, #40]	@ 0x28
 8006736:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8006738:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800673c:	9309      	str	r3, [sp, #36]	@ 0x24
 800673e:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8006742:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006744:	ab98      	add	r3, sp, #608	@ 0x260
 8006746:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800674a:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 800674e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006752:	ac0c      	add	r4, sp, #48	@ 0x30
 8006754:	ab70      	add	r3, sp, #448	@ 0x1c0
 8006756:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 800675a:	46a1      	mov	r9, r4
 800675c:	46c2      	mov	sl, r8
 800675e:	f1ba 0f00 	cmp.w	sl, #0
 8006762:	f1a5 0508 	sub.w	r5, r5, #8
 8006766:	dc77      	bgt.n	8006858 <__kernel_rem_pio2+0x208>
 8006768:	4658      	mov	r0, fp
 800676a:	ed9d 0b02 	vldr	d0, [sp, #8]
 800676e:	f000 fac7 	bl	8006d00 <scalbn>
 8006772:	ec57 6b10 	vmov	r6, r7, d0
 8006776:	2200      	movs	r2, #0
 8006778:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800677c:	4630      	mov	r0, r6
 800677e:	4639      	mov	r1, r7
 8006780:	f7f9 fefe 	bl	8000580 <__aeabi_dmul>
 8006784:	ec41 0b10 	vmov	d0, r0, r1
 8006788:	f000 fb3a 	bl	8006e00 <floor>
 800678c:	4b75      	ldr	r3, [pc, #468]	@ (8006964 <__kernel_rem_pio2+0x314>)
 800678e:	ec51 0b10 	vmov	r0, r1, d0
 8006792:	2200      	movs	r2, #0
 8006794:	f7f9 fef4 	bl	8000580 <__aeabi_dmul>
 8006798:	4602      	mov	r2, r0
 800679a:	460b      	mov	r3, r1
 800679c:	4630      	mov	r0, r6
 800679e:	4639      	mov	r1, r7
 80067a0:	f7f9 fd36 	bl	8000210 <__aeabi_dsub>
 80067a4:	460f      	mov	r7, r1
 80067a6:	4606      	mov	r6, r0
 80067a8:	f7fa f99a 	bl	8000ae0 <__aeabi_d2iz>
 80067ac:	9002      	str	r0, [sp, #8]
 80067ae:	f7f9 fe7d 	bl	80004ac <__aeabi_i2d>
 80067b2:	4602      	mov	r2, r0
 80067b4:	460b      	mov	r3, r1
 80067b6:	4630      	mov	r0, r6
 80067b8:	4639      	mov	r1, r7
 80067ba:	f7f9 fd29 	bl	8000210 <__aeabi_dsub>
 80067be:	f1bb 0f00 	cmp.w	fp, #0
 80067c2:	4606      	mov	r6, r0
 80067c4:	460f      	mov	r7, r1
 80067c6:	dd6c      	ble.n	80068a2 <__kernel_rem_pio2+0x252>
 80067c8:	f108 31ff 	add.w	r1, r8, #4294967295
 80067cc:	ab0c      	add	r3, sp, #48	@ 0x30
 80067ce:	9d02      	ldr	r5, [sp, #8]
 80067d0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80067d4:	f1cb 0018 	rsb	r0, fp, #24
 80067d8:	fa43 f200 	asr.w	r2, r3, r0
 80067dc:	4415      	add	r5, r2
 80067de:	4082      	lsls	r2, r0
 80067e0:	1a9b      	subs	r3, r3, r2
 80067e2:	aa0c      	add	r2, sp, #48	@ 0x30
 80067e4:	9502      	str	r5, [sp, #8]
 80067e6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80067ea:	f1cb 0217 	rsb	r2, fp, #23
 80067ee:	fa43 f902 	asr.w	r9, r3, r2
 80067f2:	f1b9 0f00 	cmp.w	r9, #0
 80067f6:	dd64      	ble.n	80068c2 <__kernel_rem_pio2+0x272>
 80067f8:	9b02      	ldr	r3, [sp, #8]
 80067fa:	2200      	movs	r2, #0
 80067fc:	3301      	adds	r3, #1
 80067fe:	9302      	str	r3, [sp, #8]
 8006800:	4615      	mov	r5, r2
 8006802:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8006806:	4590      	cmp	r8, r2
 8006808:	f300 80b8 	bgt.w	800697c <__kernel_rem_pio2+0x32c>
 800680c:	f1bb 0f00 	cmp.w	fp, #0
 8006810:	dd07      	ble.n	8006822 <__kernel_rem_pio2+0x1d2>
 8006812:	f1bb 0f01 	cmp.w	fp, #1
 8006816:	f000 80bf 	beq.w	8006998 <__kernel_rem_pio2+0x348>
 800681a:	f1bb 0f02 	cmp.w	fp, #2
 800681e:	f000 80c6 	beq.w	80069ae <__kernel_rem_pio2+0x35e>
 8006822:	f1b9 0f02 	cmp.w	r9, #2
 8006826:	d14c      	bne.n	80068c2 <__kernel_rem_pio2+0x272>
 8006828:	4632      	mov	r2, r6
 800682a:	463b      	mov	r3, r7
 800682c:	494e      	ldr	r1, [pc, #312]	@ (8006968 <__kernel_rem_pio2+0x318>)
 800682e:	2000      	movs	r0, #0
 8006830:	f7f9 fcee 	bl	8000210 <__aeabi_dsub>
 8006834:	4606      	mov	r6, r0
 8006836:	460f      	mov	r7, r1
 8006838:	2d00      	cmp	r5, #0
 800683a:	d042      	beq.n	80068c2 <__kernel_rem_pio2+0x272>
 800683c:	4658      	mov	r0, fp
 800683e:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 8006958 <__kernel_rem_pio2+0x308>
 8006842:	f000 fa5d 	bl	8006d00 <scalbn>
 8006846:	4630      	mov	r0, r6
 8006848:	4639      	mov	r1, r7
 800684a:	ec53 2b10 	vmov	r2, r3, d0
 800684e:	f7f9 fcdf 	bl	8000210 <__aeabi_dsub>
 8006852:	4606      	mov	r6, r0
 8006854:	460f      	mov	r7, r1
 8006856:	e034      	b.n	80068c2 <__kernel_rem_pio2+0x272>
 8006858:	4b44      	ldr	r3, [pc, #272]	@ (800696c <__kernel_rem_pio2+0x31c>)
 800685a:	2200      	movs	r2, #0
 800685c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006860:	f7f9 fe8e 	bl	8000580 <__aeabi_dmul>
 8006864:	f7fa f93c 	bl	8000ae0 <__aeabi_d2iz>
 8006868:	f7f9 fe20 	bl	80004ac <__aeabi_i2d>
 800686c:	4b40      	ldr	r3, [pc, #256]	@ (8006970 <__kernel_rem_pio2+0x320>)
 800686e:	2200      	movs	r2, #0
 8006870:	4606      	mov	r6, r0
 8006872:	460f      	mov	r7, r1
 8006874:	f7f9 fe84 	bl	8000580 <__aeabi_dmul>
 8006878:	4602      	mov	r2, r0
 800687a:	460b      	mov	r3, r1
 800687c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006880:	f7f9 fcc6 	bl	8000210 <__aeabi_dsub>
 8006884:	f7fa f92c 	bl	8000ae0 <__aeabi_d2iz>
 8006888:	e9d5 2300 	ldrd	r2, r3, [r5]
 800688c:	f849 0b04 	str.w	r0, [r9], #4
 8006890:	4639      	mov	r1, r7
 8006892:	4630      	mov	r0, r6
 8006894:	f7f9 fcbe 	bl	8000214 <__adddf3>
 8006898:	f10a 3aff 	add.w	sl, sl, #4294967295
 800689c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80068a0:	e75d      	b.n	800675e <__kernel_rem_pio2+0x10e>
 80068a2:	d107      	bne.n	80068b4 <__kernel_rem_pio2+0x264>
 80068a4:	f108 33ff 	add.w	r3, r8, #4294967295
 80068a8:	aa0c      	add	r2, sp, #48	@ 0x30
 80068aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80068ae:	ea4f 59e3 	mov.w	r9, r3, asr #23
 80068b2:	e79e      	b.n	80067f2 <__kernel_rem_pio2+0x1a2>
 80068b4:	4b2f      	ldr	r3, [pc, #188]	@ (8006974 <__kernel_rem_pio2+0x324>)
 80068b6:	2200      	movs	r2, #0
 80068b8:	f7fa f8e8 	bl	8000a8c <__aeabi_dcmpge>
 80068bc:	2800      	cmp	r0, #0
 80068be:	d143      	bne.n	8006948 <__kernel_rem_pio2+0x2f8>
 80068c0:	4681      	mov	r9, r0
 80068c2:	2200      	movs	r2, #0
 80068c4:	2300      	movs	r3, #0
 80068c6:	4630      	mov	r0, r6
 80068c8:	4639      	mov	r1, r7
 80068ca:	f7fa f8c1 	bl	8000a50 <__aeabi_dcmpeq>
 80068ce:	2800      	cmp	r0, #0
 80068d0:	f000 80bf 	beq.w	8006a52 <__kernel_rem_pio2+0x402>
 80068d4:	f108 33ff 	add.w	r3, r8, #4294967295
 80068d8:	2200      	movs	r2, #0
 80068da:	9900      	ldr	r1, [sp, #0]
 80068dc:	428b      	cmp	r3, r1
 80068de:	da6e      	bge.n	80069be <__kernel_rem_pio2+0x36e>
 80068e0:	2a00      	cmp	r2, #0
 80068e2:	f000 8089 	beq.w	80069f8 <__kernel_rem_pio2+0x3a8>
 80068e6:	f108 38ff 	add.w	r8, r8, #4294967295
 80068ea:	ab0c      	add	r3, sp, #48	@ 0x30
 80068ec:	f1ab 0b18 	sub.w	fp, fp, #24
 80068f0:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d0f6      	beq.n	80068e6 <__kernel_rem_pio2+0x296>
 80068f8:	4658      	mov	r0, fp
 80068fa:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8006958 <__kernel_rem_pio2+0x308>
 80068fe:	f000 f9ff 	bl	8006d00 <scalbn>
 8006902:	f108 0301 	add.w	r3, r8, #1
 8006906:	00da      	lsls	r2, r3, #3
 8006908:	9205      	str	r2, [sp, #20]
 800690a:	ec55 4b10 	vmov	r4, r5, d0
 800690e:	aa70      	add	r2, sp, #448	@ 0x1c0
 8006910:	f8df b058 	ldr.w	fp, [pc, #88]	@ 800696c <__kernel_rem_pio2+0x31c>
 8006914:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8006918:	4646      	mov	r6, r8
 800691a:	f04f 0a00 	mov.w	sl, #0
 800691e:	2e00      	cmp	r6, #0
 8006920:	f280 80cf 	bge.w	8006ac2 <__kernel_rem_pio2+0x472>
 8006924:	4644      	mov	r4, r8
 8006926:	2c00      	cmp	r4, #0
 8006928:	f2c0 80fd 	blt.w	8006b26 <__kernel_rem_pio2+0x4d6>
 800692c:	4b12      	ldr	r3, [pc, #72]	@ (8006978 <__kernel_rem_pio2+0x328>)
 800692e:	461f      	mov	r7, r3
 8006930:	ab70      	add	r3, sp, #448	@ 0x1c0
 8006932:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006936:	9306      	str	r3, [sp, #24]
 8006938:	f04f 0a00 	mov.w	sl, #0
 800693c:	f04f 0b00 	mov.w	fp, #0
 8006940:	2600      	movs	r6, #0
 8006942:	eba8 0504 	sub.w	r5, r8, r4
 8006946:	e0e2      	b.n	8006b0e <__kernel_rem_pio2+0x4be>
 8006948:	f04f 0902 	mov.w	r9, #2
 800694c:	e754      	b.n	80067f8 <__kernel_rem_pio2+0x1a8>
 800694e:	bf00      	nop
	...
 800695c:	3ff00000 	.word	0x3ff00000
 8006960:	080071e8 	.word	0x080071e8
 8006964:	40200000 	.word	0x40200000
 8006968:	3ff00000 	.word	0x3ff00000
 800696c:	3e700000 	.word	0x3e700000
 8006970:	41700000 	.word	0x41700000
 8006974:	3fe00000 	.word	0x3fe00000
 8006978:	080071a8 	.word	0x080071a8
 800697c:	f854 3b04 	ldr.w	r3, [r4], #4
 8006980:	b945      	cbnz	r5, 8006994 <__kernel_rem_pio2+0x344>
 8006982:	b123      	cbz	r3, 800698e <__kernel_rem_pio2+0x33e>
 8006984:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8006988:	f844 3c04 	str.w	r3, [r4, #-4]
 800698c:	2301      	movs	r3, #1
 800698e:	3201      	adds	r2, #1
 8006990:	461d      	mov	r5, r3
 8006992:	e738      	b.n	8006806 <__kernel_rem_pio2+0x1b6>
 8006994:	1acb      	subs	r3, r1, r3
 8006996:	e7f7      	b.n	8006988 <__kernel_rem_pio2+0x338>
 8006998:	f108 32ff 	add.w	r2, r8, #4294967295
 800699c:	ab0c      	add	r3, sp, #48	@ 0x30
 800699e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069a2:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80069a6:	a90c      	add	r1, sp, #48	@ 0x30
 80069a8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80069ac:	e739      	b.n	8006822 <__kernel_rem_pio2+0x1d2>
 80069ae:	f108 32ff 	add.w	r2, r8, #4294967295
 80069b2:	ab0c      	add	r3, sp, #48	@ 0x30
 80069b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069b8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80069bc:	e7f3      	b.n	80069a6 <__kernel_rem_pio2+0x356>
 80069be:	a90c      	add	r1, sp, #48	@ 0x30
 80069c0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80069c4:	3b01      	subs	r3, #1
 80069c6:	430a      	orrs	r2, r1
 80069c8:	e787      	b.n	80068da <__kernel_rem_pio2+0x28a>
 80069ca:	3401      	adds	r4, #1
 80069cc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80069d0:	2a00      	cmp	r2, #0
 80069d2:	d0fa      	beq.n	80069ca <__kernel_rem_pio2+0x37a>
 80069d4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80069d6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80069da:	eb0d 0503 	add.w	r5, sp, r3
 80069de:	9b06      	ldr	r3, [sp, #24]
 80069e0:	aa20      	add	r2, sp, #128	@ 0x80
 80069e2:	4443      	add	r3, r8
 80069e4:	f108 0701 	add.w	r7, r8, #1
 80069e8:	3d98      	subs	r5, #152	@ 0x98
 80069ea:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 80069ee:	4444      	add	r4, r8
 80069f0:	42bc      	cmp	r4, r7
 80069f2:	da04      	bge.n	80069fe <__kernel_rem_pio2+0x3ae>
 80069f4:	46a0      	mov	r8, r4
 80069f6:	e6a2      	b.n	800673e <__kernel_rem_pio2+0xee>
 80069f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80069fa:	2401      	movs	r4, #1
 80069fc:	e7e6      	b.n	80069cc <__kernel_rem_pio2+0x37c>
 80069fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a00:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8006a04:	f7f9 fd52 	bl	80004ac <__aeabi_i2d>
 8006a08:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 8006cd0 <__kernel_rem_pio2+0x680>
 8006a0c:	e8e6 0102 	strd	r0, r1, [r6], #8
 8006a10:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006a14:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006a18:	46b2      	mov	sl, r6
 8006a1a:	f04f 0800 	mov.w	r8, #0
 8006a1e:	9b05      	ldr	r3, [sp, #20]
 8006a20:	4598      	cmp	r8, r3
 8006a22:	dd05      	ble.n	8006a30 <__kernel_rem_pio2+0x3e0>
 8006a24:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006a28:	3701      	adds	r7, #1
 8006a2a:	eca5 7b02 	vstmia	r5!, {d7}
 8006a2e:	e7df      	b.n	80069f0 <__kernel_rem_pio2+0x3a0>
 8006a30:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 8006a34:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8006a38:	f7f9 fda2 	bl	8000580 <__aeabi_dmul>
 8006a3c:	4602      	mov	r2, r0
 8006a3e:	460b      	mov	r3, r1
 8006a40:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a44:	f7f9 fbe6 	bl	8000214 <__adddf3>
 8006a48:	f108 0801 	add.w	r8, r8, #1
 8006a4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006a50:	e7e5      	b.n	8006a1e <__kernel_rem_pio2+0x3ce>
 8006a52:	f1cb 0000 	rsb	r0, fp, #0
 8006a56:	ec47 6b10 	vmov	d0, r6, r7
 8006a5a:	f000 f951 	bl	8006d00 <scalbn>
 8006a5e:	ec55 4b10 	vmov	r4, r5, d0
 8006a62:	4b9d      	ldr	r3, [pc, #628]	@ (8006cd8 <__kernel_rem_pio2+0x688>)
 8006a64:	2200      	movs	r2, #0
 8006a66:	4620      	mov	r0, r4
 8006a68:	4629      	mov	r1, r5
 8006a6a:	f7fa f80f 	bl	8000a8c <__aeabi_dcmpge>
 8006a6e:	b300      	cbz	r0, 8006ab2 <__kernel_rem_pio2+0x462>
 8006a70:	4b9a      	ldr	r3, [pc, #616]	@ (8006cdc <__kernel_rem_pio2+0x68c>)
 8006a72:	2200      	movs	r2, #0
 8006a74:	4620      	mov	r0, r4
 8006a76:	4629      	mov	r1, r5
 8006a78:	f7f9 fd82 	bl	8000580 <__aeabi_dmul>
 8006a7c:	f7fa f830 	bl	8000ae0 <__aeabi_d2iz>
 8006a80:	4606      	mov	r6, r0
 8006a82:	f7f9 fd13 	bl	80004ac <__aeabi_i2d>
 8006a86:	4b94      	ldr	r3, [pc, #592]	@ (8006cd8 <__kernel_rem_pio2+0x688>)
 8006a88:	2200      	movs	r2, #0
 8006a8a:	f7f9 fd79 	bl	8000580 <__aeabi_dmul>
 8006a8e:	460b      	mov	r3, r1
 8006a90:	4602      	mov	r2, r0
 8006a92:	4629      	mov	r1, r5
 8006a94:	4620      	mov	r0, r4
 8006a96:	f7f9 fbbb 	bl	8000210 <__aeabi_dsub>
 8006a9a:	f7fa f821 	bl	8000ae0 <__aeabi_d2iz>
 8006a9e:	ab0c      	add	r3, sp, #48	@ 0x30
 8006aa0:	f10b 0b18 	add.w	fp, fp, #24
 8006aa4:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8006aa8:	f108 0801 	add.w	r8, r8, #1
 8006aac:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8006ab0:	e722      	b.n	80068f8 <__kernel_rem_pio2+0x2a8>
 8006ab2:	4620      	mov	r0, r4
 8006ab4:	4629      	mov	r1, r5
 8006ab6:	f7fa f813 	bl	8000ae0 <__aeabi_d2iz>
 8006aba:	ab0c      	add	r3, sp, #48	@ 0x30
 8006abc:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8006ac0:	e71a      	b.n	80068f8 <__kernel_rem_pio2+0x2a8>
 8006ac2:	ab0c      	add	r3, sp, #48	@ 0x30
 8006ac4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8006ac8:	f7f9 fcf0 	bl	80004ac <__aeabi_i2d>
 8006acc:	4622      	mov	r2, r4
 8006ace:	462b      	mov	r3, r5
 8006ad0:	f7f9 fd56 	bl	8000580 <__aeabi_dmul>
 8006ad4:	4652      	mov	r2, sl
 8006ad6:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8006ada:	465b      	mov	r3, fp
 8006adc:	4620      	mov	r0, r4
 8006ade:	4629      	mov	r1, r5
 8006ae0:	f7f9 fd4e 	bl	8000580 <__aeabi_dmul>
 8006ae4:	3e01      	subs	r6, #1
 8006ae6:	4604      	mov	r4, r0
 8006ae8:	460d      	mov	r5, r1
 8006aea:	e718      	b.n	800691e <__kernel_rem_pio2+0x2ce>
 8006aec:	9906      	ldr	r1, [sp, #24]
 8006aee:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 8006af2:	9106      	str	r1, [sp, #24]
 8006af4:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8006af8:	f7f9 fd42 	bl	8000580 <__aeabi_dmul>
 8006afc:	4602      	mov	r2, r0
 8006afe:	460b      	mov	r3, r1
 8006b00:	4650      	mov	r0, sl
 8006b02:	4659      	mov	r1, fp
 8006b04:	f7f9 fb86 	bl	8000214 <__adddf3>
 8006b08:	3601      	adds	r6, #1
 8006b0a:	4682      	mov	sl, r0
 8006b0c:	468b      	mov	fp, r1
 8006b0e:	9b00      	ldr	r3, [sp, #0]
 8006b10:	429e      	cmp	r6, r3
 8006b12:	dc01      	bgt.n	8006b18 <__kernel_rem_pio2+0x4c8>
 8006b14:	42b5      	cmp	r5, r6
 8006b16:	dae9      	bge.n	8006aec <__kernel_rem_pio2+0x49c>
 8006b18:	ab48      	add	r3, sp, #288	@ 0x120
 8006b1a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8006b1e:	e9c5 ab00 	strd	sl, fp, [r5]
 8006b22:	3c01      	subs	r4, #1
 8006b24:	e6ff      	b.n	8006926 <__kernel_rem_pio2+0x2d6>
 8006b26:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8006b28:	2b02      	cmp	r3, #2
 8006b2a:	dc0b      	bgt.n	8006b44 <__kernel_rem_pio2+0x4f4>
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	dc39      	bgt.n	8006ba4 <__kernel_rem_pio2+0x554>
 8006b30:	d05d      	beq.n	8006bee <__kernel_rem_pio2+0x59e>
 8006b32:	9b02      	ldr	r3, [sp, #8]
 8006b34:	f003 0007 	and.w	r0, r3, #7
 8006b38:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8006b3c:	ecbd 8b02 	vpop	{d8}
 8006b40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b44:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8006b46:	2b03      	cmp	r3, #3
 8006b48:	d1f3      	bne.n	8006b32 <__kernel_rem_pio2+0x4e2>
 8006b4a:	9b05      	ldr	r3, [sp, #20]
 8006b4c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8006b50:	eb0d 0403 	add.w	r4, sp, r3
 8006b54:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8006b58:	4625      	mov	r5, r4
 8006b5a:	46c2      	mov	sl, r8
 8006b5c:	f1ba 0f00 	cmp.w	sl, #0
 8006b60:	f1a5 0508 	sub.w	r5, r5, #8
 8006b64:	dc6b      	bgt.n	8006c3e <__kernel_rem_pio2+0x5ee>
 8006b66:	4645      	mov	r5, r8
 8006b68:	2d01      	cmp	r5, #1
 8006b6a:	f1a4 0408 	sub.w	r4, r4, #8
 8006b6e:	f300 8087 	bgt.w	8006c80 <__kernel_rem_pio2+0x630>
 8006b72:	9c05      	ldr	r4, [sp, #20]
 8006b74:	ab48      	add	r3, sp, #288	@ 0x120
 8006b76:	441c      	add	r4, r3
 8006b78:	2000      	movs	r0, #0
 8006b7a:	2100      	movs	r1, #0
 8006b7c:	f1b8 0f01 	cmp.w	r8, #1
 8006b80:	f300 809c 	bgt.w	8006cbc <__kernel_rem_pio2+0x66c>
 8006b84:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 8006b88:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 8006b8c:	f1b9 0f00 	cmp.w	r9, #0
 8006b90:	f040 80a6 	bne.w	8006ce0 <__kernel_rem_pio2+0x690>
 8006b94:	9b04      	ldr	r3, [sp, #16]
 8006b96:	e9c3 7800 	strd	r7, r8, [r3]
 8006b9a:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8006b9e:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8006ba2:	e7c6      	b.n	8006b32 <__kernel_rem_pio2+0x4e2>
 8006ba4:	9d05      	ldr	r5, [sp, #20]
 8006ba6:	ab48      	add	r3, sp, #288	@ 0x120
 8006ba8:	441d      	add	r5, r3
 8006baa:	4644      	mov	r4, r8
 8006bac:	2000      	movs	r0, #0
 8006bae:	2100      	movs	r1, #0
 8006bb0:	2c00      	cmp	r4, #0
 8006bb2:	da35      	bge.n	8006c20 <__kernel_rem_pio2+0x5d0>
 8006bb4:	f1b9 0f00 	cmp.w	r9, #0
 8006bb8:	d038      	beq.n	8006c2c <__kernel_rem_pio2+0x5dc>
 8006bba:	4602      	mov	r2, r0
 8006bbc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006bc0:	9c04      	ldr	r4, [sp, #16]
 8006bc2:	e9c4 2300 	strd	r2, r3, [r4]
 8006bc6:	4602      	mov	r2, r0
 8006bc8:	460b      	mov	r3, r1
 8006bca:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 8006bce:	f7f9 fb1f 	bl	8000210 <__aeabi_dsub>
 8006bd2:	ad4a      	add	r5, sp, #296	@ 0x128
 8006bd4:	2401      	movs	r4, #1
 8006bd6:	45a0      	cmp	r8, r4
 8006bd8:	da2b      	bge.n	8006c32 <__kernel_rem_pio2+0x5e2>
 8006bda:	f1b9 0f00 	cmp.w	r9, #0
 8006bde:	d002      	beq.n	8006be6 <__kernel_rem_pio2+0x596>
 8006be0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006be4:	4619      	mov	r1, r3
 8006be6:	9b04      	ldr	r3, [sp, #16]
 8006be8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8006bec:	e7a1      	b.n	8006b32 <__kernel_rem_pio2+0x4e2>
 8006bee:	9c05      	ldr	r4, [sp, #20]
 8006bf0:	ab48      	add	r3, sp, #288	@ 0x120
 8006bf2:	441c      	add	r4, r3
 8006bf4:	2000      	movs	r0, #0
 8006bf6:	2100      	movs	r1, #0
 8006bf8:	f1b8 0f00 	cmp.w	r8, #0
 8006bfc:	da09      	bge.n	8006c12 <__kernel_rem_pio2+0x5c2>
 8006bfe:	f1b9 0f00 	cmp.w	r9, #0
 8006c02:	d002      	beq.n	8006c0a <__kernel_rem_pio2+0x5ba>
 8006c04:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006c08:	4619      	mov	r1, r3
 8006c0a:	9b04      	ldr	r3, [sp, #16]
 8006c0c:	e9c3 0100 	strd	r0, r1, [r3]
 8006c10:	e78f      	b.n	8006b32 <__kernel_rem_pio2+0x4e2>
 8006c12:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8006c16:	f7f9 fafd 	bl	8000214 <__adddf3>
 8006c1a:	f108 38ff 	add.w	r8, r8, #4294967295
 8006c1e:	e7eb      	b.n	8006bf8 <__kernel_rem_pio2+0x5a8>
 8006c20:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8006c24:	f7f9 faf6 	bl	8000214 <__adddf3>
 8006c28:	3c01      	subs	r4, #1
 8006c2a:	e7c1      	b.n	8006bb0 <__kernel_rem_pio2+0x560>
 8006c2c:	4602      	mov	r2, r0
 8006c2e:	460b      	mov	r3, r1
 8006c30:	e7c6      	b.n	8006bc0 <__kernel_rem_pio2+0x570>
 8006c32:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8006c36:	f7f9 faed 	bl	8000214 <__adddf3>
 8006c3a:	3401      	adds	r4, #1
 8006c3c:	e7cb      	b.n	8006bd6 <__kernel_rem_pio2+0x586>
 8006c3e:	ed95 7b00 	vldr	d7, [r5]
 8006c42:	ed8d 7b00 	vstr	d7, [sp]
 8006c46:	ed95 7b02 	vldr	d7, [r5, #8]
 8006c4a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006c4e:	ec53 2b17 	vmov	r2, r3, d7
 8006c52:	ed8d 7b06 	vstr	d7, [sp, #24]
 8006c56:	f7f9 fadd 	bl	8000214 <__adddf3>
 8006c5a:	4602      	mov	r2, r0
 8006c5c:	460b      	mov	r3, r1
 8006c5e:	4606      	mov	r6, r0
 8006c60:	460f      	mov	r7, r1
 8006c62:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006c66:	f7f9 fad3 	bl	8000210 <__aeabi_dsub>
 8006c6a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006c6e:	f7f9 fad1 	bl	8000214 <__adddf3>
 8006c72:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006c76:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8006c7a:	e9c5 6700 	strd	r6, r7, [r5]
 8006c7e:	e76d      	b.n	8006b5c <__kernel_rem_pio2+0x50c>
 8006c80:	ed94 7b00 	vldr	d7, [r4]
 8006c84:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8006c88:	ec51 0b17 	vmov	r0, r1, d7
 8006c8c:	4652      	mov	r2, sl
 8006c8e:	465b      	mov	r3, fp
 8006c90:	ed8d 7b00 	vstr	d7, [sp]
 8006c94:	f7f9 fabe 	bl	8000214 <__adddf3>
 8006c98:	4602      	mov	r2, r0
 8006c9a:	460b      	mov	r3, r1
 8006c9c:	4606      	mov	r6, r0
 8006c9e:	460f      	mov	r7, r1
 8006ca0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006ca4:	f7f9 fab4 	bl	8000210 <__aeabi_dsub>
 8006ca8:	4652      	mov	r2, sl
 8006caa:	465b      	mov	r3, fp
 8006cac:	f7f9 fab2 	bl	8000214 <__adddf3>
 8006cb0:	3d01      	subs	r5, #1
 8006cb2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006cb6:	e9c4 6700 	strd	r6, r7, [r4]
 8006cba:	e755      	b.n	8006b68 <__kernel_rem_pio2+0x518>
 8006cbc:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8006cc0:	f7f9 faa8 	bl	8000214 <__adddf3>
 8006cc4:	f108 38ff 	add.w	r8, r8, #4294967295
 8006cc8:	e758      	b.n	8006b7c <__kernel_rem_pio2+0x52c>
 8006cca:	bf00      	nop
 8006ccc:	f3af 8000 	nop.w
	...
 8006cd8:	41700000 	.word	0x41700000
 8006cdc:	3e700000 	.word	0x3e700000
 8006ce0:	9b04      	ldr	r3, [sp, #16]
 8006ce2:	9a04      	ldr	r2, [sp, #16]
 8006ce4:	601f      	str	r7, [r3, #0]
 8006ce6:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 8006cea:	605c      	str	r4, [r3, #4]
 8006cec:	609d      	str	r5, [r3, #8]
 8006cee:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006cf2:	60d3      	str	r3, [r2, #12]
 8006cf4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006cf8:	6110      	str	r0, [r2, #16]
 8006cfa:	6153      	str	r3, [r2, #20]
 8006cfc:	e719      	b.n	8006b32 <__kernel_rem_pio2+0x4e2>
 8006cfe:	bf00      	nop

08006d00 <scalbn>:
 8006d00:	b570      	push	{r4, r5, r6, lr}
 8006d02:	ec55 4b10 	vmov	r4, r5, d0
 8006d06:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8006d0a:	4606      	mov	r6, r0
 8006d0c:	462b      	mov	r3, r5
 8006d0e:	b991      	cbnz	r1, 8006d36 <scalbn+0x36>
 8006d10:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8006d14:	4323      	orrs	r3, r4
 8006d16:	d03d      	beq.n	8006d94 <scalbn+0x94>
 8006d18:	4b35      	ldr	r3, [pc, #212]	@ (8006df0 <scalbn+0xf0>)
 8006d1a:	4620      	mov	r0, r4
 8006d1c:	4629      	mov	r1, r5
 8006d1e:	2200      	movs	r2, #0
 8006d20:	f7f9 fc2e 	bl	8000580 <__aeabi_dmul>
 8006d24:	4b33      	ldr	r3, [pc, #204]	@ (8006df4 <scalbn+0xf4>)
 8006d26:	429e      	cmp	r6, r3
 8006d28:	4604      	mov	r4, r0
 8006d2a:	460d      	mov	r5, r1
 8006d2c:	da0f      	bge.n	8006d4e <scalbn+0x4e>
 8006d2e:	a328      	add	r3, pc, #160	@ (adr r3, 8006dd0 <scalbn+0xd0>)
 8006d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d34:	e01e      	b.n	8006d74 <scalbn+0x74>
 8006d36:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8006d3a:	4291      	cmp	r1, r2
 8006d3c:	d10b      	bne.n	8006d56 <scalbn+0x56>
 8006d3e:	4622      	mov	r2, r4
 8006d40:	4620      	mov	r0, r4
 8006d42:	4629      	mov	r1, r5
 8006d44:	f7f9 fa66 	bl	8000214 <__adddf3>
 8006d48:	4604      	mov	r4, r0
 8006d4a:	460d      	mov	r5, r1
 8006d4c:	e022      	b.n	8006d94 <scalbn+0x94>
 8006d4e:	460b      	mov	r3, r1
 8006d50:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8006d54:	3936      	subs	r1, #54	@ 0x36
 8006d56:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8006d5a:	4296      	cmp	r6, r2
 8006d5c:	dd0d      	ble.n	8006d7a <scalbn+0x7a>
 8006d5e:	2d00      	cmp	r5, #0
 8006d60:	a11d      	add	r1, pc, #116	@ (adr r1, 8006dd8 <scalbn+0xd8>)
 8006d62:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006d66:	da02      	bge.n	8006d6e <scalbn+0x6e>
 8006d68:	a11d      	add	r1, pc, #116	@ (adr r1, 8006de0 <scalbn+0xe0>)
 8006d6a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006d6e:	a31a      	add	r3, pc, #104	@ (adr r3, 8006dd8 <scalbn+0xd8>)
 8006d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d74:	f7f9 fc04 	bl	8000580 <__aeabi_dmul>
 8006d78:	e7e6      	b.n	8006d48 <scalbn+0x48>
 8006d7a:	1872      	adds	r2, r6, r1
 8006d7c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8006d80:	428a      	cmp	r2, r1
 8006d82:	dcec      	bgt.n	8006d5e <scalbn+0x5e>
 8006d84:	2a00      	cmp	r2, #0
 8006d86:	dd08      	ble.n	8006d9a <scalbn+0x9a>
 8006d88:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8006d8c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8006d90:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006d94:	ec45 4b10 	vmov	d0, r4, r5
 8006d98:	bd70      	pop	{r4, r5, r6, pc}
 8006d9a:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8006d9e:	da08      	bge.n	8006db2 <scalbn+0xb2>
 8006da0:	2d00      	cmp	r5, #0
 8006da2:	a10b      	add	r1, pc, #44	@ (adr r1, 8006dd0 <scalbn+0xd0>)
 8006da4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006da8:	dac1      	bge.n	8006d2e <scalbn+0x2e>
 8006daa:	a10f      	add	r1, pc, #60	@ (adr r1, 8006de8 <scalbn+0xe8>)
 8006dac:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006db0:	e7bd      	b.n	8006d2e <scalbn+0x2e>
 8006db2:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8006db6:	3236      	adds	r2, #54	@ 0x36
 8006db8:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8006dbc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006dc0:	4620      	mov	r0, r4
 8006dc2:	4b0d      	ldr	r3, [pc, #52]	@ (8006df8 <scalbn+0xf8>)
 8006dc4:	4629      	mov	r1, r5
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	e7d4      	b.n	8006d74 <scalbn+0x74>
 8006dca:	bf00      	nop
 8006dcc:	f3af 8000 	nop.w
 8006dd0:	c2f8f359 	.word	0xc2f8f359
 8006dd4:	01a56e1f 	.word	0x01a56e1f
 8006dd8:	8800759c 	.word	0x8800759c
 8006ddc:	7e37e43c 	.word	0x7e37e43c
 8006de0:	8800759c 	.word	0x8800759c
 8006de4:	fe37e43c 	.word	0xfe37e43c
 8006de8:	c2f8f359 	.word	0xc2f8f359
 8006dec:	81a56e1f 	.word	0x81a56e1f
 8006df0:	43500000 	.word	0x43500000
 8006df4:	ffff3cb0 	.word	0xffff3cb0
 8006df8:	3c900000 	.word	0x3c900000
 8006dfc:	00000000 	.word	0x00000000

08006e00 <floor>:
 8006e00:	ec51 0b10 	vmov	r0, r1, d0
 8006e04:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006e08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e0c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8006e10:	2e13      	cmp	r6, #19
 8006e12:	460c      	mov	r4, r1
 8006e14:	4605      	mov	r5, r0
 8006e16:	4680      	mov	r8, r0
 8006e18:	dc34      	bgt.n	8006e84 <floor+0x84>
 8006e1a:	2e00      	cmp	r6, #0
 8006e1c:	da17      	bge.n	8006e4e <floor+0x4e>
 8006e1e:	a332      	add	r3, pc, #200	@ (adr r3, 8006ee8 <floor+0xe8>)
 8006e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e24:	f7f9 f9f6 	bl	8000214 <__adddf3>
 8006e28:	2200      	movs	r2, #0
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	f7f9 fe38 	bl	8000aa0 <__aeabi_dcmpgt>
 8006e30:	b150      	cbz	r0, 8006e48 <floor+0x48>
 8006e32:	2c00      	cmp	r4, #0
 8006e34:	da55      	bge.n	8006ee2 <floor+0xe2>
 8006e36:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8006e3a:	432c      	orrs	r4, r5
 8006e3c:	2500      	movs	r5, #0
 8006e3e:	42ac      	cmp	r4, r5
 8006e40:	4c2b      	ldr	r4, [pc, #172]	@ (8006ef0 <floor+0xf0>)
 8006e42:	bf08      	it	eq
 8006e44:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8006e48:	4621      	mov	r1, r4
 8006e4a:	4628      	mov	r0, r5
 8006e4c:	e023      	b.n	8006e96 <floor+0x96>
 8006e4e:	4f29      	ldr	r7, [pc, #164]	@ (8006ef4 <floor+0xf4>)
 8006e50:	4137      	asrs	r7, r6
 8006e52:	ea01 0307 	and.w	r3, r1, r7
 8006e56:	4303      	orrs	r3, r0
 8006e58:	d01d      	beq.n	8006e96 <floor+0x96>
 8006e5a:	a323      	add	r3, pc, #140	@ (adr r3, 8006ee8 <floor+0xe8>)
 8006e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e60:	f7f9 f9d8 	bl	8000214 <__adddf3>
 8006e64:	2200      	movs	r2, #0
 8006e66:	2300      	movs	r3, #0
 8006e68:	f7f9 fe1a 	bl	8000aa0 <__aeabi_dcmpgt>
 8006e6c:	2800      	cmp	r0, #0
 8006e6e:	d0eb      	beq.n	8006e48 <floor+0x48>
 8006e70:	2c00      	cmp	r4, #0
 8006e72:	bfbe      	ittt	lt
 8006e74:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8006e78:	4133      	asrlt	r3, r6
 8006e7a:	18e4      	addlt	r4, r4, r3
 8006e7c:	ea24 0407 	bic.w	r4, r4, r7
 8006e80:	2500      	movs	r5, #0
 8006e82:	e7e1      	b.n	8006e48 <floor+0x48>
 8006e84:	2e33      	cmp	r6, #51	@ 0x33
 8006e86:	dd0a      	ble.n	8006e9e <floor+0x9e>
 8006e88:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8006e8c:	d103      	bne.n	8006e96 <floor+0x96>
 8006e8e:	4602      	mov	r2, r0
 8006e90:	460b      	mov	r3, r1
 8006e92:	f7f9 f9bf 	bl	8000214 <__adddf3>
 8006e96:	ec41 0b10 	vmov	d0, r0, r1
 8006e9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e9e:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8006ea2:	f04f 37ff 	mov.w	r7, #4294967295
 8006ea6:	40df      	lsrs	r7, r3
 8006ea8:	4207      	tst	r7, r0
 8006eaa:	d0f4      	beq.n	8006e96 <floor+0x96>
 8006eac:	a30e      	add	r3, pc, #56	@ (adr r3, 8006ee8 <floor+0xe8>)
 8006eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eb2:	f7f9 f9af 	bl	8000214 <__adddf3>
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	2300      	movs	r3, #0
 8006eba:	f7f9 fdf1 	bl	8000aa0 <__aeabi_dcmpgt>
 8006ebe:	2800      	cmp	r0, #0
 8006ec0:	d0c2      	beq.n	8006e48 <floor+0x48>
 8006ec2:	2c00      	cmp	r4, #0
 8006ec4:	da0a      	bge.n	8006edc <floor+0xdc>
 8006ec6:	2e14      	cmp	r6, #20
 8006ec8:	d101      	bne.n	8006ece <floor+0xce>
 8006eca:	3401      	adds	r4, #1
 8006ecc:	e006      	b.n	8006edc <floor+0xdc>
 8006ece:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	40b3      	lsls	r3, r6
 8006ed6:	441d      	add	r5, r3
 8006ed8:	4545      	cmp	r5, r8
 8006eda:	d3f6      	bcc.n	8006eca <floor+0xca>
 8006edc:	ea25 0507 	bic.w	r5, r5, r7
 8006ee0:	e7b2      	b.n	8006e48 <floor+0x48>
 8006ee2:	2500      	movs	r5, #0
 8006ee4:	462c      	mov	r4, r5
 8006ee6:	e7af      	b.n	8006e48 <floor+0x48>
 8006ee8:	8800759c 	.word	0x8800759c
 8006eec:	7e37e43c 	.word	0x7e37e43c
 8006ef0:	bff00000 	.word	0xbff00000
 8006ef4:	000fffff 	.word	0x000fffff

08006ef8 <memset>:
 8006ef8:	4402      	add	r2, r0
 8006efa:	4603      	mov	r3, r0
 8006efc:	4293      	cmp	r3, r2
 8006efe:	d100      	bne.n	8006f02 <memset+0xa>
 8006f00:	4770      	bx	lr
 8006f02:	f803 1b01 	strb.w	r1, [r3], #1
 8006f06:	e7f9      	b.n	8006efc <memset+0x4>

08006f08 <__errno>:
 8006f08:	4b01      	ldr	r3, [pc, #4]	@ (8006f10 <__errno+0x8>)
 8006f0a:	6818      	ldr	r0, [r3, #0]
 8006f0c:	4770      	bx	lr
 8006f0e:	bf00      	nop
 8006f10:	20000028 	.word	0x20000028

08006f14 <__libc_init_array>:
 8006f14:	b570      	push	{r4, r5, r6, lr}
 8006f16:	4d0d      	ldr	r5, [pc, #52]	@ (8006f4c <__libc_init_array+0x38>)
 8006f18:	4c0d      	ldr	r4, [pc, #52]	@ (8006f50 <__libc_init_array+0x3c>)
 8006f1a:	1b64      	subs	r4, r4, r5
 8006f1c:	10a4      	asrs	r4, r4, #2
 8006f1e:	2600      	movs	r6, #0
 8006f20:	42a6      	cmp	r6, r4
 8006f22:	d109      	bne.n	8006f38 <__libc_init_array+0x24>
 8006f24:	4d0b      	ldr	r5, [pc, #44]	@ (8006f54 <__libc_init_array+0x40>)
 8006f26:	4c0c      	ldr	r4, [pc, #48]	@ (8006f58 <__libc_init_array+0x44>)
 8006f28:	f000 f826 	bl	8006f78 <_init>
 8006f2c:	1b64      	subs	r4, r4, r5
 8006f2e:	10a4      	asrs	r4, r4, #2
 8006f30:	2600      	movs	r6, #0
 8006f32:	42a6      	cmp	r6, r4
 8006f34:	d105      	bne.n	8006f42 <__libc_init_array+0x2e>
 8006f36:	bd70      	pop	{r4, r5, r6, pc}
 8006f38:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f3c:	4798      	blx	r3
 8006f3e:	3601      	adds	r6, #1
 8006f40:	e7ee      	b.n	8006f20 <__libc_init_array+0xc>
 8006f42:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f46:	4798      	blx	r3
 8006f48:	3601      	adds	r6, #1
 8006f4a:	e7f2      	b.n	8006f32 <__libc_init_array+0x1e>
 8006f4c:	08007200 	.word	0x08007200
 8006f50:	08007200 	.word	0x08007200
 8006f54:	08007200 	.word	0x08007200
 8006f58:	08007204 	.word	0x08007204

08006f5c <memcpy>:
 8006f5c:	440a      	add	r2, r1
 8006f5e:	4291      	cmp	r1, r2
 8006f60:	f100 33ff 	add.w	r3, r0, #4294967295
 8006f64:	d100      	bne.n	8006f68 <memcpy+0xc>
 8006f66:	4770      	bx	lr
 8006f68:	b510      	push	{r4, lr}
 8006f6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006f6e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006f72:	4291      	cmp	r1, r2
 8006f74:	d1f9      	bne.n	8006f6a <memcpy+0xe>
 8006f76:	bd10      	pop	{r4, pc}

08006f78 <_init>:
 8006f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f7a:	bf00      	nop
 8006f7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f7e:	bc08      	pop	{r3}
 8006f80:	469e      	mov	lr, r3
 8006f82:	4770      	bx	lr

08006f84 <_fini>:
 8006f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f86:	bf00      	nop
 8006f88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f8a:	bc08      	pop	{r3}
 8006f8c:	469e      	mov	lr, r3
 8006f8e:	4770      	bx	lr
