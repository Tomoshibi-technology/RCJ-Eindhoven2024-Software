
mother-test2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000075b4  080001c8  080001c8  000011c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000298  08007780  08007780  00008780  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a18  08007a18  00009078  2**0
                  CONTENTS
  4 .ARM          00000008  08007a18  08007a18  00008a18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007a20  08007a20  00009078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a20  08007a20  00008a20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007a24  08007a24  00008a24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  08007a28  00009000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000270  20000078  08007aa0  00009078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002e8  08007aa0  000092e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012932  00000000  00000000  000090a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024c4  00000000  00000000  0001b9da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f78  00000000  00000000  0001dea0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c46  00000000  00000000  0001ee18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024e90  00000000  00000000  0001fa5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013bb5  00000000  00000000  000448ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d6b73  00000000  00000000  000584a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012f016  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004aac  00000000  00000000  0012f05c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  00133b08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000078 	.word	0x20000078
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08007764 	.word	0x08007764

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	2000007c 	.word	0x2000007c
 8000204:	08007764 	.word	0x08007764

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	@ 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__gedf2>:
 80009a4:	f04f 3cff 	mov.w	ip, #4294967295
 80009a8:	e006      	b.n	80009b8 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__ledf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	e002      	b.n	80009b8 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__cmpdf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ce:	d01b      	beq.n	8000a08 <__cmpdf2+0x54>
 80009d0:	b001      	add	sp, #4
 80009d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d6:	bf0c      	ite	eq
 80009d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009dc:	ea91 0f03 	teqne	r1, r3
 80009e0:	bf02      	ittt	eq
 80009e2:	ea90 0f02 	teqeq	r0, r2
 80009e6:	2000      	moveq	r0, #0
 80009e8:	4770      	bxeq	lr
 80009ea:	f110 0f00 	cmn.w	r0, #0
 80009ee:	ea91 0f03 	teq	r1, r3
 80009f2:	bf58      	it	pl
 80009f4:	4299      	cmppl	r1, r3
 80009f6:	bf08      	it	eq
 80009f8:	4290      	cmpeq	r0, r2
 80009fa:	bf2c      	ite	cs
 80009fc:	17d8      	asrcs	r0, r3, #31
 80009fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a02:	f040 0001 	orr.w	r0, r0, #1
 8000a06:	4770      	bx	lr
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__cmpdf2+0x64>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d107      	bne.n	8000a28 <__cmpdf2+0x74>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d1d6      	bne.n	80009d0 <__cmpdf2+0x1c>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d0d3      	beq.n	80009d0 <__cmpdf2+0x1c>
 8000a28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdrcmple>:
 8000a30:	4684      	mov	ip, r0
 8000a32:	4610      	mov	r0, r2
 8000a34:	4662      	mov	r2, ip
 8000a36:	468c      	mov	ip, r1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	e000      	b.n	8000a40 <__aeabi_cdcmpeq>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdcmpeq>:
 8000a40:	b501      	push	{r0, lr}
 8000a42:	f7ff ffb7 	bl	80009b4 <__cmpdf2>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	bf48      	it	mi
 8000a4a:	f110 0f00 	cmnmi.w	r0, #0
 8000a4e:	bd01      	pop	{r0, pc}

08000a50 <__aeabi_dcmpeq>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff fff4 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a58:	bf0c      	ite	eq
 8000a5a:	2001      	moveq	r0, #1
 8000a5c:	2000      	movne	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmplt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffea 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmple>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffe0 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpge>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffce 	bl	8000a30 <__aeabi_cdrcmple>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpgt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffc4 	bl	8000a30 <__aeabi_cdrcmple>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpun>:
 8000ab4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000abc:	d102      	bne.n	8000ac4 <__aeabi_dcmpun+0x10>
 8000abe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ac2:	d10a      	bne.n	8000ada <__aeabi_dcmpun+0x26>
 8000ac4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x20>
 8000ace:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ad2:	d102      	bne.n	8000ada <__aeabi_dcmpun+0x26>
 8000ad4:	f04f 0000 	mov.w	r0, #0
 8000ad8:	4770      	bx	lr
 8000ada:	f04f 0001 	mov.w	r0, #1
 8000ade:	4770      	bx	lr

08000ae0 <__aeabi_d2iz>:
 8000ae0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ae8:	d215      	bcs.n	8000b16 <__aeabi_d2iz+0x36>
 8000aea:	d511      	bpl.n	8000b10 <__aeabi_d2iz+0x30>
 8000aec:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000af0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000af4:	d912      	bls.n	8000b1c <__aeabi_d2iz+0x3c>
 8000af6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000afa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000afe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b02:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b06:	fa23 f002 	lsr.w	r0, r3, r2
 8000b0a:	bf18      	it	ne
 8000b0c:	4240      	negne	r0, r0
 8000b0e:	4770      	bx	lr
 8000b10:	f04f 0000 	mov.w	r0, #0
 8000b14:	4770      	bx	lr
 8000b16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b1a:	d105      	bne.n	8000b28 <__aeabi_d2iz+0x48>
 8000b1c:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b20:	bf08      	it	eq
 8000b22:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b26:	4770      	bx	lr
 8000b28:	f04f 0000 	mov.w	r0, #0
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop

08000b30 <__aeabi_d2f>:
 8000b30:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b34:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b38:	bf24      	itt	cs
 8000b3a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b3e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b42:	d90d      	bls.n	8000b60 <__aeabi_d2f+0x30>
 8000b44:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b48:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b4c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b50:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b54:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b58:	bf08      	it	eq
 8000b5a:	f020 0001 	biceq.w	r0, r0, #1
 8000b5e:	4770      	bx	lr
 8000b60:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b64:	d121      	bne.n	8000baa <__aeabi_d2f+0x7a>
 8000b66:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b6a:	bfbc      	itt	lt
 8000b6c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b70:	4770      	bxlt	lr
 8000b72:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b76:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b7a:	f1c2 0218 	rsb	r2, r2, #24
 8000b7e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b82:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b86:	fa20 f002 	lsr.w	r0, r0, r2
 8000b8a:	bf18      	it	ne
 8000b8c:	f040 0001 	orrne.w	r0, r0, #1
 8000b90:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b94:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b98:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b9c:	ea40 000c 	orr.w	r0, r0, ip
 8000ba0:	fa23 f302 	lsr.w	r3, r3, r2
 8000ba4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ba8:	e7cc      	b.n	8000b44 <__aeabi_d2f+0x14>
 8000baa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bae:	d107      	bne.n	8000bc0 <__aeabi_d2f+0x90>
 8000bb0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bb4:	bf1e      	ittt	ne
 8000bb6:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000bba:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000bbe:	4770      	bxne	lr
 8000bc0:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000bc4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bc8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop

08000bd0 <__aeabi_uldivmod>:
 8000bd0:	b953      	cbnz	r3, 8000be8 <__aeabi_uldivmod+0x18>
 8000bd2:	b94a      	cbnz	r2, 8000be8 <__aeabi_uldivmod+0x18>
 8000bd4:	2900      	cmp	r1, #0
 8000bd6:	bf08      	it	eq
 8000bd8:	2800      	cmpeq	r0, #0
 8000bda:	bf1c      	itt	ne
 8000bdc:	f04f 31ff 	movne.w	r1, #4294967295
 8000be0:	f04f 30ff 	movne.w	r0, #4294967295
 8000be4:	f000 b96a 	b.w	8000ebc <__aeabi_idiv0>
 8000be8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf0:	f000 f806 	bl	8000c00 <__udivmoddi4>
 8000bf4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bfc:	b004      	add	sp, #16
 8000bfe:	4770      	bx	lr

08000c00 <__udivmoddi4>:
 8000c00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c04:	9d08      	ldr	r5, [sp, #32]
 8000c06:	460c      	mov	r4, r1
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d14e      	bne.n	8000caa <__udivmoddi4+0xaa>
 8000c0c:	4694      	mov	ip, r2
 8000c0e:	458c      	cmp	ip, r1
 8000c10:	4686      	mov	lr, r0
 8000c12:	fab2 f282 	clz	r2, r2
 8000c16:	d962      	bls.n	8000cde <__udivmoddi4+0xde>
 8000c18:	b14a      	cbz	r2, 8000c2e <__udivmoddi4+0x2e>
 8000c1a:	f1c2 0320 	rsb	r3, r2, #32
 8000c1e:	4091      	lsls	r1, r2
 8000c20:	fa20 f303 	lsr.w	r3, r0, r3
 8000c24:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c28:	4319      	orrs	r1, r3
 8000c2a:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c32:	fa1f f68c 	uxth.w	r6, ip
 8000c36:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c3a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c3e:	fb07 1114 	mls	r1, r7, r4, r1
 8000c42:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c46:	fb04 f106 	mul.w	r1, r4, r6
 8000c4a:	4299      	cmp	r1, r3
 8000c4c:	d90a      	bls.n	8000c64 <__udivmoddi4+0x64>
 8000c4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c52:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c56:	f080 8112 	bcs.w	8000e7e <__udivmoddi4+0x27e>
 8000c5a:	4299      	cmp	r1, r3
 8000c5c:	f240 810f 	bls.w	8000e7e <__udivmoddi4+0x27e>
 8000c60:	3c02      	subs	r4, #2
 8000c62:	4463      	add	r3, ip
 8000c64:	1a59      	subs	r1, r3, r1
 8000c66:	fa1f f38e 	uxth.w	r3, lr
 8000c6a:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c6e:	fb07 1110 	mls	r1, r7, r0, r1
 8000c72:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c76:	fb00 f606 	mul.w	r6, r0, r6
 8000c7a:	429e      	cmp	r6, r3
 8000c7c:	d90a      	bls.n	8000c94 <__udivmoddi4+0x94>
 8000c7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c82:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c86:	f080 80fc 	bcs.w	8000e82 <__udivmoddi4+0x282>
 8000c8a:	429e      	cmp	r6, r3
 8000c8c:	f240 80f9 	bls.w	8000e82 <__udivmoddi4+0x282>
 8000c90:	4463      	add	r3, ip
 8000c92:	3802      	subs	r0, #2
 8000c94:	1b9b      	subs	r3, r3, r6
 8000c96:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c9a:	2100      	movs	r1, #0
 8000c9c:	b11d      	cbz	r5, 8000ca6 <__udivmoddi4+0xa6>
 8000c9e:	40d3      	lsrs	r3, r2
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	e9c5 3200 	strd	r3, r2, [r5]
 8000ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000caa:	428b      	cmp	r3, r1
 8000cac:	d905      	bls.n	8000cba <__udivmoddi4+0xba>
 8000cae:	b10d      	cbz	r5, 8000cb4 <__udivmoddi4+0xb4>
 8000cb0:	e9c5 0100 	strd	r0, r1, [r5]
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	4608      	mov	r0, r1
 8000cb8:	e7f5      	b.n	8000ca6 <__udivmoddi4+0xa6>
 8000cba:	fab3 f183 	clz	r1, r3
 8000cbe:	2900      	cmp	r1, #0
 8000cc0:	d146      	bne.n	8000d50 <__udivmoddi4+0x150>
 8000cc2:	42a3      	cmp	r3, r4
 8000cc4:	d302      	bcc.n	8000ccc <__udivmoddi4+0xcc>
 8000cc6:	4290      	cmp	r0, r2
 8000cc8:	f0c0 80f0 	bcc.w	8000eac <__udivmoddi4+0x2ac>
 8000ccc:	1a86      	subs	r6, r0, r2
 8000cce:	eb64 0303 	sbc.w	r3, r4, r3
 8000cd2:	2001      	movs	r0, #1
 8000cd4:	2d00      	cmp	r5, #0
 8000cd6:	d0e6      	beq.n	8000ca6 <__udivmoddi4+0xa6>
 8000cd8:	e9c5 6300 	strd	r6, r3, [r5]
 8000cdc:	e7e3      	b.n	8000ca6 <__udivmoddi4+0xa6>
 8000cde:	2a00      	cmp	r2, #0
 8000ce0:	f040 8090 	bne.w	8000e04 <__udivmoddi4+0x204>
 8000ce4:	eba1 040c 	sub.w	r4, r1, ip
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	fa1f f78c 	uxth.w	r7, ip
 8000cf0:	2101      	movs	r1, #1
 8000cf2:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cf6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cfa:	fb08 4416 	mls	r4, r8, r6, r4
 8000cfe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d02:	fb07 f006 	mul.w	r0, r7, r6
 8000d06:	4298      	cmp	r0, r3
 8000d08:	d908      	bls.n	8000d1c <__udivmoddi4+0x11c>
 8000d0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x11a>
 8000d14:	4298      	cmp	r0, r3
 8000d16:	f200 80cd 	bhi.w	8000eb4 <__udivmoddi4+0x2b4>
 8000d1a:	4626      	mov	r6, r4
 8000d1c:	1a1c      	subs	r4, r3, r0
 8000d1e:	fa1f f38e 	uxth.w	r3, lr
 8000d22:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d26:	fb08 4410 	mls	r4, r8, r0, r4
 8000d2a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d2e:	fb00 f707 	mul.w	r7, r0, r7
 8000d32:	429f      	cmp	r7, r3
 8000d34:	d908      	bls.n	8000d48 <__udivmoddi4+0x148>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d3e:	d202      	bcs.n	8000d46 <__udivmoddi4+0x146>
 8000d40:	429f      	cmp	r7, r3
 8000d42:	f200 80b0 	bhi.w	8000ea6 <__udivmoddi4+0x2a6>
 8000d46:	4620      	mov	r0, r4
 8000d48:	1bdb      	subs	r3, r3, r7
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	e7a5      	b.n	8000c9c <__udivmoddi4+0x9c>
 8000d50:	f1c1 0620 	rsb	r6, r1, #32
 8000d54:	408b      	lsls	r3, r1
 8000d56:	fa22 f706 	lsr.w	r7, r2, r6
 8000d5a:	431f      	orrs	r7, r3
 8000d5c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d60:	fa04 f301 	lsl.w	r3, r4, r1
 8000d64:	ea43 030c 	orr.w	r3, r3, ip
 8000d68:	40f4      	lsrs	r4, r6
 8000d6a:	fa00 f801 	lsl.w	r8, r0, r1
 8000d6e:	0c38      	lsrs	r0, r7, #16
 8000d70:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d74:	fbb4 fef0 	udiv	lr, r4, r0
 8000d78:	fa1f fc87 	uxth.w	ip, r7
 8000d7c:	fb00 441e 	mls	r4, r0, lr, r4
 8000d80:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d84:	fb0e f90c 	mul.w	r9, lr, ip
 8000d88:	45a1      	cmp	r9, r4
 8000d8a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d8e:	d90a      	bls.n	8000da6 <__udivmoddi4+0x1a6>
 8000d90:	193c      	adds	r4, r7, r4
 8000d92:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d96:	f080 8084 	bcs.w	8000ea2 <__udivmoddi4+0x2a2>
 8000d9a:	45a1      	cmp	r9, r4
 8000d9c:	f240 8081 	bls.w	8000ea2 <__udivmoddi4+0x2a2>
 8000da0:	f1ae 0e02 	sub.w	lr, lr, #2
 8000da4:	443c      	add	r4, r7
 8000da6:	eba4 0409 	sub.w	r4, r4, r9
 8000daa:	fa1f f983 	uxth.w	r9, r3
 8000dae:	fbb4 f3f0 	udiv	r3, r4, r0
 8000db2:	fb00 4413 	mls	r4, r0, r3, r4
 8000db6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dba:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dbe:	45a4      	cmp	ip, r4
 8000dc0:	d907      	bls.n	8000dd2 <__udivmoddi4+0x1d2>
 8000dc2:	193c      	adds	r4, r7, r4
 8000dc4:	f103 30ff 	add.w	r0, r3, #4294967295
 8000dc8:	d267      	bcs.n	8000e9a <__udivmoddi4+0x29a>
 8000dca:	45a4      	cmp	ip, r4
 8000dcc:	d965      	bls.n	8000e9a <__udivmoddi4+0x29a>
 8000dce:	3b02      	subs	r3, #2
 8000dd0:	443c      	add	r4, r7
 8000dd2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dd6:	fba0 9302 	umull	r9, r3, r0, r2
 8000dda:	eba4 040c 	sub.w	r4, r4, ip
 8000dde:	429c      	cmp	r4, r3
 8000de0:	46ce      	mov	lr, r9
 8000de2:	469c      	mov	ip, r3
 8000de4:	d351      	bcc.n	8000e8a <__udivmoddi4+0x28a>
 8000de6:	d04e      	beq.n	8000e86 <__udivmoddi4+0x286>
 8000de8:	b155      	cbz	r5, 8000e00 <__udivmoddi4+0x200>
 8000dea:	ebb8 030e 	subs.w	r3, r8, lr
 8000dee:	eb64 040c 	sbc.w	r4, r4, ip
 8000df2:	fa04 f606 	lsl.w	r6, r4, r6
 8000df6:	40cb      	lsrs	r3, r1
 8000df8:	431e      	orrs	r6, r3
 8000dfa:	40cc      	lsrs	r4, r1
 8000dfc:	e9c5 6400 	strd	r6, r4, [r5]
 8000e00:	2100      	movs	r1, #0
 8000e02:	e750      	b.n	8000ca6 <__udivmoddi4+0xa6>
 8000e04:	f1c2 0320 	rsb	r3, r2, #32
 8000e08:	fa20 f103 	lsr.w	r1, r0, r3
 8000e0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e10:	fa24 f303 	lsr.w	r3, r4, r3
 8000e14:	4094      	lsls	r4, r2
 8000e16:	430c      	orrs	r4, r1
 8000e18:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e1c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e20:	fa1f f78c 	uxth.w	r7, ip
 8000e24:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e28:	fb08 3110 	mls	r1, r8, r0, r3
 8000e2c:	0c23      	lsrs	r3, r4, #16
 8000e2e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e32:	fb00 f107 	mul.w	r1, r0, r7
 8000e36:	4299      	cmp	r1, r3
 8000e38:	d908      	bls.n	8000e4c <__udivmoddi4+0x24c>
 8000e3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e3e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e42:	d22c      	bcs.n	8000e9e <__udivmoddi4+0x29e>
 8000e44:	4299      	cmp	r1, r3
 8000e46:	d92a      	bls.n	8000e9e <__udivmoddi4+0x29e>
 8000e48:	3802      	subs	r0, #2
 8000e4a:	4463      	add	r3, ip
 8000e4c:	1a5b      	subs	r3, r3, r1
 8000e4e:	b2a4      	uxth	r4, r4
 8000e50:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e54:	fb08 3311 	mls	r3, r8, r1, r3
 8000e58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e5c:	fb01 f307 	mul.w	r3, r1, r7
 8000e60:	42a3      	cmp	r3, r4
 8000e62:	d908      	bls.n	8000e76 <__udivmoddi4+0x276>
 8000e64:	eb1c 0404 	adds.w	r4, ip, r4
 8000e68:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e6c:	d213      	bcs.n	8000e96 <__udivmoddi4+0x296>
 8000e6e:	42a3      	cmp	r3, r4
 8000e70:	d911      	bls.n	8000e96 <__udivmoddi4+0x296>
 8000e72:	3902      	subs	r1, #2
 8000e74:	4464      	add	r4, ip
 8000e76:	1ae4      	subs	r4, r4, r3
 8000e78:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e7c:	e739      	b.n	8000cf2 <__udivmoddi4+0xf2>
 8000e7e:	4604      	mov	r4, r0
 8000e80:	e6f0      	b.n	8000c64 <__udivmoddi4+0x64>
 8000e82:	4608      	mov	r0, r1
 8000e84:	e706      	b.n	8000c94 <__udivmoddi4+0x94>
 8000e86:	45c8      	cmp	r8, r9
 8000e88:	d2ae      	bcs.n	8000de8 <__udivmoddi4+0x1e8>
 8000e8a:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e8e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e92:	3801      	subs	r0, #1
 8000e94:	e7a8      	b.n	8000de8 <__udivmoddi4+0x1e8>
 8000e96:	4631      	mov	r1, r6
 8000e98:	e7ed      	b.n	8000e76 <__udivmoddi4+0x276>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	e799      	b.n	8000dd2 <__udivmoddi4+0x1d2>
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	e7d4      	b.n	8000e4c <__udivmoddi4+0x24c>
 8000ea2:	46d6      	mov	lr, sl
 8000ea4:	e77f      	b.n	8000da6 <__udivmoddi4+0x1a6>
 8000ea6:	4463      	add	r3, ip
 8000ea8:	3802      	subs	r0, #2
 8000eaa:	e74d      	b.n	8000d48 <__udivmoddi4+0x148>
 8000eac:	4606      	mov	r6, r0
 8000eae:	4623      	mov	r3, r4
 8000eb0:	4608      	mov	r0, r1
 8000eb2:	e70f      	b.n	8000cd4 <__udivmoddi4+0xd4>
 8000eb4:	3e02      	subs	r6, #2
 8000eb6:	4463      	add	r3, ip
 8000eb8:	e730      	b.n	8000d1c <__udivmoddi4+0x11c>
 8000eba:	bf00      	nop

08000ebc <__aeabi_idiv0>:
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop

08000ec0 <_ZN6BNO055C1EP17I2C_HandleTypeDefh>:


#include "BNO055.h"
#include "main.h"

BNO055::BNO055(I2C_HandleTypeDef* i2cHandle, uint8_t address)
 8000ec0:	b480      	push	{r7}
 8000ec2:	b085      	sub	sp, #20
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	60f8      	str	r0, [r7, #12]
 8000ec8:	60b9      	str	r1, [r7, #8]
 8000eca:	4613      	mov	r3, r2
 8000ecc:	71fb      	strb	r3, [r7, #7]
    : _i2cHandle(i2cHandle), _address(address << 1) {}
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	68ba      	ldr	r2, [r7, #8]
 8000ed2:	601a      	str	r2, [r3, #0]
 8000ed4:	79fb      	ldrb	r3, [r7, #7]
 8000ed6:	005b      	lsls	r3, r3, #1
 8000ed8:	b2da      	uxtb	r2, r3
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	711a      	strb	r2, [r3, #4]
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	3714      	adds	r7, #20
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr

08000eec <_ZN6BNO0555beginEv>:

bool BNO055::begin() {
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b084      	sub	sp, #16
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
    uint8_t configMode = 0x00; // CONFIGMODE
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	73fb      	strb	r3, [r7, #15]
    if (write(0x3D, &configMode, 1) != HAL_OK) {
 8000ef8:	f107 020f 	add.w	r2, r7, #15
 8000efc:	2301      	movs	r3, #1
 8000efe:	213d      	movs	r1, #61	@ 0x3d
 8000f00:	6878      	ldr	r0, [r7, #4]
 8000f02:	f000 f893 	bl	800102c <_ZN6BNO0555writeEhPht>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	bf14      	ite	ne
 8000f0c:	2301      	movne	r3, #1
 8000f0e:	2300      	moveq	r3, #0
 8000f10:	b2db      	uxtb	r3, r3
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <_ZN6BNO0555beginEv+0x2e>
        return false;
 8000f16:	2300      	movs	r3, #0
 8000f18:	e019      	b.n	8000f4e <_ZN6BNO0555beginEv+0x62>
    }
    HAL_Delay(30);
 8000f1a:	201e      	movs	r0, #30
 8000f1c:	f000 fffe 	bl	8001f1c <HAL_Delay>

    uint8_t ndofMode = 0x0C;
 8000f20:	230c      	movs	r3, #12
 8000f22:	73bb      	strb	r3, [r7, #14]
//    uint8_t imuMode = 0x08;
    if (write(0x3D, &ndofMode, 1) != HAL_OK) {
 8000f24:	f107 020e 	add.w	r2, r7, #14
 8000f28:	2301      	movs	r3, #1
 8000f2a:	213d      	movs	r1, #61	@ 0x3d
 8000f2c:	6878      	ldr	r0, [r7, #4]
 8000f2e:	f000 f87d 	bl	800102c <_ZN6BNO0555writeEhPht>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	bf14      	ite	ne
 8000f38:	2301      	movne	r3, #1
 8000f3a:	2300      	moveq	r3, #0
 8000f3c:	b2db      	uxtb	r3, r3
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <_ZN6BNO0555beginEv+0x5a>
        return false;
 8000f42:	2300      	movs	r3, #0
 8000f44:	e003      	b.n	8000f4e <_ZN6BNO0555beginEv+0x62>
    }
    HAL_Delay(30);
 8000f46:	201e      	movs	r0, #30
 8000f48:	f000 ffe8 	bl	8001f1c <HAL_Delay>

    return true;
 8000f4c:	2301      	movs	r3, #1
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	3710      	adds	r7, #16
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
	...

08000f58 <_ZN6BNO05514getEulerAnglesERfS0_S0_>:
void BNO055::setMode(uint8_t mode) {
    write(0x3D, &mode, 1);
    HAL_Delay(30);
}

void BNO055::getEulerAngles(float& heading, float& roll, float& pitch) {
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b088      	sub	sp, #32
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	60f8      	str	r0, [r7, #12]
 8000f60:	60b9      	str	r1, [r7, #8]
 8000f62:	607a      	str	r2, [r7, #4]
 8000f64:	603b      	str	r3, [r7, #0]
    uint8_t eulerData[6];
    if (read(0x1A, eulerData, 6) == HAL_OK) {
 8000f66:	f107 0214 	add.w	r2, r7, #20
 8000f6a:	2306      	movs	r3, #6
 8000f6c:	211a      	movs	r1, #26
 8000f6e:	68f8      	ldr	r0, [r7, #12]
 8000f70:	f000 f87c 	bl	800106c <_ZN6BNO0554readEhPht>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	bf0c      	ite	eq
 8000f7a:	2301      	moveq	r3, #1
 8000f7c:	2300      	movne	r3, #0
 8000f7e:	b2db      	uxtb	r3, r3
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d04d      	beq.n	8001020 <_ZN6BNO05514getEulerAnglesERfS0_S0_+0xc8>
        int16_t headingRaw = ((int16_t)eulerData[1] << 8) | eulerData[0];
 8000f84:	7d7b      	ldrb	r3, [r7, #21]
 8000f86:	021b      	lsls	r3, r3, #8
 8000f88:	b21a      	sxth	r2, r3
 8000f8a:	7d3b      	ldrb	r3, [r7, #20]
 8000f8c:	b21b      	sxth	r3, r3
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	83fb      	strh	r3, [r7, #30]
        int16_t rollRaw = ((int16_t)eulerData[3] << 8) | eulerData[2];
 8000f92:	7dfb      	ldrb	r3, [r7, #23]
 8000f94:	021b      	lsls	r3, r3, #8
 8000f96:	b21a      	sxth	r2, r3
 8000f98:	7dbb      	ldrb	r3, [r7, #22]
 8000f9a:	b21b      	sxth	r3, r3
 8000f9c:	4313      	orrs	r3, r2
 8000f9e:	83bb      	strh	r3, [r7, #28]
        int16_t pitchRaw = ((int16_t)eulerData[5] << 8) | eulerData[4];
 8000fa0:	7e7b      	ldrb	r3, [r7, #25]
 8000fa2:	021b      	lsls	r3, r3, #8
 8000fa4:	b21a      	sxth	r2, r3
 8000fa6:	7e3b      	ldrb	r3, [r7, #24]
 8000fa8:	b21b      	sxth	r3, r3
 8000faa:	4313      	orrs	r3, r2
 8000fac:	837b      	strh	r3, [r7, #26]

        heading = headingRaw / 16.0;
 8000fae:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f7ff fa7a 	bl	80004ac <__aeabi_i2d>
 8000fb8:	f04f 0200 	mov.w	r2, #0
 8000fbc:	4b1a      	ldr	r3, [pc, #104]	@ (8001028 <_ZN6BNO05514getEulerAnglesERfS0_S0_+0xd0>)
 8000fbe:	f7ff fc09 	bl	80007d4 <__aeabi_ddiv>
 8000fc2:	4602      	mov	r2, r0
 8000fc4:	460b      	mov	r3, r1
 8000fc6:	4610      	mov	r0, r2
 8000fc8:	4619      	mov	r1, r3
 8000fca:	f7ff fdb1 	bl	8000b30 <__aeabi_d2f>
 8000fce:	4602      	mov	r2, r0
 8000fd0:	68bb      	ldr	r3, [r7, #8]
 8000fd2:	601a      	str	r2, [r3, #0]
        roll = rollRaw / 16.0;
 8000fd4:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f7ff fa67 	bl	80004ac <__aeabi_i2d>
 8000fde:	f04f 0200 	mov.w	r2, #0
 8000fe2:	4b11      	ldr	r3, [pc, #68]	@ (8001028 <_ZN6BNO05514getEulerAnglesERfS0_S0_+0xd0>)
 8000fe4:	f7ff fbf6 	bl	80007d4 <__aeabi_ddiv>
 8000fe8:	4602      	mov	r2, r0
 8000fea:	460b      	mov	r3, r1
 8000fec:	4610      	mov	r0, r2
 8000fee:	4619      	mov	r1, r3
 8000ff0:	f7ff fd9e 	bl	8000b30 <__aeabi_d2f>
 8000ff4:	4602      	mov	r2, r0
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	601a      	str	r2, [r3, #0]
        pitch = pitchRaw / 16.0;
 8000ffa:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000ffe:	4618      	mov	r0, r3
 8001000:	f7ff fa54 	bl	80004ac <__aeabi_i2d>
 8001004:	f04f 0200 	mov.w	r2, #0
 8001008:	4b07      	ldr	r3, [pc, #28]	@ (8001028 <_ZN6BNO05514getEulerAnglesERfS0_S0_+0xd0>)
 800100a:	f7ff fbe3 	bl	80007d4 <__aeabi_ddiv>
 800100e:	4602      	mov	r2, r0
 8001010:	460b      	mov	r3, r1
 8001012:	4610      	mov	r0, r2
 8001014:	4619      	mov	r1, r3
 8001016:	f7ff fd8b 	bl	8000b30 <__aeabi_d2f>
 800101a:	4602      	mov	r2, r0
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	601a      	str	r2, [r3, #0]
    }
}
 8001020:	bf00      	nop
 8001022:	3720      	adds	r7, #32
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	40300000 	.word	0x40300000

0800102c <_ZN6BNO0555writeEhPht>:

HAL_StatusTypeDef BNO055::write(uint8_t reg, uint8_t* data, uint16_t size) {
 800102c:	b580      	push	{r7, lr}
 800102e:	b088      	sub	sp, #32
 8001030:	af04      	add	r7, sp, #16
 8001032:	60f8      	str	r0, [r7, #12]
 8001034:	607a      	str	r2, [r7, #4]
 8001036:	461a      	mov	r2, r3
 8001038:	460b      	mov	r3, r1
 800103a:	72fb      	strb	r3, [r7, #11]
 800103c:	4613      	mov	r3, r2
 800103e:	813b      	strh	r3, [r7, #8]
    return HAL_I2C_Mem_Write(_i2cHandle, _address, reg, I2C_MEMADD_SIZE_8BIT, data, size, HAL_MAX_DELAY);
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	6818      	ldr	r0, [r3, #0]
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	791b      	ldrb	r3, [r3, #4]
 8001048:	4619      	mov	r1, r3
 800104a:	7afb      	ldrb	r3, [r7, #11]
 800104c:	b29a      	uxth	r2, r3
 800104e:	f04f 33ff 	mov.w	r3, #4294967295
 8001052:	9302      	str	r3, [sp, #8]
 8001054:	893b      	ldrh	r3, [r7, #8]
 8001056:	9301      	str	r3, [sp, #4]
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	9300      	str	r3, [sp, #0]
 800105c:	2301      	movs	r3, #1
 800105e:	f001 fbb7 	bl	80027d0 <HAL_I2C_Mem_Write>
 8001062:	4603      	mov	r3, r0
}
 8001064:	4618      	mov	r0, r3
 8001066:	3710      	adds	r7, #16
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}

0800106c <_ZN6BNO0554readEhPht>:

HAL_StatusTypeDef BNO055::read(uint8_t reg, uint8_t* data, uint16_t size) {
 800106c:	b580      	push	{r7, lr}
 800106e:	b088      	sub	sp, #32
 8001070:	af04      	add	r7, sp, #16
 8001072:	60f8      	str	r0, [r7, #12]
 8001074:	607a      	str	r2, [r7, #4]
 8001076:	461a      	mov	r2, r3
 8001078:	460b      	mov	r3, r1
 800107a:	72fb      	strb	r3, [r7, #11]
 800107c:	4613      	mov	r3, r2
 800107e:	813b      	strh	r3, [r7, #8]
    return HAL_I2C_Mem_Read(_i2cHandle, _address, reg, I2C_MEMADD_SIZE_8BIT, data, size, HAL_MAX_DELAY);
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	6818      	ldr	r0, [r3, #0]
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	791b      	ldrb	r3, [r3, #4]
 8001088:	4619      	mov	r1, r3
 800108a:	7afb      	ldrb	r3, [r7, #11]
 800108c:	b29a      	uxth	r2, r3
 800108e:	f04f 33ff 	mov.w	r3, #4294967295
 8001092:	9302      	str	r3, [sp, #8]
 8001094:	893b      	ldrh	r3, [r7, #8]
 8001096:	9301      	str	r3, [sp, #4]
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	9300      	str	r3, [sp, #0]
 800109c:	2301      	movs	r3, #1
 800109e:	f001 fc91 	bl	80029c4 <HAL_I2C_Mem_Read>
 80010a2:	4603      	mov	r3, r0
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	3710      	adds	r7, #16
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}

080010ac <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
    if (htim == &htim2){
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	4a07      	ldr	r2, [pc, #28]	@ (80010d4 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80010b8:	4293      	cmp	r3, r2
 80010ba:	d104      	bne.n	80010c6 <HAL_TIM_PeriodElapsedCallback+0x1a>
        m_counter++;
 80010bc:	4b06      	ldr	r3, [pc, #24]	@ (80010d8 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	3301      	adds	r3, #1
 80010c2:	4a05      	ldr	r2, [pc, #20]	@ (80010d8 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80010c4:	6013      	str	r3, [r2, #0]
    }
}
 80010c6:	bf00      	nop
 80010c8:	370c      	adds	r7, #12
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	200000e8 	.word	0x200000e8
 80010d8:	20000178 	.word	0x20000178
 80010dc:	00000000 	.word	0x00000000

080010e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010e0:	b5b0      	push	{r4, r5, r7, lr}
 80010e2:	b08c      	sub	sp, #48	@ 0x30
 80010e4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010e6:	f000 fea7 	bl	8001e38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010ea:	f000 f9f3 	bl	80014d4 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010ee:	f000 fb31 	bl	8001754 <_ZL12MX_GPIO_Initv>
  MX_TIM2_Init();
 80010f2:	f000 faa5 	bl	8001640 <_ZL12MX_TIM2_Initv>
  MX_USART6_UART_Init();
 80010f6:	f000 faff 	bl	80016f8 <_ZL19MX_USART6_UART_Initv>
  MX_I2C1_Init();
 80010fa:	f000 fa6d 	bl	80015d8 <_ZL12MX_I2C1_Initv>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80010fe:	48a2      	ldr	r0, [pc, #648]	@ (8001388 <main+0x2a8>)
 8001100:	f003 f8cc 	bl	800429c <HAL_TIM_Base_Start_IT>
  HAL_UART_Transmit(&huart6, send_array, 12, 10);
 8001104:	230a      	movs	r3, #10
 8001106:	220c      	movs	r2, #12
 8001108:	49a0      	ldr	r1, [pc, #640]	@ (800138c <main+0x2ac>)
 800110a:	48a1      	ldr	r0, [pc, #644]	@ (8001390 <main+0x2b0>)
 800110c:	f003 fd3c 	bl	8004b88 <HAL_UART_Transmit>

  BNO055 bno055(&hi2c1);
 8001110:	f107 0318 	add.w	r3, r7, #24
 8001114:	2228      	movs	r2, #40	@ 0x28
 8001116:	499f      	ldr	r1, [pc, #636]	@ (8001394 <main+0x2b4>)
 8001118:	4618      	mov	r0, r3
 800111a:	f7ff fed1 	bl	8000ec0 <_ZN6BNO055C1EP17I2C_HandleTypeDefh>

  if (!bno055.begin()) {
 800111e:	f107 0318 	add.w	r3, r7, #24
 8001122:	4618      	mov	r0, r3
 8001124:	f7ff fee2 	bl	8000eec <_ZN6BNO0555beginEv>
 8001128:	4603      	mov	r3, r0
 800112a:	f083 0301 	eor.w	r3, r3, #1
 800112e:	b2db      	uxtb	r3, r3
 8001130:	2b00      	cmp	r3, #0
 8001132:	d005      	beq.n	8001140 <main+0x60>
	  // センサ初期化失敗時の処理
	  while (1){HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_SET);};
 8001134:	2201      	movs	r2, #1
 8001136:	2104      	movs	r1, #4
 8001138:	4897      	ldr	r0, [pc, #604]	@ (8001398 <main+0x2b8>)
 800113a:	f001 f9d1 	bl	80024e0 <HAL_GPIO_WritePin>
 800113e:	e7f9      	b.n	8001134 <main+0x54>
  }

  float heading, roll, pitch;
  HAL_Delay(1000);
 8001140:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001144:	f000 feea 	bl	8001f1c <HAL_Delay>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  uint32_t Ltika_pcounter = m_counter;
 8001148:	4b94      	ldr	r3, [pc, #592]	@ (800139c <main+0x2bc>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t d_pcounter = m_counter;
 800114e:	4b93      	ldr	r3, [pc, #588]	@ (800139c <main+0x2bc>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint8_t OdoX_ID[3] = {248, 210, 210};
 8001154:	4a92      	ldr	r2, [pc, #584]	@ (80013a0 <main+0x2c0>)
 8001156:	f107 0308 	add.w	r3, r7, #8
 800115a:	6812      	ldr	r2, [r2, #0]
 800115c:	4611      	mov	r1, r2
 800115e:	8019      	strh	r1, [r3, #0]
 8001160:	3302      	adds	r3, #2
 8001162:	0c12      	lsrs	r2, r2, #16
 8001164:	701a      	strb	r2, [r3, #0]
  uint8_t OdoY_ID[3] = {249, 210, 210};
 8001166:	4a8f      	ldr	r2, [pc, #572]	@ (80013a4 <main+0x2c4>)
 8001168:	1d3b      	adds	r3, r7, #4
 800116a:	6812      	ldr	r2, [r2, #0]
 800116c:	4611      	mov	r1, r2
 800116e:	8019      	strh	r1, [r3, #0]
 8001170:	3302      	adds	r3, #2
 8001172:	0c12      	lsrs	r2, r2, #16
 8001174:	701a      	strb	r2, [r3, #0]
//  int16_t cur_position_rec[2];
//  int16_t cur_position_pol[2];

  while (1)
  {
	dtime = m_counter - d_pcounter;
 8001176:	4b89      	ldr	r3, [pc, #548]	@ (800139c <main+0x2bc>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	b29a      	uxth	r2, r3
 800117c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800117e:	b29b      	uxth	r3, r3
 8001180:	1ad3      	subs	r3, r2, r3
 8001182:	b29a      	uxth	r2, r3
 8001184:	4b88      	ldr	r3, [pc, #544]	@ (80013a8 <main+0x2c8>)
 8001186:	801a      	strh	r2, [r3, #0]
	d_pcounter = m_counter;
 8001188:	4b84      	ldr	r3, [pc, #528]	@ (800139c <main+0x2bc>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	62bb      	str	r3, [r7, #40]	@ 0x28

//回転を取?��?
	bno055.getEulerAngles(heading, roll, pitch);
 800118e:	f107 030c 	add.w	r3, r7, #12
 8001192:	f107 0210 	add.w	r2, r7, #16
 8001196:	f107 0114 	add.w	r1, r7, #20
 800119a:	f107 0018 	add.w	r0, r7, #24
 800119e:	f7ff fedb 	bl	8000f58 <_ZN6BNO05514getEulerAnglesERfS0_S0_>
	rotate = (int)heading;
 80011a2:	edd7 7a05 	vldr	s15, [r7, #20]
 80011a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011ae:	4b7f      	ldr	r3, [pc, #508]	@ (80013ac <main+0x2cc>)
 80011b0:	edc3 7a00 	vstr	s15, [r3]

//x座標を取る

		HAL_UART_Transmit(&huart6, OdoX_ID, 3, 1);
 80011b4:	f107 0108 	add.w	r1, r7, #8
 80011b8:	2301      	movs	r3, #1
 80011ba:	2203      	movs	r2, #3
 80011bc:	4874      	ldr	r0, [pc, #464]	@ (8001390 <main+0x2b0>)
 80011be:	f003 fce3 	bl	8004b88 <HAL_UART_Transmit>
		if(HAL_UART_Receive(&huart6, rxDataX, 3, 1) == HAL_OK){
 80011c2:	2301      	movs	r3, #1
 80011c4:	2203      	movs	r2, #3
 80011c6:	497a      	ldr	r1, [pc, #488]	@ (80013b0 <main+0x2d0>)
 80011c8:	4871      	ldr	r0, [pc, #452]	@ (8001390 <main+0x2b0>)
 80011ca:	f003 fd68 	bl	8004c9e <HAL_UART_Receive>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	bf0c      	ite	eq
 80011d4:	2301      	moveq	r3, #1
 80011d6:	2300      	movne	r3, #0
 80011d8:	b2db      	uxtb	r3, r3
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d003      	beq.n	80011e6 <main+0x106>
		  HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
 80011de:	2104      	movs	r1, #4
 80011e0:	486d      	ldr	r0, [pc, #436]	@ (8001398 <main+0x2b8>)
 80011e2:	f001 f996 	bl	8002512 <HAL_GPIO_TogglePin>
		}else{}
		position[0] = rxDataX[1] + rxDataX[2]*200 - 20000;
 80011e6:	4b72      	ldr	r3, [pc, #456]	@ (80013b0 <main+0x2d0>)
 80011e8:	785b      	ldrb	r3, [r3, #1]
 80011ea:	461a      	mov	r2, r3
 80011ec:	4b70      	ldr	r3, [pc, #448]	@ (80013b0 <main+0x2d0>)
 80011ee:	789b      	ldrb	r3, [r3, #2]
 80011f0:	4619      	mov	r1, r3
 80011f2:	0089      	lsls	r1, r1, #2
 80011f4:	440b      	add	r3, r1
 80011f6:	4619      	mov	r1, r3
 80011f8:	0088      	lsls	r0, r1, #2
 80011fa:	4619      	mov	r1, r3
 80011fc:	4603      	mov	r3, r0
 80011fe:	440b      	add	r3, r1
 8001200:	00db      	lsls	r3, r3, #3
 8001202:	b29b      	uxth	r3, r3
 8001204:	4413      	add	r3, r2
 8001206:	b29b      	uxth	r3, r3
 8001208:	f5a3 439c 	sub.w	r3, r3, #19968	@ 0x4e00
 800120c:	3b20      	subs	r3, #32
 800120e:	b29b      	uxth	r3, r3
 8001210:	b21a      	sxth	r2, r3
 8001212:	4b68      	ldr	r3, [pc, #416]	@ (80013b4 <main+0x2d4>)
 8001214:	801a      	strh	r2, [r3, #0]


//y座標を取る
		HAL_UART_Transmit(&huart6, OdoY_ID, 3, 1);
 8001216:	1d39      	adds	r1, r7, #4
 8001218:	2301      	movs	r3, #1
 800121a:	2203      	movs	r2, #3
 800121c:	485c      	ldr	r0, [pc, #368]	@ (8001390 <main+0x2b0>)
 800121e:	f003 fcb3 	bl	8004b88 <HAL_UART_Transmit>
		if(HAL_UART_Receive(&huart6, rxDataY, 3, 1) == HAL_OK){
 8001222:	2301      	movs	r3, #1
 8001224:	2203      	movs	r2, #3
 8001226:	4964      	ldr	r1, [pc, #400]	@ (80013b8 <main+0x2d8>)
 8001228:	4859      	ldr	r0, [pc, #356]	@ (8001390 <main+0x2b0>)
 800122a:	f003 fd38 	bl	8004c9e <HAL_UART_Receive>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	bf0c      	ite	eq
 8001234:	2301      	moveq	r3, #1
 8001236:	2300      	movne	r3, #0
 8001238:	b2db      	uxtb	r3, r3
 800123a:	2b00      	cmp	r3, #0
 800123c:	d003      	beq.n	8001246 <main+0x166>
		  HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
 800123e:	2104      	movs	r1, #4
 8001240:	4855      	ldr	r0, [pc, #340]	@ (8001398 <main+0x2b8>)
 8001242:	f001 f966 	bl	8002512 <HAL_GPIO_TogglePin>
		}else{}
		HAL_Delay(10);
 8001246:	200a      	movs	r0, #10
 8001248:	f000 fe68 	bl	8001f1c <HAL_Delay>
		position[1] = rxDataY[1] + rxDataY[2]*200 - 20000;
 800124c:	4b5a      	ldr	r3, [pc, #360]	@ (80013b8 <main+0x2d8>)
 800124e:	785b      	ldrb	r3, [r3, #1]
 8001250:	461a      	mov	r2, r3
 8001252:	4b59      	ldr	r3, [pc, #356]	@ (80013b8 <main+0x2d8>)
 8001254:	789b      	ldrb	r3, [r3, #2]
 8001256:	4619      	mov	r1, r3
 8001258:	0089      	lsls	r1, r1, #2
 800125a:	440b      	add	r3, r1
 800125c:	4619      	mov	r1, r3
 800125e:	0088      	lsls	r0, r1, #2
 8001260:	4619      	mov	r1, r3
 8001262:	4603      	mov	r3, r0
 8001264:	440b      	add	r3, r1
 8001266:	00db      	lsls	r3, r3, #3
 8001268:	b29b      	uxth	r3, r3
 800126a:	4413      	add	r3, r2
 800126c:	b29b      	uxth	r3, r3
 800126e:	f5a3 439c 	sub.w	r3, r3, #19968	@ 0x4e00
 8001272:	3b20      	subs	r3, #32
 8001274:	b29b      	uxth	r3, r3
 8001276:	b21a      	sxth	r2, r3
 8001278:	4b4e      	ldr	r3, [pc, #312]	@ (80013b4 <main+0x2d4>)
 800127a:	805a      	strh	r2, [r3, #2]

//移動距離をと?��?
	for(int i=0; i<2; i++){cur_position_rec[i] = goal_position[i] - position[i];}
 800127c:	2300      	movs	r3, #0
 800127e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001280:	e013      	b.n	80012aa <main+0x1ca>
 8001282:	4a4e      	ldr	r2, [pc, #312]	@ (80013bc <main+0x2dc>)
 8001284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001286:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800128a:	b29a      	uxth	r2, r3
 800128c:	4949      	ldr	r1, [pc, #292]	@ (80013b4 <main+0x2d4>)
 800128e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001290:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8001294:	b29b      	uxth	r3, r3
 8001296:	1ad3      	subs	r3, r2, r3
 8001298:	b29b      	uxth	r3, r3
 800129a:	b219      	sxth	r1, r3
 800129c:	4a48      	ldr	r2, [pc, #288]	@ (80013c0 <main+0x2e0>)
 800129e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012a0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80012a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012a6:	3301      	adds	r3, #1
 80012a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80012aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012ac:	2b01      	cmp	r3, #1
 80012ae:	dde8      	ble.n	8001282 <main+0x1a2>

//移動距離を極座標に
	cur_position_pol[0] = pow(pow(cur_position_rec[0], 2) + pow(cur_position_rec[1], 2), 0.5);
 80012b0:	4b43      	ldr	r3, [pc, #268]	@ (80013c0 <main+0x2e0>)
 80012b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012b6:	2102      	movs	r1, #2
 80012b8:	4618      	mov	r0, r3
 80012ba:	f000 fc1f 	bl	8001afc <_ZSt3powIsiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80012be:	ec55 4b10 	vmov	r4, r5, d0
 80012c2:	4b3f      	ldr	r3, [pc, #252]	@ (80013c0 <main+0x2e0>)
 80012c4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80012c8:	2102      	movs	r1, #2
 80012ca:	4618      	mov	r0, r3
 80012cc:	f000 fc16 	bl	8001afc <_ZSt3powIsiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80012d0:	ec53 2b10 	vmov	r2, r3, d0
 80012d4:	4620      	mov	r0, r4
 80012d6:	4629      	mov	r1, r5
 80012d8:	f7fe ff9c 	bl	8000214 <__adddf3>
 80012dc:	4602      	mov	r2, r0
 80012de:	460b      	mov	r3, r1
 80012e0:	ec43 2b17 	vmov	d7, r2, r3
 80012e4:	ed9f 1b24 	vldr	d1, [pc, #144]	@ 8001378 <main+0x298>
 80012e8:	eeb0 0a47 	vmov.f32	s0, s14
 80012ec:	eef0 0a67 	vmov.f32	s1, s15
 80012f0:	f004 f89e 	bl	8005430 <pow>
 80012f4:	ec53 2b10 	vmov	r2, r3, d0
 80012f8:	4610      	mov	r0, r2
 80012fa:	4619      	mov	r1, r3
 80012fc:	f7ff fbf0 	bl	8000ae0 <__aeabi_d2iz>
 8001300:	4603      	mov	r3, r0
 8001302:	b21a      	sxth	r2, r3
 8001304:	4b2f      	ldr	r3, [pc, #188]	@ (80013c4 <main+0x2e4>)
 8001306:	801a      	strh	r2, [r3, #0]
	cur_position_pol[1] = atan2(cur_position_rec[0], cur_position_rec[1]) / 3.1415 * 180.0;
 8001308:	4b2d      	ldr	r3, [pc, #180]	@ (80013c0 <main+0x2e0>)
 800130a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800130e:	4a2c      	ldr	r2, [pc, #176]	@ (80013c0 <main+0x2e0>)
 8001310:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8001314:	4611      	mov	r1, r2
 8001316:	4618      	mov	r0, r3
 8001318:	f000 fc13 	bl	8001b42 <_ZSt5atan2IssEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800131c:	ec51 0b10 	vmov	r0, r1, d0
 8001320:	a317      	add	r3, pc, #92	@ (adr r3, 8001380 <main+0x2a0>)
 8001322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001326:	f7ff fa55 	bl	80007d4 <__aeabi_ddiv>
 800132a:	4602      	mov	r2, r0
 800132c:	460b      	mov	r3, r1
 800132e:	4610      	mov	r0, r2
 8001330:	4619      	mov	r1, r3
 8001332:	f04f 0200 	mov.w	r2, #0
 8001336:	4b24      	ldr	r3, [pc, #144]	@ (80013c8 <main+0x2e8>)
 8001338:	f7ff f922 	bl	8000580 <__aeabi_dmul>
 800133c:	4602      	mov	r2, r0
 800133e:	460b      	mov	r3, r1
 8001340:	4610      	mov	r0, r2
 8001342:	4619      	mov	r1, r3
 8001344:	f7ff fbcc 	bl	8000ae0 <__aeabi_d2iz>
 8001348:	4603      	mov	r3, r0
 800134a:	b21a      	sxth	r2, r3
 800134c:	4b1d      	ldr	r3, [pc, #116]	@ (80013c4 <main+0x2e4>)
 800134e:	805a      	strh	r2, [r3, #2]

//移動位置->移動スピ�??��?��?
	if(cur_position_pol[0] > 25){trgt_speed = 200;}
 8001350:	4b1c      	ldr	r3, [pc, #112]	@ (80013c4 <main+0x2e4>)
 8001352:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001356:	2b19      	cmp	r3, #25
 8001358:	dd03      	ble.n	8001362 <main+0x282>
 800135a:	4b1c      	ldr	r3, [pc, #112]	@ (80013cc <main+0x2ec>)
 800135c:	22c8      	movs	r2, #200	@ 0xc8
 800135e:	801a      	strh	r2, [r3, #0]
 8001360:	e039      	b.n	80013d6 <main+0x2f6>
	else if(cur_position_pol[0] < -25){trgt_speed = -200;}
 8001362:	4b18      	ldr	r3, [pc, #96]	@ (80013c4 <main+0x2e4>)
 8001364:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001368:	f113 0f19 	cmn.w	r3, #25
 800136c:	da30      	bge.n	80013d0 <main+0x2f0>
 800136e:	4b17      	ldr	r3, [pc, #92]	@ (80013cc <main+0x2ec>)
 8001370:	f64f 7238 	movw	r2, #65336	@ 0xff38
 8001374:	801a      	strh	r2, [r3, #0]
 8001376:	e02e      	b.n	80013d6 <main+0x2f6>
 8001378:	00000000 	.word	0x00000000
 800137c:	3fe00000 	.word	0x3fe00000
 8001380:	c083126f 	.word	0xc083126f
 8001384:	400921ca 	.word	0x400921ca
 8001388:	200000e8 	.word	0x200000e8
 800138c:	20000000 	.word	0x20000000
 8001390:	20000130 	.word	0x20000130
 8001394:	20000094 	.word	0x20000094
 8001398:	40020400 	.word	0x40020400
 800139c:	20000178 	.word	0x20000178
 80013a0:	08007780 	.word	0x08007780
 80013a4:	08007784 	.word	0x08007784
 80013a8:	200001a4 	.word	0x200001a4
 80013ac:	20000190 	.word	0x20000190
 80013b0:	20000184 	.word	0x20000184
 80013b4:	2000018c 	.word	0x2000018c
 80013b8:	20000188 	.word	0x20000188
 80013bc:	20000194 	.word	0x20000194
 80013c0:	2000019c 	.word	0x2000019c
 80013c4:	200001a0 	.word	0x200001a0
 80013c8:	40668000 	.word	0x40668000
 80013cc:	20000198 	.word	0x20000198
	else{trgt_speed = 0;}
 80013d0:	4b36      	ldr	r3, [pc, #216]	@ (80014ac <main+0x3cc>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	801a      	strh	r2, [r3, #0]

	trgt_degree = cur_position_pol[1];
 80013d6:	4b36      	ldr	r3, [pc, #216]	@ (80014b0 <main+0x3d0>)
 80013d8:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80013dc:	4b35      	ldr	r3, [pc, #212]	@ (80014b4 <main+0x3d4>)
 80013de:	801a      	strh	r2, [r3, #0]


//移動スピ�??��?��?->?��?モーターのスピ�??��?��?
	speed_set(rotate, trgt_speed, trgt_degree, MTRS, 0.7);
 80013e0:	4b35      	ldr	r3, [pc, #212]	@ (80014b8 <main+0x3d8>)
 80013e2:	edd3 7a00 	vldr	s15, [r3]
 80013e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013ea:	4b30      	ldr	r3, [pc, #192]	@ (80014ac <main+0x3cc>)
 80013ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013f0:	4619      	mov	r1, r3
 80013f2:	4b30      	ldr	r3, [pc, #192]	@ (80014b4 <main+0x3d4>)
 80013f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013f8:	461a      	mov	r2, r3
 80013fa:	ed9f 0a30 	vldr	s0, [pc, #192]	@ 80014bc <main+0x3dc>
 80013fe:	4b30      	ldr	r3, [pc, #192]	@ (80014c0 <main+0x3e0>)
 8001400:	ee17 0a90 	vmov	r0, s15
 8001404:	f000 fa04 	bl	8001810 <_Z9speed_setiiiPsf>

//?��?モーターのスピ�??��?��?->送る行�??
	set_array(MTRS, send_array);
 8001408:	492e      	ldr	r1, [pc, #184]	@ (80014c4 <main+0x3e4>)
 800140a:	482d      	ldr	r0, [pc, #180]	@ (80014c0 <main+0x3e0>)
 800140c:	f000 fb06 	bl	8001a1c <_Z9set_arrayPsPh>

////モーターに送る
	if(HAL_GPIO_ReadPin(STRTSW_GPIO_Port, STRTSW_Pin) == 1){
 8001410:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001414:	482c      	ldr	r0, [pc, #176]	@ (80014c8 <main+0x3e8>)
 8001416:	f001 f84b 	bl	80024b0 <HAL_GPIO_ReadPin>
 800141a:	4603      	mov	r3, r0
 800141c:	2b01      	cmp	r3, #1
 800141e:	bf0c      	ite	eq
 8001420:	2301      	moveq	r3, #1
 8001422:	2300      	movne	r3, #0
 8001424:	b2db      	uxtb	r3, r3
 8001426:	2b00      	cmp	r3, #0
 8001428:	d006      	beq.n	8001438 <main+0x358>
	  HAL_UART_Transmit(&huart6, send_array, 12, 1);
 800142a:	2301      	movs	r3, #1
 800142c:	220c      	movs	r2, #12
 800142e:	4925      	ldr	r1, [pc, #148]	@ (80014c4 <main+0x3e4>)
 8001430:	4826      	ldr	r0, [pc, #152]	@ (80014cc <main+0x3ec>)
 8001432:	f003 fba9 	bl	8004b88 <HAL_UART_Transmit>
 8001436:	e028      	b.n	800148a <main+0x3aa>
	}else{//スタートスイ?��?チがオフ�??��?��?
		for(int i=0; i<4; i++){
 8001438:	2300      	movs	r3, #0
 800143a:	623b      	str	r3, [r7, #32]
 800143c:	e01c      	b.n	8001478 <main+0x398>
		  send_array[3*i] = 250 + i;
 800143e:	6a3b      	ldr	r3, [r7, #32]
 8001440:	b2d9      	uxtb	r1, r3
 8001442:	6a3a      	ldr	r2, [r7, #32]
 8001444:	4613      	mov	r3, r2
 8001446:	005b      	lsls	r3, r3, #1
 8001448:	4413      	add	r3, r2
 800144a:	1f8a      	subs	r2, r1, #6
 800144c:	b2d1      	uxtb	r1, r2
 800144e:	4a1d      	ldr	r2, [pc, #116]	@ (80014c4 <main+0x3e4>)
 8001450:	54d1      	strb	r1, [r2, r3]
		  send_array[3*i + 1] = 210;
 8001452:	6a3a      	ldr	r2, [r7, #32]
 8001454:	4613      	mov	r3, r2
 8001456:	005b      	lsls	r3, r3, #1
 8001458:	4413      	add	r3, r2
 800145a:	3301      	adds	r3, #1
 800145c:	4a19      	ldr	r2, [pc, #100]	@ (80014c4 <main+0x3e4>)
 800145e:	21d2      	movs	r1, #210	@ 0xd2
 8001460:	54d1      	strb	r1, [r2, r3]
		  send_array[3*i + 2] = 210;
 8001462:	6a3a      	ldr	r2, [r7, #32]
 8001464:	4613      	mov	r3, r2
 8001466:	005b      	lsls	r3, r3, #1
 8001468:	4413      	add	r3, r2
 800146a:	3302      	adds	r3, #2
 800146c:	4a15      	ldr	r2, [pc, #84]	@ (80014c4 <main+0x3e4>)
 800146e:	21d2      	movs	r1, #210	@ 0xd2
 8001470:	54d1      	strb	r1, [r2, r3]
		for(int i=0; i<4; i++){
 8001472:	6a3b      	ldr	r3, [r7, #32]
 8001474:	3301      	adds	r3, #1
 8001476:	623b      	str	r3, [r7, #32]
 8001478:	6a3b      	ldr	r3, [r7, #32]
 800147a:	2b03      	cmp	r3, #3
 800147c:	dddf      	ble.n	800143e <main+0x35e>
		}
		HAL_UART_Transmit(&huart6, send_array, 12, 1);
 800147e:	2301      	movs	r3, #1
 8001480:	220c      	movs	r2, #12
 8001482:	4910      	ldr	r1, [pc, #64]	@ (80014c4 <main+0x3e4>)
 8001484:	4811      	ldr	r0, [pc, #68]	@ (80014cc <main+0x3ec>)
 8001486:	f003 fb7f 	bl	8004b88 <HAL_UART_Transmit>
	}


//Lチカ
	if(m_counter - Ltika_pcounter > 1000){
 800148a:	4b11      	ldr	r3, [pc, #68]	@ (80014d0 <main+0x3f0>)
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001490:	1ad3      	subs	r3, r2, r3
 8001492:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001496:	f67f ae6e 	bls.w	8001176 <main+0x96>
	HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
 800149a:	2104      	movs	r1, #4
 800149c:	480a      	ldr	r0, [pc, #40]	@ (80014c8 <main+0x3e8>)
 800149e:	f001 f838 	bl	8002512 <HAL_GPIO_TogglePin>
	Ltika_pcounter = m_counter;
 80014a2:	4b0b      	ldr	r3, [pc, #44]	@ (80014d0 <main+0x3f0>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	62fb      	str	r3, [r7, #44]	@ 0x2c


    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 80014a8:	e665      	b.n	8001176 <main+0x96>
 80014aa:	bf00      	nop
 80014ac:	20000198 	.word	0x20000198
 80014b0:	200001a0 	.word	0x200001a0
 80014b4:	2000019a 	.word	0x2000019a
 80014b8:	20000190 	.word	0x20000190
 80014bc:	3f333333 	.word	0x3f333333
 80014c0:	2000017c 	.word	0x2000017c
 80014c4:	20000000 	.word	0x20000000
 80014c8:	40020400 	.word	0x40020400
 80014cc:	20000130 	.word	0x20000130
 80014d0:	20000178 	.word	0x20000178

080014d4 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b094      	sub	sp, #80	@ 0x50
 80014d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014da:	f107 031c 	add.w	r3, r7, #28
 80014de:	2234      	movs	r2, #52	@ 0x34
 80014e0:	2100      	movs	r1, #0
 80014e2:	4618      	mov	r0, r3
 80014e4:	f006 f90c 	bl	8007700 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014e8:	f107 0308 	add.w	r3, r7, #8
 80014ec:	2200      	movs	r2, #0
 80014ee:	601a      	str	r2, [r3, #0]
 80014f0:	605a      	str	r2, [r3, #4]
 80014f2:	609a      	str	r2, [r3, #8]
 80014f4:	60da      	str	r2, [r3, #12]
 80014f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014f8:	2300      	movs	r3, #0
 80014fa:	607b      	str	r3, [r7, #4]
 80014fc:	4b34      	ldr	r3, [pc, #208]	@ (80015d0 <_Z18SystemClock_Configv+0xfc>)
 80014fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001500:	4a33      	ldr	r2, [pc, #204]	@ (80015d0 <_Z18SystemClock_Configv+0xfc>)
 8001502:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001506:	6413      	str	r3, [r2, #64]	@ 0x40
 8001508:	4b31      	ldr	r3, [pc, #196]	@ (80015d0 <_Z18SystemClock_Configv+0xfc>)
 800150a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800150c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001510:	607b      	str	r3, [r7, #4]
 8001512:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001514:	2300      	movs	r3, #0
 8001516:	603b      	str	r3, [r7, #0]
 8001518:	4b2e      	ldr	r3, [pc, #184]	@ (80015d4 <_Z18SystemClock_Configv+0x100>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a2d      	ldr	r2, [pc, #180]	@ (80015d4 <_Z18SystemClock_Configv+0x100>)
 800151e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001522:	6013      	str	r3, [r2, #0]
 8001524:	4b2b      	ldr	r3, [pc, #172]	@ (80015d4 <_Z18SystemClock_Configv+0x100>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800152c:	603b      	str	r3, [r7, #0]
 800152e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001530:	2302      	movs	r3, #2
 8001532:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001534:	2301      	movs	r3, #1
 8001536:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001538:	2310      	movs	r3, #16
 800153a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800153c:	2302      	movs	r3, #2
 800153e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001540:	2300      	movs	r3, #0
 8001542:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001544:	2308      	movs	r3, #8
 8001546:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001548:	23b4      	movs	r3, #180	@ 0xb4
 800154a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800154c:	2302      	movs	r3, #2
 800154e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001550:	2302      	movs	r3, #2
 8001552:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001554:	2302      	movs	r3, #2
 8001556:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001558:	f107 031c 	add.w	r3, r7, #28
 800155c:	4618      	mov	r0, r3
 800155e:	f002 fbaf 	bl	8003cc0 <HAL_RCC_OscConfig>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	bf14      	ite	ne
 8001568:	2301      	movne	r3, #1
 800156a:	2300      	moveq	r3, #0
 800156c:	b2db      	uxtb	r3, r3
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 8001572:	f000 fabd 	bl	8001af0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001576:	f002 f80b 	bl	8003590 <HAL_PWREx_EnableOverDrive>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	bf14      	ite	ne
 8001580:	2301      	movne	r3, #1
 8001582:	2300      	moveq	r3, #0
 8001584:	b2db      	uxtb	r3, r3
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <_Z18SystemClock_Configv+0xba>
  {
    Error_Handler();
 800158a:	f000 fab1 	bl	8001af0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800158e:	230f      	movs	r3, #15
 8001590:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001592:	2302      	movs	r3, #2
 8001594:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001596:	2300      	movs	r3, #0
 8001598:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800159a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800159e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80015a0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80015a4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80015a6:	f107 0308 	add.w	r3, r7, #8
 80015aa:	2105      	movs	r1, #5
 80015ac:	4618      	mov	r0, r3
 80015ae:	f002 f83f 	bl	8003630 <HAL_RCC_ClockConfig>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	bf14      	ite	ne
 80015b8:	2301      	movne	r3, #1
 80015ba:	2300      	moveq	r3, #0
 80015bc:	b2db      	uxtb	r3, r3
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <_Z18SystemClock_Configv+0xf2>
  {
    Error_Handler();
 80015c2:	f000 fa95 	bl	8001af0 <Error_Handler>
  }
}
 80015c6:	bf00      	nop
 80015c8:	3750      	adds	r7, #80	@ 0x50
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	40023800 	.word	0x40023800
 80015d4:	40007000 	.word	0x40007000

080015d8 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80015dc:	4b15      	ldr	r3, [pc, #84]	@ (8001634 <_ZL12MX_I2C1_Initv+0x5c>)
 80015de:	4a16      	ldr	r2, [pc, #88]	@ (8001638 <_ZL12MX_I2C1_Initv+0x60>)
 80015e0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80015e2:	4b14      	ldr	r3, [pc, #80]	@ (8001634 <_ZL12MX_I2C1_Initv+0x5c>)
 80015e4:	4a15      	ldr	r2, [pc, #84]	@ (800163c <_ZL12MX_I2C1_Initv+0x64>)
 80015e6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80015e8:	4b12      	ldr	r3, [pc, #72]	@ (8001634 <_ZL12MX_I2C1_Initv+0x5c>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80015ee:	4b11      	ldr	r3, [pc, #68]	@ (8001634 <_ZL12MX_I2C1_Initv+0x5c>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015f4:	4b0f      	ldr	r3, [pc, #60]	@ (8001634 <_ZL12MX_I2C1_Initv+0x5c>)
 80015f6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80015fa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015fc:	4b0d      	ldr	r3, [pc, #52]	@ (8001634 <_ZL12MX_I2C1_Initv+0x5c>)
 80015fe:	2200      	movs	r2, #0
 8001600:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001602:	4b0c      	ldr	r3, [pc, #48]	@ (8001634 <_ZL12MX_I2C1_Initv+0x5c>)
 8001604:	2200      	movs	r2, #0
 8001606:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001608:	4b0a      	ldr	r3, [pc, #40]	@ (8001634 <_ZL12MX_I2C1_Initv+0x5c>)
 800160a:	2200      	movs	r2, #0
 800160c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800160e:	4b09      	ldr	r3, [pc, #36]	@ (8001634 <_ZL12MX_I2C1_Initv+0x5c>)
 8001610:	2200      	movs	r2, #0
 8001612:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001614:	4807      	ldr	r0, [pc, #28]	@ (8001634 <_ZL12MX_I2C1_Initv+0x5c>)
 8001616:	f000 ff97 	bl	8002548 <HAL_I2C_Init>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	bf14      	ite	ne
 8001620:	2301      	movne	r3, #1
 8001622:	2300      	moveq	r3, #0
 8001624:	b2db      	uxtb	r3, r3
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 800162a:	f000 fa61 	bl	8001af0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800162e:	bf00      	nop
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	20000094 	.word	0x20000094
 8001638:	40005400 	.word	0x40005400
 800163c:	000186a0 	.word	0x000186a0

08001640 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b086      	sub	sp, #24
 8001644:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001646:	f107 0308 	add.w	r3, r7, #8
 800164a:	2200      	movs	r2, #0
 800164c:	601a      	str	r2, [r3, #0]
 800164e:	605a      	str	r2, [r3, #4]
 8001650:	609a      	str	r2, [r3, #8]
 8001652:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001654:	463b      	mov	r3, r7
 8001656:	2200      	movs	r2, #0
 8001658:	601a      	str	r2, [r3, #0]
 800165a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800165c:	4b25      	ldr	r3, [pc, #148]	@ (80016f4 <_ZL12MX_TIM2_Initv+0xb4>)
 800165e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001662:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 90-1;
 8001664:	4b23      	ldr	r3, [pc, #140]	@ (80016f4 <_ZL12MX_TIM2_Initv+0xb4>)
 8001666:	2259      	movs	r2, #89	@ 0x59
 8001668:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800166a:	4b22      	ldr	r3, [pc, #136]	@ (80016f4 <_ZL12MX_TIM2_Initv+0xb4>)
 800166c:	2200      	movs	r2, #0
 800166e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8001670:	4b20      	ldr	r3, [pc, #128]	@ (80016f4 <_ZL12MX_TIM2_Initv+0xb4>)
 8001672:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001676:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001678:	4b1e      	ldr	r3, [pc, #120]	@ (80016f4 <_ZL12MX_TIM2_Initv+0xb4>)
 800167a:	2200      	movs	r2, #0
 800167c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800167e:	4b1d      	ldr	r3, [pc, #116]	@ (80016f4 <_ZL12MX_TIM2_Initv+0xb4>)
 8001680:	2200      	movs	r2, #0
 8001682:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001684:	481b      	ldr	r0, [pc, #108]	@ (80016f4 <_ZL12MX_TIM2_Initv+0xb4>)
 8001686:	f002 fdb9 	bl	80041fc <HAL_TIM_Base_Init>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	bf14      	ite	ne
 8001690:	2301      	movne	r3, #1
 8001692:	2300      	moveq	r3, #0
 8001694:	b2db      	uxtb	r3, r3
 8001696:	2b00      	cmp	r3, #0
 8001698:	d001      	beq.n	800169e <_ZL12MX_TIM2_Initv+0x5e>
  {
    Error_Handler();
 800169a:	f000 fa29 	bl	8001af0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800169e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016a2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80016a4:	f107 0308 	add.w	r3, r7, #8
 80016a8:	4619      	mov	r1, r3
 80016aa:	4812      	ldr	r0, [pc, #72]	@ (80016f4 <_ZL12MX_TIM2_Initv+0xb4>)
 80016ac:	f002 ff56 	bl	800455c <HAL_TIM_ConfigClockSource>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	bf14      	ite	ne
 80016b6:	2301      	movne	r3, #1
 80016b8:	2300      	moveq	r3, #0
 80016ba:	b2db      	uxtb	r3, r3
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d001      	beq.n	80016c4 <_ZL12MX_TIM2_Initv+0x84>
  {
    Error_Handler();
 80016c0:	f000 fa16 	bl	8001af0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016c4:	2300      	movs	r3, #0
 80016c6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016c8:	2300      	movs	r3, #0
 80016ca:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80016cc:	463b      	mov	r3, r7
 80016ce:	4619      	mov	r1, r3
 80016d0:	4808      	ldr	r0, [pc, #32]	@ (80016f4 <_ZL12MX_TIM2_Initv+0xb4>)
 80016d2:	f003 f979 	bl	80049c8 <HAL_TIMEx_MasterConfigSynchronization>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	bf14      	ite	ne
 80016dc:	2301      	movne	r3, #1
 80016de:	2300      	moveq	r3, #0
 80016e0:	b2db      	uxtb	r3, r3
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d001      	beq.n	80016ea <_ZL12MX_TIM2_Initv+0xaa>
  {
    Error_Handler();
 80016e6:	f000 fa03 	bl	8001af0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80016ea:	bf00      	nop
 80016ec:	3718      	adds	r7, #24
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	200000e8 	.word	0x200000e8

080016f8 <_ZL19MX_USART6_UART_Initv>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80016fc:	4b13      	ldr	r3, [pc, #76]	@ (800174c <_ZL19MX_USART6_UART_Initv+0x54>)
 80016fe:	4a14      	ldr	r2, [pc, #80]	@ (8001750 <_ZL19MX_USART6_UART_Initv+0x58>)
 8001700:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001702:	4b12      	ldr	r3, [pc, #72]	@ (800174c <_ZL19MX_USART6_UART_Initv+0x54>)
 8001704:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001708:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800170a:	4b10      	ldr	r3, [pc, #64]	@ (800174c <_ZL19MX_USART6_UART_Initv+0x54>)
 800170c:	2200      	movs	r2, #0
 800170e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001710:	4b0e      	ldr	r3, [pc, #56]	@ (800174c <_ZL19MX_USART6_UART_Initv+0x54>)
 8001712:	2200      	movs	r2, #0
 8001714:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001716:	4b0d      	ldr	r3, [pc, #52]	@ (800174c <_ZL19MX_USART6_UART_Initv+0x54>)
 8001718:	2200      	movs	r2, #0
 800171a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800171c:	4b0b      	ldr	r3, [pc, #44]	@ (800174c <_ZL19MX_USART6_UART_Initv+0x54>)
 800171e:	220c      	movs	r2, #12
 8001720:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001722:	4b0a      	ldr	r3, [pc, #40]	@ (800174c <_ZL19MX_USART6_UART_Initv+0x54>)
 8001724:	2200      	movs	r2, #0
 8001726:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001728:	4b08      	ldr	r3, [pc, #32]	@ (800174c <_ZL19MX_USART6_UART_Initv+0x54>)
 800172a:	2200      	movs	r2, #0
 800172c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800172e:	4807      	ldr	r0, [pc, #28]	@ (800174c <_ZL19MX_USART6_UART_Initv+0x54>)
 8001730:	f003 f9da 	bl	8004ae8 <HAL_UART_Init>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	bf14      	ite	ne
 800173a:	2301      	movne	r3, #1
 800173c:	2300      	moveq	r3, #0
 800173e:	b2db      	uxtb	r3, r3
 8001740:	2b00      	cmp	r3, #0
 8001742:	d001      	beq.n	8001748 <_ZL19MX_USART6_UART_Initv+0x50>
  {
    Error_Handler();
 8001744:	f000 f9d4 	bl	8001af0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001748:	bf00      	nop
 800174a:	bd80      	pop	{r7, pc}
 800174c:	20000130 	.word	0x20000130
 8001750:	40011400 	.word	0x40011400

08001754 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b088      	sub	sp, #32
 8001758:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800175a:	f107 030c 	add.w	r3, r7, #12
 800175e:	2200      	movs	r2, #0
 8001760:	601a      	str	r2, [r3, #0]
 8001762:	605a      	str	r2, [r3, #4]
 8001764:	609a      	str	r2, [r3, #8]
 8001766:	60da      	str	r2, [r3, #12]
 8001768:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800176a:	2300      	movs	r3, #0
 800176c:	60bb      	str	r3, [r7, #8]
 800176e:	4b26      	ldr	r3, [pc, #152]	@ (8001808 <_ZL12MX_GPIO_Initv+0xb4>)
 8001770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001772:	4a25      	ldr	r2, [pc, #148]	@ (8001808 <_ZL12MX_GPIO_Initv+0xb4>)
 8001774:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001778:	6313      	str	r3, [r2, #48]	@ 0x30
 800177a:	4b23      	ldr	r3, [pc, #140]	@ (8001808 <_ZL12MX_GPIO_Initv+0xb4>)
 800177c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800177e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001782:	60bb      	str	r3, [r7, #8]
 8001784:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001786:	2300      	movs	r3, #0
 8001788:	607b      	str	r3, [r7, #4]
 800178a:	4b1f      	ldr	r3, [pc, #124]	@ (8001808 <_ZL12MX_GPIO_Initv+0xb4>)
 800178c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800178e:	4a1e      	ldr	r2, [pc, #120]	@ (8001808 <_ZL12MX_GPIO_Initv+0xb4>)
 8001790:	f043 0302 	orr.w	r3, r3, #2
 8001794:	6313      	str	r3, [r2, #48]	@ 0x30
 8001796:	4b1c      	ldr	r3, [pc, #112]	@ (8001808 <_ZL12MX_GPIO_Initv+0xb4>)
 8001798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800179a:	f003 0302 	and.w	r3, r3, #2
 800179e:	607b      	str	r3, [r7, #4]
 80017a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017a2:	2300      	movs	r3, #0
 80017a4:	603b      	str	r3, [r7, #0]
 80017a6:	4b18      	ldr	r3, [pc, #96]	@ (8001808 <_ZL12MX_GPIO_Initv+0xb4>)
 80017a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017aa:	4a17      	ldr	r2, [pc, #92]	@ (8001808 <_ZL12MX_GPIO_Initv+0xb4>)
 80017ac:	f043 0304 	orr.w	r3, r3, #4
 80017b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80017b2:	4b15      	ldr	r3, [pc, #84]	@ (8001808 <_ZL12MX_GPIO_Initv+0xb4>)
 80017b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017b6:	f003 0304 	and.w	r3, r3, #4
 80017ba:	603b      	str	r3, [r7, #0]
 80017bc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
 80017be:	2200      	movs	r2, #0
 80017c0:	2104      	movs	r1, #4
 80017c2:	4812      	ldr	r0, [pc, #72]	@ (800180c <_ZL12MX_GPIO_Initv+0xb8>)
 80017c4:	f000 fe8c 	bl	80024e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED0_Pin */
  GPIO_InitStruct.Pin = LED0_Pin;
 80017c8:	2304      	movs	r3, #4
 80017ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017cc:	2301      	movs	r3, #1
 80017ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d0:	2300      	movs	r3, #0
 80017d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017d4:	2300      	movs	r3, #0
 80017d6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 80017d8:	f107 030c 	add.w	r3, r7, #12
 80017dc:	4619      	mov	r1, r3
 80017de:	480b      	ldr	r0, [pc, #44]	@ (800180c <_ZL12MX_GPIO_Initv+0xb8>)
 80017e0:	f000 fcd2 	bl	8002188 <HAL_GPIO_Init>

  /*Configure GPIO pin : STRTSW_Pin */
  GPIO_InitStruct.Pin = STRTSW_Pin;
 80017e4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80017e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017ea:	2300      	movs	r3, #0
 80017ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ee:	2300      	movs	r3, #0
 80017f0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(STRTSW_GPIO_Port, &GPIO_InitStruct);
 80017f2:	f107 030c 	add.w	r3, r7, #12
 80017f6:	4619      	mov	r1, r3
 80017f8:	4804      	ldr	r0, [pc, #16]	@ (800180c <_ZL12MX_GPIO_Initv+0xb8>)
 80017fa:	f000 fcc5 	bl	8002188 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80017fe:	bf00      	nop
 8001800:	3720      	adds	r7, #32
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	40023800 	.word	0x40023800
 800180c:	40020400 	.word	0x40020400

08001810 <_Z9speed_setiiiPsf>:

/* USER CODE BEGIN 4 */
void speed_set(int gyro_degree, int goal_speed, int goal_degree, int16_t* mtrspeed, float motor_rate){
 8001810:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001814:	b088      	sub	sp, #32
 8001816:	af00      	add	r7, sp, #0
 8001818:	6178      	str	r0, [r7, #20]
 800181a:	6139      	str	r1, [r7, #16]
 800181c:	60fa      	str	r2, [r7, #12]
 800181e:	60bb      	str	r3, [r7, #8]
 8001820:	ed87 0a01 	vstr	s0, [r7, #4]
	goal_degree = goal_degree % 360;
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	4a78      	ldr	r2, [pc, #480]	@ (8001a08 <_Z9speed_setiiiPsf+0x1f8>)
 8001828:	fb82 1203 	smull	r1, r2, r2, r3
 800182c:	441a      	add	r2, r3
 800182e:	1211      	asrs	r1, r2, #8
 8001830:	17da      	asrs	r2, r3, #31
 8001832:	1a8a      	subs	r2, r1, r2
 8001834:	f44f 71b4 	mov.w	r1, #360	@ 0x168
 8001838:	fb01 f202 	mul.w	r2, r1, r2
 800183c:	1a9b      	subs	r3, r3, r2
 800183e:	60fb      	str	r3, [r7, #12]
	if(goal_degree < 0){goal_degree += 360;}
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	2b00      	cmp	r3, #0
 8001844:	da03      	bge.n	800184e <_Z9speed_setiiiPsf+0x3e>
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800184c:	60fb      	str	r3, [r7, #12]


//    int roll_speed;
    if(gyro_degree > 180){gyro_degree -= 360;}
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	2bb4      	cmp	r3, #180	@ 0xb4
 8001852:	dd04      	ble.n	800185e <_Z9speed_setiiiPsf+0x4e>
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800185a:	617b      	str	r3, [r7, #20]
 800185c:	e007      	b.n	800186e <_Z9speed_setiiiPsf+0x5e>
    else if(gyro_degree <-180){gyro_degree += 360;}
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	f113 0fb4 	cmn.w	r3, #180	@ 0xb4
 8001864:	da03      	bge.n	800186e <_Z9speed_setiiiPsf+0x5e>
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800186c:	617b      	str	r3, [r7, #20]
    else{}


    if (gyro_degree > 0){
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	2b00      	cmp	r3, #0
 8001872:	dd0f      	ble.n	8001894 <_Z9speed_setiiiPsf+0x84>
        roll_speed = gyro_degree * 50;
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	2232      	movs	r2, #50	@ 0x32
 8001878:	fb02 f303 	mul.w	r3, r2, r3
 800187c:	4a63      	ldr	r2, [pc, #396]	@ (8001a0c <_Z9speed_setiiiPsf+0x1fc>)
 800187e:	6013      	str	r3, [r2, #0]
//        if (gyro_degree < 2){
//            roll_speed = 0;
//        }
        if (roll_speed < -100){
 8001880:	4b62      	ldr	r3, [pc, #392]	@ (8001a0c <_Z9speed_setiiiPsf+0x1fc>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f113 0f64 	cmn.w	r3, #100	@ 0x64
 8001888:	da18      	bge.n	80018bc <_Z9speed_setiiiPsf+0xac>
            roll_speed = -100;
 800188a:	4b60      	ldr	r3, [pc, #384]	@ (8001a0c <_Z9speed_setiiiPsf+0x1fc>)
 800188c:	f06f 0263 	mvn.w	r2, #99	@ 0x63
 8001890:	601a      	str	r2, [r3, #0]
 8001892:	e013      	b.n	80018bc <_Z9speed_setiiiPsf+0xac>
        }
    }else if (gyro_degree < 0){
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	2b00      	cmp	r3, #0
 8001898:	da0d      	bge.n	80018b6 <_Z9speed_setiiiPsf+0xa6>
        roll_speed = gyro_degree * 50;
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	2232      	movs	r2, #50	@ 0x32
 800189e:	fb02 f303 	mul.w	r3, r2, r3
 80018a2:	4a5a      	ldr	r2, [pc, #360]	@ (8001a0c <_Z9speed_setiiiPsf+0x1fc>)
 80018a4:	6013      	str	r3, [r2, #0]
//        if (gyro_degree > 2){
//            roll_speed = 0;
//        }
        if (roll_speed > 100){
 80018a6:	4b59      	ldr	r3, [pc, #356]	@ (8001a0c <_Z9speed_setiiiPsf+0x1fc>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	2b64      	cmp	r3, #100	@ 0x64
 80018ac:	dd06      	ble.n	80018bc <_Z9speed_setiiiPsf+0xac>
            roll_speed = 100;
 80018ae:	4b57      	ldr	r3, [pc, #348]	@ (8001a0c <_Z9speed_setiiiPsf+0x1fc>)
 80018b0:	2264      	movs	r2, #100	@ 0x64
 80018b2:	601a      	str	r2, [r3, #0]
 80018b4:	e002      	b.n	80018bc <_Z9speed_setiiiPsf+0xac>
        }
    }else{
        roll_speed = 0;
 80018b6:	4b55      	ldr	r3, [pc, #340]	@ (8001a0c <_Z9speed_setiiiPsf+0x1fc>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	601a      	str	r2, [r3, #0]
    }


	int conv_degree = -goal_degree + 45;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	f1c3 032d 	rsb	r3, r3, #45	@ 0x2d
 80018c2:	61fb      	str	r3, [r7, #28]
	if(conv_degree < 0){conv_degree = conv_degree + 360;}
 80018c4:	69fb      	ldr	r3, [r7, #28]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	da03      	bge.n	80018d2 <_Z9speed_setiiiPsf+0xc2>
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80018d0:	61fb      	str	r3, [r7, #28]

	for(int i=0; i<4; i++){
 80018d2:	2300      	movs	r3, #0
 80018d4:	61bb      	str	r3, [r7, #24]
 80018d6:	e087      	b.n	80019e8 <_Z9speed_setiiiPsf+0x1d8>
		mtrspeed[i] = goal_speed * sin((conv_degree + 90.0*i) / 180.0 * 3.1415);
 80018d8:	6938      	ldr	r0, [r7, #16]
 80018da:	f7fe fde7 	bl	80004ac <__aeabi_i2d>
 80018de:	4604      	mov	r4, r0
 80018e0:	460d      	mov	r5, r1
 80018e2:	69f8      	ldr	r0, [r7, #28]
 80018e4:	f7fe fde2 	bl	80004ac <__aeabi_i2d>
 80018e8:	4680      	mov	r8, r0
 80018ea:	4689      	mov	r9, r1
 80018ec:	69b8      	ldr	r0, [r7, #24]
 80018ee:	f7fe fddd 	bl	80004ac <__aeabi_i2d>
 80018f2:	f04f 0200 	mov.w	r2, #0
 80018f6:	4b46      	ldr	r3, [pc, #280]	@ (8001a10 <_Z9speed_setiiiPsf+0x200>)
 80018f8:	f7fe fe42 	bl	8000580 <__aeabi_dmul>
 80018fc:	4602      	mov	r2, r0
 80018fe:	460b      	mov	r3, r1
 8001900:	4640      	mov	r0, r8
 8001902:	4649      	mov	r1, r9
 8001904:	f7fe fc86 	bl	8000214 <__adddf3>
 8001908:	4602      	mov	r2, r0
 800190a:	460b      	mov	r3, r1
 800190c:	4610      	mov	r0, r2
 800190e:	4619      	mov	r1, r3
 8001910:	f04f 0200 	mov.w	r2, #0
 8001914:	4b3f      	ldr	r3, [pc, #252]	@ (8001a14 <_Z9speed_setiiiPsf+0x204>)
 8001916:	f7fe ff5d 	bl	80007d4 <__aeabi_ddiv>
 800191a:	4602      	mov	r2, r0
 800191c:	460b      	mov	r3, r1
 800191e:	4610      	mov	r0, r2
 8001920:	4619      	mov	r1, r3
 8001922:	a337      	add	r3, pc, #220	@ (adr r3, 8001a00 <_Z9speed_setiiiPsf+0x1f0>)
 8001924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001928:	f7fe fe2a 	bl	8000580 <__aeabi_dmul>
 800192c:	4602      	mov	r2, r0
 800192e:	460b      	mov	r3, r1
 8001930:	ec43 2b17 	vmov	d7, r2, r3
 8001934:	eeb0 0a47 	vmov.f32	s0, s14
 8001938:	eef0 0a67 	vmov.f32	s1, s15
 800193c:	f003 fde8 	bl	8005510 <sin>
 8001940:	ec53 2b10 	vmov	r2, r3, d0
 8001944:	4620      	mov	r0, r4
 8001946:	4629      	mov	r1, r5
 8001948:	f7fe fe1a 	bl	8000580 <__aeabi_dmul>
 800194c:	4602      	mov	r2, r0
 800194e:	460b      	mov	r3, r1
 8001950:	4610      	mov	r0, r2
 8001952:	4619      	mov	r1, r3
 8001954:	69bb      	ldr	r3, [r7, #24]
 8001956:	005b      	lsls	r3, r3, #1
 8001958:	68ba      	ldr	r2, [r7, #8]
 800195a:	18d4      	adds	r4, r2, r3
 800195c:	f7ff f8c0 	bl	8000ae0 <__aeabi_d2iz>
 8001960:	4603      	mov	r3, r0
 8001962:	b21b      	sxth	r3, r3
 8001964:	8023      	strh	r3, [r4, #0]
		mtrspeed[i] = (mtrspeed[i] * motor_rate) + (roll_speed * (1.0 - motor_rate));
 8001966:	69bb      	ldr	r3, [r7, #24]
 8001968:	005b      	lsls	r3, r3, #1
 800196a:	68ba      	ldr	r2, [r7, #8]
 800196c:	4413      	add	r3, r2
 800196e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001972:	ee07 3a90 	vmov	s15, r3
 8001976:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800197a:	edd7 7a01 	vldr	s15, [r7, #4]
 800197e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001982:	ee17 0a90 	vmov	r0, s15
 8001986:	f7fe fda3 	bl	80004d0 <__aeabi_f2d>
 800198a:	4604      	mov	r4, r0
 800198c:	460d      	mov	r5, r1
 800198e:	4b1f      	ldr	r3, [pc, #124]	@ (8001a0c <_Z9speed_setiiiPsf+0x1fc>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4618      	mov	r0, r3
 8001994:	f7fe fd8a 	bl	80004ac <__aeabi_i2d>
 8001998:	4680      	mov	r8, r0
 800199a:	4689      	mov	r9, r1
 800199c:	6878      	ldr	r0, [r7, #4]
 800199e:	f7fe fd97 	bl	80004d0 <__aeabi_f2d>
 80019a2:	4602      	mov	r2, r0
 80019a4:	460b      	mov	r3, r1
 80019a6:	f04f 0000 	mov.w	r0, #0
 80019aa:	491b      	ldr	r1, [pc, #108]	@ (8001a18 <_Z9speed_setiiiPsf+0x208>)
 80019ac:	f7fe fc30 	bl	8000210 <__aeabi_dsub>
 80019b0:	4602      	mov	r2, r0
 80019b2:	460b      	mov	r3, r1
 80019b4:	4640      	mov	r0, r8
 80019b6:	4649      	mov	r1, r9
 80019b8:	f7fe fde2 	bl	8000580 <__aeabi_dmul>
 80019bc:	4602      	mov	r2, r0
 80019be:	460b      	mov	r3, r1
 80019c0:	4620      	mov	r0, r4
 80019c2:	4629      	mov	r1, r5
 80019c4:	f7fe fc26 	bl	8000214 <__adddf3>
 80019c8:	4602      	mov	r2, r0
 80019ca:	460b      	mov	r3, r1
 80019cc:	4610      	mov	r0, r2
 80019ce:	4619      	mov	r1, r3
 80019d0:	69bb      	ldr	r3, [r7, #24]
 80019d2:	005b      	lsls	r3, r3, #1
 80019d4:	68ba      	ldr	r2, [r7, #8]
 80019d6:	18d4      	adds	r4, r2, r3
 80019d8:	f7ff f882 	bl	8000ae0 <__aeabi_d2iz>
 80019dc:	4603      	mov	r3, r0
 80019de:	b21b      	sxth	r3, r3
 80019e0:	8023      	strh	r3, [r4, #0]
	for(int i=0; i<4; i++){
 80019e2:	69bb      	ldr	r3, [r7, #24]
 80019e4:	3301      	adds	r3, #1
 80019e6:	61bb      	str	r3, [r7, #24]
 80019e8:	69bb      	ldr	r3, [r7, #24]
 80019ea:	2b03      	cmp	r3, #3
 80019ec:	f77f af74 	ble.w	80018d8 <_Z9speed_setiiiPsf+0xc8>
	}
}
 80019f0:	bf00      	nop
 80019f2:	bf00      	nop
 80019f4:	3720      	adds	r7, #32
 80019f6:	46bd      	mov	sp, r7
 80019f8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80019fc:	f3af 8000 	nop.w
 8001a00:	c083126f 	.word	0xc083126f
 8001a04:	400921ca 	.word	0x400921ca
 8001a08:	b60b60b7 	.word	0xb60b60b7
 8001a0c:	200001a8 	.word	0x200001a8
 8001a10:	40568000 	.word	0x40568000
 8001a14:	40668000 	.word	0x40668000
 8001a18:	3ff00000 	.word	0x3ff00000

08001a1c <_Z9set_arrayPsPh>:

void set_array(int16_t* mtrspeed, uint8_t* sendarray){
 8001a1c:	b480      	push	{r7}
 8001a1e:	b087      	sub	sp, #28
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
 8001a24:	6039      	str	r1, [r7, #0]
	uint16_t conv_mtrspeed[4];
	for(int i=0; i<4; i++){conv_mtrspeed[i] = 10000 - (mtrspeed[i] + 5000);}
 8001a26:	2300      	movs	r3, #0
 8001a28:	617b      	str	r3, [r7, #20]
 8001a2a:	e013      	b.n	8001a54 <_Z9set_arrayPsPh+0x38>
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	005b      	lsls	r3, r3, #1
 8001a30:	687a      	ldr	r2, [r7, #4]
 8001a32:	4413      	add	r3, r2
 8001a34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a38:	b29b      	uxth	r3, r3
 8001a3a:	f5c3 539c 	rsb	r3, r3, #4992	@ 0x1380
 8001a3e:	3308      	adds	r3, #8
 8001a40:	b29a      	uxth	r2, r3
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	005b      	lsls	r3, r3, #1
 8001a46:	3318      	adds	r3, #24
 8001a48:	443b      	add	r3, r7
 8001a4a:	f823 2c10 	strh.w	r2, [r3, #-16]
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	3301      	adds	r3, #1
 8001a52:	617b      	str	r3, [r7, #20]
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	2b03      	cmp	r3, #3
 8001a58:	dde8      	ble.n	8001a2c <_Z9set_arrayPsPh+0x10>
	for(int i=0; i<4; i++){
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	613b      	str	r3, [r7, #16]
 8001a5e:	e03a      	b.n	8001ad6 <_Z9set_arrayPsPh+0xba>
		sendarray[3*i] = 250+i;
 8001a60:	693b      	ldr	r3, [r7, #16]
 8001a62:	b2d9      	uxtb	r1, r3
 8001a64:	693a      	ldr	r2, [r7, #16]
 8001a66:	4613      	mov	r3, r2
 8001a68:	005b      	lsls	r3, r3, #1
 8001a6a:	4413      	add	r3, r2
 8001a6c:	461a      	mov	r2, r3
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	4413      	add	r3, r2
 8001a72:	1f8a      	subs	r2, r1, #6
 8001a74:	b2d2      	uxtb	r2, r2
 8001a76:	701a      	strb	r2, [r3, #0]
		sendarray[3*i+1] = conv_mtrspeed[i] % 100;
 8001a78:	693b      	ldr	r3, [r7, #16]
 8001a7a:	005b      	lsls	r3, r3, #1
 8001a7c:	3318      	adds	r3, #24
 8001a7e:	443b      	add	r3, r7
 8001a80:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 8001a84:	4a19      	ldr	r2, [pc, #100]	@ (8001aec <_Z9set_arrayPsPh+0xd0>)
 8001a86:	fba2 1203 	umull	r1, r2, r2, r3
 8001a8a:	0952      	lsrs	r2, r2, #5
 8001a8c:	2164      	movs	r1, #100	@ 0x64
 8001a8e:	fb01 f202 	mul.w	r2, r1, r2
 8001a92:	1a9b      	subs	r3, r3, r2
 8001a94:	b299      	uxth	r1, r3
 8001a96:	693a      	ldr	r2, [r7, #16]
 8001a98:	4613      	mov	r3, r2
 8001a9a:	005b      	lsls	r3, r3, #1
 8001a9c:	4413      	add	r3, r2
 8001a9e:	3301      	adds	r3, #1
 8001aa0:	683a      	ldr	r2, [r7, #0]
 8001aa2:	4413      	add	r3, r2
 8001aa4:	b2ca      	uxtb	r2, r1
 8001aa6:	701a      	strb	r2, [r3, #0]
		sendarray[3*i+2] = conv_mtrspeed[i] / 100;
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	005b      	lsls	r3, r3, #1
 8001aac:	3318      	adds	r3, #24
 8001aae:	443b      	add	r3, r7
 8001ab0:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 8001ab4:	4a0d      	ldr	r2, [pc, #52]	@ (8001aec <_Z9set_arrayPsPh+0xd0>)
 8001ab6:	fba2 2303 	umull	r2, r3, r2, r3
 8001aba:	095b      	lsrs	r3, r3, #5
 8001abc:	b299      	uxth	r1, r3
 8001abe:	693a      	ldr	r2, [r7, #16]
 8001ac0:	4613      	mov	r3, r2
 8001ac2:	005b      	lsls	r3, r3, #1
 8001ac4:	4413      	add	r3, r2
 8001ac6:	3302      	adds	r3, #2
 8001ac8:	683a      	ldr	r2, [r7, #0]
 8001aca:	4413      	add	r3, r2
 8001acc:	b2ca      	uxtb	r2, r1
 8001ace:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<4; i++){
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	3301      	adds	r3, #1
 8001ad4:	613b      	str	r3, [r7, #16]
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	2b03      	cmp	r3, #3
 8001ada:	ddc1      	ble.n	8001a60 <_Z9set_arrayPsPh+0x44>
	}
}
 8001adc:	bf00      	nop
 8001ade:	bf00      	nop
 8001ae0:	371c      	adds	r7, #28
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	51eb851f 	.word	0x51eb851f

08001af0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001af4:	b672      	cpsid	i
}
 8001af6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001af8:	bf00      	nop
 8001afa:	e7fd      	b.n	8001af8 <Error_Handler+0x8>

08001afc <_ZSt3powIsiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
#endif

  template<typename _Tp, typename _Up>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
 8001afc:	b5b0      	push	{r4, r5, r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	4603      	mov	r3, r0
 8001b04:	6039      	str	r1, [r7, #0]
 8001b06:	80fb      	strh	r3, [r7, #6]
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
 8001b08:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f7fe fccd 	bl	80004ac <__aeabi_i2d>
 8001b12:	4604      	mov	r4, r0
 8001b14:	460d      	mov	r5, r1
 8001b16:	6838      	ldr	r0, [r7, #0]
 8001b18:	f7fe fcc8 	bl	80004ac <__aeabi_i2d>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	460b      	mov	r3, r1
 8001b20:	ec43 2b11 	vmov	d1, r2, r3
 8001b24:	ec45 4b10 	vmov	d0, r4, r5
 8001b28:	f003 fc82 	bl	8005430 <pow>
 8001b2c:	eeb0 7a40 	vmov.f32	s14, s0
 8001b30:	eef0 7a60 	vmov.f32	s15, s1
    }
 8001b34:	eeb0 0a47 	vmov.f32	s0, s14
 8001b38:	eef0 0a67 	vmov.f32	s1, s15
 8001b3c:	3708      	adds	r7, #8
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bdb0      	pop	{r4, r5, r7, pc}

08001b42 <_ZSt5atan2IssEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    atan2(_Tp __y, _Up __x)
 8001b42:	b5b0      	push	{r4, r5, r7, lr}
 8001b44:	b082      	sub	sp, #8
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	4603      	mov	r3, r0
 8001b4a:	460a      	mov	r2, r1
 8001b4c:	80fb      	strh	r3, [r7, #6]
 8001b4e:	4613      	mov	r3, r2
 8001b50:	80bb      	strh	r3, [r7, #4]
      return atan2(__type(__y), __type(__x));
 8001b52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b56:	4618      	mov	r0, r3
 8001b58:	f7fe fca8 	bl	80004ac <__aeabi_i2d>
 8001b5c:	4604      	mov	r4, r0
 8001b5e:	460d      	mov	r5, r1
 8001b60:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001b64:	4618      	mov	r0, r3
 8001b66:	f7fe fca1 	bl	80004ac <__aeabi_i2d>
 8001b6a:	4602      	mov	r2, r0
 8001b6c:	460b      	mov	r3, r1
 8001b6e:	ec43 2b11 	vmov	d1, r2, r3
 8001b72:	ec45 4b10 	vmov	d0, r4, r5
 8001b76:	f003 fc59 	bl	800542c <atan2>
 8001b7a:	eeb0 7a40 	vmov.f32	s14, s0
 8001b7e:	eef0 7a60 	vmov.f32	s15, s1
    }
 8001b82:	eeb0 0a47 	vmov.f32	s0, s14
 8001b86:	eef0 0a67 	vmov.f32	s1, s15
 8001b8a:	3708      	adds	r7, #8
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bdb0      	pop	{r4, r5, r7, pc}

08001b90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b96:	2300      	movs	r3, #0
 8001b98:	607b      	str	r3, [r7, #4]
 8001b9a:	4b10      	ldr	r3, [pc, #64]	@ (8001bdc <HAL_MspInit+0x4c>)
 8001b9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b9e:	4a0f      	ldr	r2, [pc, #60]	@ (8001bdc <HAL_MspInit+0x4c>)
 8001ba0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ba4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ba6:	4b0d      	ldr	r3, [pc, #52]	@ (8001bdc <HAL_MspInit+0x4c>)
 8001ba8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001baa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001bae:	607b      	str	r3, [r7, #4]
 8001bb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	603b      	str	r3, [r7, #0]
 8001bb6:	4b09      	ldr	r3, [pc, #36]	@ (8001bdc <HAL_MspInit+0x4c>)
 8001bb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bba:	4a08      	ldr	r2, [pc, #32]	@ (8001bdc <HAL_MspInit+0x4c>)
 8001bbc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bc0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bc2:	4b06      	ldr	r3, [pc, #24]	@ (8001bdc <HAL_MspInit+0x4c>)
 8001bc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bca:	603b      	str	r3, [r7, #0]
 8001bcc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bce:	bf00      	nop
 8001bd0:	370c      	adds	r7, #12
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	40023800 	.word	0x40023800

08001be0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b08a      	sub	sp, #40	@ 0x28
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001be8:	f107 0314 	add.w	r3, r7, #20
 8001bec:	2200      	movs	r2, #0
 8001bee:	601a      	str	r2, [r3, #0]
 8001bf0:	605a      	str	r2, [r3, #4]
 8001bf2:	609a      	str	r2, [r3, #8]
 8001bf4:	60da      	str	r2, [r3, #12]
 8001bf6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a19      	ldr	r2, [pc, #100]	@ (8001c64 <HAL_I2C_MspInit+0x84>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d12c      	bne.n	8001c5c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c02:	2300      	movs	r3, #0
 8001c04:	613b      	str	r3, [r7, #16]
 8001c06:	4b18      	ldr	r3, [pc, #96]	@ (8001c68 <HAL_I2C_MspInit+0x88>)
 8001c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c0a:	4a17      	ldr	r2, [pc, #92]	@ (8001c68 <HAL_I2C_MspInit+0x88>)
 8001c0c:	f043 0302 	orr.w	r3, r3, #2
 8001c10:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c12:	4b15      	ldr	r3, [pc, #84]	@ (8001c68 <HAL_I2C_MspInit+0x88>)
 8001c14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c16:	f003 0302 	and.w	r3, r3, #2
 8001c1a:	613b      	str	r3, [r7, #16]
 8001c1c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001c1e:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001c22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c24:	2312      	movs	r3, #18
 8001c26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c2c:	2303      	movs	r3, #3
 8001c2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001c30:	2304      	movs	r3, #4
 8001c32:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c34:	f107 0314 	add.w	r3, r7, #20
 8001c38:	4619      	mov	r1, r3
 8001c3a:	480c      	ldr	r0, [pc, #48]	@ (8001c6c <HAL_I2C_MspInit+0x8c>)
 8001c3c:	f000 faa4 	bl	8002188 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c40:	2300      	movs	r3, #0
 8001c42:	60fb      	str	r3, [r7, #12]
 8001c44:	4b08      	ldr	r3, [pc, #32]	@ (8001c68 <HAL_I2C_MspInit+0x88>)
 8001c46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c48:	4a07      	ldr	r2, [pc, #28]	@ (8001c68 <HAL_I2C_MspInit+0x88>)
 8001c4a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001c4e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c50:	4b05      	ldr	r3, [pc, #20]	@ (8001c68 <HAL_I2C_MspInit+0x88>)
 8001c52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c54:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c58:	60fb      	str	r3, [r7, #12]
 8001c5a:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001c5c:	bf00      	nop
 8001c5e:	3728      	adds	r7, #40	@ 0x28
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	40005400 	.word	0x40005400
 8001c68:	40023800 	.word	0x40023800
 8001c6c:	40020400 	.word	0x40020400

08001c70 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b084      	sub	sp, #16
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c80:	d115      	bne.n	8001cae <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c82:	2300      	movs	r3, #0
 8001c84:	60fb      	str	r3, [r7, #12]
 8001c86:	4b0c      	ldr	r3, [pc, #48]	@ (8001cb8 <HAL_TIM_Base_MspInit+0x48>)
 8001c88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c8a:	4a0b      	ldr	r2, [pc, #44]	@ (8001cb8 <HAL_TIM_Base_MspInit+0x48>)
 8001c8c:	f043 0301 	orr.w	r3, r3, #1
 8001c90:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c92:	4b09      	ldr	r3, [pc, #36]	@ (8001cb8 <HAL_TIM_Base_MspInit+0x48>)
 8001c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c96:	f003 0301 	and.w	r3, r3, #1
 8001c9a:	60fb      	str	r3, [r7, #12]
 8001c9c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	2100      	movs	r1, #0
 8001ca2:	201c      	movs	r0, #28
 8001ca4:	f000 fa39 	bl	800211a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001ca8:	201c      	movs	r0, #28
 8001caa:	f000 fa52 	bl	8002152 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001cae:	bf00      	nop
 8001cb0:	3710      	adds	r7, #16
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	40023800 	.word	0x40023800

08001cbc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b08a      	sub	sp, #40	@ 0x28
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cc4:	f107 0314 	add.w	r3, r7, #20
 8001cc8:	2200      	movs	r2, #0
 8001cca:	601a      	str	r2, [r3, #0]
 8001ccc:	605a      	str	r2, [r3, #4]
 8001cce:	609a      	str	r2, [r3, #8]
 8001cd0:	60da      	str	r2, [r3, #12]
 8001cd2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a19      	ldr	r2, [pc, #100]	@ (8001d40 <HAL_UART_MspInit+0x84>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d12b      	bne.n	8001d36 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8001cde:	2300      	movs	r3, #0
 8001ce0:	613b      	str	r3, [r7, #16]
 8001ce2:	4b18      	ldr	r3, [pc, #96]	@ (8001d44 <HAL_UART_MspInit+0x88>)
 8001ce4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ce6:	4a17      	ldr	r2, [pc, #92]	@ (8001d44 <HAL_UART_MspInit+0x88>)
 8001ce8:	f043 0320 	orr.w	r3, r3, #32
 8001cec:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cee:	4b15      	ldr	r3, [pc, #84]	@ (8001d44 <HAL_UART_MspInit+0x88>)
 8001cf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cf2:	f003 0320 	and.w	r3, r3, #32
 8001cf6:	613b      	str	r3, [r7, #16]
 8001cf8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	60fb      	str	r3, [r7, #12]
 8001cfe:	4b11      	ldr	r3, [pc, #68]	@ (8001d44 <HAL_UART_MspInit+0x88>)
 8001d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d02:	4a10      	ldr	r2, [pc, #64]	@ (8001d44 <HAL_UART_MspInit+0x88>)
 8001d04:	f043 0304 	orr.w	r3, r3, #4
 8001d08:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d0a:	4b0e      	ldr	r3, [pc, #56]	@ (8001d44 <HAL_UART_MspInit+0x88>)
 8001d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d0e:	f003 0304 	and.w	r3, r3, #4
 8001d12:	60fb      	str	r3, [r7, #12]
 8001d14:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001d16:	23c0      	movs	r3, #192	@ 0xc0
 8001d18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d1a:	2302      	movs	r3, #2
 8001d1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d22:	2303      	movs	r3, #3
 8001d24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001d26:	2308      	movs	r3, #8
 8001d28:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d2a:	f107 0314 	add.w	r3, r7, #20
 8001d2e:	4619      	mov	r1, r3
 8001d30:	4805      	ldr	r0, [pc, #20]	@ (8001d48 <HAL_UART_MspInit+0x8c>)
 8001d32:	f000 fa29 	bl	8002188 <HAL_GPIO_Init>

  /* USER CODE END USART6_MspInit 1 */

  }

}
 8001d36:	bf00      	nop
 8001d38:	3728      	adds	r7, #40	@ 0x28
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	40011400 	.word	0x40011400
 8001d44:	40023800 	.word	0x40023800
 8001d48:	40020800 	.word	0x40020800

08001d4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d50:	bf00      	nop
 8001d52:	e7fd      	b.n	8001d50 <NMI_Handler+0x4>

08001d54 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d58:	bf00      	nop
 8001d5a:	e7fd      	b.n	8001d58 <HardFault_Handler+0x4>

08001d5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d60:	bf00      	nop
 8001d62:	e7fd      	b.n	8001d60 <MemManage_Handler+0x4>

08001d64 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d68:	bf00      	nop
 8001d6a:	e7fd      	b.n	8001d68 <BusFault_Handler+0x4>

08001d6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d70:	bf00      	nop
 8001d72:	e7fd      	b.n	8001d70 <UsageFault_Handler+0x4>

08001d74 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d78:	bf00      	nop
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr

08001d82 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d82:	b480      	push	{r7}
 8001d84:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d86:	bf00      	nop
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr

08001d90 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d94:	bf00      	nop
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr

08001d9e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d9e:	b580      	push	{r7, lr}
 8001da0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001da2:	f000 f89b 	bl	8001edc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001da6:	bf00      	nop
 8001da8:	bd80      	pop	{r7, pc}
	...

08001dac <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001db0:	4802      	ldr	r0, [pc, #8]	@ (8001dbc <TIM2_IRQHandler+0x10>)
 8001db2:	f002 fae3 	bl	800437c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001db6:	bf00      	nop
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	200000e8 	.word	0x200000e8

08001dc0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001dc4:	4b06      	ldr	r3, [pc, #24]	@ (8001de0 <SystemInit+0x20>)
 8001dc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001dca:	4a05      	ldr	r2, [pc, #20]	@ (8001de0 <SystemInit+0x20>)
 8001dcc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001dd0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001dd4:	bf00      	nop
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr
 8001dde:	bf00      	nop
 8001de0:	e000ed00 	.word	0xe000ed00

08001de4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001de4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001e1c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001de8:	f7ff ffea 	bl	8001dc0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001dec:	480c      	ldr	r0, [pc, #48]	@ (8001e20 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001dee:	490d      	ldr	r1, [pc, #52]	@ (8001e24 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001df0:	4a0d      	ldr	r2, [pc, #52]	@ (8001e28 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001df2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001df4:	e002      	b.n	8001dfc <LoopCopyDataInit>

08001df6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001df6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001df8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dfa:	3304      	adds	r3, #4

08001dfc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001dfc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dfe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e00:	d3f9      	bcc.n	8001df6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e02:	4a0a      	ldr	r2, [pc, #40]	@ (8001e2c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001e04:	4c0a      	ldr	r4, [pc, #40]	@ (8001e30 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001e06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e08:	e001      	b.n	8001e0e <LoopFillZerobss>

08001e0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e0c:	3204      	adds	r2, #4

08001e0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e10:	d3fb      	bcc.n	8001e0a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001e12:	f005 fc83 	bl	800771c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e16:	f7ff f963 	bl	80010e0 <main>
  bx  lr    
 8001e1a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001e1c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001e20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e24:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001e28:	08007a28 	.word	0x08007a28
  ldr r2, =_sbss
 8001e2c:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001e30:	200002e8 	.word	0x200002e8

08001e34 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e34:	e7fe      	b.n	8001e34 <ADC_IRQHandler>
	...

08001e38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e3c:	4b0e      	ldr	r3, [pc, #56]	@ (8001e78 <HAL_Init+0x40>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a0d      	ldr	r2, [pc, #52]	@ (8001e78 <HAL_Init+0x40>)
 8001e42:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001e46:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e48:	4b0b      	ldr	r3, [pc, #44]	@ (8001e78 <HAL_Init+0x40>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a0a      	ldr	r2, [pc, #40]	@ (8001e78 <HAL_Init+0x40>)
 8001e4e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001e52:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e54:	4b08      	ldr	r3, [pc, #32]	@ (8001e78 <HAL_Init+0x40>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a07      	ldr	r2, [pc, #28]	@ (8001e78 <HAL_Init+0x40>)
 8001e5a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e60:	2003      	movs	r0, #3
 8001e62:	f000 f94f 	bl	8002104 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e66:	200f      	movs	r0, #15
 8001e68:	f000 f808 	bl	8001e7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e6c:	f7ff fe90 	bl	8001b90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e70:	2300      	movs	r3, #0
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	40023c00 	.word	0x40023c00

08001e7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b082      	sub	sp, #8
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e84:	4b12      	ldr	r3, [pc, #72]	@ (8001ed0 <HAL_InitTick+0x54>)
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	4b12      	ldr	r3, [pc, #72]	@ (8001ed4 <HAL_InitTick+0x58>)
 8001e8a:	781b      	ldrb	r3, [r3, #0]
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e92:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e96:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f000 f967 	bl	800216e <HAL_SYSTICK_Config>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d001      	beq.n	8001eaa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e00e      	b.n	8001ec8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2b0f      	cmp	r3, #15
 8001eae:	d80a      	bhi.n	8001ec6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	6879      	ldr	r1, [r7, #4]
 8001eb4:	f04f 30ff 	mov.w	r0, #4294967295
 8001eb8:	f000 f92f 	bl	800211a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ebc:	4a06      	ldr	r2, [pc, #24]	@ (8001ed8 <HAL_InitTick+0x5c>)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	e000      	b.n	8001ec8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	3708      	adds	r7, #8
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	2000000c 	.word	0x2000000c
 8001ed4:	20000014 	.word	0x20000014
 8001ed8:	20000010 	.word	0x20000010

08001edc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001edc:	b480      	push	{r7}
 8001ede:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ee0:	4b06      	ldr	r3, [pc, #24]	@ (8001efc <HAL_IncTick+0x20>)
 8001ee2:	781b      	ldrb	r3, [r3, #0]
 8001ee4:	461a      	mov	r2, r3
 8001ee6:	4b06      	ldr	r3, [pc, #24]	@ (8001f00 <HAL_IncTick+0x24>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4413      	add	r3, r2
 8001eec:	4a04      	ldr	r2, [pc, #16]	@ (8001f00 <HAL_IncTick+0x24>)
 8001eee:	6013      	str	r3, [r2, #0]
}
 8001ef0:	bf00      	nop
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr
 8001efa:	bf00      	nop
 8001efc:	20000014 	.word	0x20000014
 8001f00:	200001ac 	.word	0x200001ac

08001f04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
  return uwTick;
 8001f08:	4b03      	ldr	r3, [pc, #12]	@ (8001f18 <HAL_GetTick+0x14>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr
 8001f16:	bf00      	nop
 8001f18:	200001ac 	.word	0x200001ac

08001f1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b084      	sub	sp, #16
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f24:	f7ff ffee 	bl	8001f04 <HAL_GetTick>
 8001f28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f34:	d005      	beq.n	8001f42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f36:	4b0a      	ldr	r3, [pc, #40]	@ (8001f60 <HAL_Delay+0x44>)
 8001f38:	781b      	ldrb	r3, [r3, #0]
 8001f3a:	461a      	mov	r2, r3
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	4413      	add	r3, r2
 8001f40:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f42:	bf00      	nop
 8001f44:	f7ff ffde 	bl	8001f04 <HAL_GetTick>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	68bb      	ldr	r3, [r7, #8]
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	68fa      	ldr	r2, [r7, #12]
 8001f50:	429a      	cmp	r2, r3
 8001f52:	d8f7      	bhi.n	8001f44 <HAL_Delay+0x28>
  {
  }
}
 8001f54:	bf00      	nop
 8001f56:	bf00      	nop
 8001f58:	3710      	adds	r7, #16
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	20000014 	.word	0x20000014

08001f64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b085      	sub	sp, #20
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	f003 0307 	and.w	r3, r3, #7
 8001f72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f74:	4b0c      	ldr	r3, [pc, #48]	@ (8001fa8 <__NVIC_SetPriorityGrouping+0x44>)
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f7a:	68ba      	ldr	r2, [r7, #8]
 8001f7c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f80:	4013      	ands	r3, r2
 8001f82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f8c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001f90:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f96:	4a04      	ldr	r2, [pc, #16]	@ (8001fa8 <__NVIC_SetPriorityGrouping+0x44>)
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	60d3      	str	r3, [r2, #12]
}
 8001f9c:	bf00      	nop
 8001f9e:	3714      	adds	r7, #20
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr
 8001fa8:	e000ed00 	.word	0xe000ed00

08001fac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fb0:	4b04      	ldr	r3, [pc, #16]	@ (8001fc4 <__NVIC_GetPriorityGrouping+0x18>)
 8001fb2:	68db      	ldr	r3, [r3, #12]
 8001fb4:	0a1b      	lsrs	r3, r3, #8
 8001fb6:	f003 0307 	and.w	r3, r3, #7
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr
 8001fc4:	e000ed00 	.word	0xe000ed00

08001fc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	4603      	mov	r3, r0
 8001fd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	db0b      	blt.n	8001ff2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fda:	79fb      	ldrb	r3, [r7, #7]
 8001fdc:	f003 021f 	and.w	r2, r3, #31
 8001fe0:	4907      	ldr	r1, [pc, #28]	@ (8002000 <__NVIC_EnableIRQ+0x38>)
 8001fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fe6:	095b      	lsrs	r3, r3, #5
 8001fe8:	2001      	movs	r0, #1
 8001fea:	fa00 f202 	lsl.w	r2, r0, r2
 8001fee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001ff2:	bf00      	nop
 8001ff4:	370c      	adds	r7, #12
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr
 8001ffe:	bf00      	nop
 8002000:	e000e100 	.word	0xe000e100

08002004 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	4603      	mov	r3, r0
 800200c:	6039      	str	r1, [r7, #0]
 800200e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002010:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002014:	2b00      	cmp	r3, #0
 8002016:	db0a      	blt.n	800202e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	b2da      	uxtb	r2, r3
 800201c:	490c      	ldr	r1, [pc, #48]	@ (8002050 <__NVIC_SetPriority+0x4c>)
 800201e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002022:	0112      	lsls	r2, r2, #4
 8002024:	b2d2      	uxtb	r2, r2
 8002026:	440b      	add	r3, r1
 8002028:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800202c:	e00a      	b.n	8002044 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	b2da      	uxtb	r2, r3
 8002032:	4908      	ldr	r1, [pc, #32]	@ (8002054 <__NVIC_SetPriority+0x50>)
 8002034:	79fb      	ldrb	r3, [r7, #7]
 8002036:	f003 030f 	and.w	r3, r3, #15
 800203a:	3b04      	subs	r3, #4
 800203c:	0112      	lsls	r2, r2, #4
 800203e:	b2d2      	uxtb	r2, r2
 8002040:	440b      	add	r3, r1
 8002042:	761a      	strb	r2, [r3, #24]
}
 8002044:	bf00      	nop
 8002046:	370c      	adds	r7, #12
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr
 8002050:	e000e100 	.word	0xe000e100
 8002054:	e000ed00 	.word	0xe000ed00

08002058 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002058:	b480      	push	{r7}
 800205a:	b089      	sub	sp, #36	@ 0x24
 800205c:	af00      	add	r7, sp, #0
 800205e:	60f8      	str	r0, [r7, #12]
 8002060:	60b9      	str	r1, [r7, #8]
 8002062:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	f003 0307 	and.w	r3, r3, #7
 800206a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800206c:	69fb      	ldr	r3, [r7, #28]
 800206e:	f1c3 0307 	rsb	r3, r3, #7
 8002072:	2b04      	cmp	r3, #4
 8002074:	bf28      	it	cs
 8002076:	2304      	movcs	r3, #4
 8002078:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800207a:	69fb      	ldr	r3, [r7, #28]
 800207c:	3304      	adds	r3, #4
 800207e:	2b06      	cmp	r3, #6
 8002080:	d902      	bls.n	8002088 <NVIC_EncodePriority+0x30>
 8002082:	69fb      	ldr	r3, [r7, #28]
 8002084:	3b03      	subs	r3, #3
 8002086:	e000      	b.n	800208a <NVIC_EncodePriority+0x32>
 8002088:	2300      	movs	r3, #0
 800208a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800208c:	f04f 32ff 	mov.w	r2, #4294967295
 8002090:	69bb      	ldr	r3, [r7, #24]
 8002092:	fa02 f303 	lsl.w	r3, r2, r3
 8002096:	43da      	mvns	r2, r3
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	401a      	ands	r2, r3
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020a0:	f04f 31ff 	mov.w	r1, #4294967295
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	fa01 f303 	lsl.w	r3, r1, r3
 80020aa:	43d9      	mvns	r1, r3
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020b0:	4313      	orrs	r3, r2
         );
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	3724      	adds	r7, #36	@ 0x24
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr
	...

080020c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b082      	sub	sp, #8
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	3b01      	subs	r3, #1
 80020cc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80020d0:	d301      	bcc.n	80020d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020d2:	2301      	movs	r3, #1
 80020d4:	e00f      	b.n	80020f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020d6:	4a0a      	ldr	r2, [pc, #40]	@ (8002100 <SysTick_Config+0x40>)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	3b01      	subs	r3, #1
 80020dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020de:	210f      	movs	r1, #15
 80020e0:	f04f 30ff 	mov.w	r0, #4294967295
 80020e4:	f7ff ff8e 	bl	8002004 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020e8:	4b05      	ldr	r3, [pc, #20]	@ (8002100 <SysTick_Config+0x40>)
 80020ea:	2200      	movs	r2, #0
 80020ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020ee:	4b04      	ldr	r3, [pc, #16]	@ (8002100 <SysTick_Config+0x40>)
 80020f0:	2207      	movs	r2, #7
 80020f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020f4:	2300      	movs	r3, #0
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3708      	adds	r7, #8
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	e000e010 	.word	0xe000e010

08002104 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b082      	sub	sp, #8
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800210c:	6878      	ldr	r0, [r7, #4]
 800210e:	f7ff ff29 	bl	8001f64 <__NVIC_SetPriorityGrouping>
}
 8002112:	bf00      	nop
 8002114:	3708      	adds	r7, #8
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}

0800211a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800211a:	b580      	push	{r7, lr}
 800211c:	b086      	sub	sp, #24
 800211e:	af00      	add	r7, sp, #0
 8002120:	4603      	mov	r3, r0
 8002122:	60b9      	str	r1, [r7, #8]
 8002124:	607a      	str	r2, [r7, #4]
 8002126:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002128:	2300      	movs	r3, #0
 800212a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800212c:	f7ff ff3e 	bl	8001fac <__NVIC_GetPriorityGrouping>
 8002130:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002132:	687a      	ldr	r2, [r7, #4]
 8002134:	68b9      	ldr	r1, [r7, #8]
 8002136:	6978      	ldr	r0, [r7, #20]
 8002138:	f7ff ff8e 	bl	8002058 <NVIC_EncodePriority>
 800213c:	4602      	mov	r2, r0
 800213e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002142:	4611      	mov	r1, r2
 8002144:	4618      	mov	r0, r3
 8002146:	f7ff ff5d 	bl	8002004 <__NVIC_SetPriority>
}
 800214a:	bf00      	nop
 800214c:	3718      	adds	r7, #24
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}

08002152 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002152:	b580      	push	{r7, lr}
 8002154:	b082      	sub	sp, #8
 8002156:	af00      	add	r7, sp, #0
 8002158:	4603      	mov	r3, r0
 800215a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800215c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002160:	4618      	mov	r0, r3
 8002162:	f7ff ff31 	bl	8001fc8 <__NVIC_EnableIRQ>
}
 8002166:	bf00      	nop
 8002168:	3708      	adds	r7, #8
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}

0800216e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800216e:	b580      	push	{r7, lr}
 8002170:	b082      	sub	sp, #8
 8002172:	af00      	add	r7, sp, #0
 8002174:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	f7ff ffa2 	bl	80020c0 <SysTick_Config>
 800217c:	4603      	mov	r3, r0
}
 800217e:	4618      	mov	r0, r3
 8002180:	3708      	adds	r7, #8
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
	...

08002188 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002188:	b480      	push	{r7}
 800218a:	b089      	sub	sp, #36	@ 0x24
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
 8002190:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002192:	2300      	movs	r3, #0
 8002194:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002196:	2300      	movs	r3, #0
 8002198:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800219a:	2300      	movs	r3, #0
 800219c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800219e:	2300      	movs	r3, #0
 80021a0:	61fb      	str	r3, [r7, #28]
 80021a2:	e165      	b.n	8002470 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80021a4:	2201      	movs	r2, #1
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	697a      	ldr	r2, [r7, #20]
 80021b4:	4013      	ands	r3, r2
 80021b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80021b8:	693a      	ldr	r2, [r7, #16]
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	429a      	cmp	r2, r3
 80021be:	f040 8154 	bne.w	800246a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	f003 0303 	and.w	r3, r3, #3
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d005      	beq.n	80021da <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021d6:	2b02      	cmp	r3, #2
 80021d8:	d130      	bne.n	800223c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80021e0:	69fb      	ldr	r3, [r7, #28]
 80021e2:	005b      	lsls	r3, r3, #1
 80021e4:	2203      	movs	r2, #3
 80021e6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ea:	43db      	mvns	r3, r3
 80021ec:	69ba      	ldr	r2, [r7, #24]
 80021ee:	4013      	ands	r3, r2
 80021f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	68da      	ldr	r2, [r3, #12]
 80021f6:	69fb      	ldr	r3, [r7, #28]
 80021f8:	005b      	lsls	r3, r3, #1
 80021fa:	fa02 f303 	lsl.w	r3, r2, r3
 80021fe:	69ba      	ldr	r2, [r7, #24]
 8002200:	4313      	orrs	r3, r2
 8002202:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	69ba      	ldr	r2, [r7, #24]
 8002208:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002210:	2201      	movs	r2, #1
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	fa02 f303 	lsl.w	r3, r2, r3
 8002218:	43db      	mvns	r3, r3
 800221a:	69ba      	ldr	r2, [r7, #24]
 800221c:	4013      	ands	r3, r2
 800221e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	091b      	lsrs	r3, r3, #4
 8002226:	f003 0201 	and.w	r2, r3, #1
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	fa02 f303 	lsl.w	r3, r2, r3
 8002230:	69ba      	ldr	r2, [r7, #24]
 8002232:	4313      	orrs	r3, r2
 8002234:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	69ba      	ldr	r2, [r7, #24]
 800223a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	f003 0303 	and.w	r3, r3, #3
 8002244:	2b03      	cmp	r3, #3
 8002246:	d017      	beq.n	8002278 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800224e:	69fb      	ldr	r3, [r7, #28]
 8002250:	005b      	lsls	r3, r3, #1
 8002252:	2203      	movs	r2, #3
 8002254:	fa02 f303 	lsl.w	r3, r2, r3
 8002258:	43db      	mvns	r3, r3
 800225a:	69ba      	ldr	r2, [r7, #24]
 800225c:	4013      	ands	r3, r2
 800225e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	689a      	ldr	r2, [r3, #8]
 8002264:	69fb      	ldr	r3, [r7, #28]
 8002266:	005b      	lsls	r3, r3, #1
 8002268:	fa02 f303 	lsl.w	r3, r2, r3
 800226c:	69ba      	ldr	r2, [r7, #24]
 800226e:	4313      	orrs	r3, r2
 8002270:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	69ba      	ldr	r2, [r7, #24]
 8002276:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f003 0303 	and.w	r3, r3, #3
 8002280:	2b02      	cmp	r3, #2
 8002282:	d123      	bne.n	80022cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002284:	69fb      	ldr	r3, [r7, #28]
 8002286:	08da      	lsrs	r2, r3, #3
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	3208      	adds	r2, #8
 800228c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002290:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	f003 0307 	and.w	r3, r3, #7
 8002298:	009b      	lsls	r3, r3, #2
 800229a:	220f      	movs	r2, #15
 800229c:	fa02 f303 	lsl.w	r3, r2, r3
 80022a0:	43db      	mvns	r3, r3
 80022a2:	69ba      	ldr	r2, [r7, #24]
 80022a4:	4013      	ands	r3, r2
 80022a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	691a      	ldr	r2, [r3, #16]
 80022ac:	69fb      	ldr	r3, [r7, #28]
 80022ae:	f003 0307 	and.w	r3, r3, #7
 80022b2:	009b      	lsls	r3, r3, #2
 80022b4:	fa02 f303 	lsl.w	r3, r2, r3
 80022b8:	69ba      	ldr	r2, [r7, #24]
 80022ba:	4313      	orrs	r3, r2
 80022bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	08da      	lsrs	r2, r3, #3
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	3208      	adds	r2, #8
 80022c6:	69b9      	ldr	r1, [r7, #24]
 80022c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80022d2:	69fb      	ldr	r3, [r7, #28]
 80022d4:	005b      	lsls	r3, r3, #1
 80022d6:	2203      	movs	r2, #3
 80022d8:	fa02 f303 	lsl.w	r3, r2, r3
 80022dc:	43db      	mvns	r3, r3
 80022de:	69ba      	ldr	r2, [r7, #24]
 80022e0:	4013      	ands	r3, r2
 80022e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	f003 0203 	and.w	r2, r3, #3
 80022ec:	69fb      	ldr	r3, [r7, #28]
 80022ee:	005b      	lsls	r3, r3, #1
 80022f0:	fa02 f303 	lsl.w	r3, r2, r3
 80022f4:	69ba      	ldr	r2, [r7, #24]
 80022f6:	4313      	orrs	r3, r2
 80022f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	69ba      	ldr	r2, [r7, #24]
 80022fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002308:	2b00      	cmp	r3, #0
 800230a:	f000 80ae 	beq.w	800246a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800230e:	2300      	movs	r3, #0
 8002310:	60fb      	str	r3, [r7, #12]
 8002312:	4b5d      	ldr	r3, [pc, #372]	@ (8002488 <HAL_GPIO_Init+0x300>)
 8002314:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002316:	4a5c      	ldr	r2, [pc, #368]	@ (8002488 <HAL_GPIO_Init+0x300>)
 8002318:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800231c:	6453      	str	r3, [r2, #68]	@ 0x44
 800231e:	4b5a      	ldr	r3, [pc, #360]	@ (8002488 <HAL_GPIO_Init+0x300>)
 8002320:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002322:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002326:	60fb      	str	r3, [r7, #12]
 8002328:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800232a:	4a58      	ldr	r2, [pc, #352]	@ (800248c <HAL_GPIO_Init+0x304>)
 800232c:	69fb      	ldr	r3, [r7, #28]
 800232e:	089b      	lsrs	r3, r3, #2
 8002330:	3302      	adds	r3, #2
 8002332:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002336:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002338:	69fb      	ldr	r3, [r7, #28]
 800233a:	f003 0303 	and.w	r3, r3, #3
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	220f      	movs	r2, #15
 8002342:	fa02 f303 	lsl.w	r3, r2, r3
 8002346:	43db      	mvns	r3, r3
 8002348:	69ba      	ldr	r2, [r7, #24]
 800234a:	4013      	ands	r3, r2
 800234c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	4a4f      	ldr	r2, [pc, #316]	@ (8002490 <HAL_GPIO_Init+0x308>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d025      	beq.n	80023a2 <HAL_GPIO_Init+0x21a>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	4a4e      	ldr	r2, [pc, #312]	@ (8002494 <HAL_GPIO_Init+0x30c>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d01f      	beq.n	800239e <HAL_GPIO_Init+0x216>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	4a4d      	ldr	r2, [pc, #308]	@ (8002498 <HAL_GPIO_Init+0x310>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d019      	beq.n	800239a <HAL_GPIO_Init+0x212>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	4a4c      	ldr	r2, [pc, #304]	@ (800249c <HAL_GPIO_Init+0x314>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d013      	beq.n	8002396 <HAL_GPIO_Init+0x20e>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	4a4b      	ldr	r2, [pc, #300]	@ (80024a0 <HAL_GPIO_Init+0x318>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d00d      	beq.n	8002392 <HAL_GPIO_Init+0x20a>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	4a4a      	ldr	r2, [pc, #296]	@ (80024a4 <HAL_GPIO_Init+0x31c>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d007      	beq.n	800238e <HAL_GPIO_Init+0x206>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	4a49      	ldr	r2, [pc, #292]	@ (80024a8 <HAL_GPIO_Init+0x320>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d101      	bne.n	800238a <HAL_GPIO_Init+0x202>
 8002386:	2306      	movs	r3, #6
 8002388:	e00c      	b.n	80023a4 <HAL_GPIO_Init+0x21c>
 800238a:	2307      	movs	r3, #7
 800238c:	e00a      	b.n	80023a4 <HAL_GPIO_Init+0x21c>
 800238e:	2305      	movs	r3, #5
 8002390:	e008      	b.n	80023a4 <HAL_GPIO_Init+0x21c>
 8002392:	2304      	movs	r3, #4
 8002394:	e006      	b.n	80023a4 <HAL_GPIO_Init+0x21c>
 8002396:	2303      	movs	r3, #3
 8002398:	e004      	b.n	80023a4 <HAL_GPIO_Init+0x21c>
 800239a:	2302      	movs	r3, #2
 800239c:	e002      	b.n	80023a4 <HAL_GPIO_Init+0x21c>
 800239e:	2301      	movs	r3, #1
 80023a0:	e000      	b.n	80023a4 <HAL_GPIO_Init+0x21c>
 80023a2:	2300      	movs	r3, #0
 80023a4:	69fa      	ldr	r2, [r7, #28]
 80023a6:	f002 0203 	and.w	r2, r2, #3
 80023aa:	0092      	lsls	r2, r2, #2
 80023ac:	4093      	lsls	r3, r2
 80023ae:	69ba      	ldr	r2, [r7, #24]
 80023b0:	4313      	orrs	r3, r2
 80023b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023b4:	4935      	ldr	r1, [pc, #212]	@ (800248c <HAL_GPIO_Init+0x304>)
 80023b6:	69fb      	ldr	r3, [r7, #28]
 80023b8:	089b      	lsrs	r3, r3, #2
 80023ba:	3302      	adds	r3, #2
 80023bc:	69ba      	ldr	r2, [r7, #24]
 80023be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023c2:	4b3a      	ldr	r3, [pc, #232]	@ (80024ac <HAL_GPIO_Init+0x324>)
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	43db      	mvns	r3, r3
 80023cc:	69ba      	ldr	r2, [r7, #24]
 80023ce:	4013      	ands	r3, r2
 80023d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d003      	beq.n	80023e6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80023de:	69ba      	ldr	r2, [r7, #24]
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	4313      	orrs	r3, r2
 80023e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80023e6:	4a31      	ldr	r2, [pc, #196]	@ (80024ac <HAL_GPIO_Init+0x324>)
 80023e8:	69bb      	ldr	r3, [r7, #24]
 80023ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023ec:	4b2f      	ldr	r3, [pc, #188]	@ (80024ac <HAL_GPIO_Init+0x324>)
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	43db      	mvns	r3, r3
 80023f6:	69ba      	ldr	r2, [r7, #24]
 80023f8:	4013      	ands	r3, r2
 80023fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002404:	2b00      	cmp	r3, #0
 8002406:	d003      	beq.n	8002410 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002408:	69ba      	ldr	r2, [r7, #24]
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	4313      	orrs	r3, r2
 800240e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002410:	4a26      	ldr	r2, [pc, #152]	@ (80024ac <HAL_GPIO_Init+0x324>)
 8002412:	69bb      	ldr	r3, [r7, #24]
 8002414:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002416:	4b25      	ldr	r3, [pc, #148]	@ (80024ac <HAL_GPIO_Init+0x324>)
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	43db      	mvns	r3, r3
 8002420:	69ba      	ldr	r2, [r7, #24]
 8002422:	4013      	ands	r3, r2
 8002424:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800242e:	2b00      	cmp	r3, #0
 8002430:	d003      	beq.n	800243a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002432:	69ba      	ldr	r2, [r7, #24]
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	4313      	orrs	r3, r2
 8002438:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800243a:	4a1c      	ldr	r2, [pc, #112]	@ (80024ac <HAL_GPIO_Init+0x324>)
 800243c:	69bb      	ldr	r3, [r7, #24]
 800243e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002440:	4b1a      	ldr	r3, [pc, #104]	@ (80024ac <HAL_GPIO_Init+0x324>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	43db      	mvns	r3, r3
 800244a:	69ba      	ldr	r2, [r7, #24]
 800244c:	4013      	ands	r3, r2
 800244e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002458:	2b00      	cmp	r3, #0
 800245a:	d003      	beq.n	8002464 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800245c:	69ba      	ldr	r2, [r7, #24]
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	4313      	orrs	r3, r2
 8002462:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002464:	4a11      	ldr	r2, [pc, #68]	@ (80024ac <HAL_GPIO_Init+0x324>)
 8002466:	69bb      	ldr	r3, [r7, #24]
 8002468:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800246a:	69fb      	ldr	r3, [r7, #28]
 800246c:	3301      	adds	r3, #1
 800246e:	61fb      	str	r3, [r7, #28]
 8002470:	69fb      	ldr	r3, [r7, #28]
 8002472:	2b0f      	cmp	r3, #15
 8002474:	f67f ae96 	bls.w	80021a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002478:	bf00      	nop
 800247a:	bf00      	nop
 800247c:	3724      	adds	r7, #36	@ 0x24
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr
 8002486:	bf00      	nop
 8002488:	40023800 	.word	0x40023800
 800248c:	40013800 	.word	0x40013800
 8002490:	40020000 	.word	0x40020000
 8002494:	40020400 	.word	0x40020400
 8002498:	40020800 	.word	0x40020800
 800249c:	40020c00 	.word	0x40020c00
 80024a0:	40021000 	.word	0x40021000
 80024a4:	40021400 	.word	0x40021400
 80024a8:	40021800 	.word	0x40021800
 80024ac:	40013c00 	.word	0x40013c00

080024b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b085      	sub	sp, #20
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
 80024b8:	460b      	mov	r3, r1
 80024ba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	691a      	ldr	r2, [r3, #16]
 80024c0:	887b      	ldrh	r3, [r7, #2]
 80024c2:	4013      	ands	r3, r2
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d002      	beq.n	80024ce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80024c8:	2301      	movs	r3, #1
 80024ca:	73fb      	strb	r3, [r7, #15]
 80024cc:	e001      	b.n	80024d2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80024ce:	2300      	movs	r3, #0
 80024d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80024d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	3714      	adds	r7, #20
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr

080024e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b083      	sub	sp, #12
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
 80024e8:	460b      	mov	r3, r1
 80024ea:	807b      	strh	r3, [r7, #2]
 80024ec:	4613      	mov	r3, r2
 80024ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024f0:	787b      	ldrb	r3, [r7, #1]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d003      	beq.n	80024fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024f6:	887a      	ldrh	r2, [r7, #2]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80024fc:	e003      	b.n	8002506 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80024fe:	887b      	ldrh	r3, [r7, #2]
 8002500:	041a      	lsls	r2, r3, #16
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	619a      	str	r2, [r3, #24]
}
 8002506:	bf00      	nop
 8002508:	370c      	adds	r7, #12
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr

08002512 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002512:	b480      	push	{r7}
 8002514:	b085      	sub	sp, #20
 8002516:	af00      	add	r7, sp, #0
 8002518:	6078      	str	r0, [r7, #4]
 800251a:	460b      	mov	r3, r1
 800251c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	695b      	ldr	r3, [r3, #20]
 8002522:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002524:	887a      	ldrh	r2, [r7, #2]
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	4013      	ands	r3, r2
 800252a:	041a      	lsls	r2, r3, #16
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	43d9      	mvns	r1, r3
 8002530:	887b      	ldrh	r3, [r7, #2]
 8002532:	400b      	ands	r3, r1
 8002534:	431a      	orrs	r2, r3
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	619a      	str	r2, [r3, #24]
}
 800253a:	bf00      	nop
 800253c:	3714      	adds	r7, #20
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr
	...

08002548 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b084      	sub	sp, #16
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d101      	bne.n	800255a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e12b      	b.n	80027b2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002560:	b2db      	uxtb	r3, r3
 8002562:	2b00      	cmp	r3, #0
 8002564:	d106      	bne.n	8002574 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2200      	movs	r2, #0
 800256a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f7ff fb36 	bl	8001be0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2224      	movs	r2, #36	@ 0x24
 8002578:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f022 0201 	bic.w	r2, r2, #1
 800258a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800259a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80025aa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80025ac:	f001 f932 	bl	8003814 <HAL_RCC_GetPCLK1Freq>
 80025b0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	4a81      	ldr	r2, [pc, #516]	@ (80027bc <HAL_I2C_Init+0x274>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d807      	bhi.n	80025cc <HAL_I2C_Init+0x84>
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	4a80      	ldr	r2, [pc, #512]	@ (80027c0 <HAL_I2C_Init+0x278>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	bf94      	ite	ls
 80025c4:	2301      	movls	r3, #1
 80025c6:	2300      	movhi	r3, #0
 80025c8:	b2db      	uxtb	r3, r3
 80025ca:	e006      	b.n	80025da <HAL_I2C_Init+0x92>
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	4a7d      	ldr	r2, [pc, #500]	@ (80027c4 <HAL_I2C_Init+0x27c>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	bf94      	ite	ls
 80025d4:	2301      	movls	r3, #1
 80025d6:	2300      	movhi	r3, #0
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d001      	beq.n	80025e2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e0e7      	b.n	80027b2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	4a78      	ldr	r2, [pc, #480]	@ (80027c8 <HAL_I2C_Init+0x280>)
 80025e6:	fba2 2303 	umull	r2, r3, r2, r3
 80025ea:	0c9b      	lsrs	r3, r3, #18
 80025ec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	68ba      	ldr	r2, [r7, #8]
 80025fe:	430a      	orrs	r2, r1
 8002600:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	6a1b      	ldr	r3, [r3, #32]
 8002608:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	4a6a      	ldr	r2, [pc, #424]	@ (80027bc <HAL_I2C_Init+0x274>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d802      	bhi.n	800261c <HAL_I2C_Init+0xd4>
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	3301      	adds	r3, #1
 800261a:	e009      	b.n	8002630 <HAL_I2C_Init+0xe8>
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002622:	fb02 f303 	mul.w	r3, r2, r3
 8002626:	4a69      	ldr	r2, [pc, #420]	@ (80027cc <HAL_I2C_Init+0x284>)
 8002628:	fba2 2303 	umull	r2, r3, r2, r3
 800262c:	099b      	lsrs	r3, r3, #6
 800262e:	3301      	adds	r3, #1
 8002630:	687a      	ldr	r2, [r7, #4]
 8002632:	6812      	ldr	r2, [r2, #0]
 8002634:	430b      	orrs	r3, r1
 8002636:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	69db      	ldr	r3, [r3, #28]
 800263e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002642:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	495c      	ldr	r1, [pc, #368]	@ (80027bc <HAL_I2C_Init+0x274>)
 800264c:	428b      	cmp	r3, r1
 800264e:	d819      	bhi.n	8002684 <HAL_I2C_Init+0x13c>
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	1e59      	subs	r1, r3, #1
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	005b      	lsls	r3, r3, #1
 800265a:	fbb1 f3f3 	udiv	r3, r1, r3
 800265e:	1c59      	adds	r1, r3, #1
 8002660:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002664:	400b      	ands	r3, r1
 8002666:	2b00      	cmp	r3, #0
 8002668:	d00a      	beq.n	8002680 <HAL_I2C_Init+0x138>
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	1e59      	subs	r1, r3, #1
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	005b      	lsls	r3, r3, #1
 8002674:	fbb1 f3f3 	udiv	r3, r1, r3
 8002678:	3301      	adds	r3, #1
 800267a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800267e:	e051      	b.n	8002724 <HAL_I2C_Init+0x1dc>
 8002680:	2304      	movs	r3, #4
 8002682:	e04f      	b.n	8002724 <HAL_I2C_Init+0x1dc>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d111      	bne.n	80026b0 <HAL_I2C_Init+0x168>
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	1e58      	subs	r0, r3, #1
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6859      	ldr	r1, [r3, #4]
 8002694:	460b      	mov	r3, r1
 8002696:	005b      	lsls	r3, r3, #1
 8002698:	440b      	add	r3, r1
 800269a:	fbb0 f3f3 	udiv	r3, r0, r3
 800269e:	3301      	adds	r3, #1
 80026a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	bf0c      	ite	eq
 80026a8:	2301      	moveq	r3, #1
 80026aa:	2300      	movne	r3, #0
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	e012      	b.n	80026d6 <HAL_I2C_Init+0x18e>
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	1e58      	subs	r0, r3, #1
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6859      	ldr	r1, [r3, #4]
 80026b8:	460b      	mov	r3, r1
 80026ba:	009b      	lsls	r3, r3, #2
 80026bc:	440b      	add	r3, r1
 80026be:	0099      	lsls	r1, r3, #2
 80026c0:	440b      	add	r3, r1
 80026c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80026c6:	3301      	adds	r3, #1
 80026c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	bf0c      	ite	eq
 80026d0:	2301      	moveq	r3, #1
 80026d2:	2300      	movne	r3, #0
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d001      	beq.n	80026de <HAL_I2C_Init+0x196>
 80026da:	2301      	movs	r3, #1
 80026dc:	e022      	b.n	8002724 <HAL_I2C_Init+0x1dc>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d10e      	bne.n	8002704 <HAL_I2C_Init+0x1bc>
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	1e58      	subs	r0, r3, #1
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6859      	ldr	r1, [r3, #4]
 80026ee:	460b      	mov	r3, r1
 80026f0:	005b      	lsls	r3, r3, #1
 80026f2:	440b      	add	r3, r1
 80026f4:	fbb0 f3f3 	udiv	r3, r0, r3
 80026f8:	3301      	adds	r3, #1
 80026fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002702:	e00f      	b.n	8002724 <HAL_I2C_Init+0x1dc>
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	1e58      	subs	r0, r3, #1
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6859      	ldr	r1, [r3, #4]
 800270c:	460b      	mov	r3, r1
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	440b      	add	r3, r1
 8002712:	0099      	lsls	r1, r3, #2
 8002714:	440b      	add	r3, r1
 8002716:	fbb0 f3f3 	udiv	r3, r0, r3
 800271a:	3301      	adds	r3, #1
 800271c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002720:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002724:	6879      	ldr	r1, [r7, #4]
 8002726:	6809      	ldr	r1, [r1, #0]
 8002728:	4313      	orrs	r3, r2
 800272a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	69da      	ldr	r2, [r3, #28]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6a1b      	ldr	r3, [r3, #32]
 800273e:	431a      	orrs	r2, r3
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	430a      	orrs	r2, r1
 8002746:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002752:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002756:	687a      	ldr	r2, [r7, #4]
 8002758:	6911      	ldr	r1, [r2, #16]
 800275a:	687a      	ldr	r2, [r7, #4]
 800275c:	68d2      	ldr	r2, [r2, #12]
 800275e:	4311      	orrs	r1, r2
 8002760:	687a      	ldr	r2, [r7, #4]
 8002762:	6812      	ldr	r2, [r2, #0]
 8002764:	430b      	orrs	r3, r1
 8002766:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	68db      	ldr	r3, [r3, #12]
 800276e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	695a      	ldr	r2, [r3, #20]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	699b      	ldr	r3, [r3, #24]
 800277a:	431a      	orrs	r2, r3
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	430a      	orrs	r2, r1
 8002782:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f042 0201 	orr.w	r2, r2, #1
 8002792:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2200      	movs	r2, #0
 8002798:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2220      	movs	r2, #32
 800279e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2200      	movs	r2, #0
 80027a6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2200      	movs	r2, #0
 80027ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80027b0:	2300      	movs	r3, #0
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	3710      	adds	r7, #16
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	000186a0 	.word	0x000186a0
 80027c0:	001e847f 	.word	0x001e847f
 80027c4:	003d08ff 	.word	0x003d08ff
 80027c8:	431bde83 	.word	0x431bde83
 80027cc:	10624dd3 	.word	0x10624dd3

080027d0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b088      	sub	sp, #32
 80027d4:	af02      	add	r7, sp, #8
 80027d6:	60f8      	str	r0, [r7, #12]
 80027d8:	4608      	mov	r0, r1
 80027da:	4611      	mov	r1, r2
 80027dc:	461a      	mov	r2, r3
 80027de:	4603      	mov	r3, r0
 80027e0:	817b      	strh	r3, [r7, #10]
 80027e2:	460b      	mov	r3, r1
 80027e4:	813b      	strh	r3, [r7, #8]
 80027e6:	4613      	mov	r3, r2
 80027e8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80027ea:	f7ff fb8b 	bl	8001f04 <HAL_GetTick>
 80027ee:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80027f6:	b2db      	uxtb	r3, r3
 80027f8:	2b20      	cmp	r3, #32
 80027fa:	f040 80d9 	bne.w	80029b0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	9300      	str	r3, [sp, #0]
 8002802:	2319      	movs	r3, #25
 8002804:	2201      	movs	r2, #1
 8002806:	496d      	ldr	r1, [pc, #436]	@ (80029bc <HAL_I2C_Mem_Write+0x1ec>)
 8002808:	68f8      	ldr	r0, [r7, #12]
 800280a:	f000 fc8b 	bl	8003124 <I2C_WaitOnFlagUntilTimeout>
 800280e:	4603      	mov	r3, r0
 8002810:	2b00      	cmp	r3, #0
 8002812:	d001      	beq.n	8002818 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002814:	2302      	movs	r3, #2
 8002816:	e0cc      	b.n	80029b2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800281e:	2b01      	cmp	r3, #1
 8002820:	d101      	bne.n	8002826 <HAL_I2C_Mem_Write+0x56>
 8002822:	2302      	movs	r3, #2
 8002824:	e0c5      	b.n	80029b2 <HAL_I2C_Mem_Write+0x1e2>
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	2201      	movs	r2, #1
 800282a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 0301 	and.w	r3, r3, #1
 8002838:	2b01      	cmp	r3, #1
 800283a:	d007      	beq.n	800284c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f042 0201 	orr.w	r2, r2, #1
 800284a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	681a      	ldr	r2, [r3, #0]
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800285a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2221      	movs	r2, #33	@ 0x21
 8002860:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	2240      	movs	r2, #64	@ 0x40
 8002868:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	2200      	movs	r2, #0
 8002870:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	6a3a      	ldr	r2, [r7, #32]
 8002876:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800287c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002882:	b29a      	uxth	r2, r3
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	4a4d      	ldr	r2, [pc, #308]	@ (80029c0 <HAL_I2C_Mem_Write+0x1f0>)
 800288c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800288e:	88f8      	ldrh	r0, [r7, #6]
 8002890:	893a      	ldrh	r2, [r7, #8]
 8002892:	8979      	ldrh	r1, [r7, #10]
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	9301      	str	r3, [sp, #4]
 8002898:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800289a:	9300      	str	r3, [sp, #0]
 800289c:	4603      	mov	r3, r0
 800289e:	68f8      	ldr	r0, [r7, #12]
 80028a0:	f000 fac2 	bl	8002e28 <I2C_RequestMemoryWrite>
 80028a4:	4603      	mov	r3, r0
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d052      	beq.n	8002950 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e081      	b.n	80029b2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028ae:	697a      	ldr	r2, [r7, #20]
 80028b0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80028b2:	68f8      	ldr	r0, [r7, #12]
 80028b4:	f000 fd50 	bl	8003358 <I2C_WaitOnTXEFlagUntilTimeout>
 80028b8:	4603      	mov	r3, r0
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d00d      	beq.n	80028da <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028c2:	2b04      	cmp	r3, #4
 80028c4:	d107      	bne.n	80028d6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028d4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	e06b      	b.n	80029b2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028de:	781a      	ldrb	r2, [r3, #0]
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028ea:	1c5a      	adds	r2, r3, #1
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028f4:	3b01      	subs	r3, #1
 80028f6:	b29a      	uxth	r2, r3
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002900:	b29b      	uxth	r3, r3
 8002902:	3b01      	subs	r3, #1
 8002904:	b29a      	uxth	r2, r3
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	695b      	ldr	r3, [r3, #20]
 8002910:	f003 0304 	and.w	r3, r3, #4
 8002914:	2b04      	cmp	r3, #4
 8002916:	d11b      	bne.n	8002950 <HAL_I2C_Mem_Write+0x180>
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800291c:	2b00      	cmp	r3, #0
 800291e:	d017      	beq.n	8002950 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002924:	781a      	ldrb	r2, [r3, #0]
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002930:	1c5a      	adds	r2, r3, #1
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800293a:	3b01      	subs	r3, #1
 800293c:	b29a      	uxth	r2, r3
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002946:	b29b      	uxth	r3, r3
 8002948:	3b01      	subs	r3, #1
 800294a:	b29a      	uxth	r2, r3
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002954:	2b00      	cmp	r3, #0
 8002956:	d1aa      	bne.n	80028ae <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002958:	697a      	ldr	r2, [r7, #20]
 800295a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800295c:	68f8      	ldr	r0, [r7, #12]
 800295e:	f000 fd43 	bl	80033e8 <I2C_WaitOnBTFFlagUntilTimeout>
 8002962:	4603      	mov	r3, r0
 8002964:	2b00      	cmp	r3, #0
 8002966:	d00d      	beq.n	8002984 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800296c:	2b04      	cmp	r3, #4
 800296e:	d107      	bne.n	8002980 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800297e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	e016      	b.n	80029b2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002992:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2220      	movs	r2, #32
 8002998:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	2200      	movs	r2, #0
 80029a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2200      	movs	r2, #0
 80029a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80029ac:	2300      	movs	r3, #0
 80029ae:	e000      	b.n	80029b2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80029b0:	2302      	movs	r3, #2
  }
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3718      	adds	r7, #24
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	bf00      	nop
 80029bc:	00100002 	.word	0x00100002
 80029c0:	ffff0000 	.word	0xffff0000

080029c4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b08c      	sub	sp, #48	@ 0x30
 80029c8:	af02      	add	r7, sp, #8
 80029ca:	60f8      	str	r0, [r7, #12]
 80029cc:	4608      	mov	r0, r1
 80029ce:	4611      	mov	r1, r2
 80029d0:	461a      	mov	r2, r3
 80029d2:	4603      	mov	r3, r0
 80029d4:	817b      	strh	r3, [r7, #10]
 80029d6:	460b      	mov	r3, r1
 80029d8:	813b      	strh	r3, [r7, #8]
 80029da:	4613      	mov	r3, r2
 80029dc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80029de:	f7ff fa91 	bl	8001f04 <HAL_GetTick>
 80029e2:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029ea:	b2db      	uxtb	r3, r3
 80029ec:	2b20      	cmp	r3, #32
 80029ee:	f040 8214 	bne.w	8002e1a <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80029f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029f4:	9300      	str	r3, [sp, #0]
 80029f6:	2319      	movs	r3, #25
 80029f8:	2201      	movs	r2, #1
 80029fa:	497b      	ldr	r1, [pc, #492]	@ (8002be8 <HAL_I2C_Mem_Read+0x224>)
 80029fc:	68f8      	ldr	r0, [r7, #12]
 80029fe:	f000 fb91 	bl	8003124 <I2C_WaitOnFlagUntilTimeout>
 8002a02:	4603      	mov	r3, r0
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d001      	beq.n	8002a0c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002a08:	2302      	movs	r3, #2
 8002a0a:	e207      	b.n	8002e1c <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	d101      	bne.n	8002a1a <HAL_I2C_Mem_Read+0x56>
 8002a16:	2302      	movs	r3, #2
 8002a18:	e200      	b.n	8002e1c <HAL_I2C_Mem_Read+0x458>
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 0301 	and.w	r3, r3, #1
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d007      	beq.n	8002a40 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	681a      	ldr	r2, [r3, #0]
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f042 0201 	orr.w	r2, r2, #1
 8002a3e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a4e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2222      	movs	r2, #34	@ 0x22
 8002a54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2240      	movs	r2, #64	@ 0x40
 8002a5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2200      	movs	r2, #0
 8002a64:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002a6a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002a70:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a76:	b29a      	uxth	r2, r3
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	4a5b      	ldr	r2, [pc, #364]	@ (8002bec <HAL_I2C_Mem_Read+0x228>)
 8002a80:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002a82:	88f8      	ldrh	r0, [r7, #6]
 8002a84:	893a      	ldrh	r2, [r7, #8]
 8002a86:	8979      	ldrh	r1, [r7, #10]
 8002a88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a8a:	9301      	str	r3, [sp, #4]
 8002a8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a8e:	9300      	str	r3, [sp, #0]
 8002a90:	4603      	mov	r3, r0
 8002a92:	68f8      	ldr	r0, [r7, #12]
 8002a94:	f000 fa5e 	bl	8002f54 <I2C_RequestMemoryRead>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d001      	beq.n	8002aa2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e1bc      	b.n	8002e1c <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d113      	bne.n	8002ad2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002aaa:	2300      	movs	r3, #0
 8002aac:	623b      	str	r3, [r7, #32]
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	695b      	ldr	r3, [r3, #20]
 8002ab4:	623b      	str	r3, [r7, #32]
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	699b      	ldr	r3, [r3, #24]
 8002abc:	623b      	str	r3, [r7, #32]
 8002abe:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ace:	601a      	str	r2, [r3, #0]
 8002ad0:	e190      	b.n	8002df4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	d11b      	bne.n	8002b12 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ae8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002aea:	2300      	movs	r3, #0
 8002aec:	61fb      	str	r3, [r7, #28]
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	695b      	ldr	r3, [r3, #20]
 8002af4:	61fb      	str	r3, [r7, #28]
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	699b      	ldr	r3, [r3, #24]
 8002afc:	61fb      	str	r3, [r7, #28]
 8002afe:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b0e:	601a      	str	r2, [r3, #0]
 8002b10:	e170      	b.n	8002df4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b16:	2b02      	cmp	r3, #2
 8002b18:	d11b      	bne.n	8002b52 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b28:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002b38:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	61bb      	str	r3, [r7, #24]
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	695b      	ldr	r3, [r3, #20]
 8002b44:	61bb      	str	r3, [r7, #24]
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	699b      	ldr	r3, [r3, #24]
 8002b4c:	61bb      	str	r3, [r7, #24]
 8002b4e:	69bb      	ldr	r3, [r7, #24]
 8002b50:	e150      	b.n	8002df4 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b52:	2300      	movs	r3, #0
 8002b54:	617b      	str	r3, [r7, #20]
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	695b      	ldr	r3, [r3, #20]
 8002b5c:	617b      	str	r3, [r7, #20]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	699b      	ldr	r3, [r3, #24]
 8002b64:	617b      	str	r3, [r7, #20]
 8002b66:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002b68:	e144      	b.n	8002df4 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b6e:	2b03      	cmp	r3, #3
 8002b70:	f200 80f1 	bhi.w	8002d56 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	d123      	bne.n	8002bc4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b7e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002b80:	68f8      	ldr	r0, [r7, #12]
 8002b82:	f000 fc79 	bl	8003478 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002b86:	4603      	mov	r3, r0
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d001      	beq.n	8002b90 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e145      	b.n	8002e1c <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	691a      	ldr	r2, [r3, #16]
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b9a:	b2d2      	uxtb	r2, r2
 8002b9c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ba2:	1c5a      	adds	r2, r3, #1
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bac:	3b01      	subs	r3, #1
 8002bae:	b29a      	uxth	r2, r3
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bb8:	b29b      	uxth	r3, r3
 8002bba:	3b01      	subs	r3, #1
 8002bbc:	b29a      	uxth	r2, r3
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002bc2:	e117      	b.n	8002df4 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bc8:	2b02      	cmp	r3, #2
 8002bca:	d14e      	bne.n	8002c6a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002bcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bce:	9300      	str	r3, [sp, #0]
 8002bd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	4906      	ldr	r1, [pc, #24]	@ (8002bf0 <HAL_I2C_Mem_Read+0x22c>)
 8002bd6:	68f8      	ldr	r0, [r7, #12]
 8002bd8:	f000 faa4 	bl	8003124 <I2C_WaitOnFlagUntilTimeout>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d008      	beq.n	8002bf4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e11a      	b.n	8002e1c <HAL_I2C_Mem_Read+0x458>
 8002be6:	bf00      	nop
 8002be8:	00100002 	.word	0x00100002
 8002bec:	ffff0000 	.word	0xffff0000
 8002bf0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c02:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	691a      	ldr	r2, [r3, #16]
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c0e:	b2d2      	uxtb	r2, r2
 8002c10:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c16:	1c5a      	adds	r2, r3, #1
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c20:	3b01      	subs	r3, #1
 8002c22:	b29a      	uxth	r2, r3
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c2c:	b29b      	uxth	r3, r3
 8002c2e:	3b01      	subs	r3, #1
 8002c30:	b29a      	uxth	r2, r3
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	691a      	ldr	r2, [r3, #16]
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c40:	b2d2      	uxtb	r2, r2
 8002c42:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c48:	1c5a      	adds	r2, r3, #1
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c52:	3b01      	subs	r3, #1
 8002c54:	b29a      	uxth	r2, r3
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c5e:	b29b      	uxth	r3, r3
 8002c60:	3b01      	subs	r3, #1
 8002c62:	b29a      	uxth	r2, r3
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002c68:	e0c4      	b.n	8002df4 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c6c:	9300      	str	r3, [sp, #0]
 8002c6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c70:	2200      	movs	r2, #0
 8002c72:	496c      	ldr	r1, [pc, #432]	@ (8002e24 <HAL_I2C_Mem_Read+0x460>)
 8002c74:	68f8      	ldr	r0, [r7, #12]
 8002c76:	f000 fa55 	bl	8003124 <I2C_WaitOnFlagUntilTimeout>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d001      	beq.n	8002c84 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	e0cb      	b.n	8002e1c <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	681a      	ldr	r2, [r3, #0]
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c92:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	691a      	ldr	r2, [r3, #16]
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c9e:	b2d2      	uxtb	r2, r2
 8002ca0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ca6:	1c5a      	adds	r2, r3, #1
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cb0:	3b01      	subs	r3, #1
 8002cb2:	b29a      	uxth	r2, r3
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cbc:	b29b      	uxth	r3, r3
 8002cbe:	3b01      	subs	r3, #1
 8002cc0:	b29a      	uxth	r2, r3
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cc8:	9300      	str	r3, [sp, #0]
 8002cca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ccc:	2200      	movs	r2, #0
 8002cce:	4955      	ldr	r1, [pc, #340]	@ (8002e24 <HAL_I2C_Mem_Read+0x460>)
 8002cd0:	68f8      	ldr	r0, [r7, #12]
 8002cd2:	f000 fa27 	bl	8003124 <I2C_WaitOnFlagUntilTimeout>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d001      	beq.n	8002ce0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e09d      	b.n	8002e1c <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002cee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	691a      	ldr	r2, [r3, #16]
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cfa:	b2d2      	uxtb	r2, r2
 8002cfc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d02:	1c5a      	adds	r2, r3, #1
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d0c:	3b01      	subs	r3, #1
 8002d0e:	b29a      	uxth	r2, r3
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d18:	b29b      	uxth	r3, r3
 8002d1a:	3b01      	subs	r3, #1
 8002d1c:	b29a      	uxth	r2, r3
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	691a      	ldr	r2, [r3, #16]
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d2c:	b2d2      	uxtb	r2, r2
 8002d2e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d34:	1c5a      	adds	r2, r3, #1
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d3e:	3b01      	subs	r3, #1
 8002d40:	b29a      	uxth	r2, r3
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d4a:	b29b      	uxth	r3, r3
 8002d4c:	3b01      	subs	r3, #1
 8002d4e:	b29a      	uxth	r2, r3
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002d54:	e04e      	b.n	8002df4 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d58:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002d5a:	68f8      	ldr	r0, [r7, #12]
 8002d5c:	f000 fb8c 	bl	8003478 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002d60:	4603      	mov	r3, r0
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d001      	beq.n	8002d6a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e058      	b.n	8002e1c <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	691a      	ldr	r2, [r3, #16]
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d74:	b2d2      	uxtb	r2, r2
 8002d76:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d7c:	1c5a      	adds	r2, r3, #1
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d86:	3b01      	subs	r3, #1
 8002d88:	b29a      	uxth	r2, r3
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d92:	b29b      	uxth	r3, r3
 8002d94:	3b01      	subs	r3, #1
 8002d96:	b29a      	uxth	r2, r3
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	695b      	ldr	r3, [r3, #20]
 8002da2:	f003 0304 	and.w	r3, r3, #4
 8002da6:	2b04      	cmp	r3, #4
 8002da8:	d124      	bne.n	8002df4 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dae:	2b03      	cmp	r3, #3
 8002db0:	d107      	bne.n	8002dc2 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002dc0:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	691a      	ldr	r2, [r3, #16]
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dcc:	b2d2      	uxtb	r2, r2
 8002dce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dd4:	1c5a      	adds	r2, r3, #1
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dde:	3b01      	subs	r3, #1
 8002de0:	b29a      	uxth	r2, r3
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dea:	b29b      	uxth	r3, r3
 8002dec:	3b01      	subs	r3, #1
 8002dee:	b29a      	uxth	r2, r3
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	f47f aeb6 	bne.w	8002b6a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	2220      	movs	r2, #32
 8002e02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	2200      	movs	r2, #0
 8002e12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002e16:	2300      	movs	r3, #0
 8002e18:	e000      	b.n	8002e1c <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002e1a:	2302      	movs	r3, #2
  }
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	3728      	adds	r7, #40	@ 0x28
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}
 8002e24:	00010004 	.word	0x00010004

08002e28 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b088      	sub	sp, #32
 8002e2c:	af02      	add	r7, sp, #8
 8002e2e:	60f8      	str	r0, [r7, #12]
 8002e30:	4608      	mov	r0, r1
 8002e32:	4611      	mov	r1, r2
 8002e34:	461a      	mov	r2, r3
 8002e36:	4603      	mov	r3, r0
 8002e38:	817b      	strh	r3, [r7, #10]
 8002e3a:	460b      	mov	r3, r1
 8002e3c:	813b      	strh	r3, [r7, #8]
 8002e3e:	4613      	mov	r3, r2
 8002e40:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002e50:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e54:	9300      	str	r3, [sp, #0]
 8002e56:	6a3b      	ldr	r3, [r7, #32]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002e5e:	68f8      	ldr	r0, [r7, #12]
 8002e60:	f000 f960 	bl	8003124 <I2C_WaitOnFlagUntilTimeout>
 8002e64:	4603      	mov	r3, r0
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d00d      	beq.n	8002e86 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e74:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e78:	d103      	bne.n	8002e82 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e80:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002e82:	2303      	movs	r3, #3
 8002e84:	e05f      	b.n	8002f46 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002e86:	897b      	ldrh	r3, [r7, #10]
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	461a      	mov	r2, r3
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002e94:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e98:	6a3a      	ldr	r2, [r7, #32]
 8002e9a:	492d      	ldr	r1, [pc, #180]	@ (8002f50 <I2C_RequestMemoryWrite+0x128>)
 8002e9c:	68f8      	ldr	r0, [r7, #12]
 8002e9e:	f000 f9bb 	bl	8003218 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d001      	beq.n	8002eac <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	e04c      	b.n	8002f46 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002eac:	2300      	movs	r3, #0
 8002eae:	617b      	str	r3, [r7, #20]
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	695b      	ldr	r3, [r3, #20]
 8002eb6:	617b      	str	r3, [r7, #20]
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	699b      	ldr	r3, [r3, #24]
 8002ebe:	617b      	str	r3, [r7, #20]
 8002ec0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ec2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ec4:	6a39      	ldr	r1, [r7, #32]
 8002ec6:	68f8      	ldr	r0, [r7, #12]
 8002ec8:	f000 fa46 	bl	8003358 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d00d      	beq.n	8002eee <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ed6:	2b04      	cmp	r3, #4
 8002ed8:	d107      	bne.n	8002eea <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ee8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	e02b      	b.n	8002f46 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002eee:	88fb      	ldrh	r3, [r7, #6]
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d105      	bne.n	8002f00 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002ef4:	893b      	ldrh	r3, [r7, #8]
 8002ef6:	b2da      	uxtb	r2, r3
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	611a      	str	r2, [r3, #16]
 8002efe:	e021      	b.n	8002f44 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002f00:	893b      	ldrh	r3, [r7, #8]
 8002f02:	0a1b      	lsrs	r3, r3, #8
 8002f04:	b29b      	uxth	r3, r3
 8002f06:	b2da      	uxtb	r2, r3
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f10:	6a39      	ldr	r1, [r7, #32]
 8002f12:	68f8      	ldr	r0, [r7, #12]
 8002f14:	f000 fa20 	bl	8003358 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d00d      	beq.n	8002f3a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f22:	2b04      	cmp	r3, #4
 8002f24:	d107      	bne.n	8002f36 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f34:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e005      	b.n	8002f46 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002f3a:	893b      	ldrh	r3, [r7, #8]
 8002f3c:	b2da      	uxtb	r2, r3
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002f44:	2300      	movs	r3, #0
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	3718      	adds	r7, #24
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}
 8002f4e:	bf00      	nop
 8002f50:	00010002 	.word	0x00010002

08002f54 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b088      	sub	sp, #32
 8002f58:	af02      	add	r7, sp, #8
 8002f5a:	60f8      	str	r0, [r7, #12]
 8002f5c:	4608      	mov	r0, r1
 8002f5e:	4611      	mov	r1, r2
 8002f60:	461a      	mov	r2, r3
 8002f62:	4603      	mov	r3, r0
 8002f64:	817b      	strh	r3, [r7, #10]
 8002f66:	460b      	mov	r3, r1
 8002f68:	813b      	strh	r3, [r7, #8]
 8002f6a:	4613      	mov	r3, r2
 8002f6c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002f7c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	681a      	ldr	r2, [r3, #0]
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002f8c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f90:	9300      	str	r3, [sp, #0]
 8002f92:	6a3b      	ldr	r3, [r7, #32]
 8002f94:	2200      	movs	r2, #0
 8002f96:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002f9a:	68f8      	ldr	r0, [r7, #12]
 8002f9c:	f000 f8c2 	bl	8003124 <I2C_WaitOnFlagUntilTimeout>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d00d      	beq.n	8002fc2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fb0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002fb4:	d103      	bne.n	8002fbe <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002fbc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002fbe:	2303      	movs	r3, #3
 8002fc0:	e0aa      	b.n	8003118 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002fc2:	897b      	ldrh	r3, [r7, #10]
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	461a      	mov	r2, r3
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002fd0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fd4:	6a3a      	ldr	r2, [r7, #32]
 8002fd6:	4952      	ldr	r1, [pc, #328]	@ (8003120 <I2C_RequestMemoryRead+0x1cc>)
 8002fd8:	68f8      	ldr	r0, [r7, #12]
 8002fda:	f000 f91d 	bl	8003218 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d001      	beq.n	8002fe8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	e097      	b.n	8003118 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fe8:	2300      	movs	r3, #0
 8002fea:	617b      	str	r3, [r7, #20]
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	695b      	ldr	r3, [r3, #20]
 8002ff2:	617b      	str	r3, [r7, #20]
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	699b      	ldr	r3, [r3, #24]
 8002ffa:	617b      	str	r3, [r7, #20]
 8002ffc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ffe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003000:	6a39      	ldr	r1, [r7, #32]
 8003002:	68f8      	ldr	r0, [r7, #12]
 8003004:	f000 f9a8 	bl	8003358 <I2C_WaitOnTXEFlagUntilTimeout>
 8003008:	4603      	mov	r3, r0
 800300a:	2b00      	cmp	r3, #0
 800300c:	d00d      	beq.n	800302a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003012:	2b04      	cmp	r3, #4
 8003014:	d107      	bne.n	8003026 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003024:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e076      	b.n	8003118 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800302a:	88fb      	ldrh	r3, [r7, #6]
 800302c:	2b01      	cmp	r3, #1
 800302e:	d105      	bne.n	800303c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003030:	893b      	ldrh	r3, [r7, #8]
 8003032:	b2da      	uxtb	r2, r3
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	611a      	str	r2, [r3, #16]
 800303a:	e021      	b.n	8003080 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800303c:	893b      	ldrh	r3, [r7, #8]
 800303e:	0a1b      	lsrs	r3, r3, #8
 8003040:	b29b      	uxth	r3, r3
 8003042:	b2da      	uxtb	r2, r3
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800304a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800304c:	6a39      	ldr	r1, [r7, #32]
 800304e:	68f8      	ldr	r0, [r7, #12]
 8003050:	f000 f982 	bl	8003358 <I2C_WaitOnTXEFlagUntilTimeout>
 8003054:	4603      	mov	r3, r0
 8003056:	2b00      	cmp	r3, #0
 8003058:	d00d      	beq.n	8003076 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800305e:	2b04      	cmp	r3, #4
 8003060:	d107      	bne.n	8003072 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003070:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e050      	b.n	8003118 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003076:	893b      	ldrh	r3, [r7, #8]
 8003078:	b2da      	uxtb	r2, r3
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003080:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003082:	6a39      	ldr	r1, [r7, #32]
 8003084:	68f8      	ldr	r0, [r7, #12]
 8003086:	f000 f967 	bl	8003358 <I2C_WaitOnTXEFlagUntilTimeout>
 800308a:	4603      	mov	r3, r0
 800308c:	2b00      	cmp	r3, #0
 800308e:	d00d      	beq.n	80030ac <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003094:	2b04      	cmp	r3, #4
 8003096:	d107      	bne.n	80030a8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030a6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	e035      	b.n	8003118 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80030ba:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80030bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030be:	9300      	str	r3, [sp, #0]
 80030c0:	6a3b      	ldr	r3, [r7, #32]
 80030c2:	2200      	movs	r2, #0
 80030c4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80030c8:	68f8      	ldr	r0, [r7, #12]
 80030ca:	f000 f82b 	bl	8003124 <I2C_WaitOnFlagUntilTimeout>
 80030ce:	4603      	mov	r3, r0
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d00d      	beq.n	80030f0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80030e2:	d103      	bne.n	80030ec <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80030ea:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80030ec:	2303      	movs	r3, #3
 80030ee:	e013      	b.n	8003118 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80030f0:	897b      	ldrh	r3, [r7, #10]
 80030f2:	b2db      	uxtb	r3, r3
 80030f4:	f043 0301 	orr.w	r3, r3, #1
 80030f8:	b2da      	uxtb	r2, r3
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003102:	6a3a      	ldr	r2, [r7, #32]
 8003104:	4906      	ldr	r1, [pc, #24]	@ (8003120 <I2C_RequestMemoryRead+0x1cc>)
 8003106:	68f8      	ldr	r0, [r7, #12]
 8003108:	f000 f886 	bl	8003218 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800310c:	4603      	mov	r3, r0
 800310e:	2b00      	cmp	r3, #0
 8003110:	d001      	beq.n	8003116 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	e000      	b.n	8003118 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003116:	2300      	movs	r3, #0
}
 8003118:	4618      	mov	r0, r3
 800311a:	3718      	adds	r7, #24
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}
 8003120:	00010002 	.word	0x00010002

08003124 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b084      	sub	sp, #16
 8003128:	af00      	add	r7, sp, #0
 800312a:	60f8      	str	r0, [r7, #12]
 800312c:	60b9      	str	r1, [r7, #8]
 800312e:	603b      	str	r3, [r7, #0]
 8003130:	4613      	mov	r3, r2
 8003132:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003134:	e048      	b.n	80031c8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	f1b3 3fff 	cmp.w	r3, #4294967295
 800313c:	d044      	beq.n	80031c8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800313e:	f7fe fee1 	bl	8001f04 <HAL_GetTick>
 8003142:	4602      	mov	r2, r0
 8003144:	69bb      	ldr	r3, [r7, #24]
 8003146:	1ad3      	subs	r3, r2, r3
 8003148:	683a      	ldr	r2, [r7, #0]
 800314a:	429a      	cmp	r2, r3
 800314c:	d302      	bcc.n	8003154 <I2C_WaitOnFlagUntilTimeout+0x30>
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d139      	bne.n	80031c8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	0c1b      	lsrs	r3, r3, #16
 8003158:	b2db      	uxtb	r3, r3
 800315a:	2b01      	cmp	r3, #1
 800315c:	d10d      	bne.n	800317a <I2C_WaitOnFlagUntilTimeout+0x56>
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	695b      	ldr	r3, [r3, #20]
 8003164:	43da      	mvns	r2, r3
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	4013      	ands	r3, r2
 800316a:	b29b      	uxth	r3, r3
 800316c:	2b00      	cmp	r3, #0
 800316e:	bf0c      	ite	eq
 8003170:	2301      	moveq	r3, #1
 8003172:	2300      	movne	r3, #0
 8003174:	b2db      	uxtb	r3, r3
 8003176:	461a      	mov	r2, r3
 8003178:	e00c      	b.n	8003194 <I2C_WaitOnFlagUntilTimeout+0x70>
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	699b      	ldr	r3, [r3, #24]
 8003180:	43da      	mvns	r2, r3
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	4013      	ands	r3, r2
 8003186:	b29b      	uxth	r3, r3
 8003188:	2b00      	cmp	r3, #0
 800318a:	bf0c      	ite	eq
 800318c:	2301      	moveq	r3, #1
 800318e:	2300      	movne	r3, #0
 8003190:	b2db      	uxtb	r3, r3
 8003192:	461a      	mov	r2, r3
 8003194:	79fb      	ldrb	r3, [r7, #7]
 8003196:	429a      	cmp	r2, r3
 8003198:	d116      	bne.n	80031c8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2200      	movs	r2, #0
 800319e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2220      	movs	r2, #32
 80031a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2200      	movs	r2, #0
 80031ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031b4:	f043 0220 	orr.w	r2, r3, #32
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2200      	movs	r2, #0
 80031c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	e023      	b.n	8003210 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	0c1b      	lsrs	r3, r3, #16
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d10d      	bne.n	80031ee <I2C_WaitOnFlagUntilTimeout+0xca>
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	695b      	ldr	r3, [r3, #20]
 80031d8:	43da      	mvns	r2, r3
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	4013      	ands	r3, r2
 80031de:	b29b      	uxth	r3, r3
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	bf0c      	ite	eq
 80031e4:	2301      	moveq	r3, #1
 80031e6:	2300      	movne	r3, #0
 80031e8:	b2db      	uxtb	r3, r3
 80031ea:	461a      	mov	r2, r3
 80031ec:	e00c      	b.n	8003208 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	699b      	ldr	r3, [r3, #24]
 80031f4:	43da      	mvns	r2, r3
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	4013      	ands	r3, r2
 80031fa:	b29b      	uxth	r3, r3
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	bf0c      	ite	eq
 8003200:	2301      	moveq	r3, #1
 8003202:	2300      	movne	r3, #0
 8003204:	b2db      	uxtb	r3, r3
 8003206:	461a      	mov	r2, r3
 8003208:	79fb      	ldrb	r3, [r7, #7]
 800320a:	429a      	cmp	r2, r3
 800320c:	d093      	beq.n	8003136 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800320e:	2300      	movs	r3, #0
}
 8003210:	4618      	mov	r0, r3
 8003212:	3710      	adds	r7, #16
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}

08003218 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b084      	sub	sp, #16
 800321c:	af00      	add	r7, sp, #0
 800321e:	60f8      	str	r0, [r7, #12]
 8003220:	60b9      	str	r1, [r7, #8]
 8003222:	607a      	str	r2, [r7, #4]
 8003224:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003226:	e071      	b.n	800330c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	695b      	ldr	r3, [r3, #20]
 800322e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003232:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003236:	d123      	bne.n	8003280 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681a      	ldr	r2, [r3, #0]
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003246:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003250:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	2200      	movs	r2, #0
 8003256:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2220      	movs	r2, #32
 800325c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	2200      	movs	r2, #0
 8003264:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800326c:	f043 0204 	orr.w	r2, r3, #4
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2200      	movs	r2, #0
 8003278:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	e067      	b.n	8003350 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003286:	d041      	beq.n	800330c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003288:	f7fe fe3c 	bl	8001f04 <HAL_GetTick>
 800328c:	4602      	mov	r2, r0
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	1ad3      	subs	r3, r2, r3
 8003292:	687a      	ldr	r2, [r7, #4]
 8003294:	429a      	cmp	r2, r3
 8003296:	d302      	bcc.n	800329e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d136      	bne.n	800330c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	0c1b      	lsrs	r3, r3, #16
 80032a2:	b2db      	uxtb	r3, r3
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d10c      	bne.n	80032c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	695b      	ldr	r3, [r3, #20]
 80032ae:	43da      	mvns	r2, r3
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	4013      	ands	r3, r2
 80032b4:	b29b      	uxth	r3, r3
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	bf14      	ite	ne
 80032ba:	2301      	movne	r3, #1
 80032bc:	2300      	moveq	r3, #0
 80032be:	b2db      	uxtb	r3, r3
 80032c0:	e00b      	b.n	80032da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	699b      	ldr	r3, [r3, #24]
 80032c8:	43da      	mvns	r2, r3
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	4013      	ands	r3, r2
 80032ce:	b29b      	uxth	r3, r3
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	bf14      	ite	ne
 80032d4:	2301      	movne	r3, #1
 80032d6:	2300      	moveq	r3, #0
 80032d8:	b2db      	uxtb	r3, r3
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d016      	beq.n	800330c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2200      	movs	r2, #0
 80032e2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2220      	movs	r2, #32
 80032e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2200      	movs	r2, #0
 80032f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032f8:	f043 0220 	orr.w	r2, r3, #32
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2200      	movs	r2, #0
 8003304:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003308:	2301      	movs	r3, #1
 800330a:	e021      	b.n	8003350 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	0c1b      	lsrs	r3, r3, #16
 8003310:	b2db      	uxtb	r3, r3
 8003312:	2b01      	cmp	r3, #1
 8003314:	d10c      	bne.n	8003330 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	695b      	ldr	r3, [r3, #20]
 800331c:	43da      	mvns	r2, r3
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	4013      	ands	r3, r2
 8003322:	b29b      	uxth	r3, r3
 8003324:	2b00      	cmp	r3, #0
 8003326:	bf14      	ite	ne
 8003328:	2301      	movne	r3, #1
 800332a:	2300      	moveq	r3, #0
 800332c:	b2db      	uxtb	r3, r3
 800332e:	e00b      	b.n	8003348 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	699b      	ldr	r3, [r3, #24]
 8003336:	43da      	mvns	r2, r3
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	4013      	ands	r3, r2
 800333c:	b29b      	uxth	r3, r3
 800333e:	2b00      	cmp	r3, #0
 8003340:	bf14      	ite	ne
 8003342:	2301      	movne	r3, #1
 8003344:	2300      	moveq	r3, #0
 8003346:	b2db      	uxtb	r3, r3
 8003348:	2b00      	cmp	r3, #0
 800334a:	f47f af6d 	bne.w	8003228 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800334e:	2300      	movs	r3, #0
}
 8003350:	4618      	mov	r0, r3
 8003352:	3710      	adds	r7, #16
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}

08003358 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b084      	sub	sp, #16
 800335c:	af00      	add	r7, sp, #0
 800335e:	60f8      	str	r0, [r7, #12]
 8003360:	60b9      	str	r1, [r7, #8]
 8003362:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003364:	e034      	b.n	80033d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003366:	68f8      	ldr	r0, [r7, #12]
 8003368:	f000 f8e3 	bl	8003532 <I2C_IsAcknowledgeFailed>
 800336c:	4603      	mov	r3, r0
 800336e:	2b00      	cmp	r3, #0
 8003370:	d001      	beq.n	8003376 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e034      	b.n	80033e0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	f1b3 3fff 	cmp.w	r3, #4294967295
 800337c:	d028      	beq.n	80033d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800337e:	f7fe fdc1 	bl	8001f04 <HAL_GetTick>
 8003382:	4602      	mov	r2, r0
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	1ad3      	subs	r3, r2, r3
 8003388:	68ba      	ldr	r2, [r7, #8]
 800338a:	429a      	cmp	r2, r3
 800338c:	d302      	bcc.n	8003394 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d11d      	bne.n	80033d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	695b      	ldr	r3, [r3, #20]
 800339a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800339e:	2b80      	cmp	r3, #128	@ 0x80
 80033a0:	d016      	beq.n	80033d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2200      	movs	r2, #0
 80033a6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2220      	movs	r2, #32
 80033ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2200      	movs	r2, #0
 80033b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033bc:	f043 0220 	orr.w	r2, r3, #32
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2200      	movs	r2, #0
 80033c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	e007      	b.n	80033e0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	695b      	ldr	r3, [r3, #20]
 80033d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033da:	2b80      	cmp	r3, #128	@ 0x80
 80033dc:	d1c3      	bne.n	8003366 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80033de:	2300      	movs	r3, #0
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	3710      	adds	r7, #16
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}

080033e8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b084      	sub	sp, #16
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	60f8      	str	r0, [r7, #12]
 80033f0:	60b9      	str	r1, [r7, #8]
 80033f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80033f4:	e034      	b.n	8003460 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80033f6:	68f8      	ldr	r0, [r7, #12]
 80033f8:	f000 f89b 	bl	8003532 <I2C_IsAcknowledgeFailed>
 80033fc:	4603      	mov	r3, r0
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d001      	beq.n	8003406 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003402:	2301      	movs	r3, #1
 8003404:	e034      	b.n	8003470 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	f1b3 3fff 	cmp.w	r3, #4294967295
 800340c:	d028      	beq.n	8003460 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800340e:	f7fe fd79 	bl	8001f04 <HAL_GetTick>
 8003412:	4602      	mov	r2, r0
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	1ad3      	subs	r3, r2, r3
 8003418:	68ba      	ldr	r2, [r7, #8]
 800341a:	429a      	cmp	r2, r3
 800341c:	d302      	bcc.n	8003424 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d11d      	bne.n	8003460 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	695b      	ldr	r3, [r3, #20]
 800342a:	f003 0304 	and.w	r3, r3, #4
 800342e:	2b04      	cmp	r3, #4
 8003430:	d016      	beq.n	8003460 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2200      	movs	r2, #0
 8003436:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2220      	movs	r2, #32
 800343c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2200      	movs	r2, #0
 8003444:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800344c:	f043 0220 	orr.w	r2, r3, #32
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2200      	movs	r2, #0
 8003458:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	e007      	b.n	8003470 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	695b      	ldr	r3, [r3, #20]
 8003466:	f003 0304 	and.w	r3, r3, #4
 800346a:	2b04      	cmp	r3, #4
 800346c:	d1c3      	bne.n	80033f6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800346e:	2300      	movs	r3, #0
}
 8003470:	4618      	mov	r0, r3
 8003472:	3710      	adds	r7, #16
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}

08003478 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b084      	sub	sp, #16
 800347c:	af00      	add	r7, sp, #0
 800347e:	60f8      	str	r0, [r7, #12]
 8003480:	60b9      	str	r1, [r7, #8]
 8003482:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003484:	e049      	b.n	800351a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	695b      	ldr	r3, [r3, #20]
 800348c:	f003 0310 	and.w	r3, r3, #16
 8003490:	2b10      	cmp	r3, #16
 8003492:	d119      	bne.n	80034c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f06f 0210 	mvn.w	r2, #16
 800349c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2200      	movs	r2, #0
 80034a2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2220      	movs	r2, #32
 80034a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2200      	movs	r2, #0
 80034b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2200      	movs	r2, #0
 80034c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	e030      	b.n	800352a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034c8:	f7fe fd1c 	bl	8001f04 <HAL_GetTick>
 80034cc:	4602      	mov	r2, r0
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	1ad3      	subs	r3, r2, r3
 80034d2:	68ba      	ldr	r2, [r7, #8]
 80034d4:	429a      	cmp	r2, r3
 80034d6:	d302      	bcc.n	80034de <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d11d      	bne.n	800351a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	695b      	ldr	r3, [r3, #20]
 80034e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034e8:	2b40      	cmp	r3, #64	@ 0x40
 80034ea:	d016      	beq.n	800351a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2200      	movs	r2, #0
 80034f0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2220      	movs	r2, #32
 80034f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2200      	movs	r2, #0
 80034fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003506:	f043 0220 	orr.w	r2, r3, #32
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2200      	movs	r2, #0
 8003512:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	e007      	b.n	800352a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	695b      	ldr	r3, [r3, #20]
 8003520:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003524:	2b40      	cmp	r3, #64	@ 0x40
 8003526:	d1ae      	bne.n	8003486 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003528:	2300      	movs	r3, #0
}
 800352a:	4618      	mov	r0, r3
 800352c:	3710      	adds	r7, #16
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}

08003532 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003532:	b480      	push	{r7}
 8003534:	b083      	sub	sp, #12
 8003536:	af00      	add	r7, sp, #0
 8003538:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	695b      	ldr	r3, [r3, #20]
 8003540:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003544:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003548:	d11b      	bne.n	8003582 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003552:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2200      	movs	r2, #0
 8003558:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2220      	movs	r2, #32
 800355e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2200      	movs	r2, #0
 8003566:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800356e:	f043 0204 	orr.w	r2, r3, #4
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2200      	movs	r2, #0
 800357a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	e000      	b.n	8003584 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003582:	2300      	movs	r3, #0
}
 8003584:	4618      	mov	r0, r3
 8003586:	370c      	adds	r7, #12
 8003588:	46bd      	mov	sp, r7
 800358a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358e:	4770      	bx	lr

08003590 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b082      	sub	sp, #8
 8003594:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8003596:	2300      	movs	r3, #0
 8003598:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800359a:	2300      	movs	r3, #0
 800359c:	603b      	str	r3, [r7, #0]
 800359e:	4b20      	ldr	r3, [pc, #128]	@ (8003620 <HAL_PWREx_EnableOverDrive+0x90>)
 80035a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035a2:	4a1f      	ldr	r2, [pc, #124]	@ (8003620 <HAL_PWREx_EnableOverDrive+0x90>)
 80035a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80035a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80035aa:	4b1d      	ldr	r3, [pc, #116]	@ (8003620 <HAL_PWREx_EnableOverDrive+0x90>)
 80035ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035b2:	603b      	str	r3, [r7, #0]
 80035b4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80035b6:	4b1b      	ldr	r3, [pc, #108]	@ (8003624 <HAL_PWREx_EnableOverDrive+0x94>)
 80035b8:	2201      	movs	r2, #1
 80035ba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80035bc:	f7fe fca2 	bl	8001f04 <HAL_GetTick>
 80035c0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80035c2:	e009      	b.n	80035d8 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80035c4:	f7fe fc9e 	bl	8001f04 <HAL_GetTick>
 80035c8:	4602      	mov	r2, r0
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	1ad3      	subs	r3, r2, r3
 80035ce:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80035d2:	d901      	bls.n	80035d8 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80035d4:	2303      	movs	r3, #3
 80035d6:	e01f      	b.n	8003618 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80035d8:	4b13      	ldr	r3, [pc, #76]	@ (8003628 <HAL_PWREx_EnableOverDrive+0x98>)
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035e4:	d1ee      	bne.n	80035c4 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80035e6:	4b11      	ldr	r3, [pc, #68]	@ (800362c <HAL_PWREx_EnableOverDrive+0x9c>)
 80035e8:	2201      	movs	r2, #1
 80035ea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80035ec:	f7fe fc8a 	bl	8001f04 <HAL_GetTick>
 80035f0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80035f2:	e009      	b.n	8003608 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80035f4:	f7fe fc86 	bl	8001f04 <HAL_GetTick>
 80035f8:	4602      	mov	r2, r0
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	1ad3      	subs	r3, r2, r3
 80035fe:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003602:	d901      	bls.n	8003608 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003604:	2303      	movs	r3, #3
 8003606:	e007      	b.n	8003618 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003608:	4b07      	ldr	r3, [pc, #28]	@ (8003628 <HAL_PWREx_EnableOverDrive+0x98>)
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003610:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003614:	d1ee      	bne.n	80035f4 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8003616:	2300      	movs	r3, #0
}
 8003618:	4618      	mov	r0, r3
 800361a:	3708      	adds	r7, #8
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}
 8003620:	40023800 	.word	0x40023800
 8003624:	420e0040 	.word	0x420e0040
 8003628:	40007000 	.word	0x40007000
 800362c:	420e0044 	.word	0x420e0044

08003630 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b084      	sub	sp, #16
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
 8003638:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d101      	bne.n	8003644 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	e0cc      	b.n	80037de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003644:	4b68      	ldr	r3, [pc, #416]	@ (80037e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f003 030f 	and.w	r3, r3, #15
 800364c:	683a      	ldr	r2, [r7, #0]
 800364e:	429a      	cmp	r2, r3
 8003650:	d90c      	bls.n	800366c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003652:	4b65      	ldr	r3, [pc, #404]	@ (80037e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003654:	683a      	ldr	r2, [r7, #0]
 8003656:	b2d2      	uxtb	r2, r2
 8003658:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800365a:	4b63      	ldr	r3, [pc, #396]	@ (80037e8 <HAL_RCC_ClockConfig+0x1b8>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f003 030f 	and.w	r3, r3, #15
 8003662:	683a      	ldr	r2, [r7, #0]
 8003664:	429a      	cmp	r2, r3
 8003666:	d001      	beq.n	800366c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	e0b8      	b.n	80037de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f003 0302 	and.w	r3, r3, #2
 8003674:	2b00      	cmp	r3, #0
 8003676:	d020      	beq.n	80036ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 0304 	and.w	r3, r3, #4
 8003680:	2b00      	cmp	r3, #0
 8003682:	d005      	beq.n	8003690 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003684:	4b59      	ldr	r3, [pc, #356]	@ (80037ec <HAL_RCC_ClockConfig+0x1bc>)
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	4a58      	ldr	r2, [pc, #352]	@ (80037ec <HAL_RCC_ClockConfig+0x1bc>)
 800368a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800368e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f003 0308 	and.w	r3, r3, #8
 8003698:	2b00      	cmp	r3, #0
 800369a:	d005      	beq.n	80036a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800369c:	4b53      	ldr	r3, [pc, #332]	@ (80037ec <HAL_RCC_ClockConfig+0x1bc>)
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	4a52      	ldr	r2, [pc, #328]	@ (80037ec <HAL_RCC_ClockConfig+0x1bc>)
 80036a2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80036a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036a8:	4b50      	ldr	r3, [pc, #320]	@ (80037ec <HAL_RCC_ClockConfig+0x1bc>)
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	494d      	ldr	r1, [pc, #308]	@ (80037ec <HAL_RCC_ClockConfig+0x1bc>)
 80036b6:	4313      	orrs	r3, r2
 80036b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 0301 	and.w	r3, r3, #1
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d044      	beq.n	8003750 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d107      	bne.n	80036de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036ce:	4b47      	ldr	r3, [pc, #284]	@ (80037ec <HAL_RCC_ClockConfig+0x1bc>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d119      	bne.n	800370e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	e07f      	b.n	80037de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	2b02      	cmp	r3, #2
 80036e4:	d003      	beq.n	80036ee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036ea:	2b03      	cmp	r3, #3
 80036ec:	d107      	bne.n	80036fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036ee:	4b3f      	ldr	r3, [pc, #252]	@ (80037ec <HAL_RCC_ClockConfig+0x1bc>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d109      	bne.n	800370e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	e06f      	b.n	80037de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036fe:	4b3b      	ldr	r3, [pc, #236]	@ (80037ec <HAL_RCC_ClockConfig+0x1bc>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 0302 	and.w	r3, r3, #2
 8003706:	2b00      	cmp	r3, #0
 8003708:	d101      	bne.n	800370e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	e067      	b.n	80037de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800370e:	4b37      	ldr	r3, [pc, #220]	@ (80037ec <HAL_RCC_ClockConfig+0x1bc>)
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	f023 0203 	bic.w	r2, r3, #3
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	4934      	ldr	r1, [pc, #208]	@ (80037ec <HAL_RCC_ClockConfig+0x1bc>)
 800371c:	4313      	orrs	r3, r2
 800371e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003720:	f7fe fbf0 	bl	8001f04 <HAL_GetTick>
 8003724:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003726:	e00a      	b.n	800373e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003728:	f7fe fbec 	bl	8001f04 <HAL_GetTick>
 800372c:	4602      	mov	r2, r0
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	1ad3      	subs	r3, r2, r3
 8003732:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003736:	4293      	cmp	r3, r2
 8003738:	d901      	bls.n	800373e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800373a:	2303      	movs	r3, #3
 800373c:	e04f      	b.n	80037de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800373e:	4b2b      	ldr	r3, [pc, #172]	@ (80037ec <HAL_RCC_ClockConfig+0x1bc>)
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	f003 020c 	and.w	r2, r3, #12
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	009b      	lsls	r3, r3, #2
 800374c:	429a      	cmp	r2, r3
 800374e:	d1eb      	bne.n	8003728 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003750:	4b25      	ldr	r3, [pc, #148]	@ (80037e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f003 030f 	and.w	r3, r3, #15
 8003758:	683a      	ldr	r2, [r7, #0]
 800375a:	429a      	cmp	r2, r3
 800375c:	d20c      	bcs.n	8003778 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800375e:	4b22      	ldr	r3, [pc, #136]	@ (80037e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003760:	683a      	ldr	r2, [r7, #0]
 8003762:	b2d2      	uxtb	r2, r2
 8003764:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003766:	4b20      	ldr	r3, [pc, #128]	@ (80037e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f003 030f 	and.w	r3, r3, #15
 800376e:	683a      	ldr	r2, [r7, #0]
 8003770:	429a      	cmp	r2, r3
 8003772:	d001      	beq.n	8003778 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	e032      	b.n	80037de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 0304 	and.w	r3, r3, #4
 8003780:	2b00      	cmp	r3, #0
 8003782:	d008      	beq.n	8003796 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003784:	4b19      	ldr	r3, [pc, #100]	@ (80037ec <HAL_RCC_ClockConfig+0x1bc>)
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	68db      	ldr	r3, [r3, #12]
 8003790:	4916      	ldr	r1, [pc, #88]	@ (80037ec <HAL_RCC_ClockConfig+0x1bc>)
 8003792:	4313      	orrs	r3, r2
 8003794:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f003 0308 	and.w	r3, r3, #8
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d009      	beq.n	80037b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80037a2:	4b12      	ldr	r3, [pc, #72]	@ (80037ec <HAL_RCC_ClockConfig+0x1bc>)
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	691b      	ldr	r3, [r3, #16]
 80037ae:	00db      	lsls	r3, r3, #3
 80037b0:	490e      	ldr	r1, [pc, #56]	@ (80037ec <HAL_RCC_ClockConfig+0x1bc>)
 80037b2:	4313      	orrs	r3, r2
 80037b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80037b6:	f000 f855 	bl	8003864 <HAL_RCC_GetSysClockFreq>
 80037ba:	4602      	mov	r2, r0
 80037bc:	4b0b      	ldr	r3, [pc, #44]	@ (80037ec <HAL_RCC_ClockConfig+0x1bc>)
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	091b      	lsrs	r3, r3, #4
 80037c2:	f003 030f 	and.w	r3, r3, #15
 80037c6:	490a      	ldr	r1, [pc, #40]	@ (80037f0 <HAL_RCC_ClockConfig+0x1c0>)
 80037c8:	5ccb      	ldrb	r3, [r1, r3]
 80037ca:	fa22 f303 	lsr.w	r3, r2, r3
 80037ce:	4a09      	ldr	r2, [pc, #36]	@ (80037f4 <HAL_RCC_ClockConfig+0x1c4>)
 80037d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80037d2:	4b09      	ldr	r3, [pc, #36]	@ (80037f8 <HAL_RCC_ClockConfig+0x1c8>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4618      	mov	r0, r3
 80037d8:	f7fe fb50 	bl	8001e7c <HAL_InitTick>

  return HAL_OK;
 80037dc:	2300      	movs	r3, #0
}
 80037de:	4618      	mov	r0, r3
 80037e0:	3710      	adds	r7, #16
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}
 80037e6:	bf00      	nop
 80037e8:	40023c00 	.word	0x40023c00
 80037ec:	40023800 	.word	0x40023800
 80037f0:	08007788 	.word	0x08007788
 80037f4:	2000000c 	.word	0x2000000c
 80037f8:	20000010 	.word	0x20000010

080037fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037fc:	b480      	push	{r7}
 80037fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003800:	4b03      	ldr	r3, [pc, #12]	@ (8003810 <HAL_RCC_GetHCLKFreq+0x14>)
 8003802:	681b      	ldr	r3, [r3, #0]
}
 8003804:	4618      	mov	r0, r3
 8003806:	46bd      	mov	sp, r7
 8003808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380c:	4770      	bx	lr
 800380e:	bf00      	nop
 8003810:	2000000c 	.word	0x2000000c

08003814 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003818:	f7ff fff0 	bl	80037fc <HAL_RCC_GetHCLKFreq>
 800381c:	4602      	mov	r2, r0
 800381e:	4b05      	ldr	r3, [pc, #20]	@ (8003834 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	0a9b      	lsrs	r3, r3, #10
 8003824:	f003 0307 	and.w	r3, r3, #7
 8003828:	4903      	ldr	r1, [pc, #12]	@ (8003838 <HAL_RCC_GetPCLK1Freq+0x24>)
 800382a:	5ccb      	ldrb	r3, [r1, r3]
 800382c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003830:	4618      	mov	r0, r3
 8003832:	bd80      	pop	{r7, pc}
 8003834:	40023800 	.word	0x40023800
 8003838:	08007798 	.word	0x08007798

0800383c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003840:	f7ff ffdc 	bl	80037fc <HAL_RCC_GetHCLKFreq>
 8003844:	4602      	mov	r2, r0
 8003846:	4b05      	ldr	r3, [pc, #20]	@ (800385c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003848:	689b      	ldr	r3, [r3, #8]
 800384a:	0b5b      	lsrs	r3, r3, #13
 800384c:	f003 0307 	and.w	r3, r3, #7
 8003850:	4903      	ldr	r1, [pc, #12]	@ (8003860 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003852:	5ccb      	ldrb	r3, [r1, r3]
 8003854:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003858:	4618      	mov	r0, r3
 800385a:	bd80      	pop	{r7, pc}
 800385c:	40023800 	.word	0x40023800
 8003860:	08007798 	.word	0x08007798

08003864 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003864:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003868:	b0ae      	sub	sp, #184	@ 0xb8
 800386a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800386c:	2300      	movs	r3, #0
 800386e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8003872:	2300      	movs	r3, #0
 8003874:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8003878:	2300      	movs	r3, #0
 800387a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800387e:	2300      	movs	r3, #0
 8003880:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8003884:	2300      	movs	r3, #0
 8003886:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800388a:	4bcb      	ldr	r3, [pc, #812]	@ (8003bb8 <HAL_RCC_GetSysClockFreq+0x354>)
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	f003 030c 	and.w	r3, r3, #12
 8003892:	2b0c      	cmp	r3, #12
 8003894:	f200 8204 	bhi.w	8003ca0 <HAL_RCC_GetSysClockFreq+0x43c>
 8003898:	a201      	add	r2, pc, #4	@ (adr r2, 80038a0 <HAL_RCC_GetSysClockFreq+0x3c>)
 800389a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800389e:	bf00      	nop
 80038a0:	080038d5 	.word	0x080038d5
 80038a4:	08003ca1 	.word	0x08003ca1
 80038a8:	08003ca1 	.word	0x08003ca1
 80038ac:	08003ca1 	.word	0x08003ca1
 80038b0:	080038dd 	.word	0x080038dd
 80038b4:	08003ca1 	.word	0x08003ca1
 80038b8:	08003ca1 	.word	0x08003ca1
 80038bc:	08003ca1 	.word	0x08003ca1
 80038c0:	080038e5 	.word	0x080038e5
 80038c4:	08003ca1 	.word	0x08003ca1
 80038c8:	08003ca1 	.word	0x08003ca1
 80038cc:	08003ca1 	.word	0x08003ca1
 80038d0:	08003ad5 	.word	0x08003ad5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80038d4:	4bb9      	ldr	r3, [pc, #740]	@ (8003bbc <HAL_RCC_GetSysClockFreq+0x358>)
 80038d6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 80038da:	e1e5      	b.n	8003ca8 <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80038dc:	4bb7      	ldr	r3, [pc, #732]	@ (8003bbc <HAL_RCC_GetSysClockFreq+0x358>)
 80038de:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80038e2:	e1e1      	b.n	8003ca8 <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80038e4:	4bb4      	ldr	r3, [pc, #720]	@ (8003bb8 <HAL_RCC_GetSysClockFreq+0x354>)
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80038ec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80038f0:	4bb1      	ldr	r3, [pc, #708]	@ (8003bb8 <HAL_RCC_GetSysClockFreq+0x354>)
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d071      	beq.n	80039e0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038fc:	4bae      	ldr	r3, [pc, #696]	@ (8003bb8 <HAL_RCC_GetSysClockFreq+0x354>)
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	099b      	lsrs	r3, r3, #6
 8003902:	2200      	movs	r2, #0
 8003904:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003908:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800390c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003910:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003914:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003918:	2300      	movs	r3, #0
 800391a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800391e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003922:	4622      	mov	r2, r4
 8003924:	462b      	mov	r3, r5
 8003926:	f04f 0000 	mov.w	r0, #0
 800392a:	f04f 0100 	mov.w	r1, #0
 800392e:	0159      	lsls	r1, r3, #5
 8003930:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003934:	0150      	lsls	r0, r2, #5
 8003936:	4602      	mov	r2, r0
 8003938:	460b      	mov	r3, r1
 800393a:	4621      	mov	r1, r4
 800393c:	1a51      	subs	r1, r2, r1
 800393e:	6439      	str	r1, [r7, #64]	@ 0x40
 8003940:	4629      	mov	r1, r5
 8003942:	eb63 0301 	sbc.w	r3, r3, r1
 8003946:	647b      	str	r3, [r7, #68]	@ 0x44
 8003948:	f04f 0200 	mov.w	r2, #0
 800394c:	f04f 0300 	mov.w	r3, #0
 8003950:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8003954:	4649      	mov	r1, r9
 8003956:	018b      	lsls	r3, r1, #6
 8003958:	4641      	mov	r1, r8
 800395a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800395e:	4641      	mov	r1, r8
 8003960:	018a      	lsls	r2, r1, #6
 8003962:	4641      	mov	r1, r8
 8003964:	1a51      	subs	r1, r2, r1
 8003966:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003968:	4649      	mov	r1, r9
 800396a:	eb63 0301 	sbc.w	r3, r3, r1
 800396e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003970:	f04f 0200 	mov.w	r2, #0
 8003974:	f04f 0300 	mov.w	r3, #0
 8003978:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 800397c:	4649      	mov	r1, r9
 800397e:	00cb      	lsls	r3, r1, #3
 8003980:	4641      	mov	r1, r8
 8003982:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003986:	4641      	mov	r1, r8
 8003988:	00ca      	lsls	r2, r1, #3
 800398a:	4610      	mov	r0, r2
 800398c:	4619      	mov	r1, r3
 800398e:	4603      	mov	r3, r0
 8003990:	4622      	mov	r2, r4
 8003992:	189b      	adds	r3, r3, r2
 8003994:	633b      	str	r3, [r7, #48]	@ 0x30
 8003996:	462b      	mov	r3, r5
 8003998:	460a      	mov	r2, r1
 800399a:	eb42 0303 	adc.w	r3, r2, r3
 800399e:	637b      	str	r3, [r7, #52]	@ 0x34
 80039a0:	f04f 0200 	mov.w	r2, #0
 80039a4:	f04f 0300 	mov.w	r3, #0
 80039a8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80039ac:	4629      	mov	r1, r5
 80039ae:	028b      	lsls	r3, r1, #10
 80039b0:	4621      	mov	r1, r4
 80039b2:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80039b6:	4621      	mov	r1, r4
 80039b8:	028a      	lsls	r2, r1, #10
 80039ba:	4610      	mov	r0, r2
 80039bc:	4619      	mov	r1, r3
 80039be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80039c2:	2200      	movs	r2, #0
 80039c4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80039c8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80039cc:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80039d0:	f7fd f8fe 	bl	8000bd0 <__aeabi_uldivmod>
 80039d4:	4602      	mov	r2, r0
 80039d6:	460b      	mov	r3, r1
 80039d8:	4613      	mov	r3, r2
 80039da:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80039de:	e067      	b.n	8003ab0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039e0:	4b75      	ldr	r3, [pc, #468]	@ (8003bb8 <HAL_RCC_GetSysClockFreq+0x354>)
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	099b      	lsrs	r3, r3, #6
 80039e6:	2200      	movs	r2, #0
 80039e8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80039ec:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80039f0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80039f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039f8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80039fa:	2300      	movs	r3, #0
 80039fc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80039fe:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8003a02:	4622      	mov	r2, r4
 8003a04:	462b      	mov	r3, r5
 8003a06:	f04f 0000 	mov.w	r0, #0
 8003a0a:	f04f 0100 	mov.w	r1, #0
 8003a0e:	0159      	lsls	r1, r3, #5
 8003a10:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a14:	0150      	lsls	r0, r2, #5
 8003a16:	4602      	mov	r2, r0
 8003a18:	460b      	mov	r3, r1
 8003a1a:	4621      	mov	r1, r4
 8003a1c:	1a51      	subs	r1, r2, r1
 8003a1e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003a20:	4629      	mov	r1, r5
 8003a22:	eb63 0301 	sbc.w	r3, r3, r1
 8003a26:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003a28:	f04f 0200 	mov.w	r2, #0
 8003a2c:	f04f 0300 	mov.w	r3, #0
 8003a30:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8003a34:	4649      	mov	r1, r9
 8003a36:	018b      	lsls	r3, r1, #6
 8003a38:	4641      	mov	r1, r8
 8003a3a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003a3e:	4641      	mov	r1, r8
 8003a40:	018a      	lsls	r2, r1, #6
 8003a42:	4641      	mov	r1, r8
 8003a44:	ebb2 0a01 	subs.w	sl, r2, r1
 8003a48:	4649      	mov	r1, r9
 8003a4a:	eb63 0b01 	sbc.w	fp, r3, r1
 8003a4e:	f04f 0200 	mov.w	r2, #0
 8003a52:	f04f 0300 	mov.w	r3, #0
 8003a56:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003a5a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003a5e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a62:	4692      	mov	sl, r2
 8003a64:	469b      	mov	fp, r3
 8003a66:	4623      	mov	r3, r4
 8003a68:	eb1a 0303 	adds.w	r3, sl, r3
 8003a6c:	623b      	str	r3, [r7, #32]
 8003a6e:	462b      	mov	r3, r5
 8003a70:	eb4b 0303 	adc.w	r3, fp, r3
 8003a74:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a76:	f04f 0200 	mov.w	r2, #0
 8003a7a:	f04f 0300 	mov.w	r3, #0
 8003a7e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003a82:	4629      	mov	r1, r5
 8003a84:	028b      	lsls	r3, r1, #10
 8003a86:	4621      	mov	r1, r4
 8003a88:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003a8c:	4621      	mov	r1, r4
 8003a8e:	028a      	lsls	r2, r1, #10
 8003a90:	4610      	mov	r0, r2
 8003a92:	4619      	mov	r1, r3
 8003a94:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003a98:	2200      	movs	r2, #0
 8003a9a:	673b      	str	r3, [r7, #112]	@ 0x70
 8003a9c:	677a      	str	r2, [r7, #116]	@ 0x74
 8003a9e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003aa2:	f7fd f895 	bl	8000bd0 <__aeabi_uldivmod>
 8003aa6:	4602      	mov	r2, r0
 8003aa8:	460b      	mov	r3, r1
 8003aaa:	4613      	mov	r3, r2
 8003aac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003ab0:	4b41      	ldr	r3, [pc, #260]	@ (8003bb8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	0c1b      	lsrs	r3, r3, #16
 8003ab6:	f003 0303 	and.w	r3, r3, #3
 8003aba:	3301      	adds	r3, #1
 8003abc:	005b      	lsls	r3, r3, #1
 8003abe:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 8003ac2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003ac6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003aca:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ace:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003ad2:	e0e9      	b.n	8003ca8 <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ad4:	4b38      	ldr	r3, [pc, #224]	@ (8003bb8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003adc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003ae0:	4b35      	ldr	r3, [pc, #212]	@ (8003bb8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d069      	beq.n	8003bc0 <HAL_RCC_GetSysClockFreq+0x35c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003aec:	4b32      	ldr	r3, [pc, #200]	@ (8003bb8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	099b      	lsrs	r3, r3, #6
 8003af2:	2200      	movs	r2, #0
 8003af4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003af6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003af8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003afa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003afe:	663b      	str	r3, [r7, #96]	@ 0x60
 8003b00:	2300      	movs	r3, #0
 8003b02:	667b      	str	r3, [r7, #100]	@ 0x64
 8003b04:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003b08:	4622      	mov	r2, r4
 8003b0a:	462b      	mov	r3, r5
 8003b0c:	f04f 0000 	mov.w	r0, #0
 8003b10:	f04f 0100 	mov.w	r1, #0
 8003b14:	0159      	lsls	r1, r3, #5
 8003b16:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b1a:	0150      	lsls	r0, r2, #5
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	460b      	mov	r3, r1
 8003b20:	4621      	mov	r1, r4
 8003b22:	1a51      	subs	r1, r2, r1
 8003b24:	61b9      	str	r1, [r7, #24]
 8003b26:	4629      	mov	r1, r5
 8003b28:	eb63 0301 	sbc.w	r3, r3, r1
 8003b2c:	61fb      	str	r3, [r7, #28]
 8003b2e:	f04f 0200 	mov.w	r2, #0
 8003b32:	f04f 0300 	mov.w	r3, #0
 8003b36:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003b3a:	4659      	mov	r1, fp
 8003b3c:	018b      	lsls	r3, r1, #6
 8003b3e:	4651      	mov	r1, sl
 8003b40:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003b44:	4651      	mov	r1, sl
 8003b46:	018a      	lsls	r2, r1, #6
 8003b48:	4651      	mov	r1, sl
 8003b4a:	ebb2 0801 	subs.w	r8, r2, r1
 8003b4e:	4659      	mov	r1, fp
 8003b50:	eb63 0901 	sbc.w	r9, r3, r1
 8003b54:	f04f 0200 	mov.w	r2, #0
 8003b58:	f04f 0300 	mov.w	r3, #0
 8003b5c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003b60:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003b64:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003b68:	4690      	mov	r8, r2
 8003b6a:	4699      	mov	r9, r3
 8003b6c:	4623      	mov	r3, r4
 8003b6e:	eb18 0303 	adds.w	r3, r8, r3
 8003b72:	613b      	str	r3, [r7, #16]
 8003b74:	462b      	mov	r3, r5
 8003b76:	eb49 0303 	adc.w	r3, r9, r3
 8003b7a:	617b      	str	r3, [r7, #20]
 8003b7c:	f04f 0200 	mov.w	r2, #0
 8003b80:	f04f 0300 	mov.w	r3, #0
 8003b84:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003b88:	4629      	mov	r1, r5
 8003b8a:	028b      	lsls	r3, r1, #10
 8003b8c:	4621      	mov	r1, r4
 8003b8e:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003b92:	4621      	mov	r1, r4
 8003b94:	028a      	lsls	r2, r1, #10
 8003b96:	4610      	mov	r0, r2
 8003b98:	4619      	mov	r1, r3
 8003b9a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003ba2:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003ba4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003ba8:	f7fd f812 	bl	8000bd0 <__aeabi_uldivmod>
 8003bac:	4602      	mov	r2, r0
 8003bae:	460b      	mov	r3, r1
 8003bb0:	4613      	mov	r3, r2
 8003bb2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003bb6:	e063      	b.n	8003c80 <HAL_RCC_GetSysClockFreq+0x41c>
 8003bb8:	40023800 	.word	0x40023800
 8003bbc:	00f42400 	.word	0x00f42400
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bc0:	4b3d      	ldr	r3, [pc, #244]	@ (8003cb8 <HAL_RCC_GetSysClockFreq+0x454>)
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	099b      	lsrs	r3, r3, #6
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	4618      	mov	r0, r3
 8003bca:	4611      	mov	r1, r2
 8003bcc:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003bd0:	653b      	str	r3, [r7, #80]	@ 0x50
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	657b      	str	r3, [r7, #84]	@ 0x54
 8003bd6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8003bda:	4642      	mov	r2, r8
 8003bdc:	464b      	mov	r3, r9
 8003bde:	f04f 0000 	mov.w	r0, #0
 8003be2:	f04f 0100 	mov.w	r1, #0
 8003be6:	0159      	lsls	r1, r3, #5
 8003be8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003bec:	0150      	lsls	r0, r2, #5
 8003bee:	4602      	mov	r2, r0
 8003bf0:	460b      	mov	r3, r1
 8003bf2:	4641      	mov	r1, r8
 8003bf4:	1a51      	subs	r1, r2, r1
 8003bf6:	60b9      	str	r1, [r7, #8]
 8003bf8:	4649      	mov	r1, r9
 8003bfa:	eb63 0301 	sbc.w	r3, r3, r1
 8003bfe:	60fb      	str	r3, [r7, #12]
 8003c00:	f04f 0200 	mov.w	r2, #0
 8003c04:	f04f 0300 	mov.w	r3, #0
 8003c08:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003c0c:	4659      	mov	r1, fp
 8003c0e:	018b      	lsls	r3, r1, #6
 8003c10:	4651      	mov	r1, sl
 8003c12:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003c16:	4651      	mov	r1, sl
 8003c18:	018a      	lsls	r2, r1, #6
 8003c1a:	4651      	mov	r1, sl
 8003c1c:	1a54      	subs	r4, r2, r1
 8003c1e:	4659      	mov	r1, fp
 8003c20:	eb63 0501 	sbc.w	r5, r3, r1
 8003c24:	f04f 0200 	mov.w	r2, #0
 8003c28:	f04f 0300 	mov.w	r3, #0
 8003c2c:	00eb      	lsls	r3, r5, #3
 8003c2e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c32:	00e2      	lsls	r2, r4, #3
 8003c34:	4614      	mov	r4, r2
 8003c36:	461d      	mov	r5, r3
 8003c38:	4643      	mov	r3, r8
 8003c3a:	18e3      	adds	r3, r4, r3
 8003c3c:	603b      	str	r3, [r7, #0]
 8003c3e:	464b      	mov	r3, r9
 8003c40:	eb45 0303 	adc.w	r3, r5, r3
 8003c44:	607b      	str	r3, [r7, #4]
 8003c46:	f04f 0200 	mov.w	r2, #0
 8003c4a:	f04f 0300 	mov.w	r3, #0
 8003c4e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003c52:	4629      	mov	r1, r5
 8003c54:	028b      	lsls	r3, r1, #10
 8003c56:	4621      	mov	r1, r4
 8003c58:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003c5c:	4621      	mov	r1, r4
 8003c5e:	028a      	lsls	r2, r1, #10
 8003c60:	4610      	mov	r0, r2
 8003c62:	4619      	mov	r1, r3
 8003c64:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003c68:	2200      	movs	r2, #0
 8003c6a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003c6c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003c6e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003c72:	f7fc ffad 	bl	8000bd0 <__aeabi_uldivmod>
 8003c76:	4602      	mov	r2, r0
 8003c78:	460b      	mov	r3, r1
 8003c7a:	4613      	mov	r3, r2
 8003c7c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003c80:	4b0d      	ldr	r3, [pc, #52]	@ (8003cb8 <HAL_RCC_GetSysClockFreq+0x454>)
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	0f1b      	lsrs	r3, r3, #28
 8003c86:	f003 0307 	and.w	r3, r3, #7
 8003c8a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 8003c8e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003c92:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003c96:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c9a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003c9e:	e003      	b.n	8003ca8 <HAL_RCC_GetSysClockFreq+0x444>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ca0:	4b06      	ldr	r3, [pc, #24]	@ (8003cbc <HAL_RCC_GetSysClockFreq+0x458>)
 8003ca2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003ca6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ca8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	37b8      	adds	r7, #184	@ 0xb8
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003cb6:	bf00      	nop
 8003cb8:	40023800 	.word	0x40023800
 8003cbc:	00f42400 	.word	0x00f42400

08003cc0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b086      	sub	sp, #24
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d101      	bne.n	8003cd2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e28d      	b.n	80041ee <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f003 0301 	and.w	r3, r3, #1
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	f000 8083 	beq.w	8003de6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003ce0:	4b94      	ldr	r3, [pc, #592]	@ (8003f34 <HAL_RCC_OscConfig+0x274>)
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	f003 030c 	and.w	r3, r3, #12
 8003ce8:	2b04      	cmp	r3, #4
 8003cea:	d019      	beq.n	8003d20 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003cec:	4b91      	ldr	r3, [pc, #580]	@ (8003f34 <HAL_RCC_OscConfig+0x274>)
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003cf4:	2b08      	cmp	r3, #8
 8003cf6:	d106      	bne.n	8003d06 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003cf8:	4b8e      	ldr	r3, [pc, #568]	@ (8003f34 <HAL_RCC_OscConfig+0x274>)
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d00:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003d04:	d00c      	beq.n	8003d20 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d06:	4b8b      	ldr	r3, [pc, #556]	@ (8003f34 <HAL_RCC_OscConfig+0x274>)
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003d0e:	2b0c      	cmp	r3, #12
 8003d10:	d112      	bne.n	8003d38 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d12:	4b88      	ldr	r3, [pc, #544]	@ (8003f34 <HAL_RCC_OscConfig+0x274>)
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d1a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003d1e:	d10b      	bne.n	8003d38 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d20:	4b84      	ldr	r3, [pc, #528]	@ (8003f34 <HAL_RCC_OscConfig+0x274>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d05b      	beq.n	8003de4 <HAL_RCC_OscConfig+0x124>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d157      	bne.n	8003de4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	e25a      	b.n	80041ee <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d40:	d106      	bne.n	8003d50 <HAL_RCC_OscConfig+0x90>
 8003d42:	4b7c      	ldr	r3, [pc, #496]	@ (8003f34 <HAL_RCC_OscConfig+0x274>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a7b      	ldr	r2, [pc, #492]	@ (8003f34 <HAL_RCC_OscConfig+0x274>)
 8003d48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d4c:	6013      	str	r3, [r2, #0]
 8003d4e:	e01d      	b.n	8003d8c <HAL_RCC_OscConfig+0xcc>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003d58:	d10c      	bne.n	8003d74 <HAL_RCC_OscConfig+0xb4>
 8003d5a:	4b76      	ldr	r3, [pc, #472]	@ (8003f34 <HAL_RCC_OscConfig+0x274>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a75      	ldr	r2, [pc, #468]	@ (8003f34 <HAL_RCC_OscConfig+0x274>)
 8003d60:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003d64:	6013      	str	r3, [r2, #0]
 8003d66:	4b73      	ldr	r3, [pc, #460]	@ (8003f34 <HAL_RCC_OscConfig+0x274>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a72      	ldr	r2, [pc, #456]	@ (8003f34 <HAL_RCC_OscConfig+0x274>)
 8003d6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d70:	6013      	str	r3, [r2, #0]
 8003d72:	e00b      	b.n	8003d8c <HAL_RCC_OscConfig+0xcc>
 8003d74:	4b6f      	ldr	r3, [pc, #444]	@ (8003f34 <HAL_RCC_OscConfig+0x274>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a6e      	ldr	r2, [pc, #440]	@ (8003f34 <HAL_RCC_OscConfig+0x274>)
 8003d7a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d7e:	6013      	str	r3, [r2, #0]
 8003d80:	4b6c      	ldr	r3, [pc, #432]	@ (8003f34 <HAL_RCC_OscConfig+0x274>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a6b      	ldr	r2, [pc, #428]	@ (8003f34 <HAL_RCC_OscConfig+0x274>)
 8003d86:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003d8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d013      	beq.n	8003dbc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d94:	f7fe f8b6 	bl	8001f04 <HAL_GetTick>
 8003d98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d9a:	e008      	b.n	8003dae <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d9c:	f7fe f8b2 	bl	8001f04 <HAL_GetTick>
 8003da0:	4602      	mov	r2, r0
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	1ad3      	subs	r3, r2, r3
 8003da6:	2b64      	cmp	r3, #100	@ 0x64
 8003da8:	d901      	bls.n	8003dae <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003daa:	2303      	movs	r3, #3
 8003dac:	e21f      	b.n	80041ee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dae:	4b61      	ldr	r3, [pc, #388]	@ (8003f34 <HAL_RCC_OscConfig+0x274>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d0f0      	beq.n	8003d9c <HAL_RCC_OscConfig+0xdc>
 8003dba:	e014      	b.n	8003de6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dbc:	f7fe f8a2 	bl	8001f04 <HAL_GetTick>
 8003dc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dc2:	e008      	b.n	8003dd6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003dc4:	f7fe f89e 	bl	8001f04 <HAL_GetTick>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	1ad3      	subs	r3, r2, r3
 8003dce:	2b64      	cmp	r3, #100	@ 0x64
 8003dd0:	d901      	bls.n	8003dd6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003dd2:	2303      	movs	r3, #3
 8003dd4:	e20b      	b.n	80041ee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dd6:	4b57      	ldr	r3, [pc, #348]	@ (8003f34 <HAL_RCC_OscConfig+0x274>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d1f0      	bne.n	8003dc4 <HAL_RCC_OscConfig+0x104>
 8003de2:	e000      	b.n	8003de6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003de4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f003 0302 	and.w	r3, r3, #2
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d06f      	beq.n	8003ed2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003df2:	4b50      	ldr	r3, [pc, #320]	@ (8003f34 <HAL_RCC_OscConfig+0x274>)
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	f003 030c 	and.w	r3, r3, #12
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d017      	beq.n	8003e2e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003dfe:	4b4d      	ldr	r3, [pc, #308]	@ (8003f34 <HAL_RCC_OscConfig+0x274>)
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003e06:	2b08      	cmp	r3, #8
 8003e08:	d105      	bne.n	8003e16 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003e0a:	4b4a      	ldr	r3, [pc, #296]	@ (8003f34 <HAL_RCC_OscConfig+0x274>)
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d00b      	beq.n	8003e2e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e16:	4b47      	ldr	r3, [pc, #284]	@ (8003f34 <HAL_RCC_OscConfig+0x274>)
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003e1e:	2b0c      	cmp	r3, #12
 8003e20:	d11c      	bne.n	8003e5c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e22:	4b44      	ldr	r3, [pc, #272]	@ (8003f34 <HAL_RCC_OscConfig+0x274>)
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d116      	bne.n	8003e5c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e2e:	4b41      	ldr	r3, [pc, #260]	@ (8003f34 <HAL_RCC_OscConfig+0x274>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f003 0302 	and.w	r3, r3, #2
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d005      	beq.n	8003e46 <HAL_RCC_OscConfig+0x186>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	68db      	ldr	r3, [r3, #12]
 8003e3e:	2b01      	cmp	r3, #1
 8003e40:	d001      	beq.n	8003e46 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	e1d3      	b.n	80041ee <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e46:	4b3b      	ldr	r3, [pc, #236]	@ (8003f34 <HAL_RCC_OscConfig+0x274>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	691b      	ldr	r3, [r3, #16]
 8003e52:	00db      	lsls	r3, r3, #3
 8003e54:	4937      	ldr	r1, [pc, #220]	@ (8003f34 <HAL_RCC_OscConfig+0x274>)
 8003e56:	4313      	orrs	r3, r2
 8003e58:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e5a:	e03a      	b.n	8003ed2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	68db      	ldr	r3, [r3, #12]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d020      	beq.n	8003ea6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e64:	4b34      	ldr	r3, [pc, #208]	@ (8003f38 <HAL_RCC_OscConfig+0x278>)
 8003e66:	2201      	movs	r2, #1
 8003e68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e6a:	f7fe f84b 	bl	8001f04 <HAL_GetTick>
 8003e6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e70:	e008      	b.n	8003e84 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e72:	f7fe f847 	bl	8001f04 <HAL_GetTick>
 8003e76:	4602      	mov	r2, r0
 8003e78:	693b      	ldr	r3, [r7, #16]
 8003e7a:	1ad3      	subs	r3, r2, r3
 8003e7c:	2b02      	cmp	r3, #2
 8003e7e:	d901      	bls.n	8003e84 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003e80:	2303      	movs	r3, #3
 8003e82:	e1b4      	b.n	80041ee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e84:	4b2b      	ldr	r3, [pc, #172]	@ (8003f34 <HAL_RCC_OscConfig+0x274>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f003 0302 	and.w	r3, r3, #2
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d0f0      	beq.n	8003e72 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e90:	4b28      	ldr	r3, [pc, #160]	@ (8003f34 <HAL_RCC_OscConfig+0x274>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	691b      	ldr	r3, [r3, #16]
 8003e9c:	00db      	lsls	r3, r3, #3
 8003e9e:	4925      	ldr	r1, [pc, #148]	@ (8003f34 <HAL_RCC_OscConfig+0x274>)
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	600b      	str	r3, [r1, #0]
 8003ea4:	e015      	b.n	8003ed2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ea6:	4b24      	ldr	r3, [pc, #144]	@ (8003f38 <HAL_RCC_OscConfig+0x278>)
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eac:	f7fe f82a 	bl	8001f04 <HAL_GetTick>
 8003eb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003eb2:	e008      	b.n	8003ec6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003eb4:	f7fe f826 	bl	8001f04 <HAL_GetTick>
 8003eb8:	4602      	mov	r2, r0
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	1ad3      	subs	r3, r2, r3
 8003ebe:	2b02      	cmp	r3, #2
 8003ec0:	d901      	bls.n	8003ec6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003ec2:	2303      	movs	r3, #3
 8003ec4:	e193      	b.n	80041ee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ec6:	4b1b      	ldr	r3, [pc, #108]	@ (8003f34 <HAL_RCC_OscConfig+0x274>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f003 0302 	and.w	r3, r3, #2
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d1f0      	bne.n	8003eb4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f003 0308 	and.w	r3, r3, #8
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d036      	beq.n	8003f4c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	695b      	ldr	r3, [r3, #20]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d016      	beq.n	8003f14 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ee6:	4b15      	ldr	r3, [pc, #84]	@ (8003f3c <HAL_RCC_OscConfig+0x27c>)
 8003ee8:	2201      	movs	r2, #1
 8003eea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003eec:	f7fe f80a 	bl	8001f04 <HAL_GetTick>
 8003ef0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ef2:	e008      	b.n	8003f06 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ef4:	f7fe f806 	bl	8001f04 <HAL_GetTick>
 8003ef8:	4602      	mov	r2, r0
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	1ad3      	subs	r3, r2, r3
 8003efe:	2b02      	cmp	r3, #2
 8003f00:	d901      	bls.n	8003f06 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003f02:	2303      	movs	r3, #3
 8003f04:	e173      	b.n	80041ee <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f06:	4b0b      	ldr	r3, [pc, #44]	@ (8003f34 <HAL_RCC_OscConfig+0x274>)
 8003f08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f0a:	f003 0302 	and.w	r3, r3, #2
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d0f0      	beq.n	8003ef4 <HAL_RCC_OscConfig+0x234>
 8003f12:	e01b      	b.n	8003f4c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f14:	4b09      	ldr	r3, [pc, #36]	@ (8003f3c <HAL_RCC_OscConfig+0x27c>)
 8003f16:	2200      	movs	r2, #0
 8003f18:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f1a:	f7fd fff3 	bl	8001f04 <HAL_GetTick>
 8003f1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f20:	e00e      	b.n	8003f40 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f22:	f7fd ffef 	bl	8001f04 <HAL_GetTick>
 8003f26:	4602      	mov	r2, r0
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	1ad3      	subs	r3, r2, r3
 8003f2c:	2b02      	cmp	r3, #2
 8003f2e:	d907      	bls.n	8003f40 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003f30:	2303      	movs	r3, #3
 8003f32:	e15c      	b.n	80041ee <HAL_RCC_OscConfig+0x52e>
 8003f34:	40023800 	.word	0x40023800
 8003f38:	42470000 	.word	0x42470000
 8003f3c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f40:	4b8a      	ldr	r3, [pc, #552]	@ (800416c <HAL_RCC_OscConfig+0x4ac>)
 8003f42:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f44:	f003 0302 	and.w	r3, r3, #2
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d1ea      	bne.n	8003f22 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f003 0304 	and.w	r3, r3, #4
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	f000 8097 	beq.w	8004088 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f5e:	4b83      	ldr	r3, [pc, #524]	@ (800416c <HAL_RCC_OscConfig+0x4ac>)
 8003f60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d10f      	bne.n	8003f8a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	60bb      	str	r3, [r7, #8]
 8003f6e:	4b7f      	ldr	r3, [pc, #508]	@ (800416c <HAL_RCC_OscConfig+0x4ac>)
 8003f70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f72:	4a7e      	ldr	r2, [pc, #504]	@ (800416c <HAL_RCC_OscConfig+0x4ac>)
 8003f74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f78:	6413      	str	r3, [r2, #64]	@ 0x40
 8003f7a:	4b7c      	ldr	r3, [pc, #496]	@ (800416c <HAL_RCC_OscConfig+0x4ac>)
 8003f7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f82:	60bb      	str	r3, [r7, #8]
 8003f84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f86:	2301      	movs	r3, #1
 8003f88:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f8a:	4b79      	ldr	r3, [pc, #484]	@ (8004170 <HAL_RCC_OscConfig+0x4b0>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d118      	bne.n	8003fc8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f96:	4b76      	ldr	r3, [pc, #472]	@ (8004170 <HAL_RCC_OscConfig+0x4b0>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a75      	ldr	r2, [pc, #468]	@ (8004170 <HAL_RCC_OscConfig+0x4b0>)
 8003f9c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003fa0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fa2:	f7fd ffaf 	bl	8001f04 <HAL_GetTick>
 8003fa6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fa8:	e008      	b.n	8003fbc <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003faa:	f7fd ffab 	bl	8001f04 <HAL_GetTick>
 8003fae:	4602      	mov	r2, r0
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	1ad3      	subs	r3, r2, r3
 8003fb4:	2b02      	cmp	r3, #2
 8003fb6:	d901      	bls.n	8003fbc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003fb8:	2303      	movs	r3, #3
 8003fba:	e118      	b.n	80041ee <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fbc:	4b6c      	ldr	r3, [pc, #432]	@ (8004170 <HAL_RCC_OscConfig+0x4b0>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d0f0      	beq.n	8003faa <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	2b01      	cmp	r3, #1
 8003fce:	d106      	bne.n	8003fde <HAL_RCC_OscConfig+0x31e>
 8003fd0:	4b66      	ldr	r3, [pc, #408]	@ (800416c <HAL_RCC_OscConfig+0x4ac>)
 8003fd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fd4:	4a65      	ldr	r2, [pc, #404]	@ (800416c <HAL_RCC_OscConfig+0x4ac>)
 8003fd6:	f043 0301 	orr.w	r3, r3, #1
 8003fda:	6713      	str	r3, [r2, #112]	@ 0x70
 8003fdc:	e01c      	b.n	8004018 <HAL_RCC_OscConfig+0x358>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	2b05      	cmp	r3, #5
 8003fe4:	d10c      	bne.n	8004000 <HAL_RCC_OscConfig+0x340>
 8003fe6:	4b61      	ldr	r3, [pc, #388]	@ (800416c <HAL_RCC_OscConfig+0x4ac>)
 8003fe8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fea:	4a60      	ldr	r2, [pc, #384]	@ (800416c <HAL_RCC_OscConfig+0x4ac>)
 8003fec:	f043 0304 	orr.w	r3, r3, #4
 8003ff0:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ff2:	4b5e      	ldr	r3, [pc, #376]	@ (800416c <HAL_RCC_OscConfig+0x4ac>)
 8003ff4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ff6:	4a5d      	ldr	r2, [pc, #372]	@ (800416c <HAL_RCC_OscConfig+0x4ac>)
 8003ff8:	f043 0301 	orr.w	r3, r3, #1
 8003ffc:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ffe:	e00b      	b.n	8004018 <HAL_RCC_OscConfig+0x358>
 8004000:	4b5a      	ldr	r3, [pc, #360]	@ (800416c <HAL_RCC_OscConfig+0x4ac>)
 8004002:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004004:	4a59      	ldr	r2, [pc, #356]	@ (800416c <HAL_RCC_OscConfig+0x4ac>)
 8004006:	f023 0301 	bic.w	r3, r3, #1
 800400a:	6713      	str	r3, [r2, #112]	@ 0x70
 800400c:	4b57      	ldr	r3, [pc, #348]	@ (800416c <HAL_RCC_OscConfig+0x4ac>)
 800400e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004010:	4a56      	ldr	r2, [pc, #344]	@ (800416c <HAL_RCC_OscConfig+0x4ac>)
 8004012:	f023 0304 	bic.w	r3, r3, #4
 8004016:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d015      	beq.n	800404c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004020:	f7fd ff70 	bl	8001f04 <HAL_GetTick>
 8004024:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004026:	e00a      	b.n	800403e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004028:	f7fd ff6c 	bl	8001f04 <HAL_GetTick>
 800402c:	4602      	mov	r2, r0
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	1ad3      	subs	r3, r2, r3
 8004032:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004036:	4293      	cmp	r3, r2
 8004038:	d901      	bls.n	800403e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800403a:	2303      	movs	r3, #3
 800403c:	e0d7      	b.n	80041ee <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800403e:	4b4b      	ldr	r3, [pc, #300]	@ (800416c <HAL_RCC_OscConfig+0x4ac>)
 8004040:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004042:	f003 0302 	and.w	r3, r3, #2
 8004046:	2b00      	cmp	r3, #0
 8004048:	d0ee      	beq.n	8004028 <HAL_RCC_OscConfig+0x368>
 800404a:	e014      	b.n	8004076 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800404c:	f7fd ff5a 	bl	8001f04 <HAL_GetTick>
 8004050:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004052:	e00a      	b.n	800406a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004054:	f7fd ff56 	bl	8001f04 <HAL_GetTick>
 8004058:	4602      	mov	r2, r0
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	1ad3      	subs	r3, r2, r3
 800405e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004062:	4293      	cmp	r3, r2
 8004064:	d901      	bls.n	800406a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004066:	2303      	movs	r3, #3
 8004068:	e0c1      	b.n	80041ee <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800406a:	4b40      	ldr	r3, [pc, #256]	@ (800416c <HAL_RCC_OscConfig+0x4ac>)
 800406c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800406e:	f003 0302 	and.w	r3, r3, #2
 8004072:	2b00      	cmp	r3, #0
 8004074:	d1ee      	bne.n	8004054 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004076:	7dfb      	ldrb	r3, [r7, #23]
 8004078:	2b01      	cmp	r3, #1
 800407a:	d105      	bne.n	8004088 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800407c:	4b3b      	ldr	r3, [pc, #236]	@ (800416c <HAL_RCC_OscConfig+0x4ac>)
 800407e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004080:	4a3a      	ldr	r2, [pc, #232]	@ (800416c <HAL_RCC_OscConfig+0x4ac>)
 8004082:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004086:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	699b      	ldr	r3, [r3, #24]
 800408c:	2b00      	cmp	r3, #0
 800408e:	f000 80ad 	beq.w	80041ec <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004092:	4b36      	ldr	r3, [pc, #216]	@ (800416c <HAL_RCC_OscConfig+0x4ac>)
 8004094:	689b      	ldr	r3, [r3, #8]
 8004096:	f003 030c 	and.w	r3, r3, #12
 800409a:	2b08      	cmp	r3, #8
 800409c:	d060      	beq.n	8004160 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	699b      	ldr	r3, [r3, #24]
 80040a2:	2b02      	cmp	r3, #2
 80040a4:	d145      	bne.n	8004132 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040a6:	4b33      	ldr	r3, [pc, #204]	@ (8004174 <HAL_RCC_OscConfig+0x4b4>)
 80040a8:	2200      	movs	r2, #0
 80040aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040ac:	f7fd ff2a 	bl	8001f04 <HAL_GetTick>
 80040b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040b2:	e008      	b.n	80040c6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040b4:	f7fd ff26 	bl	8001f04 <HAL_GetTick>
 80040b8:	4602      	mov	r2, r0
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	1ad3      	subs	r3, r2, r3
 80040be:	2b02      	cmp	r3, #2
 80040c0:	d901      	bls.n	80040c6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80040c2:	2303      	movs	r3, #3
 80040c4:	e093      	b.n	80041ee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040c6:	4b29      	ldr	r3, [pc, #164]	@ (800416c <HAL_RCC_OscConfig+0x4ac>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d1f0      	bne.n	80040b4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	69da      	ldr	r2, [r3, #28]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6a1b      	ldr	r3, [r3, #32]
 80040da:	431a      	orrs	r2, r3
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040e0:	019b      	lsls	r3, r3, #6
 80040e2:	431a      	orrs	r2, r3
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040e8:	085b      	lsrs	r3, r3, #1
 80040ea:	3b01      	subs	r3, #1
 80040ec:	041b      	lsls	r3, r3, #16
 80040ee:	431a      	orrs	r2, r3
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040f4:	061b      	lsls	r3, r3, #24
 80040f6:	431a      	orrs	r2, r3
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040fc:	071b      	lsls	r3, r3, #28
 80040fe:	491b      	ldr	r1, [pc, #108]	@ (800416c <HAL_RCC_OscConfig+0x4ac>)
 8004100:	4313      	orrs	r3, r2
 8004102:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004104:	4b1b      	ldr	r3, [pc, #108]	@ (8004174 <HAL_RCC_OscConfig+0x4b4>)
 8004106:	2201      	movs	r2, #1
 8004108:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800410a:	f7fd fefb 	bl	8001f04 <HAL_GetTick>
 800410e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004110:	e008      	b.n	8004124 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004112:	f7fd fef7 	bl	8001f04 <HAL_GetTick>
 8004116:	4602      	mov	r2, r0
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	1ad3      	subs	r3, r2, r3
 800411c:	2b02      	cmp	r3, #2
 800411e:	d901      	bls.n	8004124 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004120:	2303      	movs	r3, #3
 8004122:	e064      	b.n	80041ee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004124:	4b11      	ldr	r3, [pc, #68]	@ (800416c <HAL_RCC_OscConfig+0x4ac>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800412c:	2b00      	cmp	r3, #0
 800412e:	d0f0      	beq.n	8004112 <HAL_RCC_OscConfig+0x452>
 8004130:	e05c      	b.n	80041ec <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004132:	4b10      	ldr	r3, [pc, #64]	@ (8004174 <HAL_RCC_OscConfig+0x4b4>)
 8004134:	2200      	movs	r2, #0
 8004136:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004138:	f7fd fee4 	bl	8001f04 <HAL_GetTick>
 800413c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800413e:	e008      	b.n	8004152 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004140:	f7fd fee0 	bl	8001f04 <HAL_GetTick>
 8004144:	4602      	mov	r2, r0
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	1ad3      	subs	r3, r2, r3
 800414a:	2b02      	cmp	r3, #2
 800414c:	d901      	bls.n	8004152 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800414e:	2303      	movs	r3, #3
 8004150:	e04d      	b.n	80041ee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004152:	4b06      	ldr	r3, [pc, #24]	@ (800416c <HAL_RCC_OscConfig+0x4ac>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800415a:	2b00      	cmp	r3, #0
 800415c:	d1f0      	bne.n	8004140 <HAL_RCC_OscConfig+0x480>
 800415e:	e045      	b.n	80041ec <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	699b      	ldr	r3, [r3, #24]
 8004164:	2b01      	cmp	r3, #1
 8004166:	d107      	bne.n	8004178 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004168:	2301      	movs	r3, #1
 800416a:	e040      	b.n	80041ee <HAL_RCC_OscConfig+0x52e>
 800416c:	40023800 	.word	0x40023800
 8004170:	40007000 	.word	0x40007000
 8004174:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004178:	4b1f      	ldr	r3, [pc, #124]	@ (80041f8 <HAL_RCC_OscConfig+0x538>)
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	699b      	ldr	r3, [r3, #24]
 8004182:	2b01      	cmp	r3, #1
 8004184:	d030      	beq.n	80041e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004190:	429a      	cmp	r2, r3
 8004192:	d129      	bne.n	80041e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800419e:	429a      	cmp	r2, r3
 80041a0:	d122      	bne.n	80041e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80041a2:	68fa      	ldr	r2, [r7, #12]
 80041a4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80041a8:	4013      	ands	r3, r2
 80041aa:	687a      	ldr	r2, [r7, #4]
 80041ac:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80041ae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d119      	bne.n	80041e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041be:	085b      	lsrs	r3, r3, #1
 80041c0:	3b01      	subs	r3, #1
 80041c2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80041c4:	429a      	cmp	r2, r3
 80041c6:	d10f      	bne.n	80041e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041d2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80041d4:	429a      	cmp	r2, r3
 80041d6:	d107      	bne.n	80041e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041e2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80041e4:	429a      	cmp	r2, r3
 80041e6:	d001      	beq.n	80041ec <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
 80041ea:	e000      	b.n	80041ee <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80041ec:	2300      	movs	r3, #0
}
 80041ee:	4618      	mov	r0, r3
 80041f0:	3718      	adds	r7, #24
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}
 80041f6:	bf00      	nop
 80041f8:	40023800 	.word	0x40023800

080041fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b082      	sub	sp, #8
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d101      	bne.n	800420e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	e041      	b.n	8004292 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004214:	b2db      	uxtb	r3, r3
 8004216:	2b00      	cmp	r3, #0
 8004218:	d106      	bne.n	8004228 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2200      	movs	r2, #0
 800421e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	f7fd fd24 	bl	8001c70 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2202      	movs	r2, #2
 800422c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681a      	ldr	r2, [r3, #0]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	3304      	adds	r3, #4
 8004238:	4619      	mov	r1, r3
 800423a:	4610      	mov	r0, r2
 800423c:	f000 fa7e 	bl	800473c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2201      	movs	r2, #1
 8004244:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2201      	movs	r2, #1
 800424c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2201      	movs	r2, #1
 8004254:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2201      	movs	r2, #1
 800425c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2201      	movs	r2, #1
 8004264:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2201      	movs	r2, #1
 800426c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2201      	movs	r2, #1
 8004274:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2201      	movs	r2, #1
 800427c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2201      	movs	r2, #1
 8004284:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2201      	movs	r2, #1
 800428c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004290:	2300      	movs	r3, #0
}
 8004292:	4618      	mov	r0, r3
 8004294:	3708      	adds	r7, #8
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}
	...

0800429c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800429c:	b480      	push	{r7}
 800429e:	b085      	sub	sp, #20
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042aa:	b2db      	uxtb	r3, r3
 80042ac:	2b01      	cmp	r3, #1
 80042ae:	d001      	beq.n	80042b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80042b0:	2301      	movs	r3, #1
 80042b2:	e04e      	b.n	8004352 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2202      	movs	r2, #2
 80042b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	68da      	ldr	r2, [r3, #12]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f042 0201 	orr.w	r2, r2, #1
 80042ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a23      	ldr	r2, [pc, #140]	@ (8004360 <HAL_TIM_Base_Start_IT+0xc4>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d022      	beq.n	800431c <HAL_TIM_Base_Start_IT+0x80>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042de:	d01d      	beq.n	800431c <HAL_TIM_Base_Start_IT+0x80>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a1f      	ldr	r2, [pc, #124]	@ (8004364 <HAL_TIM_Base_Start_IT+0xc8>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d018      	beq.n	800431c <HAL_TIM_Base_Start_IT+0x80>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a1e      	ldr	r2, [pc, #120]	@ (8004368 <HAL_TIM_Base_Start_IT+0xcc>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d013      	beq.n	800431c <HAL_TIM_Base_Start_IT+0x80>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a1c      	ldr	r2, [pc, #112]	@ (800436c <HAL_TIM_Base_Start_IT+0xd0>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d00e      	beq.n	800431c <HAL_TIM_Base_Start_IT+0x80>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a1b      	ldr	r2, [pc, #108]	@ (8004370 <HAL_TIM_Base_Start_IT+0xd4>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d009      	beq.n	800431c <HAL_TIM_Base_Start_IT+0x80>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a19      	ldr	r2, [pc, #100]	@ (8004374 <HAL_TIM_Base_Start_IT+0xd8>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d004      	beq.n	800431c <HAL_TIM_Base_Start_IT+0x80>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a18      	ldr	r2, [pc, #96]	@ (8004378 <HAL_TIM_Base_Start_IT+0xdc>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d111      	bne.n	8004340 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	689b      	ldr	r3, [r3, #8]
 8004322:	f003 0307 	and.w	r3, r3, #7
 8004326:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	2b06      	cmp	r3, #6
 800432c:	d010      	beq.n	8004350 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	681a      	ldr	r2, [r3, #0]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f042 0201 	orr.w	r2, r2, #1
 800433c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800433e:	e007      	b.n	8004350 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	681a      	ldr	r2, [r3, #0]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f042 0201 	orr.w	r2, r2, #1
 800434e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004350:	2300      	movs	r3, #0
}
 8004352:	4618      	mov	r0, r3
 8004354:	3714      	adds	r7, #20
 8004356:	46bd      	mov	sp, r7
 8004358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435c:	4770      	bx	lr
 800435e:	bf00      	nop
 8004360:	40010000 	.word	0x40010000
 8004364:	40000400 	.word	0x40000400
 8004368:	40000800 	.word	0x40000800
 800436c:	40000c00 	.word	0x40000c00
 8004370:	40010400 	.word	0x40010400
 8004374:	40014000 	.word	0x40014000
 8004378:	40001800 	.word	0x40001800

0800437c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b084      	sub	sp, #16
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	68db      	ldr	r3, [r3, #12]
 800438a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	691b      	ldr	r3, [r3, #16]
 8004392:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	f003 0302 	and.w	r3, r3, #2
 800439a:	2b00      	cmp	r3, #0
 800439c:	d020      	beq.n	80043e0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	f003 0302 	and.w	r3, r3, #2
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d01b      	beq.n	80043e0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f06f 0202 	mvn.w	r2, #2
 80043b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2201      	movs	r2, #1
 80043b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	699b      	ldr	r3, [r3, #24]
 80043be:	f003 0303 	and.w	r3, r3, #3
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d003      	beq.n	80043ce <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f000 f999 	bl	80046fe <HAL_TIM_IC_CaptureCallback>
 80043cc:	e005      	b.n	80043da <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80043ce:	6878      	ldr	r0, [r7, #4]
 80043d0:	f000 f98b 	bl	80046ea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043d4:	6878      	ldr	r0, [r7, #4]
 80043d6:	f000 f99c 	bl	8004712 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2200      	movs	r2, #0
 80043de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	f003 0304 	and.w	r3, r3, #4
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d020      	beq.n	800442c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	f003 0304 	and.w	r3, r3, #4
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d01b      	beq.n	800442c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f06f 0204 	mvn.w	r2, #4
 80043fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2202      	movs	r2, #2
 8004402:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	699b      	ldr	r3, [r3, #24]
 800440a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800440e:	2b00      	cmp	r3, #0
 8004410:	d003      	beq.n	800441a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	f000 f973 	bl	80046fe <HAL_TIM_IC_CaptureCallback>
 8004418:	e005      	b.n	8004426 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	f000 f965 	bl	80046ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004420:	6878      	ldr	r0, [r7, #4]
 8004422:	f000 f976 	bl	8004712 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2200      	movs	r2, #0
 800442a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	f003 0308 	and.w	r3, r3, #8
 8004432:	2b00      	cmp	r3, #0
 8004434:	d020      	beq.n	8004478 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	f003 0308 	and.w	r3, r3, #8
 800443c:	2b00      	cmp	r3, #0
 800443e:	d01b      	beq.n	8004478 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f06f 0208 	mvn.w	r2, #8
 8004448:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2204      	movs	r2, #4
 800444e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	69db      	ldr	r3, [r3, #28]
 8004456:	f003 0303 	and.w	r3, r3, #3
 800445a:	2b00      	cmp	r3, #0
 800445c:	d003      	beq.n	8004466 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	f000 f94d 	bl	80046fe <HAL_TIM_IC_CaptureCallback>
 8004464:	e005      	b.n	8004472 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	f000 f93f 	bl	80046ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800446c:	6878      	ldr	r0, [r7, #4]
 800446e:	f000 f950 	bl	8004712 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2200      	movs	r2, #0
 8004476:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	f003 0310 	and.w	r3, r3, #16
 800447e:	2b00      	cmp	r3, #0
 8004480:	d020      	beq.n	80044c4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	f003 0310 	and.w	r3, r3, #16
 8004488:	2b00      	cmp	r3, #0
 800448a:	d01b      	beq.n	80044c4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f06f 0210 	mvn.w	r2, #16
 8004494:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2208      	movs	r2, #8
 800449a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	69db      	ldr	r3, [r3, #28]
 80044a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d003      	beq.n	80044b2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044aa:	6878      	ldr	r0, [r7, #4]
 80044ac:	f000 f927 	bl	80046fe <HAL_TIM_IC_CaptureCallback>
 80044b0:	e005      	b.n	80044be <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044b2:	6878      	ldr	r0, [r7, #4]
 80044b4:	f000 f919 	bl	80046ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044b8:	6878      	ldr	r0, [r7, #4]
 80044ba:	f000 f92a 	bl	8004712 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2200      	movs	r2, #0
 80044c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	f003 0301 	and.w	r3, r3, #1
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d00c      	beq.n	80044e8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	f003 0301 	and.w	r3, r3, #1
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d007      	beq.n	80044e8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f06f 0201 	mvn.w	r2, #1
 80044e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	f7fc fde2 	bl	80010ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d00c      	beq.n	800450c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d007      	beq.n	800450c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004504:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	f000 fae4 	bl	8004ad4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004512:	2b00      	cmp	r3, #0
 8004514:	d00c      	beq.n	8004530 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800451c:	2b00      	cmp	r3, #0
 800451e:	d007      	beq.n	8004530 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004528:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f000 f8fb 	bl	8004726 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	f003 0320 	and.w	r3, r3, #32
 8004536:	2b00      	cmp	r3, #0
 8004538:	d00c      	beq.n	8004554 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	f003 0320 	and.w	r3, r3, #32
 8004540:	2b00      	cmp	r3, #0
 8004542:	d007      	beq.n	8004554 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f06f 0220 	mvn.w	r2, #32
 800454c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	f000 fab6 	bl	8004ac0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004554:	bf00      	nop
 8004556:	3710      	adds	r7, #16
 8004558:	46bd      	mov	sp, r7
 800455a:	bd80      	pop	{r7, pc}

0800455c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b084      	sub	sp, #16
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
 8004564:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004566:	2300      	movs	r3, #0
 8004568:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004570:	2b01      	cmp	r3, #1
 8004572:	d101      	bne.n	8004578 <HAL_TIM_ConfigClockSource+0x1c>
 8004574:	2302      	movs	r3, #2
 8004576:	e0b4      	b.n	80046e2 <HAL_TIM_ConfigClockSource+0x186>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2201      	movs	r2, #1
 800457c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2202      	movs	r2, #2
 8004584:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	689b      	ldr	r3, [r3, #8]
 800458e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004596:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800459e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	68ba      	ldr	r2, [r7, #8]
 80045a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80045b0:	d03e      	beq.n	8004630 <HAL_TIM_ConfigClockSource+0xd4>
 80045b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80045b6:	f200 8087 	bhi.w	80046c8 <HAL_TIM_ConfigClockSource+0x16c>
 80045ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80045be:	f000 8086 	beq.w	80046ce <HAL_TIM_ConfigClockSource+0x172>
 80045c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80045c6:	d87f      	bhi.n	80046c8 <HAL_TIM_ConfigClockSource+0x16c>
 80045c8:	2b70      	cmp	r3, #112	@ 0x70
 80045ca:	d01a      	beq.n	8004602 <HAL_TIM_ConfigClockSource+0xa6>
 80045cc:	2b70      	cmp	r3, #112	@ 0x70
 80045ce:	d87b      	bhi.n	80046c8 <HAL_TIM_ConfigClockSource+0x16c>
 80045d0:	2b60      	cmp	r3, #96	@ 0x60
 80045d2:	d050      	beq.n	8004676 <HAL_TIM_ConfigClockSource+0x11a>
 80045d4:	2b60      	cmp	r3, #96	@ 0x60
 80045d6:	d877      	bhi.n	80046c8 <HAL_TIM_ConfigClockSource+0x16c>
 80045d8:	2b50      	cmp	r3, #80	@ 0x50
 80045da:	d03c      	beq.n	8004656 <HAL_TIM_ConfigClockSource+0xfa>
 80045dc:	2b50      	cmp	r3, #80	@ 0x50
 80045de:	d873      	bhi.n	80046c8 <HAL_TIM_ConfigClockSource+0x16c>
 80045e0:	2b40      	cmp	r3, #64	@ 0x40
 80045e2:	d058      	beq.n	8004696 <HAL_TIM_ConfigClockSource+0x13a>
 80045e4:	2b40      	cmp	r3, #64	@ 0x40
 80045e6:	d86f      	bhi.n	80046c8 <HAL_TIM_ConfigClockSource+0x16c>
 80045e8:	2b30      	cmp	r3, #48	@ 0x30
 80045ea:	d064      	beq.n	80046b6 <HAL_TIM_ConfigClockSource+0x15a>
 80045ec:	2b30      	cmp	r3, #48	@ 0x30
 80045ee:	d86b      	bhi.n	80046c8 <HAL_TIM_ConfigClockSource+0x16c>
 80045f0:	2b20      	cmp	r3, #32
 80045f2:	d060      	beq.n	80046b6 <HAL_TIM_ConfigClockSource+0x15a>
 80045f4:	2b20      	cmp	r3, #32
 80045f6:	d867      	bhi.n	80046c8 <HAL_TIM_ConfigClockSource+0x16c>
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d05c      	beq.n	80046b6 <HAL_TIM_ConfigClockSource+0x15a>
 80045fc:	2b10      	cmp	r3, #16
 80045fe:	d05a      	beq.n	80046b6 <HAL_TIM_ConfigClockSource+0x15a>
 8004600:	e062      	b.n	80046c8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004612:	f000 f9b9 	bl	8004988 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	689b      	ldr	r3, [r3, #8]
 800461c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004624:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	68ba      	ldr	r2, [r7, #8]
 800462c:	609a      	str	r2, [r3, #8]
      break;
 800462e:	e04f      	b.n	80046d0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004640:	f000 f9a2 	bl	8004988 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	689a      	ldr	r2, [r3, #8]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004652:	609a      	str	r2, [r3, #8]
      break;
 8004654:	e03c      	b.n	80046d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004662:	461a      	mov	r2, r3
 8004664:	f000 f916 	bl	8004894 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	2150      	movs	r1, #80	@ 0x50
 800466e:	4618      	mov	r0, r3
 8004670:	f000 f96f 	bl	8004952 <TIM_ITRx_SetConfig>
      break;
 8004674:	e02c      	b.n	80046d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004682:	461a      	mov	r2, r3
 8004684:	f000 f935 	bl	80048f2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	2160      	movs	r1, #96	@ 0x60
 800468e:	4618      	mov	r0, r3
 8004690:	f000 f95f 	bl	8004952 <TIM_ITRx_SetConfig>
      break;
 8004694:	e01c      	b.n	80046d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80046a2:	461a      	mov	r2, r3
 80046a4:	f000 f8f6 	bl	8004894 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	2140      	movs	r1, #64	@ 0x40
 80046ae:	4618      	mov	r0, r3
 80046b0:	f000 f94f 	bl	8004952 <TIM_ITRx_SetConfig>
      break;
 80046b4:	e00c      	b.n	80046d0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681a      	ldr	r2, [r3, #0]
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4619      	mov	r1, r3
 80046c0:	4610      	mov	r0, r2
 80046c2:	f000 f946 	bl	8004952 <TIM_ITRx_SetConfig>
      break;
 80046c6:	e003      	b.n	80046d0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80046c8:	2301      	movs	r3, #1
 80046ca:	73fb      	strb	r3, [r7, #15]
      break;
 80046cc:	e000      	b.n	80046d0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80046ce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2201      	movs	r2, #1
 80046d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2200      	movs	r2, #0
 80046dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80046e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80046e2:	4618      	mov	r0, r3
 80046e4:	3710      	adds	r7, #16
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}

080046ea <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80046ea:	b480      	push	{r7}
 80046ec:	b083      	sub	sp, #12
 80046ee:	af00      	add	r7, sp, #0
 80046f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80046f2:	bf00      	nop
 80046f4:	370c      	adds	r7, #12
 80046f6:	46bd      	mov	sp, r7
 80046f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fc:	4770      	bx	lr

080046fe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80046fe:	b480      	push	{r7}
 8004700:	b083      	sub	sp, #12
 8004702:	af00      	add	r7, sp, #0
 8004704:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004706:	bf00      	nop
 8004708:	370c      	adds	r7, #12
 800470a:	46bd      	mov	sp, r7
 800470c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004710:	4770      	bx	lr

08004712 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004712:	b480      	push	{r7}
 8004714:	b083      	sub	sp, #12
 8004716:	af00      	add	r7, sp, #0
 8004718:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800471a:	bf00      	nop
 800471c:	370c      	adds	r7, #12
 800471e:	46bd      	mov	sp, r7
 8004720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004724:	4770      	bx	lr

08004726 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004726:	b480      	push	{r7}
 8004728:	b083      	sub	sp, #12
 800472a:	af00      	add	r7, sp, #0
 800472c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800472e:	bf00      	nop
 8004730:	370c      	adds	r7, #12
 8004732:	46bd      	mov	sp, r7
 8004734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004738:	4770      	bx	lr
	...

0800473c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800473c:	b480      	push	{r7}
 800473e:	b085      	sub	sp, #20
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
 8004744:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	4a46      	ldr	r2, [pc, #280]	@ (8004868 <TIM_Base_SetConfig+0x12c>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d013      	beq.n	800477c <TIM_Base_SetConfig+0x40>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800475a:	d00f      	beq.n	800477c <TIM_Base_SetConfig+0x40>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	4a43      	ldr	r2, [pc, #268]	@ (800486c <TIM_Base_SetConfig+0x130>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d00b      	beq.n	800477c <TIM_Base_SetConfig+0x40>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	4a42      	ldr	r2, [pc, #264]	@ (8004870 <TIM_Base_SetConfig+0x134>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d007      	beq.n	800477c <TIM_Base_SetConfig+0x40>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	4a41      	ldr	r2, [pc, #260]	@ (8004874 <TIM_Base_SetConfig+0x138>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d003      	beq.n	800477c <TIM_Base_SetConfig+0x40>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	4a40      	ldr	r2, [pc, #256]	@ (8004878 <TIM_Base_SetConfig+0x13c>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d108      	bne.n	800478e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004782:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	68fa      	ldr	r2, [r7, #12]
 800478a:	4313      	orrs	r3, r2
 800478c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	4a35      	ldr	r2, [pc, #212]	@ (8004868 <TIM_Base_SetConfig+0x12c>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d02b      	beq.n	80047ee <TIM_Base_SetConfig+0xb2>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800479c:	d027      	beq.n	80047ee <TIM_Base_SetConfig+0xb2>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	4a32      	ldr	r2, [pc, #200]	@ (800486c <TIM_Base_SetConfig+0x130>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d023      	beq.n	80047ee <TIM_Base_SetConfig+0xb2>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	4a31      	ldr	r2, [pc, #196]	@ (8004870 <TIM_Base_SetConfig+0x134>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d01f      	beq.n	80047ee <TIM_Base_SetConfig+0xb2>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	4a30      	ldr	r2, [pc, #192]	@ (8004874 <TIM_Base_SetConfig+0x138>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d01b      	beq.n	80047ee <TIM_Base_SetConfig+0xb2>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	4a2f      	ldr	r2, [pc, #188]	@ (8004878 <TIM_Base_SetConfig+0x13c>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d017      	beq.n	80047ee <TIM_Base_SetConfig+0xb2>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	4a2e      	ldr	r2, [pc, #184]	@ (800487c <TIM_Base_SetConfig+0x140>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d013      	beq.n	80047ee <TIM_Base_SetConfig+0xb2>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	4a2d      	ldr	r2, [pc, #180]	@ (8004880 <TIM_Base_SetConfig+0x144>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d00f      	beq.n	80047ee <TIM_Base_SetConfig+0xb2>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	4a2c      	ldr	r2, [pc, #176]	@ (8004884 <TIM_Base_SetConfig+0x148>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d00b      	beq.n	80047ee <TIM_Base_SetConfig+0xb2>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	4a2b      	ldr	r2, [pc, #172]	@ (8004888 <TIM_Base_SetConfig+0x14c>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d007      	beq.n	80047ee <TIM_Base_SetConfig+0xb2>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	4a2a      	ldr	r2, [pc, #168]	@ (800488c <TIM_Base_SetConfig+0x150>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d003      	beq.n	80047ee <TIM_Base_SetConfig+0xb2>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	4a29      	ldr	r2, [pc, #164]	@ (8004890 <TIM_Base_SetConfig+0x154>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d108      	bne.n	8004800 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80047f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	68db      	ldr	r3, [r3, #12]
 80047fa:	68fa      	ldr	r2, [r7, #12]
 80047fc:	4313      	orrs	r3, r2
 80047fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	695b      	ldr	r3, [r3, #20]
 800480a:	4313      	orrs	r3, r2
 800480c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	68fa      	ldr	r2, [r7, #12]
 8004812:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	689a      	ldr	r2, [r3, #8]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	681a      	ldr	r2, [r3, #0]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	4a10      	ldr	r2, [pc, #64]	@ (8004868 <TIM_Base_SetConfig+0x12c>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d003      	beq.n	8004834 <TIM_Base_SetConfig+0xf8>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	4a12      	ldr	r2, [pc, #72]	@ (8004878 <TIM_Base_SetConfig+0x13c>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d103      	bne.n	800483c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	691a      	ldr	r2, [r3, #16]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2201      	movs	r2, #1
 8004840:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	691b      	ldr	r3, [r3, #16]
 8004846:	f003 0301 	and.w	r3, r3, #1
 800484a:	2b01      	cmp	r3, #1
 800484c:	d105      	bne.n	800485a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	691b      	ldr	r3, [r3, #16]
 8004852:	f023 0201 	bic.w	r2, r3, #1
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	611a      	str	r2, [r3, #16]
  }
}
 800485a:	bf00      	nop
 800485c:	3714      	adds	r7, #20
 800485e:	46bd      	mov	sp, r7
 8004860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004864:	4770      	bx	lr
 8004866:	bf00      	nop
 8004868:	40010000 	.word	0x40010000
 800486c:	40000400 	.word	0x40000400
 8004870:	40000800 	.word	0x40000800
 8004874:	40000c00 	.word	0x40000c00
 8004878:	40010400 	.word	0x40010400
 800487c:	40014000 	.word	0x40014000
 8004880:	40014400 	.word	0x40014400
 8004884:	40014800 	.word	0x40014800
 8004888:	40001800 	.word	0x40001800
 800488c:	40001c00 	.word	0x40001c00
 8004890:	40002000 	.word	0x40002000

08004894 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004894:	b480      	push	{r7}
 8004896:	b087      	sub	sp, #28
 8004898:	af00      	add	r7, sp, #0
 800489a:	60f8      	str	r0, [r7, #12]
 800489c:	60b9      	str	r1, [r7, #8]
 800489e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	6a1b      	ldr	r3, [r3, #32]
 80048a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	6a1b      	ldr	r3, [r3, #32]
 80048aa:	f023 0201 	bic.w	r2, r3, #1
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	699b      	ldr	r3, [r3, #24]
 80048b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80048be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	011b      	lsls	r3, r3, #4
 80048c4:	693a      	ldr	r2, [r7, #16]
 80048c6:	4313      	orrs	r3, r2
 80048c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	f023 030a 	bic.w	r3, r3, #10
 80048d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80048d2:	697a      	ldr	r2, [r7, #20]
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	4313      	orrs	r3, r2
 80048d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	693a      	ldr	r2, [r7, #16]
 80048de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	697a      	ldr	r2, [r7, #20]
 80048e4:	621a      	str	r2, [r3, #32]
}
 80048e6:	bf00      	nop
 80048e8:	371c      	adds	r7, #28
 80048ea:	46bd      	mov	sp, r7
 80048ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f0:	4770      	bx	lr

080048f2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80048f2:	b480      	push	{r7}
 80048f4:	b087      	sub	sp, #28
 80048f6:	af00      	add	r7, sp, #0
 80048f8:	60f8      	str	r0, [r7, #12]
 80048fa:	60b9      	str	r1, [r7, #8]
 80048fc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	6a1b      	ldr	r3, [r3, #32]
 8004902:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	6a1b      	ldr	r3, [r3, #32]
 8004908:	f023 0210 	bic.w	r2, r3, #16
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	699b      	ldr	r3, [r3, #24]
 8004914:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800491c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	031b      	lsls	r3, r3, #12
 8004922:	693a      	ldr	r2, [r7, #16]
 8004924:	4313      	orrs	r3, r2
 8004926:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800492e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	011b      	lsls	r3, r3, #4
 8004934:	697a      	ldr	r2, [r7, #20]
 8004936:	4313      	orrs	r3, r2
 8004938:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	693a      	ldr	r2, [r7, #16]
 800493e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	697a      	ldr	r2, [r7, #20]
 8004944:	621a      	str	r2, [r3, #32]
}
 8004946:	bf00      	nop
 8004948:	371c      	adds	r7, #28
 800494a:	46bd      	mov	sp, r7
 800494c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004950:	4770      	bx	lr

08004952 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004952:	b480      	push	{r7}
 8004954:	b085      	sub	sp, #20
 8004956:	af00      	add	r7, sp, #0
 8004958:	6078      	str	r0, [r7, #4]
 800495a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	689b      	ldr	r3, [r3, #8]
 8004960:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004968:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800496a:	683a      	ldr	r2, [r7, #0]
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	4313      	orrs	r3, r2
 8004970:	f043 0307 	orr.w	r3, r3, #7
 8004974:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	68fa      	ldr	r2, [r7, #12]
 800497a:	609a      	str	r2, [r3, #8]
}
 800497c:	bf00      	nop
 800497e:	3714      	adds	r7, #20
 8004980:	46bd      	mov	sp, r7
 8004982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004986:	4770      	bx	lr

08004988 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004988:	b480      	push	{r7}
 800498a:	b087      	sub	sp, #28
 800498c:	af00      	add	r7, sp, #0
 800498e:	60f8      	str	r0, [r7, #12]
 8004990:	60b9      	str	r1, [r7, #8]
 8004992:	607a      	str	r2, [r7, #4]
 8004994:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	689b      	ldr	r3, [r3, #8]
 800499a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80049a2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	021a      	lsls	r2, r3, #8
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	431a      	orrs	r2, r3
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	4313      	orrs	r3, r2
 80049b0:	697a      	ldr	r2, [r7, #20]
 80049b2:	4313      	orrs	r3, r2
 80049b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	697a      	ldr	r2, [r7, #20]
 80049ba:	609a      	str	r2, [r3, #8]
}
 80049bc:	bf00      	nop
 80049be:	371c      	adds	r7, #28
 80049c0:	46bd      	mov	sp, r7
 80049c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c6:	4770      	bx	lr

080049c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b085      	sub	sp, #20
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
 80049d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80049d8:	2b01      	cmp	r3, #1
 80049da:	d101      	bne.n	80049e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80049dc:	2302      	movs	r3, #2
 80049de:	e05a      	b.n	8004a96 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2201      	movs	r2, #1
 80049e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2202      	movs	r2, #2
 80049ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	689b      	ldr	r3, [r3, #8]
 80049fe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a06:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	68fa      	ldr	r2, [r7, #12]
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	68fa      	ldr	r2, [r7, #12]
 8004a18:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a21      	ldr	r2, [pc, #132]	@ (8004aa4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d022      	beq.n	8004a6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a2c:	d01d      	beq.n	8004a6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4a1d      	ldr	r2, [pc, #116]	@ (8004aa8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d018      	beq.n	8004a6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a1b      	ldr	r2, [pc, #108]	@ (8004aac <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d013      	beq.n	8004a6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4a1a      	ldr	r2, [pc, #104]	@ (8004ab0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d00e      	beq.n	8004a6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a18      	ldr	r2, [pc, #96]	@ (8004ab4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d009      	beq.n	8004a6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4a17      	ldr	r2, [pc, #92]	@ (8004ab8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d004      	beq.n	8004a6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a15      	ldr	r2, [pc, #84]	@ (8004abc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d10c      	bne.n	8004a84 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004a70:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	68ba      	ldr	r2, [r7, #8]
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	68ba      	ldr	r2, [r7, #8]
 8004a82:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2201      	movs	r2, #1
 8004a88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004a94:	2300      	movs	r3, #0
}
 8004a96:	4618      	mov	r0, r3
 8004a98:	3714      	adds	r7, #20
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa0:	4770      	bx	lr
 8004aa2:	bf00      	nop
 8004aa4:	40010000 	.word	0x40010000
 8004aa8:	40000400 	.word	0x40000400
 8004aac:	40000800 	.word	0x40000800
 8004ab0:	40000c00 	.word	0x40000c00
 8004ab4:	40010400 	.word	0x40010400
 8004ab8:	40014000 	.word	0x40014000
 8004abc:	40001800 	.word	0x40001800

08004ac0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b083      	sub	sp, #12
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004ac8:	bf00      	nop
 8004aca:	370c      	adds	r7, #12
 8004acc:	46bd      	mov	sp, r7
 8004ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad2:	4770      	bx	lr

08004ad4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b083      	sub	sp, #12
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004adc:	bf00      	nop
 8004ade:	370c      	adds	r7, #12
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae6:	4770      	bx	lr

08004ae8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b082      	sub	sp, #8
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d101      	bne.n	8004afa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004af6:	2301      	movs	r3, #1
 8004af8:	e042      	b.n	8004b80 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b00:	b2db      	uxtb	r3, r3
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d106      	bne.n	8004b14 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	f7fd f8d4 	bl	8001cbc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2224      	movs	r2, #36	@ 0x24
 8004b18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	68da      	ldr	r2, [r3, #12]
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004b2a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004b2c:	6878      	ldr	r0, [r7, #4]
 8004b2e:	f000 fa09 	bl	8004f44 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	691a      	ldr	r2, [r3, #16]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004b40:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	695a      	ldr	r2, [r3, #20]
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004b50:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	68da      	ldr	r2, [r3, #12]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004b60:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2200      	movs	r2, #0
 8004b66:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2220      	movs	r2, #32
 8004b6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2220      	movs	r2, #32
 8004b74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004b7e:	2300      	movs	r3, #0
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	3708      	adds	r7, #8
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bd80      	pop	{r7, pc}

08004b88 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b08a      	sub	sp, #40	@ 0x28
 8004b8c:	af02      	add	r7, sp, #8
 8004b8e:	60f8      	str	r0, [r7, #12]
 8004b90:	60b9      	str	r1, [r7, #8]
 8004b92:	603b      	str	r3, [r7, #0]
 8004b94:	4613      	mov	r3, r2
 8004b96:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004b98:	2300      	movs	r3, #0
 8004b9a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ba2:	b2db      	uxtb	r3, r3
 8004ba4:	2b20      	cmp	r3, #32
 8004ba6:	d175      	bne.n	8004c94 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d002      	beq.n	8004bb4 <HAL_UART_Transmit+0x2c>
 8004bae:	88fb      	ldrh	r3, [r7, #6]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d101      	bne.n	8004bb8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	e06e      	b.n	8004c96 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	2221      	movs	r2, #33	@ 0x21
 8004bc2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004bc6:	f7fd f99d 	bl	8001f04 <HAL_GetTick>
 8004bca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	88fa      	ldrh	r2, [r7, #6]
 8004bd0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	88fa      	ldrh	r2, [r7, #6]
 8004bd6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	689b      	ldr	r3, [r3, #8]
 8004bdc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004be0:	d108      	bne.n	8004bf4 <HAL_UART_Transmit+0x6c>
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	691b      	ldr	r3, [r3, #16]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d104      	bne.n	8004bf4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004bea:	2300      	movs	r3, #0
 8004bec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	61bb      	str	r3, [r7, #24]
 8004bf2:	e003      	b.n	8004bfc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004bfc:	e02e      	b.n	8004c5c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	9300      	str	r3, [sp, #0]
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	2200      	movs	r2, #0
 8004c06:	2180      	movs	r1, #128	@ 0x80
 8004c08:	68f8      	ldr	r0, [r7, #12]
 8004c0a:	f000 f8df 	bl	8004dcc <UART_WaitOnFlagUntilTimeout>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d005      	beq.n	8004c20 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2220      	movs	r2, #32
 8004c18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004c1c:	2303      	movs	r3, #3
 8004c1e:	e03a      	b.n	8004c96 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004c20:	69fb      	ldr	r3, [r7, #28]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d10b      	bne.n	8004c3e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004c26:	69bb      	ldr	r3, [r7, #24]
 8004c28:	881b      	ldrh	r3, [r3, #0]
 8004c2a:	461a      	mov	r2, r3
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c34:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004c36:	69bb      	ldr	r3, [r7, #24]
 8004c38:	3302      	adds	r3, #2
 8004c3a:	61bb      	str	r3, [r7, #24]
 8004c3c:	e007      	b.n	8004c4e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004c3e:	69fb      	ldr	r3, [r7, #28]
 8004c40:	781a      	ldrb	r2, [r3, #0]
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004c48:	69fb      	ldr	r3, [r7, #28]
 8004c4a:	3301      	adds	r3, #1
 8004c4c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004c52:	b29b      	uxth	r3, r3
 8004c54:	3b01      	subs	r3, #1
 8004c56:	b29a      	uxth	r2, r3
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004c60:	b29b      	uxth	r3, r3
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d1cb      	bne.n	8004bfe <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	9300      	str	r3, [sp, #0]
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	2140      	movs	r1, #64	@ 0x40
 8004c70:	68f8      	ldr	r0, [r7, #12]
 8004c72:	f000 f8ab 	bl	8004dcc <UART_WaitOnFlagUntilTimeout>
 8004c76:	4603      	mov	r3, r0
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d005      	beq.n	8004c88 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	2220      	movs	r2, #32
 8004c80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004c84:	2303      	movs	r3, #3
 8004c86:	e006      	b.n	8004c96 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	2220      	movs	r2, #32
 8004c8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004c90:	2300      	movs	r3, #0
 8004c92:	e000      	b.n	8004c96 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004c94:	2302      	movs	r3, #2
  }
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	3720      	adds	r7, #32
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}

08004c9e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c9e:	b580      	push	{r7, lr}
 8004ca0:	b08a      	sub	sp, #40	@ 0x28
 8004ca2:	af02      	add	r7, sp, #8
 8004ca4:	60f8      	str	r0, [r7, #12]
 8004ca6:	60b9      	str	r1, [r7, #8]
 8004ca8:	603b      	str	r3, [r7, #0]
 8004caa:	4613      	mov	r3, r2
 8004cac:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004cae:	2300      	movs	r3, #0
 8004cb0:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004cb8:	b2db      	uxtb	r3, r3
 8004cba:	2b20      	cmp	r3, #32
 8004cbc:	f040 8081 	bne.w	8004dc2 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d002      	beq.n	8004ccc <HAL_UART_Receive+0x2e>
 8004cc6:	88fb      	ldrh	r3, [r7, #6]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d101      	bne.n	8004cd0 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004ccc:	2301      	movs	r3, #1
 8004cce:	e079      	b.n	8004dc4 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	2222      	movs	r2, #34	@ 0x22
 8004cda:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004ce4:	f7fd f90e 	bl	8001f04 <HAL_GetTick>
 8004ce8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	88fa      	ldrh	r2, [r7, #6]
 8004cee:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	88fa      	ldrh	r2, [r7, #6]
 8004cf4:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	689b      	ldr	r3, [r3, #8]
 8004cfa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004cfe:	d108      	bne.n	8004d12 <HAL_UART_Receive+0x74>
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	691b      	ldr	r3, [r3, #16]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d104      	bne.n	8004d12 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8004d08:	2300      	movs	r3, #0
 8004d0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	61bb      	str	r3, [r7, #24]
 8004d10:	e003      	b.n	8004d1a <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004d16:	2300      	movs	r3, #0
 8004d18:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004d1a:	e047      	b.n	8004dac <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	9300      	str	r3, [sp, #0]
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	2200      	movs	r2, #0
 8004d24:	2120      	movs	r1, #32
 8004d26:	68f8      	ldr	r0, [r7, #12]
 8004d28:	f000 f850 	bl	8004dcc <UART_WaitOnFlagUntilTimeout>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d005      	beq.n	8004d3e <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	2220      	movs	r2, #32
 8004d36:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8004d3a:	2303      	movs	r3, #3
 8004d3c:	e042      	b.n	8004dc4 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8004d3e:	69fb      	ldr	r3, [r7, #28]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d10c      	bne.n	8004d5e <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	b29b      	uxth	r3, r3
 8004d4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d50:	b29a      	uxth	r2, r3
 8004d52:	69bb      	ldr	r3, [r7, #24]
 8004d54:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004d56:	69bb      	ldr	r3, [r7, #24]
 8004d58:	3302      	adds	r3, #2
 8004d5a:	61bb      	str	r3, [r7, #24]
 8004d5c:	e01f      	b.n	8004d9e <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d66:	d007      	beq.n	8004d78 <HAL_UART_Receive+0xda>
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	689b      	ldr	r3, [r3, #8]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d10a      	bne.n	8004d86 <HAL_UART_Receive+0xe8>
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	691b      	ldr	r3, [r3, #16]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d106      	bne.n	8004d86 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	b2da      	uxtb	r2, r3
 8004d80:	69fb      	ldr	r3, [r7, #28]
 8004d82:	701a      	strb	r2, [r3, #0]
 8004d84:	e008      	b.n	8004d98 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	b2db      	uxtb	r3, r3
 8004d8e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004d92:	b2da      	uxtb	r2, r3
 8004d94:	69fb      	ldr	r3, [r7, #28]
 8004d96:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8004d98:	69fb      	ldr	r3, [r7, #28]
 8004d9a:	3301      	adds	r3, #1
 8004d9c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004da2:	b29b      	uxth	r3, r3
 8004da4:	3b01      	subs	r3, #1
 8004da6:	b29a      	uxth	r2, r3
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004db0:	b29b      	uxth	r3, r3
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d1b2      	bne.n	8004d1c <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	2220      	movs	r2, #32
 8004dba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	e000      	b.n	8004dc4 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8004dc2:	2302      	movs	r3, #2
  }
}
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	3720      	adds	r7, #32
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	bd80      	pop	{r7, pc}

08004dcc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b086      	sub	sp, #24
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	60f8      	str	r0, [r7, #12]
 8004dd4:	60b9      	str	r1, [r7, #8]
 8004dd6:	603b      	str	r3, [r7, #0]
 8004dd8:	4613      	mov	r3, r2
 8004dda:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ddc:	e03b      	b.n	8004e56 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004dde:	6a3b      	ldr	r3, [r7, #32]
 8004de0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004de4:	d037      	beq.n	8004e56 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004de6:	f7fd f88d 	bl	8001f04 <HAL_GetTick>
 8004dea:	4602      	mov	r2, r0
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	1ad3      	subs	r3, r2, r3
 8004df0:	6a3a      	ldr	r2, [r7, #32]
 8004df2:	429a      	cmp	r2, r3
 8004df4:	d302      	bcc.n	8004dfc <UART_WaitOnFlagUntilTimeout+0x30>
 8004df6:	6a3b      	ldr	r3, [r7, #32]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d101      	bne.n	8004e00 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004dfc:	2303      	movs	r3, #3
 8004dfe:	e03a      	b.n	8004e76 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	68db      	ldr	r3, [r3, #12]
 8004e06:	f003 0304 	and.w	r3, r3, #4
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d023      	beq.n	8004e56 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	2b80      	cmp	r3, #128	@ 0x80
 8004e12:	d020      	beq.n	8004e56 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	2b40      	cmp	r3, #64	@ 0x40
 8004e18:	d01d      	beq.n	8004e56 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f003 0308 	and.w	r3, r3, #8
 8004e24:	2b08      	cmp	r3, #8
 8004e26:	d116      	bne.n	8004e56 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004e28:	2300      	movs	r3, #0
 8004e2a:	617b      	str	r3, [r7, #20]
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	617b      	str	r3, [r7, #20]
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	617b      	str	r3, [r7, #20]
 8004e3c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004e3e:	68f8      	ldr	r0, [r7, #12]
 8004e40:	f000 f81d 	bl	8004e7e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	2208      	movs	r2, #8
 8004e48:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004e52:	2301      	movs	r3, #1
 8004e54:	e00f      	b.n	8004e76 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	681a      	ldr	r2, [r3, #0]
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	4013      	ands	r3, r2
 8004e60:	68ba      	ldr	r2, [r7, #8]
 8004e62:	429a      	cmp	r2, r3
 8004e64:	bf0c      	ite	eq
 8004e66:	2301      	moveq	r3, #1
 8004e68:	2300      	movne	r3, #0
 8004e6a:	b2db      	uxtb	r3, r3
 8004e6c:	461a      	mov	r2, r3
 8004e6e:	79fb      	ldrb	r3, [r7, #7]
 8004e70:	429a      	cmp	r2, r3
 8004e72:	d0b4      	beq.n	8004dde <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004e74:	2300      	movs	r3, #0
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	3718      	adds	r7, #24
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd80      	pop	{r7, pc}

08004e7e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004e7e:	b480      	push	{r7}
 8004e80:	b095      	sub	sp, #84	@ 0x54
 8004e82:	af00      	add	r7, sp, #0
 8004e84:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	330c      	adds	r3, #12
 8004e8c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e90:	e853 3f00 	ldrex	r3, [r3]
 8004e94:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004e96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e98:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004e9c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	330c      	adds	r3, #12
 8004ea4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004ea6:	643a      	str	r2, [r7, #64]	@ 0x40
 8004ea8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eaa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004eac:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004eae:	e841 2300 	strex	r3, r2, [r1]
 8004eb2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004eb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d1e5      	bne.n	8004e86 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	3314      	adds	r3, #20
 8004ec0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ec2:	6a3b      	ldr	r3, [r7, #32]
 8004ec4:	e853 3f00 	ldrex	r3, [r3]
 8004ec8:	61fb      	str	r3, [r7, #28]
   return(result);
 8004eca:	69fb      	ldr	r3, [r7, #28]
 8004ecc:	f023 0301 	bic.w	r3, r3, #1
 8004ed0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	3314      	adds	r3, #20
 8004ed8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004eda:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004edc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ede:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004ee0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004ee2:	e841 2300 	strex	r3, r2, [r1]
 8004ee6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004ee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d1e5      	bne.n	8004eba <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ef2:	2b01      	cmp	r3, #1
 8004ef4:	d119      	bne.n	8004f2a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	330c      	adds	r3, #12
 8004efc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	e853 3f00 	ldrex	r3, [r3]
 8004f04:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	f023 0310 	bic.w	r3, r3, #16
 8004f0c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	330c      	adds	r3, #12
 8004f14:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004f16:	61ba      	str	r2, [r7, #24]
 8004f18:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f1a:	6979      	ldr	r1, [r7, #20]
 8004f1c:	69ba      	ldr	r2, [r7, #24]
 8004f1e:	e841 2300 	strex	r3, r2, [r1]
 8004f22:	613b      	str	r3, [r7, #16]
   return(result);
 8004f24:	693b      	ldr	r3, [r7, #16]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d1e5      	bne.n	8004ef6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2220      	movs	r2, #32
 8004f2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2200      	movs	r2, #0
 8004f36:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004f38:	bf00      	nop
 8004f3a:	3754      	adds	r7, #84	@ 0x54
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f42:	4770      	bx	lr

08004f44 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f48:	b0c0      	sub	sp, #256	@ 0x100
 8004f4a:	af00      	add	r7, sp, #0
 8004f4c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	691b      	ldr	r3, [r3, #16]
 8004f58:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004f5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f60:	68d9      	ldr	r1, [r3, #12]
 8004f62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f66:	681a      	ldr	r2, [r3, #0]
 8004f68:	ea40 0301 	orr.w	r3, r0, r1
 8004f6c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004f6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f72:	689a      	ldr	r2, [r3, #8]
 8004f74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f78:	691b      	ldr	r3, [r3, #16]
 8004f7a:	431a      	orrs	r2, r3
 8004f7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f80:	695b      	ldr	r3, [r3, #20]
 8004f82:	431a      	orrs	r2, r3
 8004f84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f88:	69db      	ldr	r3, [r3, #28]
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004f90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	68db      	ldr	r3, [r3, #12]
 8004f98:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004f9c:	f021 010c 	bic.w	r1, r1, #12
 8004fa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fa4:	681a      	ldr	r2, [r3, #0]
 8004fa6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004faa:	430b      	orrs	r3, r1
 8004fac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004fae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	695b      	ldr	r3, [r3, #20]
 8004fb6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004fba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fbe:	6999      	ldr	r1, [r3, #24]
 8004fc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fc4:	681a      	ldr	r2, [r3, #0]
 8004fc6:	ea40 0301 	orr.w	r3, r0, r1
 8004fca:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004fcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fd0:	681a      	ldr	r2, [r3, #0]
 8004fd2:	4b8f      	ldr	r3, [pc, #572]	@ (8005210 <UART_SetConfig+0x2cc>)
 8004fd4:	429a      	cmp	r2, r3
 8004fd6:	d005      	beq.n	8004fe4 <UART_SetConfig+0xa0>
 8004fd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fdc:	681a      	ldr	r2, [r3, #0]
 8004fde:	4b8d      	ldr	r3, [pc, #564]	@ (8005214 <UART_SetConfig+0x2d0>)
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	d104      	bne.n	8004fee <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004fe4:	f7fe fc2a 	bl	800383c <HAL_RCC_GetPCLK2Freq>
 8004fe8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004fec:	e003      	b.n	8004ff6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004fee:	f7fe fc11 	bl	8003814 <HAL_RCC_GetPCLK1Freq>
 8004ff2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ff6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ffa:	69db      	ldr	r3, [r3, #28]
 8004ffc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005000:	f040 810c 	bne.w	800521c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005004:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005008:	2200      	movs	r2, #0
 800500a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800500e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005012:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005016:	4622      	mov	r2, r4
 8005018:	462b      	mov	r3, r5
 800501a:	1891      	adds	r1, r2, r2
 800501c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800501e:	415b      	adcs	r3, r3
 8005020:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005022:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005026:	4621      	mov	r1, r4
 8005028:	eb12 0801 	adds.w	r8, r2, r1
 800502c:	4629      	mov	r1, r5
 800502e:	eb43 0901 	adc.w	r9, r3, r1
 8005032:	f04f 0200 	mov.w	r2, #0
 8005036:	f04f 0300 	mov.w	r3, #0
 800503a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800503e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005042:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005046:	4690      	mov	r8, r2
 8005048:	4699      	mov	r9, r3
 800504a:	4623      	mov	r3, r4
 800504c:	eb18 0303 	adds.w	r3, r8, r3
 8005050:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005054:	462b      	mov	r3, r5
 8005056:	eb49 0303 	adc.w	r3, r9, r3
 800505a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800505e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	2200      	movs	r2, #0
 8005066:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800506a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800506e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005072:	460b      	mov	r3, r1
 8005074:	18db      	adds	r3, r3, r3
 8005076:	653b      	str	r3, [r7, #80]	@ 0x50
 8005078:	4613      	mov	r3, r2
 800507a:	eb42 0303 	adc.w	r3, r2, r3
 800507e:	657b      	str	r3, [r7, #84]	@ 0x54
 8005080:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005084:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005088:	f7fb fda2 	bl	8000bd0 <__aeabi_uldivmod>
 800508c:	4602      	mov	r2, r0
 800508e:	460b      	mov	r3, r1
 8005090:	4b61      	ldr	r3, [pc, #388]	@ (8005218 <UART_SetConfig+0x2d4>)
 8005092:	fba3 2302 	umull	r2, r3, r3, r2
 8005096:	095b      	lsrs	r3, r3, #5
 8005098:	011c      	lsls	r4, r3, #4
 800509a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800509e:	2200      	movs	r2, #0
 80050a0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80050a4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80050a8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80050ac:	4642      	mov	r2, r8
 80050ae:	464b      	mov	r3, r9
 80050b0:	1891      	adds	r1, r2, r2
 80050b2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80050b4:	415b      	adcs	r3, r3
 80050b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80050b8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80050bc:	4641      	mov	r1, r8
 80050be:	eb12 0a01 	adds.w	sl, r2, r1
 80050c2:	4649      	mov	r1, r9
 80050c4:	eb43 0b01 	adc.w	fp, r3, r1
 80050c8:	f04f 0200 	mov.w	r2, #0
 80050cc:	f04f 0300 	mov.w	r3, #0
 80050d0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80050d4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80050d8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80050dc:	4692      	mov	sl, r2
 80050de:	469b      	mov	fp, r3
 80050e0:	4643      	mov	r3, r8
 80050e2:	eb1a 0303 	adds.w	r3, sl, r3
 80050e6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80050ea:	464b      	mov	r3, r9
 80050ec:	eb4b 0303 	adc.w	r3, fp, r3
 80050f0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80050f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	2200      	movs	r2, #0
 80050fc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005100:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005104:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005108:	460b      	mov	r3, r1
 800510a:	18db      	adds	r3, r3, r3
 800510c:	643b      	str	r3, [r7, #64]	@ 0x40
 800510e:	4613      	mov	r3, r2
 8005110:	eb42 0303 	adc.w	r3, r2, r3
 8005114:	647b      	str	r3, [r7, #68]	@ 0x44
 8005116:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800511a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800511e:	f7fb fd57 	bl	8000bd0 <__aeabi_uldivmod>
 8005122:	4602      	mov	r2, r0
 8005124:	460b      	mov	r3, r1
 8005126:	4611      	mov	r1, r2
 8005128:	4b3b      	ldr	r3, [pc, #236]	@ (8005218 <UART_SetConfig+0x2d4>)
 800512a:	fba3 2301 	umull	r2, r3, r3, r1
 800512e:	095b      	lsrs	r3, r3, #5
 8005130:	2264      	movs	r2, #100	@ 0x64
 8005132:	fb02 f303 	mul.w	r3, r2, r3
 8005136:	1acb      	subs	r3, r1, r3
 8005138:	00db      	lsls	r3, r3, #3
 800513a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800513e:	4b36      	ldr	r3, [pc, #216]	@ (8005218 <UART_SetConfig+0x2d4>)
 8005140:	fba3 2302 	umull	r2, r3, r3, r2
 8005144:	095b      	lsrs	r3, r3, #5
 8005146:	005b      	lsls	r3, r3, #1
 8005148:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800514c:	441c      	add	r4, r3
 800514e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005152:	2200      	movs	r2, #0
 8005154:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005158:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800515c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005160:	4642      	mov	r2, r8
 8005162:	464b      	mov	r3, r9
 8005164:	1891      	adds	r1, r2, r2
 8005166:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005168:	415b      	adcs	r3, r3
 800516a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800516c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005170:	4641      	mov	r1, r8
 8005172:	1851      	adds	r1, r2, r1
 8005174:	6339      	str	r1, [r7, #48]	@ 0x30
 8005176:	4649      	mov	r1, r9
 8005178:	414b      	adcs	r3, r1
 800517a:	637b      	str	r3, [r7, #52]	@ 0x34
 800517c:	f04f 0200 	mov.w	r2, #0
 8005180:	f04f 0300 	mov.w	r3, #0
 8005184:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005188:	4659      	mov	r1, fp
 800518a:	00cb      	lsls	r3, r1, #3
 800518c:	4651      	mov	r1, sl
 800518e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005192:	4651      	mov	r1, sl
 8005194:	00ca      	lsls	r2, r1, #3
 8005196:	4610      	mov	r0, r2
 8005198:	4619      	mov	r1, r3
 800519a:	4603      	mov	r3, r0
 800519c:	4642      	mov	r2, r8
 800519e:	189b      	adds	r3, r3, r2
 80051a0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80051a4:	464b      	mov	r3, r9
 80051a6:	460a      	mov	r2, r1
 80051a8:	eb42 0303 	adc.w	r3, r2, r3
 80051ac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80051b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	2200      	movs	r2, #0
 80051b8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80051bc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80051c0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80051c4:	460b      	mov	r3, r1
 80051c6:	18db      	adds	r3, r3, r3
 80051c8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80051ca:	4613      	mov	r3, r2
 80051cc:	eb42 0303 	adc.w	r3, r2, r3
 80051d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80051d2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80051d6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80051da:	f7fb fcf9 	bl	8000bd0 <__aeabi_uldivmod>
 80051de:	4602      	mov	r2, r0
 80051e0:	460b      	mov	r3, r1
 80051e2:	4b0d      	ldr	r3, [pc, #52]	@ (8005218 <UART_SetConfig+0x2d4>)
 80051e4:	fba3 1302 	umull	r1, r3, r3, r2
 80051e8:	095b      	lsrs	r3, r3, #5
 80051ea:	2164      	movs	r1, #100	@ 0x64
 80051ec:	fb01 f303 	mul.w	r3, r1, r3
 80051f0:	1ad3      	subs	r3, r2, r3
 80051f2:	00db      	lsls	r3, r3, #3
 80051f4:	3332      	adds	r3, #50	@ 0x32
 80051f6:	4a08      	ldr	r2, [pc, #32]	@ (8005218 <UART_SetConfig+0x2d4>)
 80051f8:	fba2 2303 	umull	r2, r3, r2, r3
 80051fc:	095b      	lsrs	r3, r3, #5
 80051fe:	f003 0207 	and.w	r2, r3, #7
 8005202:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4422      	add	r2, r4
 800520a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800520c:	e106      	b.n	800541c <UART_SetConfig+0x4d8>
 800520e:	bf00      	nop
 8005210:	40011000 	.word	0x40011000
 8005214:	40011400 	.word	0x40011400
 8005218:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800521c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005220:	2200      	movs	r2, #0
 8005222:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005226:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800522a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800522e:	4642      	mov	r2, r8
 8005230:	464b      	mov	r3, r9
 8005232:	1891      	adds	r1, r2, r2
 8005234:	6239      	str	r1, [r7, #32]
 8005236:	415b      	adcs	r3, r3
 8005238:	627b      	str	r3, [r7, #36]	@ 0x24
 800523a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800523e:	4641      	mov	r1, r8
 8005240:	1854      	adds	r4, r2, r1
 8005242:	4649      	mov	r1, r9
 8005244:	eb43 0501 	adc.w	r5, r3, r1
 8005248:	f04f 0200 	mov.w	r2, #0
 800524c:	f04f 0300 	mov.w	r3, #0
 8005250:	00eb      	lsls	r3, r5, #3
 8005252:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005256:	00e2      	lsls	r2, r4, #3
 8005258:	4614      	mov	r4, r2
 800525a:	461d      	mov	r5, r3
 800525c:	4643      	mov	r3, r8
 800525e:	18e3      	adds	r3, r4, r3
 8005260:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005264:	464b      	mov	r3, r9
 8005266:	eb45 0303 	adc.w	r3, r5, r3
 800526a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800526e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	2200      	movs	r2, #0
 8005276:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800527a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800527e:	f04f 0200 	mov.w	r2, #0
 8005282:	f04f 0300 	mov.w	r3, #0
 8005286:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800528a:	4629      	mov	r1, r5
 800528c:	008b      	lsls	r3, r1, #2
 800528e:	4621      	mov	r1, r4
 8005290:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005294:	4621      	mov	r1, r4
 8005296:	008a      	lsls	r2, r1, #2
 8005298:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800529c:	f7fb fc98 	bl	8000bd0 <__aeabi_uldivmod>
 80052a0:	4602      	mov	r2, r0
 80052a2:	460b      	mov	r3, r1
 80052a4:	4b60      	ldr	r3, [pc, #384]	@ (8005428 <UART_SetConfig+0x4e4>)
 80052a6:	fba3 2302 	umull	r2, r3, r3, r2
 80052aa:	095b      	lsrs	r3, r3, #5
 80052ac:	011c      	lsls	r4, r3, #4
 80052ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80052b2:	2200      	movs	r2, #0
 80052b4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80052b8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80052bc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80052c0:	4642      	mov	r2, r8
 80052c2:	464b      	mov	r3, r9
 80052c4:	1891      	adds	r1, r2, r2
 80052c6:	61b9      	str	r1, [r7, #24]
 80052c8:	415b      	adcs	r3, r3
 80052ca:	61fb      	str	r3, [r7, #28]
 80052cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80052d0:	4641      	mov	r1, r8
 80052d2:	1851      	adds	r1, r2, r1
 80052d4:	6139      	str	r1, [r7, #16]
 80052d6:	4649      	mov	r1, r9
 80052d8:	414b      	adcs	r3, r1
 80052da:	617b      	str	r3, [r7, #20]
 80052dc:	f04f 0200 	mov.w	r2, #0
 80052e0:	f04f 0300 	mov.w	r3, #0
 80052e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80052e8:	4659      	mov	r1, fp
 80052ea:	00cb      	lsls	r3, r1, #3
 80052ec:	4651      	mov	r1, sl
 80052ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80052f2:	4651      	mov	r1, sl
 80052f4:	00ca      	lsls	r2, r1, #3
 80052f6:	4610      	mov	r0, r2
 80052f8:	4619      	mov	r1, r3
 80052fa:	4603      	mov	r3, r0
 80052fc:	4642      	mov	r2, r8
 80052fe:	189b      	adds	r3, r3, r2
 8005300:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005304:	464b      	mov	r3, r9
 8005306:	460a      	mov	r2, r1
 8005308:	eb42 0303 	adc.w	r3, r2, r3
 800530c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005310:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	2200      	movs	r2, #0
 8005318:	67bb      	str	r3, [r7, #120]	@ 0x78
 800531a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800531c:	f04f 0200 	mov.w	r2, #0
 8005320:	f04f 0300 	mov.w	r3, #0
 8005324:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005328:	4649      	mov	r1, r9
 800532a:	008b      	lsls	r3, r1, #2
 800532c:	4641      	mov	r1, r8
 800532e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005332:	4641      	mov	r1, r8
 8005334:	008a      	lsls	r2, r1, #2
 8005336:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800533a:	f7fb fc49 	bl	8000bd0 <__aeabi_uldivmod>
 800533e:	4602      	mov	r2, r0
 8005340:	460b      	mov	r3, r1
 8005342:	4611      	mov	r1, r2
 8005344:	4b38      	ldr	r3, [pc, #224]	@ (8005428 <UART_SetConfig+0x4e4>)
 8005346:	fba3 2301 	umull	r2, r3, r3, r1
 800534a:	095b      	lsrs	r3, r3, #5
 800534c:	2264      	movs	r2, #100	@ 0x64
 800534e:	fb02 f303 	mul.w	r3, r2, r3
 8005352:	1acb      	subs	r3, r1, r3
 8005354:	011b      	lsls	r3, r3, #4
 8005356:	3332      	adds	r3, #50	@ 0x32
 8005358:	4a33      	ldr	r2, [pc, #204]	@ (8005428 <UART_SetConfig+0x4e4>)
 800535a:	fba2 2303 	umull	r2, r3, r2, r3
 800535e:	095b      	lsrs	r3, r3, #5
 8005360:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005364:	441c      	add	r4, r3
 8005366:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800536a:	2200      	movs	r2, #0
 800536c:	673b      	str	r3, [r7, #112]	@ 0x70
 800536e:	677a      	str	r2, [r7, #116]	@ 0x74
 8005370:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005374:	4642      	mov	r2, r8
 8005376:	464b      	mov	r3, r9
 8005378:	1891      	adds	r1, r2, r2
 800537a:	60b9      	str	r1, [r7, #8]
 800537c:	415b      	adcs	r3, r3
 800537e:	60fb      	str	r3, [r7, #12]
 8005380:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005384:	4641      	mov	r1, r8
 8005386:	1851      	adds	r1, r2, r1
 8005388:	6039      	str	r1, [r7, #0]
 800538a:	4649      	mov	r1, r9
 800538c:	414b      	adcs	r3, r1
 800538e:	607b      	str	r3, [r7, #4]
 8005390:	f04f 0200 	mov.w	r2, #0
 8005394:	f04f 0300 	mov.w	r3, #0
 8005398:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800539c:	4659      	mov	r1, fp
 800539e:	00cb      	lsls	r3, r1, #3
 80053a0:	4651      	mov	r1, sl
 80053a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80053a6:	4651      	mov	r1, sl
 80053a8:	00ca      	lsls	r2, r1, #3
 80053aa:	4610      	mov	r0, r2
 80053ac:	4619      	mov	r1, r3
 80053ae:	4603      	mov	r3, r0
 80053b0:	4642      	mov	r2, r8
 80053b2:	189b      	adds	r3, r3, r2
 80053b4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80053b6:	464b      	mov	r3, r9
 80053b8:	460a      	mov	r2, r1
 80053ba:	eb42 0303 	adc.w	r3, r2, r3
 80053be:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80053c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053c4:	685b      	ldr	r3, [r3, #4]
 80053c6:	2200      	movs	r2, #0
 80053c8:	663b      	str	r3, [r7, #96]	@ 0x60
 80053ca:	667a      	str	r2, [r7, #100]	@ 0x64
 80053cc:	f04f 0200 	mov.w	r2, #0
 80053d0:	f04f 0300 	mov.w	r3, #0
 80053d4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80053d8:	4649      	mov	r1, r9
 80053da:	008b      	lsls	r3, r1, #2
 80053dc:	4641      	mov	r1, r8
 80053de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80053e2:	4641      	mov	r1, r8
 80053e4:	008a      	lsls	r2, r1, #2
 80053e6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80053ea:	f7fb fbf1 	bl	8000bd0 <__aeabi_uldivmod>
 80053ee:	4602      	mov	r2, r0
 80053f0:	460b      	mov	r3, r1
 80053f2:	4b0d      	ldr	r3, [pc, #52]	@ (8005428 <UART_SetConfig+0x4e4>)
 80053f4:	fba3 1302 	umull	r1, r3, r3, r2
 80053f8:	095b      	lsrs	r3, r3, #5
 80053fa:	2164      	movs	r1, #100	@ 0x64
 80053fc:	fb01 f303 	mul.w	r3, r1, r3
 8005400:	1ad3      	subs	r3, r2, r3
 8005402:	011b      	lsls	r3, r3, #4
 8005404:	3332      	adds	r3, #50	@ 0x32
 8005406:	4a08      	ldr	r2, [pc, #32]	@ (8005428 <UART_SetConfig+0x4e4>)
 8005408:	fba2 2303 	umull	r2, r3, r2, r3
 800540c:	095b      	lsrs	r3, r3, #5
 800540e:	f003 020f 	and.w	r2, r3, #15
 8005412:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4422      	add	r2, r4
 800541a:	609a      	str	r2, [r3, #8]
}
 800541c:	bf00      	nop
 800541e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005422:	46bd      	mov	sp, r7
 8005424:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005428:	51eb851f 	.word	0x51eb851f

0800542c <atan2>:
 800542c:	f000 ba54 	b.w	80058d8 <__ieee754_atan2>

08005430 <pow>:
 8005430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005432:	ed2d 8b02 	vpush	{d8}
 8005436:	eeb0 8a40 	vmov.f32	s16, s0
 800543a:	eef0 8a60 	vmov.f32	s17, s1
 800543e:	ec55 4b11 	vmov	r4, r5, d1
 8005442:	f000 fb11 	bl	8005a68 <__ieee754_pow>
 8005446:	4622      	mov	r2, r4
 8005448:	462b      	mov	r3, r5
 800544a:	4620      	mov	r0, r4
 800544c:	4629      	mov	r1, r5
 800544e:	ec57 6b10 	vmov	r6, r7, d0
 8005452:	f7fb fb2f 	bl	8000ab4 <__aeabi_dcmpun>
 8005456:	2800      	cmp	r0, #0
 8005458:	d13b      	bne.n	80054d2 <pow+0xa2>
 800545a:	ec51 0b18 	vmov	r0, r1, d8
 800545e:	2200      	movs	r2, #0
 8005460:	2300      	movs	r3, #0
 8005462:	f7fb faf5 	bl	8000a50 <__aeabi_dcmpeq>
 8005466:	b1b8      	cbz	r0, 8005498 <pow+0x68>
 8005468:	2200      	movs	r2, #0
 800546a:	2300      	movs	r3, #0
 800546c:	4620      	mov	r0, r4
 800546e:	4629      	mov	r1, r5
 8005470:	f7fb faee 	bl	8000a50 <__aeabi_dcmpeq>
 8005474:	2800      	cmp	r0, #0
 8005476:	d146      	bne.n	8005506 <pow+0xd6>
 8005478:	ec45 4b10 	vmov	d0, r4, r5
 800547c:	f000 f89c 	bl	80055b8 <finite>
 8005480:	b338      	cbz	r0, 80054d2 <pow+0xa2>
 8005482:	2200      	movs	r2, #0
 8005484:	2300      	movs	r3, #0
 8005486:	4620      	mov	r0, r4
 8005488:	4629      	mov	r1, r5
 800548a:	f7fb faeb 	bl	8000a64 <__aeabi_dcmplt>
 800548e:	b300      	cbz	r0, 80054d2 <pow+0xa2>
 8005490:	f002 f93e 	bl	8007710 <__errno>
 8005494:	2322      	movs	r3, #34	@ 0x22
 8005496:	e01b      	b.n	80054d0 <pow+0xa0>
 8005498:	ec47 6b10 	vmov	d0, r6, r7
 800549c:	f000 f88c 	bl	80055b8 <finite>
 80054a0:	b9e0      	cbnz	r0, 80054dc <pow+0xac>
 80054a2:	eeb0 0a48 	vmov.f32	s0, s16
 80054a6:	eef0 0a68 	vmov.f32	s1, s17
 80054aa:	f000 f885 	bl	80055b8 <finite>
 80054ae:	b1a8      	cbz	r0, 80054dc <pow+0xac>
 80054b0:	ec45 4b10 	vmov	d0, r4, r5
 80054b4:	f000 f880 	bl	80055b8 <finite>
 80054b8:	b180      	cbz	r0, 80054dc <pow+0xac>
 80054ba:	4632      	mov	r2, r6
 80054bc:	463b      	mov	r3, r7
 80054be:	4630      	mov	r0, r6
 80054c0:	4639      	mov	r1, r7
 80054c2:	f7fb faf7 	bl	8000ab4 <__aeabi_dcmpun>
 80054c6:	2800      	cmp	r0, #0
 80054c8:	d0e2      	beq.n	8005490 <pow+0x60>
 80054ca:	f002 f921 	bl	8007710 <__errno>
 80054ce:	2321      	movs	r3, #33	@ 0x21
 80054d0:	6003      	str	r3, [r0, #0]
 80054d2:	ecbd 8b02 	vpop	{d8}
 80054d6:	ec47 6b10 	vmov	d0, r6, r7
 80054da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80054dc:	2200      	movs	r2, #0
 80054de:	2300      	movs	r3, #0
 80054e0:	4630      	mov	r0, r6
 80054e2:	4639      	mov	r1, r7
 80054e4:	f7fb fab4 	bl	8000a50 <__aeabi_dcmpeq>
 80054e8:	2800      	cmp	r0, #0
 80054ea:	d0f2      	beq.n	80054d2 <pow+0xa2>
 80054ec:	eeb0 0a48 	vmov.f32	s0, s16
 80054f0:	eef0 0a68 	vmov.f32	s1, s17
 80054f4:	f000 f860 	bl	80055b8 <finite>
 80054f8:	2800      	cmp	r0, #0
 80054fa:	d0ea      	beq.n	80054d2 <pow+0xa2>
 80054fc:	ec45 4b10 	vmov	d0, r4, r5
 8005500:	f000 f85a 	bl	80055b8 <finite>
 8005504:	e7c3      	b.n	800548e <pow+0x5e>
 8005506:	4f01      	ldr	r7, [pc, #4]	@ (800550c <pow+0xdc>)
 8005508:	2600      	movs	r6, #0
 800550a:	e7e2      	b.n	80054d2 <pow+0xa2>
 800550c:	3ff00000 	.word	0x3ff00000

08005510 <sin>:
 8005510:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005512:	ec53 2b10 	vmov	r2, r3, d0
 8005516:	4826      	ldr	r0, [pc, #152]	@ (80055b0 <sin+0xa0>)
 8005518:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800551c:	4281      	cmp	r1, r0
 800551e:	d807      	bhi.n	8005530 <sin+0x20>
 8005520:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 80055a8 <sin+0x98>
 8005524:	2000      	movs	r0, #0
 8005526:	b005      	add	sp, #20
 8005528:	f85d eb04 	ldr.w	lr, [sp], #4
 800552c:	f000 b918 	b.w	8005760 <__kernel_sin>
 8005530:	4820      	ldr	r0, [pc, #128]	@ (80055b4 <sin+0xa4>)
 8005532:	4281      	cmp	r1, r0
 8005534:	d908      	bls.n	8005548 <sin+0x38>
 8005536:	4610      	mov	r0, r2
 8005538:	4619      	mov	r1, r3
 800553a:	f7fa fe69 	bl	8000210 <__aeabi_dsub>
 800553e:	ec41 0b10 	vmov	d0, r0, r1
 8005542:	b005      	add	sp, #20
 8005544:	f85d fb04 	ldr.w	pc, [sp], #4
 8005548:	4668      	mov	r0, sp
 800554a:	f000 ffd1 	bl	80064f0 <__ieee754_rem_pio2>
 800554e:	f000 0003 	and.w	r0, r0, #3
 8005552:	2801      	cmp	r0, #1
 8005554:	d00c      	beq.n	8005570 <sin+0x60>
 8005556:	2802      	cmp	r0, #2
 8005558:	d011      	beq.n	800557e <sin+0x6e>
 800555a:	b9e8      	cbnz	r0, 8005598 <sin+0x88>
 800555c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005560:	ed9d 0b00 	vldr	d0, [sp]
 8005564:	2001      	movs	r0, #1
 8005566:	f000 f8fb 	bl	8005760 <__kernel_sin>
 800556a:	ec51 0b10 	vmov	r0, r1, d0
 800556e:	e7e6      	b.n	800553e <sin+0x2e>
 8005570:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005574:	ed9d 0b00 	vldr	d0, [sp]
 8005578:	f000 f82a 	bl	80055d0 <__kernel_cos>
 800557c:	e7f5      	b.n	800556a <sin+0x5a>
 800557e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005582:	ed9d 0b00 	vldr	d0, [sp]
 8005586:	2001      	movs	r0, #1
 8005588:	f000 f8ea 	bl	8005760 <__kernel_sin>
 800558c:	ec53 2b10 	vmov	r2, r3, d0
 8005590:	4610      	mov	r0, r2
 8005592:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8005596:	e7d2      	b.n	800553e <sin+0x2e>
 8005598:	ed9d 1b02 	vldr	d1, [sp, #8]
 800559c:	ed9d 0b00 	vldr	d0, [sp]
 80055a0:	f000 f816 	bl	80055d0 <__kernel_cos>
 80055a4:	e7f2      	b.n	800558c <sin+0x7c>
 80055a6:	bf00      	nop
	...
 80055b0:	3fe921fb 	.word	0x3fe921fb
 80055b4:	7fefffff 	.word	0x7fefffff

080055b8 <finite>:
 80055b8:	b082      	sub	sp, #8
 80055ba:	ed8d 0b00 	vstr	d0, [sp]
 80055be:	9801      	ldr	r0, [sp, #4]
 80055c0:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 80055c4:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 80055c8:	0fc0      	lsrs	r0, r0, #31
 80055ca:	b002      	add	sp, #8
 80055cc:	4770      	bx	lr
	...

080055d0 <__kernel_cos>:
 80055d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055d4:	ec57 6b10 	vmov	r6, r7, d0
 80055d8:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 80055dc:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 80055e0:	ed8d 1b00 	vstr	d1, [sp]
 80055e4:	d206      	bcs.n	80055f4 <__kernel_cos+0x24>
 80055e6:	4630      	mov	r0, r6
 80055e8:	4639      	mov	r1, r7
 80055ea:	f7fb fa79 	bl	8000ae0 <__aeabi_d2iz>
 80055ee:	2800      	cmp	r0, #0
 80055f0:	f000 8088 	beq.w	8005704 <__kernel_cos+0x134>
 80055f4:	4632      	mov	r2, r6
 80055f6:	463b      	mov	r3, r7
 80055f8:	4630      	mov	r0, r6
 80055fa:	4639      	mov	r1, r7
 80055fc:	f7fa ffc0 	bl	8000580 <__aeabi_dmul>
 8005600:	4b51      	ldr	r3, [pc, #324]	@ (8005748 <__kernel_cos+0x178>)
 8005602:	2200      	movs	r2, #0
 8005604:	4604      	mov	r4, r0
 8005606:	460d      	mov	r5, r1
 8005608:	f7fa ffba 	bl	8000580 <__aeabi_dmul>
 800560c:	a340      	add	r3, pc, #256	@ (adr r3, 8005710 <__kernel_cos+0x140>)
 800560e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005612:	4682      	mov	sl, r0
 8005614:	468b      	mov	fp, r1
 8005616:	4620      	mov	r0, r4
 8005618:	4629      	mov	r1, r5
 800561a:	f7fa ffb1 	bl	8000580 <__aeabi_dmul>
 800561e:	a33e      	add	r3, pc, #248	@ (adr r3, 8005718 <__kernel_cos+0x148>)
 8005620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005624:	f7fa fdf6 	bl	8000214 <__adddf3>
 8005628:	4622      	mov	r2, r4
 800562a:	462b      	mov	r3, r5
 800562c:	f7fa ffa8 	bl	8000580 <__aeabi_dmul>
 8005630:	a33b      	add	r3, pc, #236	@ (adr r3, 8005720 <__kernel_cos+0x150>)
 8005632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005636:	f7fa fdeb 	bl	8000210 <__aeabi_dsub>
 800563a:	4622      	mov	r2, r4
 800563c:	462b      	mov	r3, r5
 800563e:	f7fa ff9f 	bl	8000580 <__aeabi_dmul>
 8005642:	a339      	add	r3, pc, #228	@ (adr r3, 8005728 <__kernel_cos+0x158>)
 8005644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005648:	f7fa fde4 	bl	8000214 <__adddf3>
 800564c:	4622      	mov	r2, r4
 800564e:	462b      	mov	r3, r5
 8005650:	f7fa ff96 	bl	8000580 <__aeabi_dmul>
 8005654:	a336      	add	r3, pc, #216	@ (adr r3, 8005730 <__kernel_cos+0x160>)
 8005656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800565a:	f7fa fdd9 	bl	8000210 <__aeabi_dsub>
 800565e:	4622      	mov	r2, r4
 8005660:	462b      	mov	r3, r5
 8005662:	f7fa ff8d 	bl	8000580 <__aeabi_dmul>
 8005666:	a334      	add	r3, pc, #208	@ (adr r3, 8005738 <__kernel_cos+0x168>)
 8005668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800566c:	f7fa fdd2 	bl	8000214 <__adddf3>
 8005670:	4622      	mov	r2, r4
 8005672:	462b      	mov	r3, r5
 8005674:	f7fa ff84 	bl	8000580 <__aeabi_dmul>
 8005678:	4622      	mov	r2, r4
 800567a:	462b      	mov	r3, r5
 800567c:	f7fa ff80 	bl	8000580 <__aeabi_dmul>
 8005680:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005684:	4604      	mov	r4, r0
 8005686:	460d      	mov	r5, r1
 8005688:	4630      	mov	r0, r6
 800568a:	4639      	mov	r1, r7
 800568c:	f7fa ff78 	bl	8000580 <__aeabi_dmul>
 8005690:	460b      	mov	r3, r1
 8005692:	4602      	mov	r2, r0
 8005694:	4629      	mov	r1, r5
 8005696:	4620      	mov	r0, r4
 8005698:	f7fa fdba 	bl	8000210 <__aeabi_dsub>
 800569c:	4b2b      	ldr	r3, [pc, #172]	@ (800574c <__kernel_cos+0x17c>)
 800569e:	4598      	cmp	r8, r3
 80056a0:	4606      	mov	r6, r0
 80056a2:	460f      	mov	r7, r1
 80056a4:	d810      	bhi.n	80056c8 <__kernel_cos+0xf8>
 80056a6:	4602      	mov	r2, r0
 80056a8:	460b      	mov	r3, r1
 80056aa:	4650      	mov	r0, sl
 80056ac:	4659      	mov	r1, fp
 80056ae:	f7fa fdaf 	bl	8000210 <__aeabi_dsub>
 80056b2:	460b      	mov	r3, r1
 80056b4:	4926      	ldr	r1, [pc, #152]	@ (8005750 <__kernel_cos+0x180>)
 80056b6:	4602      	mov	r2, r0
 80056b8:	2000      	movs	r0, #0
 80056ba:	f7fa fda9 	bl	8000210 <__aeabi_dsub>
 80056be:	ec41 0b10 	vmov	d0, r0, r1
 80056c2:	b003      	add	sp, #12
 80056c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056c8:	4b22      	ldr	r3, [pc, #136]	@ (8005754 <__kernel_cos+0x184>)
 80056ca:	4921      	ldr	r1, [pc, #132]	@ (8005750 <__kernel_cos+0x180>)
 80056cc:	4598      	cmp	r8, r3
 80056ce:	bf8c      	ite	hi
 80056d0:	4d21      	ldrhi	r5, [pc, #132]	@ (8005758 <__kernel_cos+0x188>)
 80056d2:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 80056d6:	2400      	movs	r4, #0
 80056d8:	4622      	mov	r2, r4
 80056da:	462b      	mov	r3, r5
 80056dc:	2000      	movs	r0, #0
 80056de:	f7fa fd97 	bl	8000210 <__aeabi_dsub>
 80056e2:	4622      	mov	r2, r4
 80056e4:	4680      	mov	r8, r0
 80056e6:	4689      	mov	r9, r1
 80056e8:	462b      	mov	r3, r5
 80056ea:	4650      	mov	r0, sl
 80056ec:	4659      	mov	r1, fp
 80056ee:	f7fa fd8f 	bl	8000210 <__aeabi_dsub>
 80056f2:	4632      	mov	r2, r6
 80056f4:	463b      	mov	r3, r7
 80056f6:	f7fa fd8b 	bl	8000210 <__aeabi_dsub>
 80056fa:	4602      	mov	r2, r0
 80056fc:	460b      	mov	r3, r1
 80056fe:	4640      	mov	r0, r8
 8005700:	4649      	mov	r1, r9
 8005702:	e7da      	b.n	80056ba <__kernel_cos+0xea>
 8005704:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8005740 <__kernel_cos+0x170>
 8005708:	e7db      	b.n	80056c2 <__kernel_cos+0xf2>
 800570a:	bf00      	nop
 800570c:	f3af 8000 	nop.w
 8005710:	be8838d4 	.word	0xbe8838d4
 8005714:	bda8fae9 	.word	0xbda8fae9
 8005718:	bdb4b1c4 	.word	0xbdb4b1c4
 800571c:	3e21ee9e 	.word	0x3e21ee9e
 8005720:	809c52ad 	.word	0x809c52ad
 8005724:	3e927e4f 	.word	0x3e927e4f
 8005728:	19cb1590 	.word	0x19cb1590
 800572c:	3efa01a0 	.word	0x3efa01a0
 8005730:	16c15177 	.word	0x16c15177
 8005734:	3f56c16c 	.word	0x3f56c16c
 8005738:	5555554c 	.word	0x5555554c
 800573c:	3fa55555 	.word	0x3fa55555
 8005740:	00000000 	.word	0x00000000
 8005744:	3ff00000 	.word	0x3ff00000
 8005748:	3fe00000 	.word	0x3fe00000
 800574c:	3fd33332 	.word	0x3fd33332
 8005750:	3ff00000 	.word	0x3ff00000
 8005754:	3fe90000 	.word	0x3fe90000
 8005758:	3fd20000 	.word	0x3fd20000
 800575c:	00000000 	.word	0x00000000

08005760 <__kernel_sin>:
 8005760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005764:	ec55 4b10 	vmov	r4, r5, d0
 8005768:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800576c:	b085      	sub	sp, #20
 800576e:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8005772:	ed8d 1b02 	vstr	d1, [sp, #8]
 8005776:	4680      	mov	r8, r0
 8005778:	d205      	bcs.n	8005786 <__kernel_sin+0x26>
 800577a:	4620      	mov	r0, r4
 800577c:	4629      	mov	r1, r5
 800577e:	f7fb f9af 	bl	8000ae0 <__aeabi_d2iz>
 8005782:	2800      	cmp	r0, #0
 8005784:	d052      	beq.n	800582c <__kernel_sin+0xcc>
 8005786:	4622      	mov	r2, r4
 8005788:	462b      	mov	r3, r5
 800578a:	4620      	mov	r0, r4
 800578c:	4629      	mov	r1, r5
 800578e:	f7fa fef7 	bl	8000580 <__aeabi_dmul>
 8005792:	4682      	mov	sl, r0
 8005794:	468b      	mov	fp, r1
 8005796:	4602      	mov	r2, r0
 8005798:	460b      	mov	r3, r1
 800579a:	4620      	mov	r0, r4
 800579c:	4629      	mov	r1, r5
 800579e:	f7fa feef 	bl	8000580 <__aeabi_dmul>
 80057a2:	a342      	add	r3, pc, #264	@ (adr r3, 80058ac <__kernel_sin+0x14c>)
 80057a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057a8:	e9cd 0100 	strd	r0, r1, [sp]
 80057ac:	4650      	mov	r0, sl
 80057ae:	4659      	mov	r1, fp
 80057b0:	f7fa fee6 	bl	8000580 <__aeabi_dmul>
 80057b4:	a33f      	add	r3, pc, #252	@ (adr r3, 80058b4 <__kernel_sin+0x154>)
 80057b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ba:	f7fa fd29 	bl	8000210 <__aeabi_dsub>
 80057be:	4652      	mov	r2, sl
 80057c0:	465b      	mov	r3, fp
 80057c2:	f7fa fedd 	bl	8000580 <__aeabi_dmul>
 80057c6:	a33d      	add	r3, pc, #244	@ (adr r3, 80058bc <__kernel_sin+0x15c>)
 80057c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057cc:	f7fa fd22 	bl	8000214 <__adddf3>
 80057d0:	4652      	mov	r2, sl
 80057d2:	465b      	mov	r3, fp
 80057d4:	f7fa fed4 	bl	8000580 <__aeabi_dmul>
 80057d8:	a33a      	add	r3, pc, #232	@ (adr r3, 80058c4 <__kernel_sin+0x164>)
 80057da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057de:	f7fa fd17 	bl	8000210 <__aeabi_dsub>
 80057e2:	4652      	mov	r2, sl
 80057e4:	465b      	mov	r3, fp
 80057e6:	f7fa fecb 	bl	8000580 <__aeabi_dmul>
 80057ea:	a338      	add	r3, pc, #224	@ (adr r3, 80058cc <__kernel_sin+0x16c>)
 80057ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057f0:	f7fa fd10 	bl	8000214 <__adddf3>
 80057f4:	4606      	mov	r6, r0
 80057f6:	460f      	mov	r7, r1
 80057f8:	f1b8 0f00 	cmp.w	r8, #0
 80057fc:	d11b      	bne.n	8005836 <__kernel_sin+0xd6>
 80057fe:	4602      	mov	r2, r0
 8005800:	460b      	mov	r3, r1
 8005802:	4650      	mov	r0, sl
 8005804:	4659      	mov	r1, fp
 8005806:	f7fa febb 	bl	8000580 <__aeabi_dmul>
 800580a:	a325      	add	r3, pc, #148	@ (adr r3, 80058a0 <__kernel_sin+0x140>)
 800580c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005810:	f7fa fcfe 	bl	8000210 <__aeabi_dsub>
 8005814:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005818:	f7fa feb2 	bl	8000580 <__aeabi_dmul>
 800581c:	4602      	mov	r2, r0
 800581e:	460b      	mov	r3, r1
 8005820:	4620      	mov	r0, r4
 8005822:	4629      	mov	r1, r5
 8005824:	f7fa fcf6 	bl	8000214 <__adddf3>
 8005828:	4604      	mov	r4, r0
 800582a:	460d      	mov	r5, r1
 800582c:	ec45 4b10 	vmov	d0, r4, r5
 8005830:	b005      	add	sp, #20
 8005832:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005836:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800583a:	4b1b      	ldr	r3, [pc, #108]	@ (80058a8 <__kernel_sin+0x148>)
 800583c:	2200      	movs	r2, #0
 800583e:	f7fa fe9f 	bl	8000580 <__aeabi_dmul>
 8005842:	4632      	mov	r2, r6
 8005844:	4680      	mov	r8, r0
 8005846:	4689      	mov	r9, r1
 8005848:	463b      	mov	r3, r7
 800584a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800584e:	f7fa fe97 	bl	8000580 <__aeabi_dmul>
 8005852:	4602      	mov	r2, r0
 8005854:	460b      	mov	r3, r1
 8005856:	4640      	mov	r0, r8
 8005858:	4649      	mov	r1, r9
 800585a:	f7fa fcd9 	bl	8000210 <__aeabi_dsub>
 800585e:	4652      	mov	r2, sl
 8005860:	465b      	mov	r3, fp
 8005862:	f7fa fe8d 	bl	8000580 <__aeabi_dmul>
 8005866:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800586a:	f7fa fcd1 	bl	8000210 <__aeabi_dsub>
 800586e:	a30c      	add	r3, pc, #48	@ (adr r3, 80058a0 <__kernel_sin+0x140>)
 8005870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005874:	4606      	mov	r6, r0
 8005876:	460f      	mov	r7, r1
 8005878:	e9dd 0100 	ldrd	r0, r1, [sp]
 800587c:	f7fa fe80 	bl	8000580 <__aeabi_dmul>
 8005880:	4602      	mov	r2, r0
 8005882:	460b      	mov	r3, r1
 8005884:	4630      	mov	r0, r6
 8005886:	4639      	mov	r1, r7
 8005888:	f7fa fcc4 	bl	8000214 <__adddf3>
 800588c:	4602      	mov	r2, r0
 800588e:	460b      	mov	r3, r1
 8005890:	4620      	mov	r0, r4
 8005892:	4629      	mov	r1, r5
 8005894:	f7fa fcbc 	bl	8000210 <__aeabi_dsub>
 8005898:	e7c6      	b.n	8005828 <__kernel_sin+0xc8>
 800589a:	bf00      	nop
 800589c:	f3af 8000 	nop.w
 80058a0:	55555549 	.word	0x55555549
 80058a4:	3fc55555 	.word	0x3fc55555
 80058a8:	3fe00000 	.word	0x3fe00000
 80058ac:	5acfd57c 	.word	0x5acfd57c
 80058b0:	3de5d93a 	.word	0x3de5d93a
 80058b4:	8a2b9ceb 	.word	0x8a2b9ceb
 80058b8:	3e5ae5e6 	.word	0x3e5ae5e6
 80058bc:	57b1fe7d 	.word	0x57b1fe7d
 80058c0:	3ec71de3 	.word	0x3ec71de3
 80058c4:	19c161d5 	.word	0x19c161d5
 80058c8:	3f2a01a0 	.word	0x3f2a01a0
 80058cc:	1110f8a6 	.word	0x1110f8a6
 80058d0:	3f811111 	.word	0x3f811111
 80058d4:	00000000 	.word	0x00000000

080058d8 <__ieee754_atan2>:
 80058d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80058dc:	ec57 6b11 	vmov	r6, r7, d1
 80058e0:	4273      	negs	r3, r6
 80058e2:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 8005a60 <__ieee754_atan2+0x188>
 80058e6:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 80058ea:	4333      	orrs	r3, r6
 80058ec:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80058f0:	4543      	cmp	r3, r8
 80058f2:	ec51 0b10 	vmov	r0, r1, d0
 80058f6:	4635      	mov	r5, r6
 80058f8:	d809      	bhi.n	800590e <__ieee754_atan2+0x36>
 80058fa:	4244      	negs	r4, r0
 80058fc:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8005900:	4304      	orrs	r4, r0
 8005902:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8005906:	4544      	cmp	r4, r8
 8005908:	468e      	mov	lr, r1
 800590a:	4681      	mov	r9, r0
 800590c:	d907      	bls.n	800591e <__ieee754_atan2+0x46>
 800590e:	4632      	mov	r2, r6
 8005910:	463b      	mov	r3, r7
 8005912:	f7fa fc7f 	bl	8000214 <__adddf3>
 8005916:	ec41 0b10 	vmov	d0, r0, r1
 800591a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800591e:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 8005922:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 8005926:	4334      	orrs	r4, r6
 8005928:	d103      	bne.n	8005932 <__ieee754_atan2+0x5a>
 800592a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800592e:	f000 bfdb 	b.w	80068e8 <atan>
 8005932:	17bc      	asrs	r4, r7, #30
 8005934:	f004 0402 	and.w	r4, r4, #2
 8005938:	ea53 0909 	orrs.w	r9, r3, r9
 800593c:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8005940:	d107      	bne.n	8005952 <__ieee754_atan2+0x7a>
 8005942:	2c02      	cmp	r4, #2
 8005944:	d05f      	beq.n	8005a06 <__ieee754_atan2+0x12e>
 8005946:	2c03      	cmp	r4, #3
 8005948:	d1e5      	bne.n	8005916 <__ieee754_atan2+0x3e>
 800594a:	a141      	add	r1, pc, #260	@ (adr r1, 8005a50 <__ieee754_atan2+0x178>)
 800594c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005950:	e7e1      	b.n	8005916 <__ieee754_atan2+0x3e>
 8005952:	4315      	orrs	r5, r2
 8005954:	d106      	bne.n	8005964 <__ieee754_atan2+0x8c>
 8005956:	f1be 0f00 	cmp.w	lr, #0
 800595a:	da5f      	bge.n	8005a1c <__ieee754_atan2+0x144>
 800595c:	a13e      	add	r1, pc, #248	@ (adr r1, 8005a58 <__ieee754_atan2+0x180>)
 800595e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005962:	e7d8      	b.n	8005916 <__ieee754_atan2+0x3e>
 8005964:	4542      	cmp	r2, r8
 8005966:	d10f      	bne.n	8005988 <__ieee754_atan2+0xb0>
 8005968:	4293      	cmp	r3, r2
 800596a:	f104 34ff 	add.w	r4, r4, #4294967295
 800596e:	d107      	bne.n	8005980 <__ieee754_atan2+0xa8>
 8005970:	2c02      	cmp	r4, #2
 8005972:	d84c      	bhi.n	8005a0e <__ieee754_atan2+0x136>
 8005974:	4b34      	ldr	r3, [pc, #208]	@ (8005a48 <__ieee754_atan2+0x170>)
 8005976:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800597a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800597e:	e7ca      	b.n	8005916 <__ieee754_atan2+0x3e>
 8005980:	2c02      	cmp	r4, #2
 8005982:	d848      	bhi.n	8005a16 <__ieee754_atan2+0x13e>
 8005984:	4b31      	ldr	r3, [pc, #196]	@ (8005a4c <__ieee754_atan2+0x174>)
 8005986:	e7f6      	b.n	8005976 <__ieee754_atan2+0x9e>
 8005988:	4543      	cmp	r3, r8
 800598a:	d0e4      	beq.n	8005956 <__ieee754_atan2+0x7e>
 800598c:	1a9b      	subs	r3, r3, r2
 800598e:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 8005992:	ea4f 5223 	mov.w	r2, r3, asr #20
 8005996:	da1e      	bge.n	80059d6 <__ieee754_atan2+0xfe>
 8005998:	2f00      	cmp	r7, #0
 800599a:	da01      	bge.n	80059a0 <__ieee754_atan2+0xc8>
 800599c:	323c      	adds	r2, #60	@ 0x3c
 800599e:	db1e      	blt.n	80059de <__ieee754_atan2+0x106>
 80059a0:	4632      	mov	r2, r6
 80059a2:	463b      	mov	r3, r7
 80059a4:	f7fa ff16 	bl	80007d4 <__aeabi_ddiv>
 80059a8:	ec41 0b10 	vmov	d0, r0, r1
 80059ac:	f001 f934 	bl	8006c18 <fabs>
 80059b0:	f000 ff9a 	bl	80068e8 <atan>
 80059b4:	ec51 0b10 	vmov	r0, r1, d0
 80059b8:	2c01      	cmp	r4, #1
 80059ba:	d013      	beq.n	80059e4 <__ieee754_atan2+0x10c>
 80059bc:	2c02      	cmp	r4, #2
 80059be:	d015      	beq.n	80059ec <__ieee754_atan2+0x114>
 80059c0:	2c00      	cmp	r4, #0
 80059c2:	d0a8      	beq.n	8005916 <__ieee754_atan2+0x3e>
 80059c4:	a318      	add	r3, pc, #96	@ (adr r3, 8005a28 <__ieee754_atan2+0x150>)
 80059c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059ca:	f7fa fc21 	bl	8000210 <__aeabi_dsub>
 80059ce:	a318      	add	r3, pc, #96	@ (adr r3, 8005a30 <__ieee754_atan2+0x158>)
 80059d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059d4:	e014      	b.n	8005a00 <__ieee754_atan2+0x128>
 80059d6:	a118      	add	r1, pc, #96	@ (adr r1, 8005a38 <__ieee754_atan2+0x160>)
 80059d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80059dc:	e7ec      	b.n	80059b8 <__ieee754_atan2+0xe0>
 80059de:	2000      	movs	r0, #0
 80059e0:	2100      	movs	r1, #0
 80059e2:	e7e9      	b.n	80059b8 <__ieee754_atan2+0xe0>
 80059e4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80059e8:	4619      	mov	r1, r3
 80059ea:	e794      	b.n	8005916 <__ieee754_atan2+0x3e>
 80059ec:	a30e      	add	r3, pc, #56	@ (adr r3, 8005a28 <__ieee754_atan2+0x150>)
 80059ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059f2:	f7fa fc0d 	bl	8000210 <__aeabi_dsub>
 80059f6:	4602      	mov	r2, r0
 80059f8:	460b      	mov	r3, r1
 80059fa:	a10d      	add	r1, pc, #52	@ (adr r1, 8005a30 <__ieee754_atan2+0x158>)
 80059fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005a00:	f7fa fc06 	bl	8000210 <__aeabi_dsub>
 8005a04:	e787      	b.n	8005916 <__ieee754_atan2+0x3e>
 8005a06:	a10a      	add	r1, pc, #40	@ (adr r1, 8005a30 <__ieee754_atan2+0x158>)
 8005a08:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005a0c:	e783      	b.n	8005916 <__ieee754_atan2+0x3e>
 8005a0e:	a10c      	add	r1, pc, #48	@ (adr r1, 8005a40 <__ieee754_atan2+0x168>)
 8005a10:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005a14:	e77f      	b.n	8005916 <__ieee754_atan2+0x3e>
 8005a16:	2000      	movs	r0, #0
 8005a18:	2100      	movs	r1, #0
 8005a1a:	e77c      	b.n	8005916 <__ieee754_atan2+0x3e>
 8005a1c:	a106      	add	r1, pc, #24	@ (adr r1, 8005a38 <__ieee754_atan2+0x160>)
 8005a1e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005a22:	e778      	b.n	8005916 <__ieee754_atan2+0x3e>
 8005a24:	f3af 8000 	nop.w
 8005a28:	33145c07 	.word	0x33145c07
 8005a2c:	3ca1a626 	.word	0x3ca1a626
 8005a30:	54442d18 	.word	0x54442d18
 8005a34:	400921fb 	.word	0x400921fb
 8005a38:	54442d18 	.word	0x54442d18
 8005a3c:	3ff921fb 	.word	0x3ff921fb
 8005a40:	54442d18 	.word	0x54442d18
 8005a44:	3fe921fb 	.word	0x3fe921fb
 8005a48:	080077b8 	.word	0x080077b8
 8005a4c:	080077a0 	.word	0x080077a0
 8005a50:	54442d18 	.word	0x54442d18
 8005a54:	c00921fb 	.word	0xc00921fb
 8005a58:	54442d18 	.word	0x54442d18
 8005a5c:	bff921fb 	.word	0xbff921fb
 8005a60:	7ff00000 	.word	0x7ff00000
 8005a64:	00000000 	.word	0x00000000

08005a68 <__ieee754_pow>:
 8005a68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a6c:	b091      	sub	sp, #68	@ 0x44
 8005a6e:	ed8d 1b00 	vstr	d1, [sp]
 8005a72:	e9dd 1900 	ldrd	r1, r9, [sp]
 8005a76:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 8005a7a:	ea5a 0001 	orrs.w	r0, sl, r1
 8005a7e:	ec57 6b10 	vmov	r6, r7, d0
 8005a82:	d113      	bne.n	8005aac <__ieee754_pow+0x44>
 8005a84:	19b3      	adds	r3, r6, r6
 8005a86:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 8005a8a:	4152      	adcs	r2, r2
 8005a8c:	4298      	cmp	r0, r3
 8005a8e:	4b98      	ldr	r3, [pc, #608]	@ (8005cf0 <__ieee754_pow+0x288>)
 8005a90:	4193      	sbcs	r3, r2
 8005a92:	f080 84ea 	bcs.w	800646a <__ieee754_pow+0xa02>
 8005a96:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005a9a:	4630      	mov	r0, r6
 8005a9c:	4639      	mov	r1, r7
 8005a9e:	f7fa fbb9 	bl	8000214 <__adddf3>
 8005aa2:	ec41 0b10 	vmov	d0, r0, r1
 8005aa6:	b011      	add	sp, #68	@ 0x44
 8005aa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005aac:	4a91      	ldr	r2, [pc, #580]	@ (8005cf4 <__ieee754_pow+0x28c>)
 8005aae:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8005ab2:	4590      	cmp	r8, r2
 8005ab4:	463d      	mov	r5, r7
 8005ab6:	4633      	mov	r3, r6
 8005ab8:	d806      	bhi.n	8005ac8 <__ieee754_pow+0x60>
 8005aba:	d101      	bne.n	8005ac0 <__ieee754_pow+0x58>
 8005abc:	2e00      	cmp	r6, #0
 8005abe:	d1ea      	bne.n	8005a96 <__ieee754_pow+0x2e>
 8005ac0:	4592      	cmp	sl, r2
 8005ac2:	d801      	bhi.n	8005ac8 <__ieee754_pow+0x60>
 8005ac4:	d10e      	bne.n	8005ae4 <__ieee754_pow+0x7c>
 8005ac6:	b169      	cbz	r1, 8005ae4 <__ieee754_pow+0x7c>
 8005ac8:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8005acc:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8005ad0:	431d      	orrs	r5, r3
 8005ad2:	d1e0      	bne.n	8005a96 <__ieee754_pow+0x2e>
 8005ad4:	e9dd 3200 	ldrd	r3, r2, [sp]
 8005ad8:	18db      	adds	r3, r3, r3
 8005ada:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8005ade:	4152      	adcs	r2, r2
 8005ae0:	429d      	cmp	r5, r3
 8005ae2:	e7d4      	b.n	8005a8e <__ieee754_pow+0x26>
 8005ae4:	2d00      	cmp	r5, #0
 8005ae6:	46c3      	mov	fp, r8
 8005ae8:	da3a      	bge.n	8005b60 <__ieee754_pow+0xf8>
 8005aea:	4a83      	ldr	r2, [pc, #524]	@ (8005cf8 <__ieee754_pow+0x290>)
 8005aec:	4592      	cmp	sl, r2
 8005aee:	d84d      	bhi.n	8005b8c <__ieee754_pow+0x124>
 8005af0:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8005af4:	4592      	cmp	sl, r2
 8005af6:	f240 84c7 	bls.w	8006488 <__ieee754_pow+0xa20>
 8005afa:	ea4f 522a 	mov.w	r2, sl, asr #20
 8005afe:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8005b02:	2a14      	cmp	r2, #20
 8005b04:	dd0f      	ble.n	8005b26 <__ieee754_pow+0xbe>
 8005b06:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8005b0a:	fa21 f402 	lsr.w	r4, r1, r2
 8005b0e:	fa04 f202 	lsl.w	r2, r4, r2
 8005b12:	428a      	cmp	r2, r1
 8005b14:	f040 84b8 	bne.w	8006488 <__ieee754_pow+0xa20>
 8005b18:	f004 0401 	and.w	r4, r4, #1
 8005b1c:	f1c4 0402 	rsb	r4, r4, #2
 8005b20:	2900      	cmp	r1, #0
 8005b22:	d158      	bne.n	8005bd6 <__ieee754_pow+0x16e>
 8005b24:	e00e      	b.n	8005b44 <__ieee754_pow+0xdc>
 8005b26:	2900      	cmp	r1, #0
 8005b28:	d154      	bne.n	8005bd4 <__ieee754_pow+0x16c>
 8005b2a:	f1c2 0214 	rsb	r2, r2, #20
 8005b2e:	fa4a f402 	asr.w	r4, sl, r2
 8005b32:	fa04 f202 	lsl.w	r2, r4, r2
 8005b36:	4552      	cmp	r2, sl
 8005b38:	f040 84a3 	bne.w	8006482 <__ieee754_pow+0xa1a>
 8005b3c:	f004 0401 	and.w	r4, r4, #1
 8005b40:	f1c4 0402 	rsb	r4, r4, #2
 8005b44:	4a6d      	ldr	r2, [pc, #436]	@ (8005cfc <__ieee754_pow+0x294>)
 8005b46:	4592      	cmp	sl, r2
 8005b48:	d12e      	bne.n	8005ba8 <__ieee754_pow+0x140>
 8005b4a:	f1b9 0f00 	cmp.w	r9, #0
 8005b4e:	f280 8494 	bge.w	800647a <__ieee754_pow+0xa12>
 8005b52:	496a      	ldr	r1, [pc, #424]	@ (8005cfc <__ieee754_pow+0x294>)
 8005b54:	4632      	mov	r2, r6
 8005b56:	463b      	mov	r3, r7
 8005b58:	2000      	movs	r0, #0
 8005b5a:	f7fa fe3b 	bl	80007d4 <__aeabi_ddiv>
 8005b5e:	e7a0      	b.n	8005aa2 <__ieee754_pow+0x3a>
 8005b60:	2400      	movs	r4, #0
 8005b62:	bbc1      	cbnz	r1, 8005bd6 <__ieee754_pow+0x16e>
 8005b64:	4a63      	ldr	r2, [pc, #396]	@ (8005cf4 <__ieee754_pow+0x28c>)
 8005b66:	4592      	cmp	sl, r2
 8005b68:	d1ec      	bne.n	8005b44 <__ieee754_pow+0xdc>
 8005b6a:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 8005b6e:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 8005b72:	431a      	orrs	r2, r3
 8005b74:	f000 8479 	beq.w	800646a <__ieee754_pow+0xa02>
 8005b78:	4b61      	ldr	r3, [pc, #388]	@ (8005d00 <__ieee754_pow+0x298>)
 8005b7a:	4598      	cmp	r8, r3
 8005b7c:	d908      	bls.n	8005b90 <__ieee754_pow+0x128>
 8005b7e:	f1b9 0f00 	cmp.w	r9, #0
 8005b82:	f2c0 8476 	blt.w	8006472 <__ieee754_pow+0xa0a>
 8005b86:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005b8a:	e78a      	b.n	8005aa2 <__ieee754_pow+0x3a>
 8005b8c:	2402      	movs	r4, #2
 8005b8e:	e7e8      	b.n	8005b62 <__ieee754_pow+0xfa>
 8005b90:	f1b9 0f00 	cmp.w	r9, #0
 8005b94:	f04f 0000 	mov.w	r0, #0
 8005b98:	f04f 0100 	mov.w	r1, #0
 8005b9c:	da81      	bge.n	8005aa2 <__ieee754_pow+0x3a>
 8005b9e:	e9dd 0300 	ldrd	r0, r3, [sp]
 8005ba2:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8005ba6:	e77c      	b.n	8005aa2 <__ieee754_pow+0x3a>
 8005ba8:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 8005bac:	d106      	bne.n	8005bbc <__ieee754_pow+0x154>
 8005bae:	4632      	mov	r2, r6
 8005bb0:	463b      	mov	r3, r7
 8005bb2:	4630      	mov	r0, r6
 8005bb4:	4639      	mov	r1, r7
 8005bb6:	f7fa fce3 	bl	8000580 <__aeabi_dmul>
 8005bba:	e772      	b.n	8005aa2 <__ieee754_pow+0x3a>
 8005bbc:	4a51      	ldr	r2, [pc, #324]	@ (8005d04 <__ieee754_pow+0x29c>)
 8005bbe:	4591      	cmp	r9, r2
 8005bc0:	d109      	bne.n	8005bd6 <__ieee754_pow+0x16e>
 8005bc2:	2d00      	cmp	r5, #0
 8005bc4:	db07      	blt.n	8005bd6 <__ieee754_pow+0x16e>
 8005bc6:	ec47 6b10 	vmov	d0, r6, r7
 8005bca:	b011      	add	sp, #68	@ 0x44
 8005bcc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bd0:	f001 b8e6 	b.w	8006da0 <__ieee754_sqrt>
 8005bd4:	2400      	movs	r4, #0
 8005bd6:	ec47 6b10 	vmov	d0, r6, r7
 8005bda:	9302      	str	r3, [sp, #8]
 8005bdc:	f001 f81c 	bl	8006c18 <fabs>
 8005be0:	9b02      	ldr	r3, [sp, #8]
 8005be2:	ec51 0b10 	vmov	r0, r1, d0
 8005be6:	bb53      	cbnz	r3, 8005c3e <__ieee754_pow+0x1d6>
 8005be8:	4b44      	ldr	r3, [pc, #272]	@ (8005cfc <__ieee754_pow+0x294>)
 8005bea:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 8005bee:	429a      	cmp	r2, r3
 8005bf0:	d002      	beq.n	8005bf8 <__ieee754_pow+0x190>
 8005bf2:	f1b8 0f00 	cmp.w	r8, #0
 8005bf6:	d122      	bne.n	8005c3e <__ieee754_pow+0x1d6>
 8005bf8:	f1b9 0f00 	cmp.w	r9, #0
 8005bfc:	da05      	bge.n	8005c0a <__ieee754_pow+0x1a2>
 8005bfe:	4602      	mov	r2, r0
 8005c00:	460b      	mov	r3, r1
 8005c02:	2000      	movs	r0, #0
 8005c04:	493d      	ldr	r1, [pc, #244]	@ (8005cfc <__ieee754_pow+0x294>)
 8005c06:	f7fa fde5 	bl	80007d4 <__aeabi_ddiv>
 8005c0a:	2d00      	cmp	r5, #0
 8005c0c:	f6bf af49 	bge.w	8005aa2 <__ieee754_pow+0x3a>
 8005c10:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 8005c14:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8005c18:	ea58 0804 	orrs.w	r8, r8, r4
 8005c1c:	d108      	bne.n	8005c30 <__ieee754_pow+0x1c8>
 8005c1e:	4602      	mov	r2, r0
 8005c20:	460b      	mov	r3, r1
 8005c22:	4610      	mov	r0, r2
 8005c24:	4619      	mov	r1, r3
 8005c26:	f7fa faf3 	bl	8000210 <__aeabi_dsub>
 8005c2a:	4602      	mov	r2, r0
 8005c2c:	460b      	mov	r3, r1
 8005c2e:	e794      	b.n	8005b5a <__ieee754_pow+0xf2>
 8005c30:	2c01      	cmp	r4, #1
 8005c32:	f47f af36 	bne.w	8005aa2 <__ieee754_pow+0x3a>
 8005c36:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005c3a:	4619      	mov	r1, r3
 8005c3c:	e731      	b.n	8005aa2 <__ieee754_pow+0x3a>
 8005c3e:	0feb      	lsrs	r3, r5, #31
 8005c40:	3b01      	subs	r3, #1
 8005c42:	ea53 0204 	orrs.w	r2, r3, r4
 8005c46:	d102      	bne.n	8005c4e <__ieee754_pow+0x1e6>
 8005c48:	4632      	mov	r2, r6
 8005c4a:	463b      	mov	r3, r7
 8005c4c:	e7e9      	b.n	8005c22 <__ieee754_pow+0x1ba>
 8005c4e:	3c01      	subs	r4, #1
 8005c50:	431c      	orrs	r4, r3
 8005c52:	d016      	beq.n	8005c82 <__ieee754_pow+0x21a>
 8005c54:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8005ce0 <__ieee754_pow+0x278>
 8005c58:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8005c5c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005c60:	f240 8112 	bls.w	8005e88 <__ieee754_pow+0x420>
 8005c64:	4b28      	ldr	r3, [pc, #160]	@ (8005d08 <__ieee754_pow+0x2a0>)
 8005c66:	459a      	cmp	sl, r3
 8005c68:	4b25      	ldr	r3, [pc, #148]	@ (8005d00 <__ieee754_pow+0x298>)
 8005c6a:	d916      	bls.n	8005c9a <__ieee754_pow+0x232>
 8005c6c:	4598      	cmp	r8, r3
 8005c6e:	d80b      	bhi.n	8005c88 <__ieee754_pow+0x220>
 8005c70:	f1b9 0f00 	cmp.w	r9, #0
 8005c74:	da0b      	bge.n	8005c8e <__ieee754_pow+0x226>
 8005c76:	2000      	movs	r0, #0
 8005c78:	b011      	add	sp, #68	@ 0x44
 8005c7a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c7e:	f001 b887 	b.w	8006d90 <__math_oflow>
 8005c82:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 8005ce8 <__ieee754_pow+0x280>
 8005c86:	e7e7      	b.n	8005c58 <__ieee754_pow+0x1f0>
 8005c88:	f1b9 0f00 	cmp.w	r9, #0
 8005c8c:	dcf3      	bgt.n	8005c76 <__ieee754_pow+0x20e>
 8005c8e:	2000      	movs	r0, #0
 8005c90:	b011      	add	sp, #68	@ 0x44
 8005c92:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c96:	f001 b873 	b.w	8006d80 <__math_uflow>
 8005c9a:	4598      	cmp	r8, r3
 8005c9c:	d20c      	bcs.n	8005cb8 <__ieee754_pow+0x250>
 8005c9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	f7fa fedd 	bl	8000a64 <__aeabi_dcmplt>
 8005caa:	3800      	subs	r0, #0
 8005cac:	bf18      	it	ne
 8005cae:	2001      	movne	r0, #1
 8005cb0:	f1b9 0f00 	cmp.w	r9, #0
 8005cb4:	daec      	bge.n	8005c90 <__ieee754_pow+0x228>
 8005cb6:	e7df      	b.n	8005c78 <__ieee754_pow+0x210>
 8005cb8:	4b10      	ldr	r3, [pc, #64]	@ (8005cfc <__ieee754_pow+0x294>)
 8005cba:	4598      	cmp	r8, r3
 8005cbc:	f04f 0200 	mov.w	r2, #0
 8005cc0:	d924      	bls.n	8005d0c <__ieee754_pow+0x2a4>
 8005cc2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	f7fa fecc 	bl	8000a64 <__aeabi_dcmplt>
 8005ccc:	3800      	subs	r0, #0
 8005cce:	bf18      	it	ne
 8005cd0:	2001      	movne	r0, #1
 8005cd2:	f1b9 0f00 	cmp.w	r9, #0
 8005cd6:	dccf      	bgt.n	8005c78 <__ieee754_pow+0x210>
 8005cd8:	e7da      	b.n	8005c90 <__ieee754_pow+0x228>
 8005cda:	bf00      	nop
 8005cdc:	f3af 8000 	nop.w
 8005ce0:	00000000 	.word	0x00000000
 8005ce4:	3ff00000 	.word	0x3ff00000
 8005ce8:	00000000 	.word	0x00000000
 8005cec:	bff00000 	.word	0xbff00000
 8005cf0:	fff00000 	.word	0xfff00000
 8005cf4:	7ff00000 	.word	0x7ff00000
 8005cf8:	433fffff 	.word	0x433fffff
 8005cfc:	3ff00000 	.word	0x3ff00000
 8005d00:	3fefffff 	.word	0x3fefffff
 8005d04:	3fe00000 	.word	0x3fe00000
 8005d08:	43f00000 	.word	0x43f00000
 8005d0c:	4b5a      	ldr	r3, [pc, #360]	@ (8005e78 <__ieee754_pow+0x410>)
 8005d0e:	f7fa fa7f 	bl	8000210 <__aeabi_dsub>
 8005d12:	a351      	add	r3, pc, #324	@ (adr r3, 8005e58 <__ieee754_pow+0x3f0>)
 8005d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d18:	4604      	mov	r4, r0
 8005d1a:	460d      	mov	r5, r1
 8005d1c:	f7fa fc30 	bl	8000580 <__aeabi_dmul>
 8005d20:	a34f      	add	r3, pc, #316	@ (adr r3, 8005e60 <__ieee754_pow+0x3f8>)
 8005d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d26:	4606      	mov	r6, r0
 8005d28:	460f      	mov	r7, r1
 8005d2a:	4620      	mov	r0, r4
 8005d2c:	4629      	mov	r1, r5
 8005d2e:	f7fa fc27 	bl	8000580 <__aeabi_dmul>
 8005d32:	4b52      	ldr	r3, [pc, #328]	@ (8005e7c <__ieee754_pow+0x414>)
 8005d34:	4682      	mov	sl, r0
 8005d36:	468b      	mov	fp, r1
 8005d38:	2200      	movs	r2, #0
 8005d3a:	4620      	mov	r0, r4
 8005d3c:	4629      	mov	r1, r5
 8005d3e:	f7fa fc1f 	bl	8000580 <__aeabi_dmul>
 8005d42:	4602      	mov	r2, r0
 8005d44:	460b      	mov	r3, r1
 8005d46:	a148      	add	r1, pc, #288	@ (adr r1, 8005e68 <__ieee754_pow+0x400>)
 8005d48:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005d4c:	f7fa fa60 	bl	8000210 <__aeabi_dsub>
 8005d50:	4622      	mov	r2, r4
 8005d52:	462b      	mov	r3, r5
 8005d54:	f7fa fc14 	bl	8000580 <__aeabi_dmul>
 8005d58:	4602      	mov	r2, r0
 8005d5a:	460b      	mov	r3, r1
 8005d5c:	2000      	movs	r0, #0
 8005d5e:	4948      	ldr	r1, [pc, #288]	@ (8005e80 <__ieee754_pow+0x418>)
 8005d60:	f7fa fa56 	bl	8000210 <__aeabi_dsub>
 8005d64:	4622      	mov	r2, r4
 8005d66:	4680      	mov	r8, r0
 8005d68:	4689      	mov	r9, r1
 8005d6a:	462b      	mov	r3, r5
 8005d6c:	4620      	mov	r0, r4
 8005d6e:	4629      	mov	r1, r5
 8005d70:	f7fa fc06 	bl	8000580 <__aeabi_dmul>
 8005d74:	4602      	mov	r2, r0
 8005d76:	460b      	mov	r3, r1
 8005d78:	4640      	mov	r0, r8
 8005d7a:	4649      	mov	r1, r9
 8005d7c:	f7fa fc00 	bl	8000580 <__aeabi_dmul>
 8005d80:	a33b      	add	r3, pc, #236	@ (adr r3, 8005e70 <__ieee754_pow+0x408>)
 8005d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d86:	f7fa fbfb 	bl	8000580 <__aeabi_dmul>
 8005d8a:	4602      	mov	r2, r0
 8005d8c:	460b      	mov	r3, r1
 8005d8e:	4650      	mov	r0, sl
 8005d90:	4659      	mov	r1, fp
 8005d92:	f7fa fa3d 	bl	8000210 <__aeabi_dsub>
 8005d96:	4602      	mov	r2, r0
 8005d98:	460b      	mov	r3, r1
 8005d9a:	4680      	mov	r8, r0
 8005d9c:	4689      	mov	r9, r1
 8005d9e:	4630      	mov	r0, r6
 8005da0:	4639      	mov	r1, r7
 8005da2:	f7fa fa37 	bl	8000214 <__adddf3>
 8005da6:	2400      	movs	r4, #0
 8005da8:	4632      	mov	r2, r6
 8005daa:	463b      	mov	r3, r7
 8005dac:	4620      	mov	r0, r4
 8005dae:	460d      	mov	r5, r1
 8005db0:	f7fa fa2e 	bl	8000210 <__aeabi_dsub>
 8005db4:	4602      	mov	r2, r0
 8005db6:	460b      	mov	r3, r1
 8005db8:	4640      	mov	r0, r8
 8005dba:	4649      	mov	r1, r9
 8005dbc:	f7fa fa28 	bl	8000210 <__aeabi_dsub>
 8005dc0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005dc4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005dc8:	2300      	movs	r3, #0
 8005dca:	9304      	str	r3, [sp, #16]
 8005dcc:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8005dd0:	4606      	mov	r6, r0
 8005dd2:	460f      	mov	r7, r1
 8005dd4:	4652      	mov	r2, sl
 8005dd6:	465b      	mov	r3, fp
 8005dd8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005ddc:	f7fa fa18 	bl	8000210 <__aeabi_dsub>
 8005de0:	4622      	mov	r2, r4
 8005de2:	462b      	mov	r3, r5
 8005de4:	f7fa fbcc 	bl	8000580 <__aeabi_dmul>
 8005de8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005dec:	4680      	mov	r8, r0
 8005dee:	4689      	mov	r9, r1
 8005df0:	4630      	mov	r0, r6
 8005df2:	4639      	mov	r1, r7
 8005df4:	f7fa fbc4 	bl	8000580 <__aeabi_dmul>
 8005df8:	4602      	mov	r2, r0
 8005dfa:	460b      	mov	r3, r1
 8005dfc:	4640      	mov	r0, r8
 8005dfe:	4649      	mov	r1, r9
 8005e00:	f7fa fa08 	bl	8000214 <__adddf3>
 8005e04:	4652      	mov	r2, sl
 8005e06:	465b      	mov	r3, fp
 8005e08:	4606      	mov	r6, r0
 8005e0a:	460f      	mov	r7, r1
 8005e0c:	4620      	mov	r0, r4
 8005e0e:	4629      	mov	r1, r5
 8005e10:	f7fa fbb6 	bl	8000580 <__aeabi_dmul>
 8005e14:	460b      	mov	r3, r1
 8005e16:	4602      	mov	r2, r0
 8005e18:	4680      	mov	r8, r0
 8005e1a:	4689      	mov	r9, r1
 8005e1c:	4630      	mov	r0, r6
 8005e1e:	4639      	mov	r1, r7
 8005e20:	f7fa f9f8 	bl	8000214 <__adddf3>
 8005e24:	4b17      	ldr	r3, [pc, #92]	@ (8005e84 <__ieee754_pow+0x41c>)
 8005e26:	4299      	cmp	r1, r3
 8005e28:	4604      	mov	r4, r0
 8005e2a:	460d      	mov	r5, r1
 8005e2c:	468a      	mov	sl, r1
 8005e2e:	468b      	mov	fp, r1
 8005e30:	f340 82ef 	ble.w	8006412 <__ieee754_pow+0x9aa>
 8005e34:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8005e38:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8005e3c:	4303      	orrs	r3, r0
 8005e3e:	f000 81e8 	beq.w	8006212 <__ieee754_pow+0x7aa>
 8005e42:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005e46:	2200      	movs	r2, #0
 8005e48:	2300      	movs	r3, #0
 8005e4a:	f7fa fe0b 	bl	8000a64 <__aeabi_dcmplt>
 8005e4e:	3800      	subs	r0, #0
 8005e50:	bf18      	it	ne
 8005e52:	2001      	movne	r0, #1
 8005e54:	e710      	b.n	8005c78 <__ieee754_pow+0x210>
 8005e56:	bf00      	nop
 8005e58:	60000000 	.word	0x60000000
 8005e5c:	3ff71547 	.word	0x3ff71547
 8005e60:	f85ddf44 	.word	0xf85ddf44
 8005e64:	3e54ae0b 	.word	0x3e54ae0b
 8005e68:	55555555 	.word	0x55555555
 8005e6c:	3fd55555 	.word	0x3fd55555
 8005e70:	652b82fe 	.word	0x652b82fe
 8005e74:	3ff71547 	.word	0x3ff71547
 8005e78:	3ff00000 	.word	0x3ff00000
 8005e7c:	3fd00000 	.word	0x3fd00000
 8005e80:	3fe00000 	.word	0x3fe00000
 8005e84:	408fffff 	.word	0x408fffff
 8005e88:	4bd5      	ldr	r3, [pc, #852]	@ (80061e0 <__ieee754_pow+0x778>)
 8005e8a:	402b      	ands	r3, r5
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	b92b      	cbnz	r3, 8005e9c <__ieee754_pow+0x434>
 8005e90:	4bd4      	ldr	r3, [pc, #848]	@ (80061e4 <__ieee754_pow+0x77c>)
 8005e92:	f7fa fb75 	bl	8000580 <__aeabi_dmul>
 8005e96:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 8005e9a:	468b      	mov	fp, r1
 8005e9c:	ea4f 532b 	mov.w	r3, fp, asr #20
 8005ea0:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8005ea4:	4413      	add	r3, r2
 8005ea6:	930a      	str	r3, [sp, #40]	@ 0x28
 8005ea8:	4bcf      	ldr	r3, [pc, #828]	@ (80061e8 <__ieee754_pow+0x780>)
 8005eaa:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 8005eae:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 8005eb2:	459b      	cmp	fp, r3
 8005eb4:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8005eb8:	dd08      	ble.n	8005ecc <__ieee754_pow+0x464>
 8005eba:	4bcc      	ldr	r3, [pc, #816]	@ (80061ec <__ieee754_pow+0x784>)
 8005ebc:	459b      	cmp	fp, r3
 8005ebe:	f340 81a5 	ble.w	800620c <__ieee754_pow+0x7a4>
 8005ec2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005ec4:	3301      	adds	r3, #1
 8005ec6:	930a      	str	r3, [sp, #40]	@ 0x28
 8005ec8:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8005ecc:	f04f 0a00 	mov.w	sl, #0
 8005ed0:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8005ed4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005ed6:	4bc6      	ldr	r3, [pc, #792]	@ (80061f0 <__ieee754_pow+0x788>)
 8005ed8:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005edc:	ed93 7b00 	vldr	d7, [r3]
 8005ee0:	4629      	mov	r1, r5
 8005ee2:	ec53 2b17 	vmov	r2, r3, d7
 8005ee6:	ed8d 7b06 	vstr	d7, [sp, #24]
 8005eea:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005eee:	f7fa f98f 	bl	8000210 <__aeabi_dsub>
 8005ef2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005ef6:	4606      	mov	r6, r0
 8005ef8:	460f      	mov	r7, r1
 8005efa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005efe:	f7fa f989 	bl	8000214 <__adddf3>
 8005f02:	4602      	mov	r2, r0
 8005f04:	460b      	mov	r3, r1
 8005f06:	2000      	movs	r0, #0
 8005f08:	49ba      	ldr	r1, [pc, #744]	@ (80061f4 <__ieee754_pow+0x78c>)
 8005f0a:	f7fa fc63 	bl	80007d4 <__aeabi_ddiv>
 8005f0e:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8005f12:	4602      	mov	r2, r0
 8005f14:	460b      	mov	r3, r1
 8005f16:	4630      	mov	r0, r6
 8005f18:	4639      	mov	r1, r7
 8005f1a:	f7fa fb31 	bl	8000580 <__aeabi_dmul>
 8005f1e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005f22:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8005f26:	106d      	asrs	r5, r5, #1
 8005f28:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8005f2c:	f04f 0b00 	mov.w	fp, #0
 8005f30:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8005f34:	4661      	mov	r1, ip
 8005f36:	2200      	movs	r2, #0
 8005f38:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8005f3c:	4658      	mov	r0, fp
 8005f3e:	46e1      	mov	r9, ip
 8005f40:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 8005f44:	4614      	mov	r4, r2
 8005f46:	461d      	mov	r5, r3
 8005f48:	f7fa fb1a 	bl	8000580 <__aeabi_dmul>
 8005f4c:	4602      	mov	r2, r0
 8005f4e:	460b      	mov	r3, r1
 8005f50:	4630      	mov	r0, r6
 8005f52:	4639      	mov	r1, r7
 8005f54:	f7fa f95c 	bl	8000210 <__aeabi_dsub>
 8005f58:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005f5c:	4606      	mov	r6, r0
 8005f5e:	460f      	mov	r7, r1
 8005f60:	4620      	mov	r0, r4
 8005f62:	4629      	mov	r1, r5
 8005f64:	f7fa f954 	bl	8000210 <__aeabi_dsub>
 8005f68:	4602      	mov	r2, r0
 8005f6a:	460b      	mov	r3, r1
 8005f6c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005f70:	f7fa f94e 	bl	8000210 <__aeabi_dsub>
 8005f74:	465a      	mov	r2, fp
 8005f76:	464b      	mov	r3, r9
 8005f78:	f7fa fb02 	bl	8000580 <__aeabi_dmul>
 8005f7c:	4602      	mov	r2, r0
 8005f7e:	460b      	mov	r3, r1
 8005f80:	4630      	mov	r0, r6
 8005f82:	4639      	mov	r1, r7
 8005f84:	f7fa f944 	bl	8000210 <__aeabi_dsub>
 8005f88:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8005f8c:	f7fa faf8 	bl	8000580 <__aeabi_dmul>
 8005f90:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005f94:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005f98:	4610      	mov	r0, r2
 8005f9a:	4619      	mov	r1, r3
 8005f9c:	f7fa faf0 	bl	8000580 <__aeabi_dmul>
 8005fa0:	a37d      	add	r3, pc, #500	@ (adr r3, 8006198 <__ieee754_pow+0x730>)
 8005fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fa6:	4604      	mov	r4, r0
 8005fa8:	460d      	mov	r5, r1
 8005faa:	f7fa fae9 	bl	8000580 <__aeabi_dmul>
 8005fae:	a37c      	add	r3, pc, #496	@ (adr r3, 80061a0 <__ieee754_pow+0x738>)
 8005fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fb4:	f7fa f92e 	bl	8000214 <__adddf3>
 8005fb8:	4622      	mov	r2, r4
 8005fba:	462b      	mov	r3, r5
 8005fbc:	f7fa fae0 	bl	8000580 <__aeabi_dmul>
 8005fc0:	a379      	add	r3, pc, #484	@ (adr r3, 80061a8 <__ieee754_pow+0x740>)
 8005fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fc6:	f7fa f925 	bl	8000214 <__adddf3>
 8005fca:	4622      	mov	r2, r4
 8005fcc:	462b      	mov	r3, r5
 8005fce:	f7fa fad7 	bl	8000580 <__aeabi_dmul>
 8005fd2:	a377      	add	r3, pc, #476	@ (adr r3, 80061b0 <__ieee754_pow+0x748>)
 8005fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fd8:	f7fa f91c 	bl	8000214 <__adddf3>
 8005fdc:	4622      	mov	r2, r4
 8005fde:	462b      	mov	r3, r5
 8005fe0:	f7fa face 	bl	8000580 <__aeabi_dmul>
 8005fe4:	a374      	add	r3, pc, #464	@ (adr r3, 80061b8 <__ieee754_pow+0x750>)
 8005fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fea:	f7fa f913 	bl	8000214 <__adddf3>
 8005fee:	4622      	mov	r2, r4
 8005ff0:	462b      	mov	r3, r5
 8005ff2:	f7fa fac5 	bl	8000580 <__aeabi_dmul>
 8005ff6:	a372      	add	r3, pc, #456	@ (adr r3, 80061c0 <__ieee754_pow+0x758>)
 8005ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ffc:	f7fa f90a 	bl	8000214 <__adddf3>
 8006000:	4622      	mov	r2, r4
 8006002:	4606      	mov	r6, r0
 8006004:	460f      	mov	r7, r1
 8006006:	462b      	mov	r3, r5
 8006008:	4620      	mov	r0, r4
 800600a:	4629      	mov	r1, r5
 800600c:	f7fa fab8 	bl	8000580 <__aeabi_dmul>
 8006010:	4602      	mov	r2, r0
 8006012:	460b      	mov	r3, r1
 8006014:	4630      	mov	r0, r6
 8006016:	4639      	mov	r1, r7
 8006018:	f7fa fab2 	bl	8000580 <__aeabi_dmul>
 800601c:	465a      	mov	r2, fp
 800601e:	4604      	mov	r4, r0
 8006020:	460d      	mov	r5, r1
 8006022:	464b      	mov	r3, r9
 8006024:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006028:	f7fa f8f4 	bl	8000214 <__adddf3>
 800602c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006030:	f7fa faa6 	bl	8000580 <__aeabi_dmul>
 8006034:	4622      	mov	r2, r4
 8006036:	462b      	mov	r3, r5
 8006038:	f7fa f8ec 	bl	8000214 <__adddf3>
 800603c:	465a      	mov	r2, fp
 800603e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006042:	464b      	mov	r3, r9
 8006044:	4658      	mov	r0, fp
 8006046:	4649      	mov	r1, r9
 8006048:	f7fa fa9a 	bl	8000580 <__aeabi_dmul>
 800604c:	4b6a      	ldr	r3, [pc, #424]	@ (80061f8 <__ieee754_pow+0x790>)
 800604e:	2200      	movs	r2, #0
 8006050:	4606      	mov	r6, r0
 8006052:	460f      	mov	r7, r1
 8006054:	f7fa f8de 	bl	8000214 <__adddf3>
 8006058:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800605c:	f7fa f8da 	bl	8000214 <__adddf3>
 8006060:	46d8      	mov	r8, fp
 8006062:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 8006066:	460d      	mov	r5, r1
 8006068:	465a      	mov	r2, fp
 800606a:	460b      	mov	r3, r1
 800606c:	4640      	mov	r0, r8
 800606e:	4649      	mov	r1, r9
 8006070:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 8006074:	f7fa fa84 	bl	8000580 <__aeabi_dmul>
 8006078:	465c      	mov	r4, fp
 800607a:	4680      	mov	r8, r0
 800607c:	4689      	mov	r9, r1
 800607e:	4b5e      	ldr	r3, [pc, #376]	@ (80061f8 <__ieee754_pow+0x790>)
 8006080:	2200      	movs	r2, #0
 8006082:	4620      	mov	r0, r4
 8006084:	4629      	mov	r1, r5
 8006086:	f7fa f8c3 	bl	8000210 <__aeabi_dsub>
 800608a:	4632      	mov	r2, r6
 800608c:	463b      	mov	r3, r7
 800608e:	f7fa f8bf 	bl	8000210 <__aeabi_dsub>
 8006092:	4602      	mov	r2, r0
 8006094:	460b      	mov	r3, r1
 8006096:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800609a:	f7fa f8b9 	bl	8000210 <__aeabi_dsub>
 800609e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80060a2:	f7fa fa6d 	bl	8000580 <__aeabi_dmul>
 80060a6:	4622      	mov	r2, r4
 80060a8:	4606      	mov	r6, r0
 80060aa:	460f      	mov	r7, r1
 80060ac:	462b      	mov	r3, r5
 80060ae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80060b2:	f7fa fa65 	bl	8000580 <__aeabi_dmul>
 80060b6:	4602      	mov	r2, r0
 80060b8:	460b      	mov	r3, r1
 80060ba:	4630      	mov	r0, r6
 80060bc:	4639      	mov	r1, r7
 80060be:	f7fa f8a9 	bl	8000214 <__adddf3>
 80060c2:	4606      	mov	r6, r0
 80060c4:	460f      	mov	r7, r1
 80060c6:	4602      	mov	r2, r0
 80060c8:	460b      	mov	r3, r1
 80060ca:	4640      	mov	r0, r8
 80060cc:	4649      	mov	r1, r9
 80060ce:	f7fa f8a1 	bl	8000214 <__adddf3>
 80060d2:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 80060d6:	a33c      	add	r3, pc, #240	@ (adr r3, 80061c8 <__ieee754_pow+0x760>)
 80060d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060dc:	4658      	mov	r0, fp
 80060de:	e9cd bc08 	strd	fp, ip, [sp, #32]
 80060e2:	460d      	mov	r5, r1
 80060e4:	f7fa fa4c 	bl	8000580 <__aeabi_dmul>
 80060e8:	465c      	mov	r4, fp
 80060ea:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80060ee:	4642      	mov	r2, r8
 80060f0:	464b      	mov	r3, r9
 80060f2:	4620      	mov	r0, r4
 80060f4:	4629      	mov	r1, r5
 80060f6:	f7fa f88b 	bl	8000210 <__aeabi_dsub>
 80060fa:	4602      	mov	r2, r0
 80060fc:	460b      	mov	r3, r1
 80060fe:	4630      	mov	r0, r6
 8006100:	4639      	mov	r1, r7
 8006102:	f7fa f885 	bl	8000210 <__aeabi_dsub>
 8006106:	a332      	add	r3, pc, #200	@ (adr r3, 80061d0 <__ieee754_pow+0x768>)
 8006108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800610c:	f7fa fa38 	bl	8000580 <__aeabi_dmul>
 8006110:	a331      	add	r3, pc, #196	@ (adr r3, 80061d8 <__ieee754_pow+0x770>)
 8006112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006116:	4606      	mov	r6, r0
 8006118:	460f      	mov	r7, r1
 800611a:	4620      	mov	r0, r4
 800611c:	4629      	mov	r1, r5
 800611e:	f7fa fa2f 	bl	8000580 <__aeabi_dmul>
 8006122:	4602      	mov	r2, r0
 8006124:	460b      	mov	r3, r1
 8006126:	4630      	mov	r0, r6
 8006128:	4639      	mov	r1, r7
 800612a:	f7fa f873 	bl	8000214 <__adddf3>
 800612e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006130:	4b32      	ldr	r3, [pc, #200]	@ (80061fc <__ieee754_pow+0x794>)
 8006132:	4413      	add	r3, r2
 8006134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006138:	f7fa f86c 	bl	8000214 <__adddf3>
 800613c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006140:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006142:	f7fa f9b3 	bl	80004ac <__aeabi_i2d>
 8006146:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006148:	4b2d      	ldr	r3, [pc, #180]	@ (8006200 <__ieee754_pow+0x798>)
 800614a:	4413      	add	r3, r2
 800614c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006150:	4606      	mov	r6, r0
 8006152:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006156:	460f      	mov	r7, r1
 8006158:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800615c:	f7fa f85a 	bl	8000214 <__adddf3>
 8006160:	4642      	mov	r2, r8
 8006162:	464b      	mov	r3, r9
 8006164:	f7fa f856 	bl	8000214 <__adddf3>
 8006168:	4632      	mov	r2, r6
 800616a:	463b      	mov	r3, r7
 800616c:	f7fa f852 	bl	8000214 <__adddf3>
 8006170:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 8006174:	4632      	mov	r2, r6
 8006176:	463b      	mov	r3, r7
 8006178:	4658      	mov	r0, fp
 800617a:	460d      	mov	r5, r1
 800617c:	f7fa f848 	bl	8000210 <__aeabi_dsub>
 8006180:	4642      	mov	r2, r8
 8006182:	464b      	mov	r3, r9
 8006184:	f7fa f844 	bl	8000210 <__aeabi_dsub>
 8006188:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800618c:	f7fa f840 	bl	8000210 <__aeabi_dsub>
 8006190:	465c      	mov	r4, fp
 8006192:	4602      	mov	r2, r0
 8006194:	e036      	b.n	8006204 <__ieee754_pow+0x79c>
 8006196:	bf00      	nop
 8006198:	4a454eef 	.word	0x4a454eef
 800619c:	3fca7e28 	.word	0x3fca7e28
 80061a0:	93c9db65 	.word	0x93c9db65
 80061a4:	3fcd864a 	.word	0x3fcd864a
 80061a8:	a91d4101 	.word	0xa91d4101
 80061ac:	3fd17460 	.word	0x3fd17460
 80061b0:	518f264d 	.word	0x518f264d
 80061b4:	3fd55555 	.word	0x3fd55555
 80061b8:	db6fabff 	.word	0xdb6fabff
 80061bc:	3fdb6db6 	.word	0x3fdb6db6
 80061c0:	33333303 	.word	0x33333303
 80061c4:	3fe33333 	.word	0x3fe33333
 80061c8:	e0000000 	.word	0xe0000000
 80061cc:	3feec709 	.word	0x3feec709
 80061d0:	dc3a03fd 	.word	0xdc3a03fd
 80061d4:	3feec709 	.word	0x3feec709
 80061d8:	145b01f5 	.word	0x145b01f5
 80061dc:	be3e2fe0 	.word	0xbe3e2fe0
 80061e0:	7ff00000 	.word	0x7ff00000
 80061e4:	43400000 	.word	0x43400000
 80061e8:	0003988e 	.word	0x0003988e
 80061ec:	000bb679 	.word	0x000bb679
 80061f0:	080077f0 	.word	0x080077f0
 80061f4:	3ff00000 	.word	0x3ff00000
 80061f8:	40080000 	.word	0x40080000
 80061fc:	080077d0 	.word	0x080077d0
 8006200:	080077e0 	.word	0x080077e0
 8006204:	460b      	mov	r3, r1
 8006206:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800620a:	e5d7      	b.n	8005dbc <__ieee754_pow+0x354>
 800620c:	f04f 0a01 	mov.w	sl, #1
 8006210:	e65e      	b.n	8005ed0 <__ieee754_pow+0x468>
 8006212:	a3b4      	add	r3, pc, #720	@ (adr r3, 80064e4 <__ieee754_pow+0xa7c>)
 8006214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006218:	4630      	mov	r0, r6
 800621a:	4639      	mov	r1, r7
 800621c:	f7f9 fffa 	bl	8000214 <__adddf3>
 8006220:	4642      	mov	r2, r8
 8006222:	e9cd 0100 	strd	r0, r1, [sp]
 8006226:	464b      	mov	r3, r9
 8006228:	4620      	mov	r0, r4
 800622a:	4629      	mov	r1, r5
 800622c:	f7f9 fff0 	bl	8000210 <__aeabi_dsub>
 8006230:	4602      	mov	r2, r0
 8006232:	460b      	mov	r3, r1
 8006234:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006238:	f7fa fc32 	bl	8000aa0 <__aeabi_dcmpgt>
 800623c:	2800      	cmp	r0, #0
 800623e:	f47f ae00 	bne.w	8005e42 <__ieee754_pow+0x3da>
 8006242:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 8006246:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800624a:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 800624e:	fa43 fa0a 	asr.w	sl, r3, sl
 8006252:	44da      	add	sl, fp
 8006254:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8006258:	489d      	ldr	r0, [pc, #628]	@ (80064d0 <__ieee754_pow+0xa68>)
 800625a:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800625e:	4108      	asrs	r0, r1
 8006260:	ea00 030a 	and.w	r3, r0, sl
 8006264:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8006268:	f1c1 0114 	rsb	r1, r1, #20
 800626c:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8006270:	fa4a fa01 	asr.w	sl, sl, r1
 8006274:	f1bb 0f00 	cmp.w	fp, #0
 8006278:	4640      	mov	r0, r8
 800627a:	4649      	mov	r1, r9
 800627c:	f04f 0200 	mov.w	r2, #0
 8006280:	bfb8      	it	lt
 8006282:	f1ca 0a00 	rsblt	sl, sl, #0
 8006286:	f7f9 ffc3 	bl	8000210 <__aeabi_dsub>
 800628a:	4680      	mov	r8, r0
 800628c:	4689      	mov	r9, r1
 800628e:	4632      	mov	r2, r6
 8006290:	463b      	mov	r3, r7
 8006292:	4640      	mov	r0, r8
 8006294:	4649      	mov	r1, r9
 8006296:	f7f9 ffbd 	bl	8000214 <__adddf3>
 800629a:	2400      	movs	r4, #0
 800629c:	a37c      	add	r3, pc, #496	@ (adr r3, 8006490 <__ieee754_pow+0xa28>)
 800629e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062a2:	4620      	mov	r0, r4
 80062a4:	460d      	mov	r5, r1
 80062a6:	f7fa f96b 	bl	8000580 <__aeabi_dmul>
 80062aa:	4642      	mov	r2, r8
 80062ac:	e9cd 0100 	strd	r0, r1, [sp]
 80062b0:	464b      	mov	r3, r9
 80062b2:	4620      	mov	r0, r4
 80062b4:	4629      	mov	r1, r5
 80062b6:	f7f9 ffab 	bl	8000210 <__aeabi_dsub>
 80062ba:	4602      	mov	r2, r0
 80062bc:	460b      	mov	r3, r1
 80062be:	4630      	mov	r0, r6
 80062c0:	4639      	mov	r1, r7
 80062c2:	f7f9 ffa5 	bl	8000210 <__aeabi_dsub>
 80062c6:	a374      	add	r3, pc, #464	@ (adr r3, 8006498 <__ieee754_pow+0xa30>)
 80062c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062cc:	f7fa f958 	bl	8000580 <__aeabi_dmul>
 80062d0:	a373      	add	r3, pc, #460	@ (adr r3, 80064a0 <__ieee754_pow+0xa38>)
 80062d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062d6:	4680      	mov	r8, r0
 80062d8:	4689      	mov	r9, r1
 80062da:	4620      	mov	r0, r4
 80062dc:	4629      	mov	r1, r5
 80062de:	f7fa f94f 	bl	8000580 <__aeabi_dmul>
 80062e2:	4602      	mov	r2, r0
 80062e4:	460b      	mov	r3, r1
 80062e6:	4640      	mov	r0, r8
 80062e8:	4649      	mov	r1, r9
 80062ea:	f7f9 ff93 	bl	8000214 <__adddf3>
 80062ee:	4604      	mov	r4, r0
 80062f0:	460d      	mov	r5, r1
 80062f2:	4602      	mov	r2, r0
 80062f4:	460b      	mov	r3, r1
 80062f6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80062fa:	f7f9 ff8b 	bl	8000214 <__adddf3>
 80062fe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006302:	4680      	mov	r8, r0
 8006304:	4689      	mov	r9, r1
 8006306:	f7f9 ff83 	bl	8000210 <__aeabi_dsub>
 800630a:	4602      	mov	r2, r0
 800630c:	460b      	mov	r3, r1
 800630e:	4620      	mov	r0, r4
 8006310:	4629      	mov	r1, r5
 8006312:	f7f9 ff7d 	bl	8000210 <__aeabi_dsub>
 8006316:	4642      	mov	r2, r8
 8006318:	4606      	mov	r6, r0
 800631a:	460f      	mov	r7, r1
 800631c:	464b      	mov	r3, r9
 800631e:	4640      	mov	r0, r8
 8006320:	4649      	mov	r1, r9
 8006322:	f7fa f92d 	bl	8000580 <__aeabi_dmul>
 8006326:	a360      	add	r3, pc, #384	@ (adr r3, 80064a8 <__ieee754_pow+0xa40>)
 8006328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800632c:	4604      	mov	r4, r0
 800632e:	460d      	mov	r5, r1
 8006330:	f7fa f926 	bl	8000580 <__aeabi_dmul>
 8006334:	a35e      	add	r3, pc, #376	@ (adr r3, 80064b0 <__ieee754_pow+0xa48>)
 8006336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800633a:	f7f9 ff69 	bl	8000210 <__aeabi_dsub>
 800633e:	4622      	mov	r2, r4
 8006340:	462b      	mov	r3, r5
 8006342:	f7fa f91d 	bl	8000580 <__aeabi_dmul>
 8006346:	a35c      	add	r3, pc, #368	@ (adr r3, 80064b8 <__ieee754_pow+0xa50>)
 8006348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800634c:	f7f9 ff62 	bl	8000214 <__adddf3>
 8006350:	4622      	mov	r2, r4
 8006352:	462b      	mov	r3, r5
 8006354:	f7fa f914 	bl	8000580 <__aeabi_dmul>
 8006358:	a359      	add	r3, pc, #356	@ (adr r3, 80064c0 <__ieee754_pow+0xa58>)
 800635a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800635e:	f7f9 ff57 	bl	8000210 <__aeabi_dsub>
 8006362:	4622      	mov	r2, r4
 8006364:	462b      	mov	r3, r5
 8006366:	f7fa f90b 	bl	8000580 <__aeabi_dmul>
 800636a:	a357      	add	r3, pc, #348	@ (adr r3, 80064c8 <__ieee754_pow+0xa60>)
 800636c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006370:	f7f9 ff50 	bl	8000214 <__adddf3>
 8006374:	4622      	mov	r2, r4
 8006376:	462b      	mov	r3, r5
 8006378:	f7fa f902 	bl	8000580 <__aeabi_dmul>
 800637c:	4602      	mov	r2, r0
 800637e:	460b      	mov	r3, r1
 8006380:	4640      	mov	r0, r8
 8006382:	4649      	mov	r1, r9
 8006384:	f7f9 ff44 	bl	8000210 <__aeabi_dsub>
 8006388:	4604      	mov	r4, r0
 800638a:	460d      	mov	r5, r1
 800638c:	4602      	mov	r2, r0
 800638e:	460b      	mov	r3, r1
 8006390:	4640      	mov	r0, r8
 8006392:	4649      	mov	r1, r9
 8006394:	f7fa f8f4 	bl	8000580 <__aeabi_dmul>
 8006398:	2200      	movs	r2, #0
 800639a:	e9cd 0100 	strd	r0, r1, [sp]
 800639e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80063a2:	4620      	mov	r0, r4
 80063a4:	4629      	mov	r1, r5
 80063a6:	f7f9 ff33 	bl	8000210 <__aeabi_dsub>
 80063aa:	4602      	mov	r2, r0
 80063ac:	460b      	mov	r3, r1
 80063ae:	e9dd 0100 	ldrd	r0, r1, [sp]
 80063b2:	f7fa fa0f 	bl	80007d4 <__aeabi_ddiv>
 80063b6:	4632      	mov	r2, r6
 80063b8:	4604      	mov	r4, r0
 80063ba:	460d      	mov	r5, r1
 80063bc:	463b      	mov	r3, r7
 80063be:	4640      	mov	r0, r8
 80063c0:	4649      	mov	r1, r9
 80063c2:	f7fa f8dd 	bl	8000580 <__aeabi_dmul>
 80063c6:	4632      	mov	r2, r6
 80063c8:	463b      	mov	r3, r7
 80063ca:	f7f9 ff23 	bl	8000214 <__adddf3>
 80063ce:	4602      	mov	r2, r0
 80063d0:	460b      	mov	r3, r1
 80063d2:	4620      	mov	r0, r4
 80063d4:	4629      	mov	r1, r5
 80063d6:	f7f9 ff1b 	bl	8000210 <__aeabi_dsub>
 80063da:	4642      	mov	r2, r8
 80063dc:	464b      	mov	r3, r9
 80063de:	f7f9 ff17 	bl	8000210 <__aeabi_dsub>
 80063e2:	460b      	mov	r3, r1
 80063e4:	4602      	mov	r2, r0
 80063e6:	493b      	ldr	r1, [pc, #236]	@ (80064d4 <__ieee754_pow+0xa6c>)
 80063e8:	2000      	movs	r0, #0
 80063ea:	f7f9 ff11 	bl	8000210 <__aeabi_dsub>
 80063ee:	ec41 0b10 	vmov	d0, r0, r1
 80063f2:	ee10 3a90 	vmov	r3, s1
 80063f6:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80063fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80063fe:	da30      	bge.n	8006462 <__ieee754_pow+0x9fa>
 8006400:	4650      	mov	r0, sl
 8006402:	f000 fc11 	bl	8006c28 <scalbn>
 8006406:	ec51 0b10 	vmov	r0, r1, d0
 800640a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800640e:	f7ff bbd2 	b.w	8005bb6 <__ieee754_pow+0x14e>
 8006412:	4c31      	ldr	r4, [pc, #196]	@ (80064d8 <__ieee754_pow+0xa70>)
 8006414:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8006418:	42a3      	cmp	r3, r4
 800641a:	d91a      	bls.n	8006452 <__ieee754_pow+0x9ea>
 800641c:	4b2f      	ldr	r3, [pc, #188]	@ (80064dc <__ieee754_pow+0xa74>)
 800641e:	440b      	add	r3, r1
 8006420:	4303      	orrs	r3, r0
 8006422:	d009      	beq.n	8006438 <__ieee754_pow+0x9d0>
 8006424:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006428:	2200      	movs	r2, #0
 800642a:	2300      	movs	r3, #0
 800642c:	f7fa fb1a 	bl	8000a64 <__aeabi_dcmplt>
 8006430:	3800      	subs	r0, #0
 8006432:	bf18      	it	ne
 8006434:	2001      	movne	r0, #1
 8006436:	e42b      	b.n	8005c90 <__ieee754_pow+0x228>
 8006438:	4642      	mov	r2, r8
 800643a:	464b      	mov	r3, r9
 800643c:	f7f9 fee8 	bl	8000210 <__aeabi_dsub>
 8006440:	4632      	mov	r2, r6
 8006442:	463b      	mov	r3, r7
 8006444:	f7fa fb22 	bl	8000a8c <__aeabi_dcmpge>
 8006448:	2800      	cmp	r0, #0
 800644a:	d1eb      	bne.n	8006424 <__ieee754_pow+0x9bc>
 800644c:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 80064ec <__ieee754_pow+0xa84>
 8006450:	e6f7      	b.n	8006242 <__ieee754_pow+0x7da>
 8006452:	469a      	mov	sl, r3
 8006454:	4b22      	ldr	r3, [pc, #136]	@ (80064e0 <__ieee754_pow+0xa78>)
 8006456:	459a      	cmp	sl, r3
 8006458:	f63f aef3 	bhi.w	8006242 <__ieee754_pow+0x7da>
 800645c:	f8dd a010 	ldr.w	sl, [sp, #16]
 8006460:	e715      	b.n	800628e <__ieee754_pow+0x826>
 8006462:	ec51 0b10 	vmov	r0, r1, d0
 8006466:	4619      	mov	r1, r3
 8006468:	e7cf      	b.n	800640a <__ieee754_pow+0x9a2>
 800646a:	491a      	ldr	r1, [pc, #104]	@ (80064d4 <__ieee754_pow+0xa6c>)
 800646c:	2000      	movs	r0, #0
 800646e:	f7ff bb18 	b.w	8005aa2 <__ieee754_pow+0x3a>
 8006472:	2000      	movs	r0, #0
 8006474:	2100      	movs	r1, #0
 8006476:	f7ff bb14 	b.w	8005aa2 <__ieee754_pow+0x3a>
 800647a:	4630      	mov	r0, r6
 800647c:	4639      	mov	r1, r7
 800647e:	f7ff bb10 	b.w	8005aa2 <__ieee754_pow+0x3a>
 8006482:	460c      	mov	r4, r1
 8006484:	f7ff bb5e 	b.w	8005b44 <__ieee754_pow+0xdc>
 8006488:	2400      	movs	r4, #0
 800648a:	f7ff bb49 	b.w	8005b20 <__ieee754_pow+0xb8>
 800648e:	bf00      	nop
 8006490:	00000000 	.word	0x00000000
 8006494:	3fe62e43 	.word	0x3fe62e43
 8006498:	fefa39ef 	.word	0xfefa39ef
 800649c:	3fe62e42 	.word	0x3fe62e42
 80064a0:	0ca86c39 	.word	0x0ca86c39
 80064a4:	be205c61 	.word	0xbe205c61
 80064a8:	72bea4d0 	.word	0x72bea4d0
 80064ac:	3e663769 	.word	0x3e663769
 80064b0:	c5d26bf1 	.word	0xc5d26bf1
 80064b4:	3ebbbd41 	.word	0x3ebbbd41
 80064b8:	af25de2c 	.word	0xaf25de2c
 80064bc:	3f11566a 	.word	0x3f11566a
 80064c0:	16bebd93 	.word	0x16bebd93
 80064c4:	3f66c16c 	.word	0x3f66c16c
 80064c8:	5555553e 	.word	0x5555553e
 80064cc:	3fc55555 	.word	0x3fc55555
 80064d0:	fff00000 	.word	0xfff00000
 80064d4:	3ff00000 	.word	0x3ff00000
 80064d8:	4090cbff 	.word	0x4090cbff
 80064dc:	3f6f3400 	.word	0x3f6f3400
 80064e0:	3fe00000 	.word	0x3fe00000
 80064e4:	652b82fe 	.word	0x652b82fe
 80064e8:	3c971547 	.word	0x3c971547
 80064ec:	4090cc00 	.word	0x4090cc00

080064f0 <__ieee754_rem_pio2>:
 80064f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064f4:	ec57 6b10 	vmov	r6, r7, d0
 80064f8:	4bc5      	ldr	r3, [pc, #788]	@ (8006810 <__ieee754_rem_pio2+0x320>)
 80064fa:	b08d      	sub	sp, #52	@ 0x34
 80064fc:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8006500:	4598      	cmp	r8, r3
 8006502:	4604      	mov	r4, r0
 8006504:	9704      	str	r7, [sp, #16]
 8006506:	d807      	bhi.n	8006518 <__ieee754_rem_pio2+0x28>
 8006508:	2200      	movs	r2, #0
 800650a:	2300      	movs	r3, #0
 800650c:	ed80 0b00 	vstr	d0, [r0]
 8006510:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8006514:	2500      	movs	r5, #0
 8006516:	e028      	b.n	800656a <__ieee754_rem_pio2+0x7a>
 8006518:	4bbe      	ldr	r3, [pc, #760]	@ (8006814 <__ieee754_rem_pio2+0x324>)
 800651a:	4598      	cmp	r8, r3
 800651c:	d878      	bhi.n	8006610 <__ieee754_rem_pio2+0x120>
 800651e:	9b04      	ldr	r3, [sp, #16]
 8006520:	4dbd      	ldr	r5, [pc, #756]	@ (8006818 <__ieee754_rem_pio2+0x328>)
 8006522:	2b00      	cmp	r3, #0
 8006524:	4630      	mov	r0, r6
 8006526:	a3ac      	add	r3, pc, #688	@ (adr r3, 80067d8 <__ieee754_rem_pio2+0x2e8>)
 8006528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800652c:	4639      	mov	r1, r7
 800652e:	dd38      	ble.n	80065a2 <__ieee754_rem_pio2+0xb2>
 8006530:	f7f9 fe6e 	bl	8000210 <__aeabi_dsub>
 8006534:	45a8      	cmp	r8, r5
 8006536:	4606      	mov	r6, r0
 8006538:	460f      	mov	r7, r1
 800653a:	d01a      	beq.n	8006572 <__ieee754_rem_pio2+0x82>
 800653c:	a3a8      	add	r3, pc, #672	@ (adr r3, 80067e0 <__ieee754_rem_pio2+0x2f0>)
 800653e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006542:	f7f9 fe65 	bl	8000210 <__aeabi_dsub>
 8006546:	4602      	mov	r2, r0
 8006548:	460b      	mov	r3, r1
 800654a:	4680      	mov	r8, r0
 800654c:	4689      	mov	r9, r1
 800654e:	4630      	mov	r0, r6
 8006550:	4639      	mov	r1, r7
 8006552:	f7f9 fe5d 	bl	8000210 <__aeabi_dsub>
 8006556:	a3a2      	add	r3, pc, #648	@ (adr r3, 80067e0 <__ieee754_rem_pio2+0x2f0>)
 8006558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800655c:	f7f9 fe58 	bl	8000210 <__aeabi_dsub>
 8006560:	e9c4 8900 	strd	r8, r9, [r4]
 8006564:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006568:	2501      	movs	r5, #1
 800656a:	4628      	mov	r0, r5
 800656c:	b00d      	add	sp, #52	@ 0x34
 800656e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006572:	a39d      	add	r3, pc, #628	@ (adr r3, 80067e8 <__ieee754_rem_pio2+0x2f8>)
 8006574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006578:	f7f9 fe4a 	bl	8000210 <__aeabi_dsub>
 800657c:	a39c      	add	r3, pc, #624	@ (adr r3, 80067f0 <__ieee754_rem_pio2+0x300>)
 800657e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006582:	4606      	mov	r6, r0
 8006584:	460f      	mov	r7, r1
 8006586:	f7f9 fe43 	bl	8000210 <__aeabi_dsub>
 800658a:	4602      	mov	r2, r0
 800658c:	460b      	mov	r3, r1
 800658e:	4680      	mov	r8, r0
 8006590:	4689      	mov	r9, r1
 8006592:	4630      	mov	r0, r6
 8006594:	4639      	mov	r1, r7
 8006596:	f7f9 fe3b 	bl	8000210 <__aeabi_dsub>
 800659a:	a395      	add	r3, pc, #596	@ (adr r3, 80067f0 <__ieee754_rem_pio2+0x300>)
 800659c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065a0:	e7dc      	b.n	800655c <__ieee754_rem_pio2+0x6c>
 80065a2:	f7f9 fe37 	bl	8000214 <__adddf3>
 80065a6:	45a8      	cmp	r8, r5
 80065a8:	4606      	mov	r6, r0
 80065aa:	460f      	mov	r7, r1
 80065ac:	d018      	beq.n	80065e0 <__ieee754_rem_pio2+0xf0>
 80065ae:	a38c      	add	r3, pc, #560	@ (adr r3, 80067e0 <__ieee754_rem_pio2+0x2f0>)
 80065b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065b4:	f7f9 fe2e 	bl	8000214 <__adddf3>
 80065b8:	4602      	mov	r2, r0
 80065ba:	460b      	mov	r3, r1
 80065bc:	4680      	mov	r8, r0
 80065be:	4689      	mov	r9, r1
 80065c0:	4630      	mov	r0, r6
 80065c2:	4639      	mov	r1, r7
 80065c4:	f7f9 fe24 	bl	8000210 <__aeabi_dsub>
 80065c8:	a385      	add	r3, pc, #532	@ (adr r3, 80067e0 <__ieee754_rem_pio2+0x2f0>)
 80065ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ce:	f7f9 fe21 	bl	8000214 <__adddf3>
 80065d2:	f04f 35ff 	mov.w	r5, #4294967295
 80065d6:	e9c4 8900 	strd	r8, r9, [r4]
 80065da:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80065de:	e7c4      	b.n	800656a <__ieee754_rem_pio2+0x7a>
 80065e0:	a381      	add	r3, pc, #516	@ (adr r3, 80067e8 <__ieee754_rem_pio2+0x2f8>)
 80065e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065e6:	f7f9 fe15 	bl	8000214 <__adddf3>
 80065ea:	a381      	add	r3, pc, #516	@ (adr r3, 80067f0 <__ieee754_rem_pio2+0x300>)
 80065ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065f0:	4606      	mov	r6, r0
 80065f2:	460f      	mov	r7, r1
 80065f4:	f7f9 fe0e 	bl	8000214 <__adddf3>
 80065f8:	4602      	mov	r2, r0
 80065fa:	460b      	mov	r3, r1
 80065fc:	4680      	mov	r8, r0
 80065fe:	4689      	mov	r9, r1
 8006600:	4630      	mov	r0, r6
 8006602:	4639      	mov	r1, r7
 8006604:	f7f9 fe04 	bl	8000210 <__aeabi_dsub>
 8006608:	a379      	add	r3, pc, #484	@ (adr r3, 80067f0 <__ieee754_rem_pio2+0x300>)
 800660a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800660e:	e7de      	b.n	80065ce <__ieee754_rem_pio2+0xde>
 8006610:	4b82      	ldr	r3, [pc, #520]	@ (800681c <__ieee754_rem_pio2+0x32c>)
 8006612:	4598      	cmp	r8, r3
 8006614:	f200 80d1 	bhi.w	80067ba <__ieee754_rem_pio2+0x2ca>
 8006618:	f000 fafe 	bl	8006c18 <fabs>
 800661c:	ec57 6b10 	vmov	r6, r7, d0
 8006620:	a375      	add	r3, pc, #468	@ (adr r3, 80067f8 <__ieee754_rem_pio2+0x308>)
 8006622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006626:	4630      	mov	r0, r6
 8006628:	4639      	mov	r1, r7
 800662a:	f7f9 ffa9 	bl	8000580 <__aeabi_dmul>
 800662e:	4b7c      	ldr	r3, [pc, #496]	@ (8006820 <__ieee754_rem_pio2+0x330>)
 8006630:	2200      	movs	r2, #0
 8006632:	f7f9 fdef 	bl	8000214 <__adddf3>
 8006636:	f7fa fa53 	bl	8000ae0 <__aeabi_d2iz>
 800663a:	4605      	mov	r5, r0
 800663c:	f7f9 ff36 	bl	80004ac <__aeabi_i2d>
 8006640:	4602      	mov	r2, r0
 8006642:	460b      	mov	r3, r1
 8006644:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006648:	a363      	add	r3, pc, #396	@ (adr r3, 80067d8 <__ieee754_rem_pio2+0x2e8>)
 800664a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800664e:	f7f9 ff97 	bl	8000580 <__aeabi_dmul>
 8006652:	4602      	mov	r2, r0
 8006654:	460b      	mov	r3, r1
 8006656:	4630      	mov	r0, r6
 8006658:	4639      	mov	r1, r7
 800665a:	f7f9 fdd9 	bl	8000210 <__aeabi_dsub>
 800665e:	a360      	add	r3, pc, #384	@ (adr r3, 80067e0 <__ieee754_rem_pio2+0x2f0>)
 8006660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006664:	4682      	mov	sl, r0
 8006666:	468b      	mov	fp, r1
 8006668:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800666c:	f7f9 ff88 	bl	8000580 <__aeabi_dmul>
 8006670:	2d1f      	cmp	r5, #31
 8006672:	4606      	mov	r6, r0
 8006674:	460f      	mov	r7, r1
 8006676:	dc0c      	bgt.n	8006692 <__ieee754_rem_pio2+0x1a2>
 8006678:	4b6a      	ldr	r3, [pc, #424]	@ (8006824 <__ieee754_rem_pio2+0x334>)
 800667a:	1e6a      	subs	r2, r5, #1
 800667c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006680:	4543      	cmp	r3, r8
 8006682:	d006      	beq.n	8006692 <__ieee754_rem_pio2+0x1a2>
 8006684:	4632      	mov	r2, r6
 8006686:	463b      	mov	r3, r7
 8006688:	4650      	mov	r0, sl
 800668a:	4659      	mov	r1, fp
 800668c:	f7f9 fdc0 	bl	8000210 <__aeabi_dsub>
 8006690:	e00e      	b.n	80066b0 <__ieee754_rem_pio2+0x1c0>
 8006692:	463b      	mov	r3, r7
 8006694:	4632      	mov	r2, r6
 8006696:	4650      	mov	r0, sl
 8006698:	4659      	mov	r1, fp
 800669a:	f7f9 fdb9 	bl	8000210 <__aeabi_dsub>
 800669e:	ea4f 5328 	mov.w	r3, r8, asr #20
 80066a2:	9305      	str	r3, [sp, #20]
 80066a4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80066a8:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 80066ac:	2b10      	cmp	r3, #16
 80066ae:	dc02      	bgt.n	80066b6 <__ieee754_rem_pio2+0x1c6>
 80066b0:	e9c4 0100 	strd	r0, r1, [r4]
 80066b4:	e039      	b.n	800672a <__ieee754_rem_pio2+0x23a>
 80066b6:	a34c      	add	r3, pc, #304	@ (adr r3, 80067e8 <__ieee754_rem_pio2+0x2f8>)
 80066b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80066c0:	f7f9 ff5e 	bl	8000580 <__aeabi_dmul>
 80066c4:	4606      	mov	r6, r0
 80066c6:	460f      	mov	r7, r1
 80066c8:	4602      	mov	r2, r0
 80066ca:	460b      	mov	r3, r1
 80066cc:	4650      	mov	r0, sl
 80066ce:	4659      	mov	r1, fp
 80066d0:	f7f9 fd9e 	bl	8000210 <__aeabi_dsub>
 80066d4:	4602      	mov	r2, r0
 80066d6:	460b      	mov	r3, r1
 80066d8:	4680      	mov	r8, r0
 80066da:	4689      	mov	r9, r1
 80066dc:	4650      	mov	r0, sl
 80066de:	4659      	mov	r1, fp
 80066e0:	f7f9 fd96 	bl	8000210 <__aeabi_dsub>
 80066e4:	4632      	mov	r2, r6
 80066e6:	463b      	mov	r3, r7
 80066e8:	f7f9 fd92 	bl	8000210 <__aeabi_dsub>
 80066ec:	a340      	add	r3, pc, #256	@ (adr r3, 80067f0 <__ieee754_rem_pio2+0x300>)
 80066ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066f2:	4606      	mov	r6, r0
 80066f4:	460f      	mov	r7, r1
 80066f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80066fa:	f7f9 ff41 	bl	8000580 <__aeabi_dmul>
 80066fe:	4632      	mov	r2, r6
 8006700:	463b      	mov	r3, r7
 8006702:	f7f9 fd85 	bl	8000210 <__aeabi_dsub>
 8006706:	4602      	mov	r2, r0
 8006708:	460b      	mov	r3, r1
 800670a:	4606      	mov	r6, r0
 800670c:	460f      	mov	r7, r1
 800670e:	4640      	mov	r0, r8
 8006710:	4649      	mov	r1, r9
 8006712:	f7f9 fd7d 	bl	8000210 <__aeabi_dsub>
 8006716:	9a05      	ldr	r2, [sp, #20]
 8006718:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800671c:	1ad3      	subs	r3, r2, r3
 800671e:	2b31      	cmp	r3, #49	@ 0x31
 8006720:	dc20      	bgt.n	8006764 <__ieee754_rem_pio2+0x274>
 8006722:	e9c4 0100 	strd	r0, r1, [r4]
 8006726:	46c2      	mov	sl, r8
 8006728:	46cb      	mov	fp, r9
 800672a:	e9d4 8900 	ldrd	r8, r9, [r4]
 800672e:	4650      	mov	r0, sl
 8006730:	4642      	mov	r2, r8
 8006732:	464b      	mov	r3, r9
 8006734:	4659      	mov	r1, fp
 8006736:	f7f9 fd6b 	bl	8000210 <__aeabi_dsub>
 800673a:	463b      	mov	r3, r7
 800673c:	4632      	mov	r2, r6
 800673e:	f7f9 fd67 	bl	8000210 <__aeabi_dsub>
 8006742:	9b04      	ldr	r3, [sp, #16]
 8006744:	2b00      	cmp	r3, #0
 8006746:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800674a:	f6bf af0e 	bge.w	800656a <__ieee754_rem_pio2+0x7a>
 800674e:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8006752:	6063      	str	r3, [r4, #4]
 8006754:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006758:	f8c4 8000 	str.w	r8, [r4]
 800675c:	60a0      	str	r0, [r4, #8]
 800675e:	60e3      	str	r3, [r4, #12]
 8006760:	426d      	negs	r5, r5
 8006762:	e702      	b.n	800656a <__ieee754_rem_pio2+0x7a>
 8006764:	a326      	add	r3, pc, #152	@ (adr r3, 8006800 <__ieee754_rem_pio2+0x310>)
 8006766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800676a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800676e:	f7f9 ff07 	bl	8000580 <__aeabi_dmul>
 8006772:	4606      	mov	r6, r0
 8006774:	460f      	mov	r7, r1
 8006776:	4602      	mov	r2, r0
 8006778:	460b      	mov	r3, r1
 800677a:	4640      	mov	r0, r8
 800677c:	4649      	mov	r1, r9
 800677e:	f7f9 fd47 	bl	8000210 <__aeabi_dsub>
 8006782:	4602      	mov	r2, r0
 8006784:	460b      	mov	r3, r1
 8006786:	4682      	mov	sl, r0
 8006788:	468b      	mov	fp, r1
 800678a:	4640      	mov	r0, r8
 800678c:	4649      	mov	r1, r9
 800678e:	f7f9 fd3f 	bl	8000210 <__aeabi_dsub>
 8006792:	4632      	mov	r2, r6
 8006794:	463b      	mov	r3, r7
 8006796:	f7f9 fd3b 	bl	8000210 <__aeabi_dsub>
 800679a:	a31b      	add	r3, pc, #108	@ (adr r3, 8006808 <__ieee754_rem_pio2+0x318>)
 800679c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067a0:	4606      	mov	r6, r0
 80067a2:	460f      	mov	r7, r1
 80067a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80067a8:	f7f9 feea 	bl	8000580 <__aeabi_dmul>
 80067ac:	4632      	mov	r2, r6
 80067ae:	463b      	mov	r3, r7
 80067b0:	f7f9 fd2e 	bl	8000210 <__aeabi_dsub>
 80067b4:	4606      	mov	r6, r0
 80067b6:	460f      	mov	r7, r1
 80067b8:	e764      	b.n	8006684 <__ieee754_rem_pio2+0x194>
 80067ba:	4b1b      	ldr	r3, [pc, #108]	@ (8006828 <__ieee754_rem_pio2+0x338>)
 80067bc:	4598      	cmp	r8, r3
 80067be:	d935      	bls.n	800682c <__ieee754_rem_pio2+0x33c>
 80067c0:	4632      	mov	r2, r6
 80067c2:	463b      	mov	r3, r7
 80067c4:	4630      	mov	r0, r6
 80067c6:	4639      	mov	r1, r7
 80067c8:	f7f9 fd22 	bl	8000210 <__aeabi_dsub>
 80067cc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80067d0:	e9c4 0100 	strd	r0, r1, [r4]
 80067d4:	e69e      	b.n	8006514 <__ieee754_rem_pio2+0x24>
 80067d6:	bf00      	nop
 80067d8:	54400000 	.word	0x54400000
 80067dc:	3ff921fb 	.word	0x3ff921fb
 80067e0:	1a626331 	.word	0x1a626331
 80067e4:	3dd0b461 	.word	0x3dd0b461
 80067e8:	1a600000 	.word	0x1a600000
 80067ec:	3dd0b461 	.word	0x3dd0b461
 80067f0:	2e037073 	.word	0x2e037073
 80067f4:	3ba3198a 	.word	0x3ba3198a
 80067f8:	6dc9c883 	.word	0x6dc9c883
 80067fc:	3fe45f30 	.word	0x3fe45f30
 8006800:	2e000000 	.word	0x2e000000
 8006804:	3ba3198a 	.word	0x3ba3198a
 8006808:	252049c1 	.word	0x252049c1
 800680c:	397b839a 	.word	0x397b839a
 8006810:	3fe921fb 	.word	0x3fe921fb
 8006814:	4002d97b 	.word	0x4002d97b
 8006818:	3ff921fb 	.word	0x3ff921fb
 800681c:	413921fb 	.word	0x413921fb
 8006820:	3fe00000 	.word	0x3fe00000
 8006824:	08007800 	.word	0x08007800
 8006828:	7fefffff 	.word	0x7fefffff
 800682c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8006830:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 8006834:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8006838:	4630      	mov	r0, r6
 800683a:	460f      	mov	r7, r1
 800683c:	f7fa f950 	bl	8000ae0 <__aeabi_d2iz>
 8006840:	f7f9 fe34 	bl	80004ac <__aeabi_i2d>
 8006844:	4602      	mov	r2, r0
 8006846:	460b      	mov	r3, r1
 8006848:	4630      	mov	r0, r6
 800684a:	4639      	mov	r1, r7
 800684c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006850:	f7f9 fcde 	bl	8000210 <__aeabi_dsub>
 8006854:	4b22      	ldr	r3, [pc, #136]	@ (80068e0 <__ieee754_rem_pio2+0x3f0>)
 8006856:	2200      	movs	r2, #0
 8006858:	f7f9 fe92 	bl	8000580 <__aeabi_dmul>
 800685c:	460f      	mov	r7, r1
 800685e:	4606      	mov	r6, r0
 8006860:	f7fa f93e 	bl	8000ae0 <__aeabi_d2iz>
 8006864:	f7f9 fe22 	bl	80004ac <__aeabi_i2d>
 8006868:	4602      	mov	r2, r0
 800686a:	460b      	mov	r3, r1
 800686c:	4630      	mov	r0, r6
 800686e:	4639      	mov	r1, r7
 8006870:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006874:	f7f9 fccc 	bl	8000210 <__aeabi_dsub>
 8006878:	4b19      	ldr	r3, [pc, #100]	@ (80068e0 <__ieee754_rem_pio2+0x3f0>)
 800687a:	2200      	movs	r2, #0
 800687c:	f7f9 fe80 	bl	8000580 <__aeabi_dmul>
 8006880:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8006884:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8006888:	f04f 0803 	mov.w	r8, #3
 800688c:	2600      	movs	r6, #0
 800688e:	2700      	movs	r7, #0
 8006890:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8006894:	4632      	mov	r2, r6
 8006896:	463b      	mov	r3, r7
 8006898:	46c2      	mov	sl, r8
 800689a:	f108 38ff 	add.w	r8, r8, #4294967295
 800689e:	f7fa f8d7 	bl	8000a50 <__aeabi_dcmpeq>
 80068a2:	2800      	cmp	r0, #0
 80068a4:	d1f4      	bne.n	8006890 <__ieee754_rem_pio2+0x3a0>
 80068a6:	4b0f      	ldr	r3, [pc, #60]	@ (80068e4 <__ieee754_rem_pio2+0x3f4>)
 80068a8:	9301      	str	r3, [sp, #4]
 80068aa:	2302      	movs	r3, #2
 80068ac:	9300      	str	r3, [sp, #0]
 80068ae:	462a      	mov	r2, r5
 80068b0:	4653      	mov	r3, sl
 80068b2:	4621      	mov	r1, r4
 80068b4:	a806      	add	r0, sp, #24
 80068b6:	f000 fb4f 	bl	8006f58 <__kernel_rem_pio2>
 80068ba:	9b04      	ldr	r3, [sp, #16]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	4605      	mov	r5, r0
 80068c0:	f6bf ae53 	bge.w	800656a <__ieee754_rem_pio2+0x7a>
 80068c4:	e9d4 2100 	ldrd	r2, r1, [r4]
 80068c8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80068cc:	e9c4 2300 	strd	r2, r3, [r4]
 80068d0:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 80068d4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80068d8:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80068dc:	e740      	b.n	8006760 <__ieee754_rem_pio2+0x270>
 80068de:	bf00      	nop
 80068e0:	41700000 	.word	0x41700000
 80068e4:	08007880 	.word	0x08007880

080068e8 <atan>:
 80068e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068ec:	ec55 4b10 	vmov	r4, r5, d0
 80068f0:	4bbf      	ldr	r3, [pc, #764]	@ (8006bf0 <atan+0x308>)
 80068f2:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 80068f6:	429e      	cmp	r6, r3
 80068f8:	46ab      	mov	fp, r5
 80068fa:	d918      	bls.n	800692e <atan+0x46>
 80068fc:	4bbd      	ldr	r3, [pc, #756]	@ (8006bf4 <atan+0x30c>)
 80068fe:	429e      	cmp	r6, r3
 8006900:	d801      	bhi.n	8006906 <atan+0x1e>
 8006902:	d109      	bne.n	8006918 <atan+0x30>
 8006904:	b144      	cbz	r4, 8006918 <atan+0x30>
 8006906:	4622      	mov	r2, r4
 8006908:	462b      	mov	r3, r5
 800690a:	4620      	mov	r0, r4
 800690c:	4629      	mov	r1, r5
 800690e:	f7f9 fc81 	bl	8000214 <__adddf3>
 8006912:	4604      	mov	r4, r0
 8006914:	460d      	mov	r5, r1
 8006916:	e006      	b.n	8006926 <atan+0x3e>
 8006918:	f1bb 0f00 	cmp.w	fp, #0
 800691c:	f340 812b 	ble.w	8006b76 <atan+0x28e>
 8006920:	a597      	add	r5, pc, #604	@ (adr r5, 8006b80 <atan+0x298>)
 8006922:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006926:	ec45 4b10 	vmov	d0, r4, r5
 800692a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800692e:	4bb2      	ldr	r3, [pc, #712]	@ (8006bf8 <atan+0x310>)
 8006930:	429e      	cmp	r6, r3
 8006932:	d813      	bhi.n	800695c <atan+0x74>
 8006934:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8006938:	429e      	cmp	r6, r3
 800693a:	d80c      	bhi.n	8006956 <atan+0x6e>
 800693c:	a392      	add	r3, pc, #584	@ (adr r3, 8006b88 <atan+0x2a0>)
 800693e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006942:	4620      	mov	r0, r4
 8006944:	4629      	mov	r1, r5
 8006946:	f7f9 fc65 	bl	8000214 <__adddf3>
 800694a:	4bac      	ldr	r3, [pc, #688]	@ (8006bfc <atan+0x314>)
 800694c:	2200      	movs	r2, #0
 800694e:	f7fa f8a7 	bl	8000aa0 <__aeabi_dcmpgt>
 8006952:	2800      	cmp	r0, #0
 8006954:	d1e7      	bne.n	8006926 <atan+0x3e>
 8006956:	f04f 3aff 	mov.w	sl, #4294967295
 800695a:	e029      	b.n	80069b0 <atan+0xc8>
 800695c:	f000 f95c 	bl	8006c18 <fabs>
 8006960:	4ba7      	ldr	r3, [pc, #668]	@ (8006c00 <atan+0x318>)
 8006962:	429e      	cmp	r6, r3
 8006964:	ec55 4b10 	vmov	r4, r5, d0
 8006968:	f200 80bc 	bhi.w	8006ae4 <atan+0x1fc>
 800696c:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8006970:	429e      	cmp	r6, r3
 8006972:	f200 809e 	bhi.w	8006ab2 <atan+0x1ca>
 8006976:	4622      	mov	r2, r4
 8006978:	462b      	mov	r3, r5
 800697a:	4620      	mov	r0, r4
 800697c:	4629      	mov	r1, r5
 800697e:	f7f9 fc49 	bl	8000214 <__adddf3>
 8006982:	4b9e      	ldr	r3, [pc, #632]	@ (8006bfc <atan+0x314>)
 8006984:	2200      	movs	r2, #0
 8006986:	f7f9 fc43 	bl	8000210 <__aeabi_dsub>
 800698a:	2200      	movs	r2, #0
 800698c:	4606      	mov	r6, r0
 800698e:	460f      	mov	r7, r1
 8006990:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8006994:	4620      	mov	r0, r4
 8006996:	4629      	mov	r1, r5
 8006998:	f7f9 fc3c 	bl	8000214 <__adddf3>
 800699c:	4602      	mov	r2, r0
 800699e:	460b      	mov	r3, r1
 80069a0:	4630      	mov	r0, r6
 80069a2:	4639      	mov	r1, r7
 80069a4:	f7f9 ff16 	bl	80007d4 <__aeabi_ddiv>
 80069a8:	f04f 0a00 	mov.w	sl, #0
 80069ac:	4604      	mov	r4, r0
 80069ae:	460d      	mov	r5, r1
 80069b0:	4622      	mov	r2, r4
 80069b2:	462b      	mov	r3, r5
 80069b4:	4620      	mov	r0, r4
 80069b6:	4629      	mov	r1, r5
 80069b8:	f7f9 fde2 	bl	8000580 <__aeabi_dmul>
 80069bc:	4602      	mov	r2, r0
 80069be:	460b      	mov	r3, r1
 80069c0:	4680      	mov	r8, r0
 80069c2:	4689      	mov	r9, r1
 80069c4:	f7f9 fddc 	bl	8000580 <__aeabi_dmul>
 80069c8:	a371      	add	r3, pc, #452	@ (adr r3, 8006b90 <atan+0x2a8>)
 80069ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069ce:	4606      	mov	r6, r0
 80069d0:	460f      	mov	r7, r1
 80069d2:	f7f9 fdd5 	bl	8000580 <__aeabi_dmul>
 80069d6:	a370      	add	r3, pc, #448	@ (adr r3, 8006b98 <atan+0x2b0>)
 80069d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069dc:	f7f9 fc1a 	bl	8000214 <__adddf3>
 80069e0:	4632      	mov	r2, r6
 80069e2:	463b      	mov	r3, r7
 80069e4:	f7f9 fdcc 	bl	8000580 <__aeabi_dmul>
 80069e8:	a36d      	add	r3, pc, #436	@ (adr r3, 8006ba0 <atan+0x2b8>)
 80069ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069ee:	f7f9 fc11 	bl	8000214 <__adddf3>
 80069f2:	4632      	mov	r2, r6
 80069f4:	463b      	mov	r3, r7
 80069f6:	f7f9 fdc3 	bl	8000580 <__aeabi_dmul>
 80069fa:	a36b      	add	r3, pc, #428	@ (adr r3, 8006ba8 <atan+0x2c0>)
 80069fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a00:	f7f9 fc08 	bl	8000214 <__adddf3>
 8006a04:	4632      	mov	r2, r6
 8006a06:	463b      	mov	r3, r7
 8006a08:	f7f9 fdba 	bl	8000580 <__aeabi_dmul>
 8006a0c:	a368      	add	r3, pc, #416	@ (adr r3, 8006bb0 <atan+0x2c8>)
 8006a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a12:	f7f9 fbff 	bl	8000214 <__adddf3>
 8006a16:	4632      	mov	r2, r6
 8006a18:	463b      	mov	r3, r7
 8006a1a:	f7f9 fdb1 	bl	8000580 <__aeabi_dmul>
 8006a1e:	a366      	add	r3, pc, #408	@ (adr r3, 8006bb8 <atan+0x2d0>)
 8006a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a24:	f7f9 fbf6 	bl	8000214 <__adddf3>
 8006a28:	4642      	mov	r2, r8
 8006a2a:	464b      	mov	r3, r9
 8006a2c:	f7f9 fda8 	bl	8000580 <__aeabi_dmul>
 8006a30:	a363      	add	r3, pc, #396	@ (adr r3, 8006bc0 <atan+0x2d8>)
 8006a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a36:	4680      	mov	r8, r0
 8006a38:	4689      	mov	r9, r1
 8006a3a:	4630      	mov	r0, r6
 8006a3c:	4639      	mov	r1, r7
 8006a3e:	f7f9 fd9f 	bl	8000580 <__aeabi_dmul>
 8006a42:	a361      	add	r3, pc, #388	@ (adr r3, 8006bc8 <atan+0x2e0>)
 8006a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a48:	f7f9 fbe2 	bl	8000210 <__aeabi_dsub>
 8006a4c:	4632      	mov	r2, r6
 8006a4e:	463b      	mov	r3, r7
 8006a50:	f7f9 fd96 	bl	8000580 <__aeabi_dmul>
 8006a54:	a35e      	add	r3, pc, #376	@ (adr r3, 8006bd0 <atan+0x2e8>)
 8006a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a5a:	f7f9 fbd9 	bl	8000210 <__aeabi_dsub>
 8006a5e:	4632      	mov	r2, r6
 8006a60:	463b      	mov	r3, r7
 8006a62:	f7f9 fd8d 	bl	8000580 <__aeabi_dmul>
 8006a66:	a35c      	add	r3, pc, #368	@ (adr r3, 8006bd8 <atan+0x2f0>)
 8006a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a6c:	f7f9 fbd0 	bl	8000210 <__aeabi_dsub>
 8006a70:	4632      	mov	r2, r6
 8006a72:	463b      	mov	r3, r7
 8006a74:	f7f9 fd84 	bl	8000580 <__aeabi_dmul>
 8006a78:	a359      	add	r3, pc, #356	@ (adr r3, 8006be0 <atan+0x2f8>)
 8006a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a7e:	f7f9 fbc7 	bl	8000210 <__aeabi_dsub>
 8006a82:	4632      	mov	r2, r6
 8006a84:	463b      	mov	r3, r7
 8006a86:	f7f9 fd7b 	bl	8000580 <__aeabi_dmul>
 8006a8a:	4602      	mov	r2, r0
 8006a8c:	460b      	mov	r3, r1
 8006a8e:	4640      	mov	r0, r8
 8006a90:	4649      	mov	r1, r9
 8006a92:	f7f9 fbbf 	bl	8000214 <__adddf3>
 8006a96:	4622      	mov	r2, r4
 8006a98:	462b      	mov	r3, r5
 8006a9a:	f7f9 fd71 	bl	8000580 <__aeabi_dmul>
 8006a9e:	f1ba 3fff 	cmp.w	sl, #4294967295
 8006aa2:	4602      	mov	r2, r0
 8006aa4:	460b      	mov	r3, r1
 8006aa6:	d148      	bne.n	8006b3a <atan+0x252>
 8006aa8:	4620      	mov	r0, r4
 8006aaa:	4629      	mov	r1, r5
 8006aac:	f7f9 fbb0 	bl	8000210 <__aeabi_dsub>
 8006ab0:	e72f      	b.n	8006912 <atan+0x2a>
 8006ab2:	4b52      	ldr	r3, [pc, #328]	@ (8006bfc <atan+0x314>)
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	4620      	mov	r0, r4
 8006ab8:	4629      	mov	r1, r5
 8006aba:	f7f9 fba9 	bl	8000210 <__aeabi_dsub>
 8006abe:	4b4f      	ldr	r3, [pc, #316]	@ (8006bfc <atan+0x314>)
 8006ac0:	4606      	mov	r6, r0
 8006ac2:	460f      	mov	r7, r1
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	4620      	mov	r0, r4
 8006ac8:	4629      	mov	r1, r5
 8006aca:	f7f9 fba3 	bl	8000214 <__adddf3>
 8006ace:	4602      	mov	r2, r0
 8006ad0:	460b      	mov	r3, r1
 8006ad2:	4630      	mov	r0, r6
 8006ad4:	4639      	mov	r1, r7
 8006ad6:	f7f9 fe7d 	bl	80007d4 <__aeabi_ddiv>
 8006ada:	f04f 0a01 	mov.w	sl, #1
 8006ade:	4604      	mov	r4, r0
 8006ae0:	460d      	mov	r5, r1
 8006ae2:	e765      	b.n	80069b0 <atan+0xc8>
 8006ae4:	4b47      	ldr	r3, [pc, #284]	@ (8006c04 <atan+0x31c>)
 8006ae6:	429e      	cmp	r6, r3
 8006ae8:	d21c      	bcs.n	8006b24 <atan+0x23c>
 8006aea:	4b47      	ldr	r3, [pc, #284]	@ (8006c08 <atan+0x320>)
 8006aec:	2200      	movs	r2, #0
 8006aee:	4620      	mov	r0, r4
 8006af0:	4629      	mov	r1, r5
 8006af2:	f7f9 fb8d 	bl	8000210 <__aeabi_dsub>
 8006af6:	4b44      	ldr	r3, [pc, #272]	@ (8006c08 <atan+0x320>)
 8006af8:	4606      	mov	r6, r0
 8006afa:	460f      	mov	r7, r1
 8006afc:	2200      	movs	r2, #0
 8006afe:	4620      	mov	r0, r4
 8006b00:	4629      	mov	r1, r5
 8006b02:	f7f9 fd3d 	bl	8000580 <__aeabi_dmul>
 8006b06:	4b3d      	ldr	r3, [pc, #244]	@ (8006bfc <atan+0x314>)
 8006b08:	2200      	movs	r2, #0
 8006b0a:	f7f9 fb83 	bl	8000214 <__adddf3>
 8006b0e:	4602      	mov	r2, r0
 8006b10:	460b      	mov	r3, r1
 8006b12:	4630      	mov	r0, r6
 8006b14:	4639      	mov	r1, r7
 8006b16:	f7f9 fe5d 	bl	80007d4 <__aeabi_ddiv>
 8006b1a:	f04f 0a02 	mov.w	sl, #2
 8006b1e:	4604      	mov	r4, r0
 8006b20:	460d      	mov	r5, r1
 8006b22:	e745      	b.n	80069b0 <atan+0xc8>
 8006b24:	4622      	mov	r2, r4
 8006b26:	462b      	mov	r3, r5
 8006b28:	4938      	ldr	r1, [pc, #224]	@ (8006c0c <atan+0x324>)
 8006b2a:	2000      	movs	r0, #0
 8006b2c:	f7f9 fe52 	bl	80007d4 <__aeabi_ddiv>
 8006b30:	f04f 0a03 	mov.w	sl, #3
 8006b34:	4604      	mov	r4, r0
 8006b36:	460d      	mov	r5, r1
 8006b38:	e73a      	b.n	80069b0 <atan+0xc8>
 8006b3a:	4b35      	ldr	r3, [pc, #212]	@ (8006c10 <atan+0x328>)
 8006b3c:	4e35      	ldr	r6, [pc, #212]	@ (8006c14 <atan+0x32c>)
 8006b3e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b46:	f7f9 fb63 	bl	8000210 <__aeabi_dsub>
 8006b4a:	4622      	mov	r2, r4
 8006b4c:	462b      	mov	r3, r5
 8006b4e:	f7f9 fb5f 	bl	8000210 <__aeabi_dsub>
 8006b52:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8006b56:	4602      	mov	r2, r0
 8006b58:	460b      	mov	r3, r1
 8006b5a:	e9d6 0100 	ldrd	r0, r1, [r6]
 8006b5e:	f7f9 fb57 	bl	8000210 <__aeabi_dsub>
 8006b62:	f1bb 0f00 	cmp.w	fp, #0
 8006b66:	4604      	mov	r4, r0
 8006b68:	460d      	mov	r5, r1
 8006b6a:	f6bf aedc 	bge.w	8006926 <atan+0x3e>
 8006b6e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006b72:	461d      	mov	r5, r3
 8006b74:	e6d7      	b.n	8006926 <atan+0x3e>
 8006b76:	a51c      	add	r5, pc, #112	@ (adr r5, 8006be8 <atan+0x300>)
 8006b78:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006b7c:	e6d3      	b.n	8006926 <atan+0x3e>
 8006b7e:	bf00      	nop
 8006b80:	54442d18 	.word	0x54442d18
 8006b84:	3ff921fb 	.word	0x3ff921fb
 8006b88:	8800759c 	.word	0x8800759c
 8006b8c:	7e37e43c 	.word	0x7e37e43c
 8006b90:	e322da11 	.word	0xe322da11
 8006b94:	3f90ad3a 	.word	0x3f90ad3a
 8006b98:	24760deb 	.word	0x24760deb
 8006b9c:	3fa97b4b 	.word	0x3fa97b4b
 8006ba0:	a0d03d51 	.word	0xa0d03d51
 8006ba4:	3fb10d66 	.word	0x3fb10d66
 8006ba8:	c54c206e 	.word	0xc54c206e
 8006bac:	3fb745cd 	.word	0x3fb745cd
 8006bb0:	920083ff 	.word	0x920083ff
 8006bb4:	3fc24924 	.word	0x3fc24924
 8006bb8:	5555550d 	.word	0x5555550d
 8006bbc:	3fd55555 	.word	0x3fd55555
 8006bc0:	2c6a6c2f 	.word	0x2c6a6c2f
 8006bc4:	bfa2b444 	.word	0xbfa2b444
 8006bc8:	52defd9a 	.word	0x52defd9a
 8006bcc:	3fadde2d 	.word	0x3fadde2d
 8006bd0:	af749a6d 	.word	0xaf749a6d
 8006bd4:	3fb3b0f2 	.word	0x3fb3b0f2
 8006bd8:	fe231671 	.word	0xfe231671
 8006bdc:	3fbc71c6 	.word	0x3fbc71c6
 8006be0:	9998ebc4 	.word	0x9998ebc4
 8006be4:	3fc99999 	.word	0x3fc99999
 8006be8:	54442d18 	.word	0x54442d18
 8006bec:	bff921fb 	.word	0xbff921fb
 8006bf0:	440fffff 	.word	0x440fffff
 8006bf4:	7ff00000 	.word	0x7ff00000
 8006bf8:	3fdbffff 	.word	0x3fdbffff
 8006bfc:	3ff00000 	.word	0x3ff00000
 8006c00:	3ff2ffff 	.word	0x3ff2ffff
 8006c04:	40038000 	.word	0x40038000
 8006c08:	3ff80000 	.word	0x3ff80000
 8006c0c:	bff00000 	.word	0xbff00000
 8006c10:	08007988 	.word	0x08007988
 8006c14:	080079a8 	.word	0x080079a8

08006c18 <fabs>:
 8006c18:	ec51 0b10 	vmov	r0, r1, d0
 8006c1c:	4602      	mov	r2, r0
 8006c1e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8006c22:	ec43 2b10 	vmov	d0, r2, r3
 8006c26:	4770      	bx	lr

08006c28 <scalbn>:
 8006c28:	b570      	push	{r4, r5, r6, lr}
 8006c2a:	ec55 4b10 	vmov	r4, r5, d0
 8006c2e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8006c32:	4606      	mov	r6, r0
 8006c34:	462b      	mov	r3, r5
 8006c36:	b991      	cbnz	r1, 8006c5e <scalbn+0x36>
 8006c38:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8006c3c:	4323      	orrs	r3, r4
 8006c3e:	d03d      	beq.n	8006cbc <scalbn+0x94>
 8006c40:	4b35      	ldr	r3, [pc, #212]	@ (8006d18 <scalbn+0xf0>)
 8006c42:	4620      	mov	r0, r4
 8006c44:	4629      	mov	r1, r5
 8006c46:	2200      	movs	r2, #0
 8006c48:	f7f9 fc9a 	bl	8000580 <__aeabi_dmul>
 8006c4c:	4b33      	ldr	r3, [pc, #204]	@ (8006d1c <scalbn+0xf4>)
 8006c4e:	429e      	cmp	r6, r3
 8006c50:	4604      	mov	r4, r0
 8006c52:	460d      	mov	r5, r1
 8006c54:	da0f      	bge.n	8006c76 <scalbn+0x4e>
 8006c56:	a328      	add	r3, pc, #160	@ (adr r3, 8006cf8 <scalbn+0xd0>)
 8006c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c5c:	e01e      	b.n	8006c9c <scalbn+0x74>
 8006c5e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8006c62:	4291      	cmp	r1, r2
 8006c64:	d10b      	bne.n	8006c7e <scalbn+0x56>
 8006c66:	4622      	mov	r2, r4
 8006c68:	4620      	mov	r0, r4
 8006c6a:	4629      	mov	r1, r5
 8006c6c:	f7f9 fad2 	bl	8000214 <__adddf3>
 8006c70:	4604      	mov	r4, r0
 8006c72:	460d      	mov	r5, r1
 8006c74:	e022      	b.n	8006cbc <scalbn+0x94>
 8006c76:	460b      	mov	r3, r1
 8006c78:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8006c7c:	3936      	subs	r1, #54	@ 0x36
 8006c7e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8006c82:	4296      	cmp	r6, r2
 8006c84:	dd0d      	ble.n	8006ca2 <scalbn+0x7a>
 8006c86:	2d00      	cmp	r5, #0
 8006c88:	a11d      	add	r1, pc, #116	@ (adr r1, 8006d00 <scalbn+0xd8>)
 8006c8a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006c8e:	da02      	bge.n	8006c96 <scalbn+0x6e>
 8006c90:	a11d      	add	r1, pc, #116	@ (adr r1, 8006d08 <scalbn+0xe0>)
 8006c92:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006c96:	a31a      	add	r3, pc, #104	@ (adr r3, 8006d00 <scalbn+0xd8>)
 8006c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c9c:	f7f9 fc70 	bl	8000580 <__aeabi_dmul>
 8006ca0:	e7e6      	b.n	8006c70 <scalbn+0x48>
 8006ca2:	1872      	adds	r2, r6, r1
 8006ca4:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8006ca8:	428a      	cmp	r2, r1
 8006caa:	dcec      	bgt.n	8006c86 <scalbn+0x5e>
 8006cac:	2a00      	cmp	r2, #0
 8006cae:	dd08      	ble.n	8006cc2 <scalbn+0x9a>
 8006cb0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8006cb4:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8006cb8:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006cbc:	ec45 4b10 	vmov	d0, r4, r5
 8006cc0:	bd70      	pop	{r4, r5, r6, pc}
 8006cc2:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8006cc6:	da08      	bge.n	8006cda <scalbn+0xb2>
 8006cc8:	2d00      	cmp	r5, #0
 8006cca:	a10b      	add	r1, pc, #44	@ (adr r1, 8006cf8 <scalbn+0xd0>)
 8006ccc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006cd0:	dac1      	bge.n	8006c56 <scalbn+0x2e>
 8006cd2:	a10f      	add	r1, pc, #60	@ (adr r1, 8006d10 <scalbn+0xe8>)
 8006cd4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006cd8:	e7bd      	b.n	8006c56 <scalbn+0x2e>
 8006cda:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8006cde:	3236      	adds	r2, #54	@ 0x36
 8006ce0:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8006ce4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006ce8:	4620      	mov	r0, r4
 8006cea:	4b0d      	ldr	r3, [pc, #52]	@ (8006d20 <scalbn+0xf8>)
 8006cec:	4629      	mov	r1, r5
 8006cee:	2200      	movs	r2, #0
 8006cf0:	e7d4      	b.n	8006c9c <scalbn+0x74>
 8006cf2:	bf00      	nop
 8006cf4:	f3af 8000 	nop.w
 8006cf8:	c2f8f359 	.word	0xc2f8f359
 8006cfc:	01a56e1f 	.word	0x01a56e1f
 8006d00:	8800759c 	.word	0x8800759c
 8006d04:	7e37e43c 	.word	0x7e37e43c
 8006d08:	8800759c 	.word	0x8800759c
 8006d0c:	fe37e43c 	.word	0xfe37e43c
 8006d10:	c2f8f359 	.word	0xc2f8f359
 8006d14:	81a56e1f 	.word	0x81a56e1f
 8006d18:	43500000 	.word	0x43500000
 8006d1c:	ffff3cb0 	.word	0xffff3cb0
 8006d20:	3c900000 	.word	0x3c900000

08006d24 <with_errno>:
 8006d24:	b510      	push	{r4, lr}
 8006d26:	ed2d 8b02 	vpush	{d8}
 8006d2a:	eeb0 8a40 	vmov.f32	s16, s0
 8006d2e:	eef0 8a60 	vmov.f32	s17, s1
 8006d32:	4604      	mov	r4, r0
 8006d34:	f000 fcec 	bl	8007710 <__errno>
 8006d38:	eeb0 0a48 	vmov.f32	s0, s16
 8006d3c:	eef0 0a68 	vmov.f32	s1, s17
 8006d40:	ecbd 8b02 	vpop	{d8}
 8006d44:	6004      	str	r4, [r0, #0]
 8006d46:	bd10      	pop	{r4, pc}

08006d48 <xflow>:
 8006d48:	4603      	mov	r3, r0
 8006d4a:	b507      	push	{r0, r1, r2, lr}
 8006d4c:	ec51 0b10 	vmov	r0, r1, d0
 8006d50:	b183      	cbz	r3, 8006d74 <xflow+0x2c>
 8006d52:	4602      	mov	r2, r0
 8006d54:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006d58:	e9cd 2300 	strd	r2, r3, [sp]
 8006d5c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006d60:	f7f9 fc0e 	bl	8000580 <__aeabi_dmul>
 8006d64:	ec41 0b10 	vmov	d0, r0, r1
 8006d68:	2022      	movs	r0, #34	@ 0x22
 8006d6a:	b003      	add	sp, #12
 8006d6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006d70:	f7ff bfd8 	b.w	8006d24 <with_errno>
 8006d74:	4602      	mov	r2, r0
 8006d76:	460b      	mov	r3, r1
 8006d78:	e7ee      	b.n	8006d58 <xflow+0x10>
 8006d7a:	0000      	movs	r0, r0
 8006d7c:	0000      	movs	r0, r0
	...

08006d80 <__math_uflow>:
 8006d80:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8006d88 <__math_uflow+0x8>
 8006d84:	f7ff bfe0 	b.w	8006d48 <xflow>
 8006d88:	00000000 	.word	0x00000000
 8006d8c:	10000000 	.word	0x10000000

08006d90 <__math_oflow>:
 8006d90:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8006d98 <__math_oflow+0x8>
 8006d94:	f7ff bfd8 	b.w	8006d48 <xflow>
 8006d98:	00000000 	.word	0x00000000
 8006d9c:	70000000 	.word	0x70000000

08006da0 <__ieee754_sqrt>:
 8006da0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006da4:	4a68      	ldr	r2, [pc, #416]	@ (8006f48 <__ieee754_sqrt+0x1a8>)
 8006da6:	ec55 4b10 	vmov	r4, r5, d0
 8006daa:	43aa      	bics	r2, r5
 8006dac:	462b      	mov	r3, r5
 8006dae:	4621      	mov	r1, r4
 8006db0:	d110      	bne.n	8006dd4 <__ieee754_sqrt+0x34>
 8006db2:	4622      	mov	r2, r4
 8006db4:	4620      	mov	r0, r4
 8006db6:	4629      	mov	r1, r5
 8006db8:	f7f9 fbe2 	bl	8000580 <__aeabi_dmul>
 8006dbc:	4602      	mov	r2, r0
 8006dbe:	460b      	mov	r3, r1
 8006dc0:	4620      	mov	r0, r4
 8006dc2:	4629      	mov	r1, r5
 8006dc4:	f7f9 fa26 	bl	8000214 <__adddf3>
 8006dc8:	4604      	mov	r4, r0
 8006dca:	460d      	mov	r5, r1
 8006dcc:	ec45 4b10 	vmov	d0, r4, r5
 8006dd0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dd4:	2d00      	cmp	r5, #0
 8006dd6:	dc0e      	bgt.n	8006df6 <__ieee754_sqrt+0x56>
 8006dd8:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8006ddc:	4322      	orrs	r2, r4
 8006dde:	d0f5      	beq.n	8006dcc <__ieee754_sqrt+0x2c>
 8006de0:	b19d      	cbz	r5, 8006e0a <__ieee754_sqrt+0x6a>
 8006de2:	4622      	mov	r2, r4
 8006de4:	4620      	mov	r0, r4
 8006de6:	4629      	mov	r1, r5
 8006de8:	f7f9 fa12 	bl	8000210 <__aeabi_dsub>
 8006dec:	4602      	mov	r2, r0
 8006dee:	460b      	mov	r3, r1
 8006df0:	f7f9 fcf0 	bl	80007d4 <__aeabi_ddiv>
 8006df4:	e7e8      	b.n	8006dc8 <__ieee754_sqrt+0x28>
 8006df6:	152a      	asrs	r2, r5, #20
 8006df8:	d115      	bne.n	8006e26 <__ieee754_sqrt+0x86>
 8006dfa:	2000      	movs	r0, #0
 8006dfc:	e009      	b.n	8006e12 <__ieee754_sqrt+0x72>
 8006dfe:	0acb      	lsrs	r3, r1, #11
 8006e00:	3a15      	subs	r2, #21
 8006e02:	0549      	lsls	r1, r1, #21
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d0fa      	beq.n	8006dfe <__ieee754_sqrt+0x5e>
 8006e08:	e7f7      	b.n	8006dfa <__ieee754_sqrt+0x5a>
 8006e0a:	462a      	mov	r2, r5
 8006e0c:	e7fa      	b.n	8006e04 <__ieee754_sqrt+0x64>
 8006e0e:	005b      	lsls	r3, r3, #1
 8006e10:	3001      	adds	r0, #1
 8006e12:	02dc      	lsls	r4, r3, #11
 8006e14:	d5fb      	bpl.n	8006e0e <__ieee754_sqrt+0x6e>
 8006e16:	1e44      	subs	r4, r0, #1
 8006e18:	1b12      	subs	r2, r2, r4
 8006e1a:	f1c0 0420 	rsb	r4, r0, #32
 8006e1e:	fa21 f404 	lsr.w	r4, r1, r4
 8006e22:	4323      	orrs	r3, r4
 8006e24:	4081      	lsls	r1, r0
 8006e26:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006e2a:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8006e2e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006e32:	07d2      	lsls	r2, r2, #31
 8006e34:	bf5c      	itt	pl
 8006e36:	005b      	lslpl	r3, r3, #1
 8006e38:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8006e3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006e40:	bf58      	it	pl
 8006e42:	0049      	lslpl	r1, r1, #1
 8006e44:	2600      	movs	r6, #0
 8006e46:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8006e4a:	106d      	asrs	r5, r5, #1
 8006e4c:	0049      	lsls	r1, r1, #1
 8006e4e:	2016      	movs	r0, #22
 8006e50:	4632      	mov	r2, r6
 8006e52:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8006e56:	1917      	adds	r7, r2, r4
 8006e58:	429f      	cmp	r7, r3
 8006e5a:	bfde      	ittt	le
 8006e5c:	193a      	addle	r2, r7, r4
 8006e5e:	1bdb      	suble	r3, r3, r7
 8006e60:	1936      	addle	r6, r6, r4
 8006e62:	0fcf      	lsrs	r7, r1, #31
 8006e64:	3801      	subs	r0, #1
 8006e66:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8006e6a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8006e6e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8006e72:	d1f0      	bne.n	8006e56 <__ieee754_sqrt+0xb6>
 8006e74:	4604      	mov	r4, r0
 8006e76:	2720      	movs	r7, #32
 8006e78:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8006e7c:	429a      	cmp	r2, r3
 8006e7e:	eb00 0e0c 	add.w	lr, r0, ip
 8006e82:	db02      	blt.n	8006e8a <__ieee754_sqrt+0xea>
 8006e84:	d113      	bne.n	8006eae <__ieee754_sqrt+0x10e>
 8006e86:	458e      	cmp	lr, r1
 8006e88:	d811      	bhi.n	8006eae <__ieee754_sqrt+0x10e>
 8006e8a:	f1be 0f00 	cmp.w	lr, #0
 8006e8e:	eb0e 000c 	add.w	r0, lr, ip
 8006e92:	da42      	bge.n	8006f1a <__ieee754_sqrt+0x17a>
 8006e94:	2800      	cmp	r0, #0
 8006e96:	db40      	blt.n	8006f1a <__ieee754_sqrt+0x17a>
 8006e98:	f102 0801 	add.w	r8, r2, #1
 8006e9c:	1a9b      	subs	r3, r3, r2
 8006e9e:	458e      	cmp	lr, r1
 8006ea0:	bf88      	it	hi
 8006ea2:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8006ea6:	eba1 010e 	sub.w	r1, r1, lr
 8006eaa:	4464      	add	r4, ip
 8006eac:	4642      	mov	r2, r8
 8006eae:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8006eb2:	3f01      	subs	r7, #1
 8006eb4:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8006eb8:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8006ebc:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8006ec0:	d1dc      	bne.n	8006e7c <__ieee754_sqrt+0xdc>
 8006ec2:	4319      	orrs	r1, r3
 8006ec4:	d01b      	beq.n	8006efe <__ieee754_sqrt+0x15e>
 8006ec6:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8006f4c <__ieee754_sqrt+0x1ac>
 8006eca:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8006f50 <__ieee754_sqrt+0x1b0>
 8006ece:	e9da 0100 	ldrd	r0, r1, [sl]
 8006ed2:	e9db 2300 	ldrd	r2, r3, [fp]
 8006ed6:	f7f9 f99b 	bl	8000210 <__aeabi_dsub>
 8006eda:	e9da 8900 	ldrd	r8, r9, [sl]
 8006ede:	4602      	mov	r2, r0
 8006ee0:	460b      	mov	r3, r1
 8006ee2:	4640      	mov	r0, r8
 8006ee4:	4649      	mov	r1, r9
 8006ee6:	f7f9 fdc7 	bl	8000a78 <__aeabi_dcmple>
 8006eea:	b140      	cbz	r0, 8006efe <__ieee754_sqrt+0x15e>
 8006eec:	f1b4 3fff 	cmp.w	r4, #4294967295
 8006ef0:	e9da 0100 	ldrd	r0, r1, [sl]
 8006ef4:	e9db 2300 	ldrd	r2, r3, [fp]
 8006ef8:	d111      	bne.n	8006f1e <__ieee754_sqrt+0x17e>
 8006efa:	3601      	adds	r6, #1
 8006efc:	463c      	mov	r4, r7
 8006efe:	1072      	asrs	r2, r6, #1
 8006f00:	0863      	lsrs	r3, r4, #1
 8006f02:	07f1      	lsls	r1, r6, #31
 8006f04:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8006f08:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8006f0c:	bf48      	it	mi
 8006f0e:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8006f12:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8006f16:	4618      	mov	r0, r3
 8006f18:	e756      	b.n	8006dc8 <__ieee754_sqrt+0x28>
 8006f1a:	4690      	mov	r8, r2
 8006f1c:	e7be      	b.n	8006e9c <__ieee754_sqrt+0xfc>
 8006f1e:	f7f9 f979 	bl	8000214 <__adddf3>
 8006f22:	e9da 8900 	ldrd	r8, r9, [sl]
 8006f26:	4602      	mov	r2, r0
 8006f28:	460b      	mov	r3, r1
 8006f2a:	4640      	mov	r0, r8
 8006f2c:	4649      	mov	r1, r9
 8006f2e:	f7f9 fd99 	bl	8000a64 <__aeabi_dcmplt>
 8006f32:	b120      	cbz	r0, 8006f3e <__ieee754_sqrt+0x19e>
 8006f34:	1ca0      	adds	r0, r4, #2
 8006f36:	bf08      	it	eq
 8006f38:	3601      	addeq	r6, #1
 8006f3a:	3402      	adds	r4, #2
 8006f3c:	e7df      	b.n	8006efe <__ieee754_sqrt+0x15e>
 8006f3e:	1c63      	adds	r3, r4, #1
 8006f40:	f023 0401 	bic.w	r4, r3, #1
 8006f44:	e7db      	b.n	8006efe <__ieee754_sqrt+0x15e>
 8006f46:	bf00      	nop
 8006f48:	7ff00000 	.word	0x7ff00000
 8006f4c:	20000020 	.word	0x20000020
 8006f50:	20000018 	.word	0x20000018
 8006f54:	00000000 	.word	0x00000000

08006f58 <__kernel_rem_pio2>:
 8006f58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f5c:	ed2d 8b02 	vpush	{d8}
 8006f60:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8006f64:	f112 0f14 	cmn.w	r2, #20
 8006f68:	9306      	str	r3, [sp, #24]
 8006f6a:	9104      	str	r1, [sp, #16]
 8006f6c:	4bbe      	ldr	r3, [pc, #760]	@ (8007268 <__kernel_rem_pio2+0x310>)
 8006f6e:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8006f70:	9008      	str	r0, [sp, #32]
 8006f72:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006f76:	9300      	str	r3, [sp, #0]
 8006f78:	9b06      	ldr	r3, [sp, #24]
 8006f7a:	f103 33ff 	add.w	r3, r3, #4294967295
 8006f7e:	bfa8      	it	ge
 8006f80:	1ed4      	subge	r4, r2, #3
 8006f82:	9305      	str	r3, [sp, #20]
 8006f84:	bfb2      	itee	lt
 8006f86:	2400      	movlt	r4, #0
 8006f88:	2318      	movge	r3, #24
 8006f8a:	fb94 f4f3 	sdivge	r4, r4, r3
 8006f8e:	f06f 0317 	mvn.w	r3, #23
 8006f92:	fb04 3303 	mla	r3, r4, r3, r3
 8006f96:	eb03 0b02 	add.w	fp, r3, r2
 8006f9a:	9b00      	ldr	r3, [sp, #0]
 8006f9c:	9a05      	ldr	r2, [sp, #20]
 8006f9e:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 8007258 <__kernel_rem_pio2+0x300>
 8006fa2:	eb03 0802 	add.w	r8, r3, r2
 8006fa6:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8006fa8:	1aa7      	subs	r7, r4, r2
 8006faa:	ae20      	add	r6, sp, #128	@ 0x80
 8006fac:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8006fb0:	2500      	movs	r5, #0
 8006fb2:	4545      	cmp	r5, r8
 8006fb4:	dd13      	ble.n	8006fde <__kernel_rem_pio2+0x86>
 8006fb6:	9b06      	ldr	r3, [sp, #24]
 8006fb8:	aa20      	add	r2, sp, #128	@ 0x80
 8006fba:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8006fbe:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 8006fc2:	f04f 0800 	mov.w	r8, #0
 8006fc6:	9b00      	ldr	r3, [sp, #0]
 8006fc8:	4598      	cmp	r8, r3
 8006fca:	dc31      	bgt.n	8007030 <__kernel_rem_pio2+0xd8>
 8006fcc:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 8007258 <__kernel_rem_pio2+0x300>
 8006fd0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006fd4:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006fd8:	462f      	mov	r7, r5
 8006fda:	2600      	movs	r6, #0
 8006fdc:	e01b      	b.n	8007016 <__kernel_rem_pio2+0xbe>
 8006fde:	42ef      	cmn	r7, r5
 8006fe0:	d407      	bmi.n	8006ff2 <__kernel_rem_pio2+0x9a>
 8006fe2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8006fe6:	f7f9 fa61 	bl	80004ac <__aeabi_i2d>
 8006fea:	e8e6 0102 	strd	r0, r1, [r6], #8
 8006fee:	3501      	adds	r5, #1
 8006ff0:	e7df      	b.n	8006fb2 <__kernel_rem_pio2+0x5a>
 8006ff2:	ec51 0b18 	vmov	r0, r1, d8
 8006ff6:	e7f8      	b.n	8006fea <__kernel_rem_pio2+0x92>
 8006ff8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ffc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8007000:	f7f9 fabe 	bl	8000580 <__aeabi_dmul>
 8007004:	4602      	mov	r2, r0
 8007006:	460b      	mov	r3, r1
 8007008:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800700c:	f7f9 f902 	bl	8000214 <__adddf3>
 8007010:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007014:	3601      	adds	r6, #1
 8007016:	9b05      	ldr	r3, [sp, #20]
 8007018:	429e      	cmp	r6, r3
 800701a:	f1a7 0708 	sub.w	r7, r7, #8
 800701e:	ddeb      	ble.n	8006ff8 <__kernel_rem_pio2+0xa0>
 8007020:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007024:	f108 0801 	add.w	r8, r8, #1
 8007028:	ecaa 7b02 	vstmia	sl!, {d7}
 800702c:	3508      	adds	r5, #8
 800702e:	e7ca      	b.n	8006fc6 <__kernel_rem_pio2+0x6e>
 8007030:	9b00      	ldr	r3, [sp, #0]
 8007032:	f8dd 8000 	ldr.w	r8, [sp]
 8007036:	aa0c      	add	r2, sp, #48	@ 0x30
 8007038:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800703c:	930a      	str	r3, [sp, #40]	@ 0x28
 800703e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8007040:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8007044:	9309      	str	r3, [sp, #36]	@ 0x24
 8007046:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800704a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800704c:	ab98      	add	r3, sp, #608	@ 0x260
 800704e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8007052:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 8007056:	ed8d 7b02 	vstr	d7, [sp, #8]
 800705a:	ac0c      	add	r4, sp, #48	@ 0x30
 800705c:	ab70      	add	r3, sp, #448	@ 0x1c0
 800705e:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 8007062:	46a1      	mov	r9, r4
 8007064:	46c2      	mov	sl, r8
 8007066:	f1ba 0f00 	cmp.w	sl, #0
 800706a:	f1a5 0508 	sub.w	r5, r5, #8
 800706e:	dc77      	bgt.n	8007160 <__kernel_rem_pio2+0x208>
 8007070:	4658      	mov	r0, fp
 8007072:	ed9d 0b02 	vldr	d0, [sp, #8]
 8007076:	f7ff fdd7 	bl	8006c28 <scalbn>
 800707a:	ec57 6b10 	vmov	r6, r7, d0
 800707e:	2200      	movs	r2, #0
 8007080:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8007084:	4630      	mov	r0, r6
 8007086:	4639      	mov	r1, r7
 8007088:	f7f9 fa7a 	bl	8000580 <__aeabi_dmul>
 800708c:	ec41 0b10 	vmov	d0, r0, r1
 8007090:	f000 faba 	bl	8007608 <floor>
 8007094:	4b75      	ldr	r3, [pc, #468]	@ (800726c <__kernel_rem_pio2+0x314>)
 8007096:	ec51 0b10 	vmov	r0, r1, d0
 800709a:	2200      	movs	r2, #0
 800709c:	f7f9 fa70 	bl	8000580 <__aeabi_dmul>
 80070a0:	4602      	mov	r2, r0
 80070a2:	460b      	mov	r3, r1
 80070a4:	4630      	mov	r0, r6
 80070a6:	4639      	mov	r1, r7
 80070a8:	f7f9 f8b2 	bl	8000210 <__aeabi_dsub>
 80070ac:	460f      	mov	r7, r1
 80070ae:	4606      	mov	r6, r0
 80070b0:	f7f9 fd16 	bl	8000ae0 <__aeabi_d2iz>
 80070b4:	9002      	str	r0, [sp, #8]
 80070b6:	f7f9 f9f9 	bl	80004ac <__aeabi_i2d>
 80070ba:	4602      	mov	r2, r0
 80070bc:	460b      	mov	r3, r1
 80070be:	4630      	mov	r0, r6
 80070c0:	4639      	mov	r1, r7
 80070c2:	f7f9 f8a5 	bl	8000210 <__aeabi_dsub>
 80070c6:	f1bb 0f00 	cmp.w	fp, #0
 80070ca:	4606      	mov	r6, r0
 80070cc:	460f      	mov	r7, r1
 80070ce:	dd6c      	ble.n	80071aa <__kernel_rem_pio2+0x252>
 80070d0:	f108 31ff 	add.w	r1, r8, #4294967295
 80070d4:	ab0c      	add	r3, sp, #48	@ 0x30
 80070d6:	9d02      	ldr	r5, [sp, #8]
 80070d8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80070dc:	f1cb 0018 	rsb	r0, fp, #24
 80070e0:	fa43 f200 	asr.w	r2, r3, r0
 80070e4:	4415      	add	r5, r2
 80070e6:	4082      	lsls	r2, r0
 80070e8:	1a9b      	subs	r3, r3, r2
 80070ea:	aa0c      	add	r2, sp, #48	@ 0x30
 80070ec:	9502      	str	r5, [sp, #8]
 80070ee:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80070f2:	f1cb 0217 	rsb	r2, fp, #23
 80070f6:	fa43 f902 	asr.w	r9, r3, r2
 80070fa:	f1b9 0f00 	cmp.w	r9, #0
 80070fe:	dd64      	ble.n	80071ca <__kernel_rem_pio2+0x272>
 8007100:	9b02      	ldr	r3, [sp, #8]
 8007102:	2200      	movs	r2, #0
 8007104:	3301      	adds	r3, #1
 8007106:	9302      	str	r3, [sp, #8]
 8007108:	4615      	mov	r5, r2
 800710a:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800710e:	4590      	cmp	r8, r2
 8007110:	f300 80b8 	bgt.w	8007284 <__kernel_rem_pio2+0x32c>
 8007114:	f1bb 0f00 	cmp.w	fp, #0
 8007118:	dd07      	ble.n	800712a <__kernel_rem_pio2+0x1d2>
 800711a:	f1bb 0f01 	cmp.w	fp, #1
 800711e:	f000 80bf 	beq.w	80072a0 <__kernel_rem_pio2+0x348>
 8007122:	f1bb 0f02 	cmp.w	fp, #2
 8007126:	f000 80c6 	beq.w	80072b6 <__kernel_rem_pio2+0x35e>
 800712a:	f1b9 0f02 	cmp.w	r9, #2
 800712e:	d14c      	bne.n	80071ca <__kernel_rem_pio2+0x272>
 8007130:	4632      	mov	r2, r6
 8007132:	463b      	mov	r3, r7
 8007134:	494e      	ldr	r1, [pc, #312]	@ (8007270 <__kernel_rem_pio2+0x318>)
 8007136:	2000      	movs	r0, #0
 8007138:	f7f9 f86a 	bl	8000210 <__aeabi_dsub>
 800713c:	4606      	mov	r6, r0
 800713e:	460f      	mov	r7, r1
 8007140:	2d00      	cmp	r5, #0
 8007142:	d042      	beq.n	80071ca <__kernel_rem_pio2+0x272>
 8007144:	4658      	mov	r0, fp
 8007146:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 8007260 <__kernel_rem_pio2+0x308>
 800714a:	f7ff fd6d 	bl	8006c28 <scalbn>
 800714e:	4630      	mov	r0, r6
 8007150:	4639      	mov	r1, r7
 8007152:	ec53 2b10 	vmov	r2, r3, d0
 8007156:	f7f9 f85b 	bl	8000210 <__aeabi_dsub>
 800715a:	4606      	mov	r6, r0
 800715c:	460f      	mov	r7, r1
 800715e:	e034      	b.n	80071ca <__kernel_rem_pio2+0x272>
 8007160:	4b44      	ldr	r3, [pc, #272]	@ (8007274 <__kernel_rem_pio2+0x31c>)
 8007162:	2200      	movs	r2, #0
 8007164:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007168:	f7f9 fa0a 	bl	8000580 <__aeabi_dmul>
 800716c:	f7f9 fcb8 	bl	8000ae0 <__aeabi_d2iz>
 8007170:	f7f9 f99c 	bl	80004ac <__aeabi_i2d>
 8007174:	4b40      	ldr	r3, [pc, #256]	@ (8007278 <__kernel_rem_pio2+0x320>)
 8007176:	2200      	movs	r2, #0
 8007178:	4606      	mov	r6, r0
 800717a:	460f      	mov	r7, r1
 800717c:	f7f9 fa00 	bl	8000580 <__aeabi_dmul>
 8007180:	4602      	mov	r2, r0
 8007182:	460b      	mov	r3, r1
 8007184:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007188:	f7f9 f842 	bl	8000210 <__aeabi_dsub>
 800718c:	f7f9 fca8 	bl	8000ae0 <__aeabi_d2iz>
 8007190:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007194:	f849 0b04 	str.w	r0, [r9], #4
 8007198:	4639      	mov	r1, r7
 800719a:	4630      	mov	r0, r6
 800719c:	f7f9 f83a 	bl	8000214 <__adddf3>
 80071a0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80071a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80071a8:	e75d      	b.n	8007066 <__kernel_rem_pio2+0x10e>
 80071aa:	d107      	bne.n	80071bc <__kernel_rem_pio2+0x264>
 80071ac:	f108 33ff 	add.w	r3, r8, #4294967295
 80071b0:	aa0c      	add	r2, sp, #48	@ 0x30
 80071b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80071b6:	ea4f 59e3 	mov.w	r9, r3, asr #23
 80071ba:	e79e      	b.n	80070fa <__kernel_rem_pio2+0x1a2>
 80071bc:	4b2f      	ldr	r3, [pc, #188]	@ (800727c <__kernel_rem_pio2+0x324>)
 80071be:	2200      	movs	r2, #0
 80071c0:	f7f9 fc64 	bl	8000a8c <__aeabi_dcmpge>
 80071c4:	2800      	cmp	r0, #0
 80071c6:	d143      	bne.n	8007250 <__kernel_rem_pio2+0x2f8>
 80071c8:	4681      	mov	r9, r0
 80071ca:	2200      	movs	r2, #0
 80071cc:	2300      	movs	r3, #0
 80071ce:	4630      	mov	r0, r6
 80071d0:	4639      	mov	r1, r7
 80071d2:	f7f9 fc3d 	bl	8000a50 <__aeabi_dcmpeq>
 80071d6:	2800      	cmp	r0, #0
 80071d8:	f000 80bf 	beq.w	800735a <__kernel_rem_pio2+0x402>
 80071dc:	f108 33ff 	add.w	r3, r8, #4294967295
 80071e0:	2200      	movs	r2, #0
 80071e2:	9900      	ldr	r1, [sp, #0]
 80071e4:	428b      	cmp	r3, r1
 80071e6:	da6e      	bge.n	80072c6 <__kernel_rem_pio2+0x36e>
 80071e8:	2a00      	cmp	r2, #0
 80071ea:	f000 8089 	beq.w	8007300 <__kernel_rem_pio2+0x3a8>
 80071ee:	f108 38ff 	add.w	r8, r8, #4294967295
 80071f2:	ab0c      	add	r3, sp, #48	@ 0x30
 80071f4:	f1ab 0b18 	sub.w	fp, fp, #24
 80071f8:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d0f6      	beq.n	80071ee <__kernel_rem_pio2+0x296>
 8007200:	4658      	mov	r0, fp
 8007202:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8007260 <__kernel_rem_pio2+0x308>
 8007206:	f7ff fd0f 	bl	8006c28 <scalbn>
 800720a:	f108 0301 	add.w	r3, r8, #1
 800720e:	00da      	lsls	r2, r3, #3
 8007210:	9205      	str	r2, [sp, #20]
 8007212:	ec55 4b10 	vmov	r4, r5, d0
 8007216:	aa70      	add	r2, sp, #448	@ 0x1c0
 8007218:	f8df b058 	ldr.w	fp, [pc, #88]	@ 8007274 <__kernel_rem_pio2+0x31c>
 800721c:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8007220:	4646      	mov	r6, r8
 8007222:	f04f 0a00 	mov.w	sl, #0
 8007226:	2e00      	cmp	r6, #0
 8007228:	f280 80cf 	bge.w	80073ca <__kernel_rem_pio2+0x472>
 800722c:	4644      	mov	r4, r8
 800722e:	2c00      	cmp	r4, #0
 8007230:	f2c0 80fd 	blt.w	800742e <__kernel_rem_pio2+0x4d6>
 8007234:	4b12      	ldr	r3, [pc, #72]	@ (8007280 <__kernel_rem_pio2+0x328>)
 8007236:	461f      	mov	r7, r3
 8007238:	ab70      	add	r3, sp, #448	@ 0x1c0
 800723a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800723e:	9306      	str	r3, [sp, #24]
 8007240:	f04f 0a00 	mov.w	sl, #0
 8007244:	f04f 0b00 	mov.w	fp, #0
 8007248:	2600      	movs	r6, #0
 800724a:	eba8 0504 	sub.w	r5, r8, r4
 800724e:	e0e2      	b.n	8007416 <__kernel_rem_pio2+0x4be>
 8007250:	f04f 0902 	mov.w	r9, #2
 8007254:	e754      	b.n	8007100 <__kernel_rem_pio2+0x1a8>
 8007256:	bf00      	nop
	...
 8007264:	3ff00000 	.word	0x3ff00000
 8007268:	08007a08 	.word	0x08007a08
 800726c:	40200000 	.word	0x40200000
 8007270:	3ff00000 	.word	0x3ff00000
 8007274:	3e700000 	.word	0x3e700000
 8007278:	41700000 	.word	0x41700000
 800727c:	3fe00000 	.word	0x3fe00000
 8007280:	080079c8 	.word	0x080079c8
 8007284:	f854 3b04 	ldr.w	r3, [r4], #4
 8007288:	b945      	cbnz	r5, 800729c <__kernel_rem_pio2+0x344>
 800728a:	b123      	cbz	r3, 8007296 <__kernel_rem_pio2+0x33e>
 800728c:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8007290:	f844 3c04 	str.w	r3, [r4, #-4]
 8007294:	2301      	movs	r3, #1
 8007296:	3201      	adds	r2, #1
 8007298:	461d      	mov	r5, r3
 800729a:	e738      	b.n	800710e <__kernel_rem_pio2+0x1b6>
 800729c:	1acb      	subs	r3, r1, r3
 800729e:	e7f7      	b.n	8007290 <__kernel_rem_pio2+0x338>
 80072a0:	f108 32ff 	add.w	r2, r8, #4294967295
 80072a4:	ab0c      	add	r3, sp, #48	@ 0x30
 80072a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072aa:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80072ae:	a90c      	add	r1, sp, #48	@ 0x30
 80072b0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80072b4:	e739      	b.n	800712a <__kernel_rem_pio2+0x1d2>
 80072b6:	f108 32ff 	add.w	r2, r8, #4294967295
 80072ba:	ab0c      	add	r3, sp, #48	@ 0x30
 80072bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072c0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80072c4:	e7f3      	b.n	80072ae <__kernel_rem_pio2+0x356>
 80072c6:	a90c      	add	r1, sp, #48	@ 0x30
 80072c8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80072cc:	3b01      	subs	r3, #1
 80072ce:	430a      	orrs	r2, r1
 80072d0:	e787      	b.n	80071e2 <__kernel_rem_pio2+0x28a>
 80072d2:	3401      	adds	r4, #1
 80072d4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80072d8:	2a00      	cmp	r2, #0
 80072da:	d0fa      	beq.n	80072d2 <__kernel_rem_pio2+0x37a>
 80072dc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80072de:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80072e2:	eb0d 0503 	add.w	r5, sp, r3
 80072e6:	9b06      	ldr	r3, [sp, #24]
 80072e8:	aa20      	add	r2, sp, #128	@ 0x80
 80072ea:	4443      	add	r3, r8
 80072ec:	f108 0701 	add.w	r7, r8, #1
 80072f0:	3d98      	subs	r5, #152	@ 0x98
 80072f2:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 80072f6:	4444      	add	r4, r8
 80072f8:	42bc      	cmp	r4, r7
 80072fa:	da04      	bge.n	8007306 <__kernel_rem_pio2+0x3ae>
 80072fc:	46a0      	mov	r8, r4
 80072fe:	e6a2      	b.n	8007046 <__kernel_rem_pio2+0xee>
 8007300:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007302:	2401      	movs	r4, #1
 8007304:	e7e6      	b.n	80072d4 <__kernel_rem_pio2+0x37c>
 8007306:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007308:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800730c:	f7f9 f8ce 	bl	80004ac <__aeabi_i2d>
 8007310:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 80075d8 <__kernel_rem_pio2+0x680>
 8007314:	e8e6 0102 	strd	r0, r1, [r6], #8
 8007318:	ed8d 7b02 	vstr	d7, [sp, #8]
 800731c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007320:	46b2      	mov	sl, r6
 8007322:	f04f 0800 	mov.w	r8, #0
 8007326:	9b05      	ldr	r3, [sp, #20]
 8007328:	4598      	cmp	r8, r3
 800732a:	dd05      	ble.n	8007338 <__kernel_rem_pio2+0x3e0>
 800732c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007330:	3701      	adds	r7, #1
 8007332:	eca5 7b02 	vstmia	r5!, {d7}
 8007336:	e7df      	b.n	80072f8 <__kernel_rem_pio2+0x3a0>
 8007338:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 800733c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8007340:	f7f9 f91e 	bl	8000580 <__aeabi_dmul>
 8007344:	4602      	mov	r2, r0
 8007346:	460b      	mov	r3, r1
 8007348:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800734c:	f7f8 ff62 	bl	8000214 <__adddf3>
 8007350:	f108 0801 	add.w	r8, r8, #1
 8007354:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007358:	e7e5      	b.n	8007326 <__kernel_rem_pio2+0x3ce>
 800735a:	f1cb 0000 	rsb	r0, fp, #0
 800735e:	ec47 6b10 	vmov	d0, r6, r7
 8007362:	f7ff fc61 	bl	8006c28 <scalbn>
 8007366:	ec55 4b10 	vmov	r4, r5, d0
 800736a:	4b9d      	ldr	r3, [pc, #628]	@ (80075e0 <__kernel_rem_pio2+0x688>)
 800736c:	2200      	movs	r2, #0
 800736e:	4620      	mov	r0, r4
 8007370:	4629      	mov	r1, r5
 8007372:	f7f9 fb8b 	bl	8000a8c <__aeabi_dcmpge>
 8007376:	b300      	cbz	r0, 80073ba <__kernel_rem_pio2+0x462>
 8007378:	4b9a      	ldr	r3, [pc, #616]	@ (80075e4 <__kernel_rem_pio2+0x68c>)
 800737a:	2200      	movs	r2, #0
 800737c:	4620      	mov	r0, r4
 800737e:	4629      	mov	r1, r5
 8007380:	f7f9 f8fe 	bl	8000580 <__aeabi_dmul>
 8007384:	f7f9 fbac 	bl	8000ae0 <__aeabi_d2iz>
 8007388:	4606      	mov	r6, r0
 800738a:	f7f9 f88f 	bl	80004ac <__aeabi_i2d>
 800738e:	4b94      	ldr	r3, [pc, #592]	@ (80075e0 <__kernel_rem_pio2+0x688>)
 8007390:	2200      	movs	r2, #0
 8007392:	f7f9 f8f5 	bl	8000580 <__aeabi_dmul>
 8007396:	460b      	mov	r3, r1
 8007398:	4602      	mov	r2, r0
 800739a:	4629      	mov	r1, r5
 800739c:	4620      	mov	r0, r4
 800739e:	f7f8 ff37 	bl	8000210 <__aeabi_dsub>
 80073a2:	f7f9 fb9d 	bl	8000ae0 <__aeabi_d2iz>
 80073a6:	ab0c      	add	r3, sp, #48	@ 0x30
 80073a8:	f10b 0b18 	add.w	fp, fp, #24
 80073ac:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 80073b0:	f108 0801 	add.w	r8, r8, #1
 80073b4:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 80073b8:	e722      	b.n	8007200 <__kernel_rem_pio2+0x2a8>
 80073ba:	4620      	mov	r0, r4
 80073bc:	4629      	mov	r1, r5
 80073be:	f7f9 fb8f 	bl	8000ae0 <__aeabi_d2iz>
 80073c2:	ab0c      	add	r3, sp, #48	@ 0x30
 80073c4:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 80073c8:	e71a      	b.n	8007200 <__kernel_rem_pio2+0x2a8>
 80073ca:	ab0c      	add	r3, sp, #48	@ 0x30
 80073cc:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80073d0:	f7f9 f86c 	bl	80004ac <__aeabi_i2d>
 80073d4:	4622      	mov	r2, r4
 80073d6:	462b      	mov	r3, r5
 80073d8:	f7f9 f8d2 	bl	8000580 <__aeabi_dmul>
 80073dc:	4652      	mov	r2, sl
 80073de:	e967 0102 	strd	r0, r1, [r7, #-8]!
 80073e2:	465b      	mov	r3, fp
 80073e4:	4620      	mov	r0, r4
 80073e6:	4629      	mov	r1, r5
 80073e8:	f7f9 f8ca 	bl	8000580 <__aeabi_dmul>
 80073ec:	3e01      	subs	r6, #1
 80073ee:	4604      	mov	r4, r0
 80073f0:	460d      	mov	r5, r1
 80073f2:	e718      	b.n	8007226 <__kernel_rem_pio2+0x2ce>
 80073f4:	9906      	ldr	r1, [sp, #24]
 80073f6:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 80073fa:	9106      	str	r1, [sp, #24]
 80073fc:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8007400:	f7f9 f8be 	bl	8000580 <__aeabi_dmul>
 8007404:	4602      	mov	r2, r0
 8007406:	460b      	mov	r3, r1
 8007408:	4650      	mov	r0, sl
 800740a:	4659      	mov	r1, fp
 800740c:	f7f8 ff02 	bl	8000214 <__adddf3>
 8007410:	3601      	adds	r6, #1
 8007412:	4682      	mov	sl, r0
 8007414:	468b      	mov	fp, r1
 8007416:	9b00      	ldr	r3, [sp, #0]
 8007418:	429e      	cmp	r6, r3
 800741a:	dc01      	bgt.n	8007420 <__kernel_rem_pio2+0x4c8>
 800741c:	42b5      	cmp	r5, r6
 800741e:	dae9      	bge.n	80073f4 <__kernel_rem_pio2+0x49c>
 8007420:	ab48      	add	r3, sp, #288	@ 0x120
 8007422:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8007426:	e9c5 ab00 	strd	sl, fp, [r5]
 800742a:	3c01      	subs	r4, #1
 800742c:	e6ff      	b.n	800722e <__kernel_rem_pio2+0x2d6>
 800742e:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8007430:	2b02      	cmp	r3, #2
 8007432:	dc0b      	bgt.n	800744c <__kernel_rem_pio2+0x4f4>
 8007434:	2b00      	cmp	r3, #0
 8007436:	dc39      	bgt.n	80074ac <__kernel_rem_pio2+0x554>
 8007438:	d05d      	beq.n	80074f6 <__kernel_rem_pio2+0x59e>
 800743a:	9b02      	ldr	r3, [sp, #8]
 800743c:	f003 0007 	and.w	r0, r3, #7
 8007440:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8007444:	ecbd 8b02 	vpop	{d8}
 8007448:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800744c:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800744e:	2b03      	cmp	r3, #3
 8007450:	d1f3      	bne.n	800743a <__kernel_rem_pio2+0x4e2>
 8007452:	9b05      	ldr	r3, [sp, #20]
 8007454:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8007458:	eb0d 0403 	add.w	r4, sp, r3
 800745c:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8007460:	4625      	mov	r5, r4
 8007462:	46c2      	mov	sl, r8
 8007464:	f1ba 0f00 	cmp.w	sl, #0
 8007468:	f1a5 0508 	sub.w	r5, r5, #8
 800746c:	dc6b      	bgt.n	8007546 <__kernel_rem_pio2+0x5ee>
 800746e:	4645      	mov	r5, r8
 8007470:	2d01      	cmp	r5, #1
 8007472:	f1a4 0408 	sub.w	r4, r4, #8
 8007476:	f300 8087 	bgt.w	8007588 <__kernel_rem_pio2+0x630>
 800747a:	9c05      	ldr	r4, [sp, #20]
 800747c:	ab48      	add	r3, sp, #288	@ 0x120
 800747e:	441c      	add	r4, r3
 8007480:	2000      	movs	r0, #0
 8007482:	2100      	movs	r1, #0
 8007484:	f1b8 0f01 	cmp.w	r8, #1
 8007488:	f300 809c 	bgt.w	80075c4 <__kernel_rem_pio2+0x66c>
 800748c:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 8007490:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 8007494:	f1b9 0f00 	cmp.w	r9, #0
 8007498:	f040 80a6 	bne.w	80075e8 <__kernel_rem_pio2+0x690>
 800749c:	9b04      	ldr	r3, [sp, #16]
 800749e:	e9c3 7800 	strd	r7, r8, [r3]
 80074a2:	e9c3 5602 	strd	r5, r6, [r3, #8]
 80074a6:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80074aa:	e7c6      	b.n	800743a <__kernel_rem_pio2+0x4e2>
 80074ac:	9d05      	ldr	r5, [sp, #20]
 80074ae:	ab48      	add	r3, sp, #288	@ 0x120
 80074b0:	441d      	add	r5, r3
 80074b2:	4644      	mov	r4, r8
 80074b4:	2000      	movs	r0, #0
 80074b6:	2100      	movs	r1, #0
 80074b8:	2c00      	cmp	r4, #0
 80074ba:	da35      	bge.n	8007528 <__kernel_rem_pio2+0x5d0>
 80074bc:	f1b9 0f00 	cmp.w	r9, #0
 80074c0:	d038      	beq.n	8007534 <__kernel_rem_pio2+0x5dc>
 80074c2:	4602      	mov	r2, r0
 80074c4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80074c8:	9c04      	ldr	r4, [sp, #16]
 80074ca:	e9c4 2300 	strd	r2, r3, [r4]
 80074ce:	4602      	mov	r2, r0
 80074d0:	460b      	mov	r3, r1
 80074d2:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 80074d6:	f7f8 fe9b 	bl	8000210 <__aeabi_dsub>
 80074da:	ad4a      	add	r5, sp, #296	@ 0x128
 80074dc:	2401      	movs	r4, #1
 80074de:	45a0      	cmp	r8, r4
 80074e0:	da2b      	bge.n	800753a <__kernel_rem_pio2+0x5e2>
 80074e2:	f1b9 0f00 	cmp.w	r9, #0
 80074e6:	d002      	beq.n	80074ee <__kernel_rem_pio2+0x596>
 80074e8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80074ec:	4619      	mov	r1, r3
 80074ee:	9b04      	ldr	r3, [sp, #16]
 80074f0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80074f4:	e7a1      	b.n	800743a <__kernel_rem_pio2+0x4e2>
 80074f6:	9c05      	ldr	r4, [sp, #20]
 80074f8:	ab48      	add	r3, sp, #288	@ 0x120
 80074fa:	441c      	add	r4, r3
 80074fc:	2000      	movs	r0, #0
 80074fe:	2100      	movs	r1, #0
 8007500:	f1b8 0f00 	cmp.w	r8, #0
 8007504:	da09      	bge.n	800751a <__kernel_rem_pio2+0x5c2>
 8007506:	f1b9 0f00 	cmp.w	r9, #0
 800750a:	d002      	beq.n	8007512 <__kernel_rem_pio2+0x5ba>
 800750c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007510:	4619      	mov	r1, r3
 8007512:	9b04      	ldr	r3, [sp, #16]
 8007514:	e9c3 0100 	strd	r0, r1, [r3]
 8007518:	e78f      	b.n	800743a <__kernel_rem_pio2+0x4e2>
 800751a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800751e:	f7f8 fe79 	bl	8000214 <__adddf3>
 8007522:	f108 38ff 	add.w	r8, r8, #4294967295
 8007526:	e7eb      	b.n	8007500 <__kernel_rem_pio2+0x5a8>
 8007528:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800752c:	f7f8 fe72 	bl	8000214 <__adddf3>
 8007530:	3c01      	subs	r4, #1
 8007532:	e7c1      	b.n	80074b8 <__kernel_rem_pio2+0x560>
 8007534:	4602      	mov	r2, r0
 8007536:	460b      	mov	r3, r1
 8007538:	e7c6      	b.n	80074c8 <__kernel_rem_pio2+0x570>
 800753a:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800753e:	f7f8 fe69 	bl	8000214 <__adddf3>
 8007542:	3401      	adds	r4, #1
 8007544:	e7cb      	b.n	80074de <__kernel_rem_pio2+0x586>
 8007546:	ed95 7b00 	vldr	d7, [r5]
 800754a:	ed8d 7b00 	vstr	d7, [sp]
 800754e:	ed95 7b02 	vldr	d7, [r5, #8]
 8007552:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007556:	ec53 2b17 	vmov	r2, r3, d7
 800755a:	ed8d 7b06 	vstr	d7, [sp, #24]
 800755e:	f7f8 fe59 	bl	8000214 <__adddf3>
 8007562:	4602      	mov	r2, r0
 8007564:	460b      	mov	r3, r1
 8007566:	4606      	mov	r6, r0
 8007568:	460f      	mov	r7, r1
 800756a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800756e:	f7f8 fe4f 	bl	8000210 <__aeabi_dsub>
 8007572:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007576:	f7f8 fe4d 	bl	8000214 <__adddf3>
 800757a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800757e:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8007582:	e9c5 6700 	strd	r6, r7, [r5]
 8007586:	e76d      	b.n	8007464 <__kernel_rem_pio2+0x50c>
 8007588:	ed94 7b00 	vldr	d7, [r4]
 800758c:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8007590:	ec51 0b17 	vmov	r0, r1, d7
 8007594:	4652      	mov	r2, sl
 8007596:	465b      	mov	r3, fp
 8007598:	ed8d 7b00 	vstr	d7, [sp]
 800759c:	f7f8 fe3a 	bl	8000214 <__adddf3>
 80075a0:	4602      	mov	r2, r0
 80075a2:	460b      	mov	r3, r1
 80075a4:	4606      	mov	r6, r0
 80075a6:	460f      	mov	r7, r1
 80075a8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80075ac:	f7f8 fe30 	bl	8000210 <__aeabi_dsub>
 80075b0:	4652      	mov	r2, sl
 80075b2:	465b      	mov	r3, fp
 80075b4:	f7f8 fe2e 	bl	8000214 <__adddf3>
 80075b8:	3d01      	subs	r5, #1
 80075ba:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80075be:	e9c4 6700 	strd	r6, r7, [r4]
 80075c2:	e755      	b.n	8007470 <__kernel_rem_pio2+0x518>
 80075c4:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80075c8:	f7f8 fe24 	bl	8000214 <__adddf3>
 80075cc:	f108 38ff 	add.w	r8, r8, #4294967295
 80075d0:	e758      	b.n	8007484 <__kernel_rem_pio2+0x52c>
 80075d2:	bf00      	nop
 80075d4:	f3af 8000 	nop.w
	...
 80075e0:	41700000 	.word	0x41700000
 80075e4:	3e700000 	.word	0x3e700000
 80075e8:	9b04      	ldr	r3, [sp, #16]
 80075ea:	9a04      	ldr	r2, [sp, #16]
 80075ec:	601f      	str	r7, [r3, #0]
 80075ee:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 80075f2:	605c      	str	r4, [r3, #4]
 80075f4:	609d      	str	r5, [r3, #8]
 80075f6:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80075fa:	60d3      	str	r3, [r2, #12]
 80075fc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007600:	6110      	str	r0, [r2, #16]
 8007602:	6153      	str	r3, [r2, #20]
 8007604:	e719      	b.n	800743a <__kernel_rem_pio2+0x4e2>
 8007606:	bf00      	nop

08007608 <floor>:
 8007608:	ec51 0b10 	vmov	r0, r1, d0
 800760c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007610:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007614:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8007618:	2e13      	cmp	r6, #19
 800761a:	460c      	mov	r4, r1
 800761c:	4605      	mov	r5, r0
 800761e:	4680      	mov	r8, r0
 8007620:	dc34      	bgt.n	800768c <floor+0x84>
 8007622:	2e00      	cmp	r6, #0
 8007624:	da17      	bge.n	8007656 <floor+0x4e>
 8007626:	a332      	add	r3, pc, #200	@ (adr r3, 80076f0 <floor+0xe8>)
 8007628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800762c:	f7f8 fdf2 	bl	8000214 <__adddf3>
 8007630:	2200      	movs	r2, #0
 8007632:	2300      	movs	r3, #0
 8007634:	f7f9 fa34 	bl	8000aa0 <__aeabi_dcmpgt>
 8007638:	b150      	cbz	r0, 8007650 <floor+0x48>
 800763a:	2c00      	cmp	r4, #0
 800763c:	da55      	bge.n	80076ea <floor+0xe2>
 800763e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8007642:	432c      	orrs	r4, r5
 8007644:	2500      	movs	r5, #0
 8007646:	42ac      	cmp	r4, r5
 8007648:	4c2b      	ldr	r4, [pc, #172]	@ (80076f8 <floor+0xf0>)
 800764a:	bf08      	it	eq
 800764c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8007650:	4621      	mov	r1, r4
 8007652:	4628      	mov	r0, r5
 8007654:	e023      	b.n	800769e <floor+0x96>
 8007656:	4f29      	ldr	r7, [pc, #164]	@ (80076fc <floor+0xf4>)
 8007658:	4137      	asrs	r7, r6
 800765a:	ea01 0307 	and.w	r3, r1, r7
 800765e:	4303      	orrs	r3, r0
 8007660:	d01d      	beq.n	800769e <floor+0x96>
 8007662:	a323      	add	r3, pc, #140	@ (adr r3, 80076f0 <floor+0xe8>)
 8007664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007668:	f7f8 fdd4 	bl	8000214 <__adddf3>
 800766c:	2200      	movs	r2, #0
 800766e:	2300      	movs	r3, #0
 8007670:	f7f9 fa16 	bl	8000aa0 <__aeabi_dcmpgt>
 8007674:	2800      	cmp	r0, #0
 8007676:	d0eb      	beq.n	8007650 <floor+0x48>
 8007678:	2c00      	cmp	r4, #0
 800767a:	bfbe      	ittt	lt
 800767c:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8007680:	4133      	asrlt	r3, r6
 8007682:	18e4      	addlt	r4, r4, r3
 8007684:	ea24 0407 	bic.w	r4, r4, r7
 8007688:	2500      	movs	r5, #0
 800768a:	e7e1      	b.n	8007650 <floor+0x48>
 800768c:	2e33      	cmp	r6, #51	@ 0x33
 800768e:	dd0a      	ble.n	80076a6 <floor+0x9e>
 8007690:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8007694:	d103      	bne.n	800769e <floor+0x96>
 8007696:	4602      	mov	r2, r0
 8007698:	460b      	mov	r3, r1
 800769a:	f7f8 fdbb 	bl	8000214 <__adddf3>
 800769e:	ec41 0b10 	vmov	d0, r0, r1
 80076a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80076a6:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 80076aa:	f04f 37ff 	mov.w	r7, #4294967295
 80076ae:	40df      	lsrs	r7, r3
 80076b0:	4207      	tst	r7, r0
 80076b2:	d0f4      	beq.n	800769e <floor+0x96>
 80076b4:	a30e      	add	r3, pc, #56	@ (adr r3, 80076f0 <floor+0xe8>)
 80076b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076ba:	f7f8 fdab 	bl	8000214 <__adddf3>
 80076be:	2200      	movs	r2, #0
 80076c0:	2300      	movs	r3, #0
 80076c2:	f7f9 f9ed 	bl	8000aa0 <__aeabi_dcmpgt>
 80076c6:	2800      	cmp	r0, #0
 80076c8:	d0c2      	beq.n	8007650 <floor+0x48>
 80076ca:	2c00      	cmp	r4, #0
 80076cc:	da0a      	bge.n	80076e4 <floor+0xdc>
 80076ce:	2e14      	cmp	r6, #20
 80076d0:	d101      	bne.n	80076d6 <floor+0xce>
 80076d2:	3401      	adds	r4, #1
 80076d4:	e006      	b.n	80076e4 <floor+0xdc>
 80076d6:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 80076da:	2301      	movs	r3, #1
 80076dc:	40b3      	lsls	r3, r6
 80076de:	441d      	add	r5, r3
 80076e0:	4545      	cmp	r5, r8
 80076e2:	d3f6      	bcc.n	80076d2 <floor+0xca>
 80076e4:	ea25 0507 	bic.w	r5, r5, r7
 80076e8:	e7b2      	b.n	8007650 <floor+0x48>
 80076ea:	2500      	movs	r5, #0
 80076ec:	462c      	mov	r4, r5
 80076ee:	e7af      	b.n	8007650 <floor+0x48>
 80076f0:	8800759c 	.word	0x8800759c
 80076f4:	7e37e43c 	.word	0x7e37e43c
 80076f8:	bff00000 	.word	0xbff00000
 80076fc:	000fffff 	.word	0x000fffff

08007700 <memset>:
 8007700:	4402      	add	r2, r0
 8007702:	4603      	mov	r3, r0
 8007704:	4293      	cmp	r3, r2
 8007706:	d100      	bne.n	800770a <memset+0xa>
 8007708:	4770      	bx	lr
 800770a:	f803 1b01 	strb.w	r1, [r3], #1
 800770e:	e7f9      	b.n	8007704 <memset+0x4>

08007710 <__errno>:
 8007710:	4b01      	ldr	r3, [pc, #4]	@ (8007718 <__errno+0x8>)
 8007712:	6818      	ldr	r0, [r3, #0]
 8007714:	4770      	bx	lr
 8007716:	bf00      	nop
 8007718:	20000028 	.word	0x20000028

0800771c <__libc_init_array>:
 800771c:	b570      	push	{r4, r5, r6, lr}
 800771e:	4d0d      	ldr	r5, [pc, #52]	@ (8007754 <__libc_init_array+0x38>)
 8007720:	4c0d      	ldr	r4, [pc, #52]	@ (8007758 <__libc_init_array+0x3c>)
 8007722:	1b64      	subs	r4, r4, r5
 8007724:	10a4      	asrs	r4, r4, #2
 8007726:	2600      	movs	r6, #0
 8007728:	42a6      	cmp	r6, r4
 800772a:	d109      	bne.n	8007740 <__libc_init_array+0x24>
 800772c:	4d0b      	ldr	r5, [pc, #44]	@ (800775c <__libc_init_array+0x40>)
 800772e:	4c0c      	ldr	r4, [pc, #48]	@ (8007760 <__libc_init_array+0x44>)
 8007730:	f000 f818 	bl	8007764 <_init>
 8007734:	1b64      	subs	r4, r4, r5
 8007736:	10a4      	asrs	r4, r4, #2
 8007738:	2600      	movs	r6, #0
 800773a:	42a6      	cmp	r6, r4
 800773c:	d105      	bne.n	800774a <__libc_init_array+0x2e>
 800773e:	bd70      	pop	{r4, r5, r6, pc}
 8007740:	f855 3b04 	ldr.w	r3, [r5], #4
 8007744:	4798      	blx	r3
 8007746:	3601      	adds	r6, #1
 8007748:	e7ee      	b.n	8007728 <__libc_init_array+0xc>
 800774a:	f855 3b04 	ldr.w	r3, [r5], #4
 800774e:	4798      	blx	r3
 8007750:	3601      	adds	r6, #1
 8007752:	e7f2      	b.n	800773a <__libc_init_array+0x1e>
 8007754:	08007a20 	.word	0x08007a20
 8007758:	08007a20 	.word	0x08007a20
 800775c:	08007a20 	.word	0x08007a20
 8007760:	08007a24 	.word	0x08007a24

08007764 <_init>:
 8007764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007766:	bf00      	nop
 8007768:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800776a:	bc08      	pop	{r3}
 800776c:	469e      	mov	lr, r3
 800776e:	4770      	bx	lr

08007770 <_fini>:
 8007770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007772:	bf00      	nop
 8007774:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007776:	bc08      	pop	{r3}
 8007778:	469e      	mov	lr, r3
 800777a:	4770      	bx	lr
