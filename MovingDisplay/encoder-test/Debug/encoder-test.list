
encoder-test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004654  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08004714  08004714  00005714  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004754  08004754  00006010  2**0
                  CONTENTS
  4 .ARM          00000000  08004754  08004754  00006010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004754  08004754  00006010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004754  08004754  00005754  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004758  08004758  00005758  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  0800475c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000210  20000010  0800476c  00006010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000220  0800476c  00006220  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00006010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cae2  00000000  00000000  00006038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f6c  00000000  00000000  00012b1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d70  00000000  00000000  00014a88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a8a  00000000  00000000  000157f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013ad8  00000000  00000000  00016282  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001074e  00000000  00000000  00029d5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007c2a1  00000000  00000000  0003a4a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b6749  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000030d0  00000000  00000000  000b678c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  000b985c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080046fc 	.word	0x080046fc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	080046fc 	.word	0x080046fc

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <HAL_I2C_MasterTxCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_I2C_MasterTxCpltCallback (I2C_HandleTypeDef *hi2c){
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
	if(hi2c == &hi2c1){
 8000228:	687a      	ldr	r2, [r7, #4]
 800022a:	4b06      	ldr	r3, [pc, #24]	@ (8000244 <HAL_I2C_MasterTxCpltCallback+0x24>)
 800022c:	429a      	cmp	r2, r3
 800022e:	d104      	bne.n	800023a <HAL_I2C_MasterTxCpltCallback+0x1a>
			counter++;
 8000230:	4b05      	ldr	r3, [pc, #20]	@ (8000248 <HAL_I2C_MasterTxCpltCallback+0x28>)
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	1c5a      	adds	r2, r3, #1
 8000236:	4b04      	ldr	r3, [pc, #16]	@ (8000248 <HAL_I2C_MasterTxCpltCallback+0x28>)
 8000238:	601a      	str	r2, [r3, #0]
		}
}
 800023a:	46c0      	nop			@ (mov r8, r8)
 800023c:	46bd      	mov	sp, r7
 800023e:	b002      	add	sp, #8
 8000240:	bd80      	pop	{r7, pc}
 8000242:	46c0      	nop			@ (mov r8, r8)
 8000244:	2000002c 	.word	0x2000002c
 8000248:	20000210 	.word	0x20000210

0800024c <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback (I2C_HandleTypeDef *hi2c){
 800024c:	b580      	push	{r7, lr}
 800024e:	b082      	sub	sp, #8
 8000250:	af00      	add	r7, sp, #0
 8000252:	6078      	str	r0, [r7, #4]

	if(hi2c == &hi2c1){
 8000254:	687a      	ldr	r2, [r7, #4]
 8000256:	4b5b      	ldr	r3, [pc, #364]	@ (80003c4 <HAL_I2C_MasterRxCpltCallback+0x178>)
 8000258:	429a      	cmp	r2, r3
 800025a:	d000      	beq.n	800025e <HAL_I2C_MasterRxCpltCallback+0x12>
 800025c:	e0ad      	b.n	80003ba <HAL_I2C_MasterRxCpltCallback+0x16e>
		Angle = rxBuf[0]*256 + rxBuf[1];
 800025e:	4b5a      	ldr	r3, [pc, #360]	@ (80003c8 <HAL_I2C_MasterRxCpltCallback+0x17c>)
 8000260:	781b      	ldrb	r3, [r3, #0]
 8000262:	021b      	lsls	r3, r3, #8
 8000264:	b29b      	uxth	r3, r3
 8000266:	4a58      	ldr	r2, [pc, #352]	@ (80003c8 <HAL_I2C_MasterRxCpltCallback+0x17c>)
 8000268:	7852      	ldrb	r2, [r2, #1]
 800026a:	189b      	adds	r3, r3, r2
 800026c:	b29a      	uxth	r2, r3
 800026e:	4b57      	ldr	r3, [pc, #348]	@ (80003cc <HAL_I2C_MasterRxCpltCallback+0x180>)
 8000270:	801a      	strh	r2, [r3, #0]

		if(Angle-pAngle>0 && abs(Angle-pAngle)<4000){
 8000272:	4b56      	ldr	r3, [pc, #344]	@ (80003cc <HAL_I2C_MasterRxCpltCallback+0x180>)
 8000274:	881b      	ldrh	r3, [r3, #0]
 8000276:	001a      	movs	r2, r3
 8000278:	4b55      	ldr	r3, [pc, #340]	@ (80003d0 <HAL_I2C_MasterRxCpltCallback+0x184>)
 800027a:	881b      	ldrh	r3, [r3, #0]
 800027c:	1ad3      	subs	r3, r2, r3
 800027e:	2b00      	cmp	r3, #0
 8000280:	dd1e      	ble.n	80002c0 <HAL_I2C_MasterRxCpltCallback+0x74>
 8000282:	4b52      	ldr	r3, [pc, #328]	@ (80003cc <HAL_I2C_MasterRxCpltCallback+0x180>)
 8000284:	881b      	ldrh	r3, [r3, #0]
 8000286:	001a      	movs	r2, r3
 8000288:	4b51      	ldr	r3, [pc, #324]	@ (80003d0 <HAL_I2C_MasterRxCpltCallback+0x184>)
 800028a:	881b      	ldrh	r3, [r3, #0]
 800028c:	1ad3      	subs	r3, r2, r3
 800028e:	4a51      	ldr	r2, [pc, #324]	@ (80003d4 <HAL_I2C_MasterRxCpltCallback+0x188>)
 8000290:	4293      	cmp	r3, r2
 8000292:	db15      	blt.n	80002c0 <HAL_I2C_MasterRxCpltCallback+0x74>
 8000294:	4b4d      	ldr	r3, [pc, #308]	@ (80003cc <HAL_I2C_MasterRxCpltCallback+0x180>)
 8000296:	881b      	ldrh	r3, [r3, #0]
 8000298:	001a      	movs	r2, r3
 800029a:	4b4d      	ldr	r3, [pc, #308]	@ (80003d0 <HAL_I2C_MasterRxCpltCallback+0x184>)
 800029c:	881b      	ldrh	r3, [r3, #0]
 800029e:	1ad2      	subs	r2, r2, r3
 80002a0:	23fa      	movs	r3, #250	@ 0xfa
 80002a2:	011b      	lsls	r3, r3, #4
 80002a4:	429a      	cmp	r2, r3
 80002a6:	da0b      	bge.n	80002c0 <HAL_I2C_MasterRxCpltCallback+0x74>
			totalAng = ptotalAng + (Angle-pAngle);
 80002a8:	4b48      	ldr	r3, [pc, #288]	@ (80003cc <HAL_I2C_MasterRxCpltCallback+0x180>)
 80002aa:	881b      	ldrh	r3, [r3, #0]
 80002ac:	001a      	movs	r2, r3
 80002ae:	4b48      	ldr	r3, [pc, #288]	@ (80003d0 <HAL_I2C_MasterRxCpltCallback+0x184>)
 80002b0:	881b      	ldrh	r3, [r3, #0]
 80002b2:	1ad2      	subs	r2, r2, r3
 80002b4:	4b48      	ldr	r3, [pc, #288]	@ (80003d8 <HAL_I2C_MasterRxCpltCallback+0x18c>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	18d2      	adds	r2, r2, r3
 80002ba:	4b48      	ldr	r3, [pc, #288]	@ (80003dc <HAL_I2C_MasterRxCpltCallback+0x190>)
 80002bc:	601a      	str	r2, [r3, #0]
 80002be:	e06f      	b.n	80003a0 <HAL_I2C_MasterRxCpltCallback+0x154>
		}else if(Angle-pAngle<0 && abs(Angle-pAngle)<4000){
 80002c0:	4b42      	ldr	r3, [pc, #264]	@ (80003cc <HAL_I2C_MasterRxCpltCallback+0x180>)
 80002c2:	881b      	ldrh	r3, [r3, #0]
 80002c4:	001a      	movs	r2, r3
 80002c6:	4b42      	ldr	r3, [pc, #264]	@ (80003d0 <HAL_I2C_MasterRxCpltCallback+0x184>)
 80002c8:	881b      	ldrh	r3, [r3, #0]
 80002ca:	1ad3      	subs	r3, r2, r3
 80002cc:	d51e      	bpl.n	800030c <HAL_I2C_MasterRxCpltCallback+0xc0>
 80002ce:	4b3f      	ldr	r3, [pc, #252]	@ (80003cc <HAL_I2C_MasterRxCpltCallback+0x180>)
 80002d0:	881b      	ldrh	r3, [r3, #0]
 80002d2:	001a      	movs	r2, r3
 80002d4:	4b3e      	ldr	r3, [pc, #248]	@ (80003d0 <HAL_I2C_MasterRxCpltCallback+0x184>)
 80002d6:	881b      	ldrh	r3, [r3, #0]
 80002d8:	1ad3      	subs	r3, r2, r3
 80002da:	4a3e      	ldr	r2, [pc, #248]	@ (80003d4 <HAL_I2C_MasterRxCpltCallback+0x188>)
 80002dc:	4293      	cmp	r3, r2
 80002de:	db15      	blt.n	800030c <HAL_I2C_MasterRxCpltCallback+0xc0>
 80002e0:	4b3a      	ldr	r3, [pc, #232]	@ (80003cc <HAL_I2C_MasterRxCpltCallback+0x180>)
 80002e2:	881b      	ldrh	r3, [r3, #0]
 80002e4:	001a      	movs	r2, r3
 80002e6:	4b3a      	ldr	r3, [pc, #232]	@ (80003d0 <HAL_I2C_MasterRxCpltCallback+0x184>)
 80002e8:	881b      	ldrh	r3, [r3, #0]
 80002ea:	1ad2      	subs	r2, r2, r3
 80002ec:	23fa      	movs	r3, #250	@ 0xfa
 80002ee:	011b      	lsls	r3, r3, #4
 80002f0:	429a      	cmp	r2, r3
 80002f2:	da0b      	bge.n	800030c <HAL_I2C_MasterRxCpltCallback+0xc0>
			totalAng = ptotalAng + (Angle-pAngle);
 80002f4:	4b35      	ldr	r3, [pc, #212]	@ (80003cc <HAL_I2C_MasterRxCpltCallback+0x180>)
 80002f6:	881b      	ldrh	r3, [r3, #0]
 80002f8:	001a      	movs	r2, r3
 80002fa:	4b35      	ldr	r3, [pc, #212]	@ (80003d0 <HAL_I2C_MasterRxCpltCallback+0x184>)
 80002fc:	881b      	ldrh	r3, [r3, #0]
 80002fe:	1ad2      	subs	r2, r2, r3
 8000300:	4b35      	ldr	r3, [pc, #212]	@ (80003d8 <HAL_I2C_MasterRxCpltCallback+0x18c>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	18d2      	adds	r2, r2, r3
 8000306:	4b35      	ldr	r3, [pc, #212]	@ (80003dc <HAL_I2C_MasterRxCpltCallback+0x190>)
 8000308:	601a      	str	r2, [r3, #0]
 800030a:	e049      	b.n	80003a0 <HAL_I2C_MasterRxCpltCallback+0x154>
		}else if(Angle-pAngle>0 && abs(Angle-pAngle)>4000){
 800030c:	4b2f      	ldr	r3, [pc, #188]	@ (80003cc <HAL_I2C_MasterRxCpltCallback+0x180>)
 800030e:	881b      	ldrh	r3, [r3, #0]
 8000310:	001a      	movs	r2, r3
 8000312:	4b2f      	ldr	r3, [pc, #188]	@ (80003d0 <HAL_I2C_MasterRxCpltCallback+0x184>)
 8000314:	881b      	ldrh	r3, [r3, #0]
 8000316:	1ad3      	subs	r3, r2, r3
 8000318:	2b00      	cmp	r3, #0
 800031a:	dd1a      	ble.n	8000352 <HAL_I2C_MasterRxCpltCallback+0x106>
 800031c:	4b2b      	ldr	r3, [pc, #172]	@ (80003cc <HAL_I2C_MasterRxCpltCallback+0x180>)
 800031e:	881b      	ldrh	r3, [r3, #0]
 8000320:	001a      	movs	r2, r3
 8000322:	4b2b      	ldr	r3, [pc, #172]	@ (80003d0 <HAL_I2C_MasterRxCpltCallback+0x184>)
 8000324:	881b      	ldrh	r3, [r3, #0]
 8000326:	1ad3      	subs	r3, r2, r3
 8000328:	17d9      	asrs	r1, r3, #31
 800032a:	185a      	adds	r2, r3, r1
 800032c:	404a      	eors	r2, r1
 800032e:	23fa      	movs	r3, #250	@ 0xfa
 8000330:	011b      	lsls	r3, r3, #4
 8000332:	429a      	cmp	r2, r3
 8000334:	dd0d      	ble.n	8000352 <HAL_I2C_MasterRxCpltCallback+0x106>
			totalAng = ptotalAng - ((4095-Angle)+pAngle);
 8000336:	4b28      	ldr	r3, [pc, #160]	@ (80003d8 <HAL_I2C_MasterRxCpltCallback+0x18c>)
 8000338:	681a      	ldr	r2, [r3, #0]
 800033a:	4b24      	ldr	r3, [pc, #144]	@ (80003cc <HAL_I2C_MasterRxCpltCallback+0x180>)
 800033c:	881b      	ldrh	r3, [r3, #0]
 800033e:	0019      	movs	r1, r3
 8000340:	4b27      	ldr	r3, [pc, #156]	@ (80003e0 <HAL_I2C_MasterRxCpltCallback+0x194>)
 8000342:	1a5b      	subs	r3, r3, r1
 8000344:	4922      	ldr	r1, [pc, #136]	@ (80003d0 <HAL_I2C_MasterRxCpltCallback+0x184>)
 8000346:	8809      	ldrh	r1, [r1, #0]
 8000348:	185b      	adds	r3, r3, r1
 800034a:	1ad2      	subs	r2, r2, r3
 800034c:	4b23      	ldr	r3, [pc, #140]	@ (80003dc <HAL_I2C_MasterRxCpltCallback+0x190>)
 800034e:	601a      	str	r2, [r3, #0]
 8000350:	e026      	b.n	80003a0 <HAL_I2C_MasterRxCpltCallback+0x154>
		}else if(Angle-pAngle<0 && abs(Angle-pAngle)>4000){
 8000352:	4b1e      	ldr	r3, [pc, #120]	@ (80003cc <HAL_I2C_MasterRxCpltCallback+0x180>)
 8000354:	881b      	ldrh	r3, [r3, #0]
 8000356:	001a      	movs	r2, r3
 8000358:	4b1d      	ldr	r3, [pc, #116]	@ (80003d0 <HAL_I2C_MasterRxCpltCallback+0x184>)
 800035a:	881b      	ldrh	r3, [r3, #0]
 800035c:	1ad3      	subs	r3, r2, r3
 800035e:	d51b      	bpl.n	8000398 <HAL_I2C_MasterRxCpltCallback+0x14c>
 8000360:	4b1a      	ldr	r3, [pc, #104]	@ (80003cc <HAL_I2C_MasterRxCpltCallback+0x180>)
 8000362:	881b      	ldrh	r3, [r3, #0]
 8000364:	001a      	movs	r2, r3
 8000366:	4b1a      	ldr	r3, [pc, #104]	@ (80003d0 <HAL_I2C_MasterRxCpltCallback+0x184>)
 8000368:	881b      	ldrh	r3, [r3, #0]
 800036a:	1ad3      	subs	r3, r2, r3
 800036c:	17d9      	asrs	r1, r3, #31
 800036e:	185a      	adds	r2, r3, r1
 8000370:	404a      	eors	r2, r1
 8000372:	23fa      	movs	r3, #250	@ 0xfa
 8000374:	011b      	lsls	r3, r3, #4
 8000376:	429a      	cmp	r2, r3
 8000378:	dd0e      	ble.n	8000398 <HAL_I2C_MasterRxCpltCallback+0x14c>
			totalAng = ptotalAng + Angle + (4095-pAngle);
 800037a:	4b14      	ldr	r3, [pc, #80]	@ (80003cc <HAL_I2C_MasterRxCpltCallback+0x180>)
 800037c:	881b      	ldrh	r3, [r3, #0]
 800037e:	001a      	movs	r2, r3
 8000380:	4b15      	ldr	r3, [pc, #84]	@ (80003d8 <HAL_I2C_MasterRxCpltCallback+0x18c>)
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	18d2      	adds	r2, r2, r3
 8000386:	4b12      	ldr	r3, [pc, #72]	@ (80003d0 <HAL_I2C_MasterRxCpltCallback+0x184>)
 8000388:	881b      	ldrh	r3, [r3, #0]
 800038a:	0019      	movs	r1, r3
 800038c:	4b14      	ldr	r3, [pc, #80]	@ (80003e0 <HAL_I2C_MasterRxCpltCallback+0x194>)
 800038e:	1a5b      	subs	r3, r3, r1
 8000390:	18d2      	adds	r2, r2, r3
 8000392:	4b12      	ldr	r3, [pc, #72]	@ (80003dc <HAL_I2C_MasterRxCpltCallback+0x190>)
 8000394:	601a      	str	r2, [r3, #0]
 8000396:	e003      	b.n	80003a0 <HAL_I2C_MasterRxCpltCallback+0x154>
		}else{
			totalAng = ptotalAng;
 8000398:	4b0f      	ldr	r3, [pc, #60]	@ (80003d8 <HAL_I2C_MasterRxCpltCallback+0x18c>)
 800039a:	681a      	ldr	r2, [r3, #0]
 800039c:	4b0f      	ldr	r3, [pc, #60]	@ (80003dc <HAL_I2C_MasterRxCpltCallback+0x190>)
 800039e:	601a      	str	r2, [r3, #0]
		}

		ptotalAng = totalAng;
 80003a0:	4b0e      	ldr	r3, [pc, #56]	@ (80003dc <HAL_I2C_MasterRxCpltCallback+0x190>)
 80003a2:	681a      	ldr	r2, [r3, #0]
 80003a4:	4b0c      	ldr	r3, [pc, #48]	@ (80003d8 <HAL_I2C_MasterRxCpltCallback+0x18c>)
 80003a6:	601a      	str	r2, [r3, #0]
		pAngle = Angle;
 80003a8:	4b08      	ldr	r3, [pc, #32]	@ (80003cc <HAL_I2C_MasterRxCpltCallback+0x180>)
 80003aa:	881a      	ldrh	r2, [r3, #0]
 80003ac:	4b08      	ldr	r3, [pc, #32]	@ (80003d0 <HAL_I2C_MasterRxCpltCallback+0x184>)
 80003ae:	801a      	strh	r2, [r3, #0]

		counter++;
 80003b0:	4b0c      	ldr	r3, [pc, #48]	@ (80003e4 <HAL_I2C_MasterRxCpltCallback+0x198>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	1c5a      	adds	r2, r3, #1
 80003b6:	4b0b      	ldr	r3, [pc, #44]	@ (80003e4 <HAL_I2C_MasterRxCpltCallback+0x198>)
 80003b8:	601a      	str	r2, [r3, #0]
	}
}
 80003ba:	46c0      	nop			@ (mov r8, r8)
 80003bc:	46bd      	mov	sp, r7
 80003be:	b002      	add	sp, #8
 80003c0:	bd80      	pop	{r7, pc}
 80003c2:	46c0      	nop			@ (mov r8, r8)
 80003c4:	2000002c 	.word	0x2000002c
 80003c8:	20000184 	.word	0x20000184
 80003cc:	2000020c 	.word	0x2000020c
 80003d0:	2000020e 	.word	0x2000020e
 80003d4:	fffff061 	.word	0xfffff061
 80003d8:	20000208 	.word	0x20000208
 80003dc:	20000204 	.word	0x20000204
 80003e0:	00000fff 	.word	0x00000fff
 80003e4:	20000210 	.word	0x20000210

080003e8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b082      	sub	sp, #8
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	6078      	str	r0, [r7, #4]
    if (htim == &htim3){
 80003f0:	687a      	ldr	r2, [r7, #4]
 80003f2:	4b06      	ldr	r3, [pc, #24]	@ (800040c <HAL_TIM_PeriodElapsedCallback+0x24>)
 80003f4:	429a      	cmp	r2, r3
 80003f6:	d104      	bne.n	8000402 <HAL_TIM_PeriodElapsedCallback+0x1a>
        m_counter++;
 80003f8:	4b05      	ldr	r3, [pc, #20]	@ (8000410 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	1c5a      	adds	r2, r3, #1
 80003fe:	4b04      	ldr	r3, [pc, #16]	@ (8000410 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000400:	601a      	str	r2, [r3, #0]
    }
}
 8000402:	46c0      	nop			@ (mov r8, r8)
 8000404:	46bd      	mov	sp, r7
 8000406:	b002      	add	sp, #8
 8000408:	bd80      	pop	{r7, pc}
 800040a:	46c0      	nop			@ (mov r8, r8)
 800040c:	20000138 	.word	0x20000138
 8000410:	20000218 	.word	0x20000218

08000414 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	b082      	sub	sp, #8
 8000418:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800041a:	f000 fb24 	bl	8000a66 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800041e:	f000 f85d 	bl	80004dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000422:	f000 f95b 	bl	80006dc <MX_GPIO_Init>
  MX_DMA_Init();
 8000426:	f000 f933 	bl	8000690 <MX_DMA_Init>
  MX_TIM3_Init();
 800042a:	f000 f8db 	bl	80005e4 <MX_TIM3_Init>
  MX_I2C1_Init();
 800042e:	f000 f899 	bl	8000564 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 8000432:	4b20      	ldr	r3, [pc, #128]	@ (80004b4 <main+0xa0>)
 8000434:	0018      	movs	r0, r3
 8000436:	f003 fd6d 	bl	8003f14 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  TxRet = HAL_I2C_Master_Transmit_DMA (&hi2c1, AS5600_ADDR, &ANGLE_ADDR, 1);
 800043a:	4b1f      	ldr	r3, [pc, #124]	@ (80004b8 <main+0xa4>)
 800043c:	8819      	ldrh	r1, [r3, #0]
 800043e:	4a1f      	ldr	r2, [pc, #124]	@ (80004bc <main+0xa8>)
 8000440:	481f      	ldr	r0, [pc, #124]	@ (80004c0 <main+0xac>)
 8000442:	2301      	movs	r3, #1
 8000444:	f001 f9b0 	bl	80017a8 <HAL_I2C_Master_Transmit_DMA>
 8000448:	0003      	movs	r3, r0
 800044a:	001a      	movs	r2, r3
 800044c:	4b1d      	ldr	r3, [pc, #116]	@ (80004c4 <main+0xb0>)
 800044e:	701a      	strb	r2, [r3, #0]
  HAL_Delay(100);
 8000450:	2064      	movs	r0, #100	@ 0x64
 8000452:	f000 fb85 	bl	8000b60 <HAL_Delay>

  RxRet = HAL_I2C_Master_Receive_DMA (&hi2c1, AS5600_ADDR, rxBuf, 2);
 8000456:	4b18      	ldr	r3, [pc, #96]	@ (80004b8 <main+0xa4>)
 8000458:	8819      	ldrh	r1, [r3, #0]
 800045a:	4a1b      	ldr	r2, [pc, #108]	@ (80004c8 <main+0xb4>)
 800045c:	4818      	ldr	r0, [pc, #96]	@ (80004c0 <main+0xac>)
 800045e:	2302      	movs	r3, #2
 8000460:	f001 facc 	bl	80019fc <HAL_I2C_Master_Receive_DMA>
 8000464:	0003      	movs	r3, r0
 8000466:	001a      	movs	r2, r3
 8000468:	4b18      	ldr	r3, [pc, #96]	@ (80004cc <main+0xb8>)
 800046a:	701a      	strb	r2, [r3, #0]


  pAngle = rxBuf[0]*256 + rxBuf[1];
 800046c:	4b16      	ldr	r3, [pc, #88]	@ (80004c8 <main+0xb4>)
 800046e:	781b      	ldrb	r3, [r3, #0]
 8000470:	021b      	lsls	r3, r3, #8
 8000472:	b29b      	uxth	r3, r3
 8000474:	4a14      	ldr	r2, [pc, #80]	@ (80004c8 <main+0xb4>)
 8000476:	7852      	ldrb	r2, [r2, #1]
 8000478:	189b      	adds	r3, r3, r2
 800047a:	b29a      	uxth	r2, r3
 800047c:	4b14      	ldr	r3, [pc, #80]	@ (80004d0 <main+0xbc>)
 800047e:	801a      	strh	r2, [r3, #0]
  ptotalAng = pAngle;
 8000480:	4b13      	ldr	r3, [pc, #76]	@ (80004d0 <main+0xbc>)
 8000482:	881b      	ldrh	r3, [r3, #0]
 8000484:	001a      	movs	r2, r3
 8000486:	4b13      	ldr	r3, [pc, #76]	@ (80004d4 <main+0xc0>)
 8000488:	601a      	str	r2, [r3, #0]

  uint32_t p_counter;
  p_counter = m_counter;
 800048a:	4b13      	ldr	r3, [pc, #76]	@ (80004d8 <main+0xc4>)
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	607b      	str	r3, [r7, #4]
//	}
//
//	ptotalAng = totalAng;
//	pAngle = Angle;

	if(m_counter - p_counter > 1000){
 8000490:	4b11      	ldr	r3, [pc, #68]	@ (80004d8 <main+0xc4>)
 8000492:	681a      	ldr	r2, [r3, #0]
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	1ad2      	subs	r2, r2, r3
 8000498:	23fa      	movs	r3, #250	@ 0xfa
 800049a:	009b      	lsls	r3, r3, #2
 800049c:	429a      	cmp	r2, r3
 800049e:	d9f7      	bls.n	8000490 <main+0x7c>
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80004a0:	23a0      	movs	r3, #160	@ 0xa0
 80004a2:	05db      	lsls	r3, r3, #23
 80004a4:	2110      	movs	r1, #16
 80004a6:	0018      	movs	r0, r3
 80004a8:	f001 f8bd 	bl	8001626 <HAL_GPIO_TogglePin>
		p_counter = m_counter;
 80004ac:	4b0a      	ldr	r3, [pc, #40]	@ (80004d8 <main+0xc4>)
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	607b      	str	r3, [r7, #4]
	if(m_counter - p_counter > 1000){
 80004b2:	e7ed      	b.n	8000490 <main+0x7c>
 80004b4:	20000138 	.word	0x20000138
 80004b8:	20000000 	.word	0x20000000
 80004bc:	20000002 	.word	0x20000002
 80004c0:	2000002c 	.word	0x2000002c
 80004c4:	20000214 	.word	0x20000214
 80004c8:	20000184 	.word	0x20000184
 80004cc:	20000215 	.word	0x20000215
 80004d0:	2000020e 	.word	0x2000020e
 80004d4:	20000208 	.word	0x20000208
 80004d8:	20000218 	.word	0x20000218

080004dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004dc:	b590      	push	{r4, r7, lr}
 80004de:	b08d      	sub	sp, #52	@ 0x34
 80004e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004e2:	2414      	movs	r4, #20
 80004e4:	193b      	adds	r3, r7, r4
 80004e6:	0018      	movs	r0, r3
 80004e8:	231c      	movs	r3, #28
 80004ea:	001a      	movs	r2, r3
 80004ec:	2100      	movs	r1, #0
 80004ee:	f004 f8d9 	bl	80046a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004f2:	003b      	movs	r3, r7
 80004f4:	0018      	movs	r0, r3
 80004f6:	2314      	movs	r3, #20
 80004f8:	001a      	movs	r2, r3
 80004fa:	2100      	movs	r1, #0
 80004fc:	f004 f8d2 	bl	80046a4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000500:	193b      	adds	r3, r7, r4
 8000502:	2202      	movs	r2, #2
 8000504:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000506:	193b      	adds	r3, r7, r4
 8000508:	2280      	movs	r2, #128	@ 0x80
 800050a:	0052      	lsls	r2, r2, #1
 800050c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV4;
 800050e:	193b      	adds	r3, r7, r4
 8000510:	2280      	movs	r2, #128	@ 0x80
 8000512:	0152      	lsls	r2, r2, #5
 8000514:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000516:	193b      	adds	r3, r7, r4
 8000518:	2240      	movs	r2, #64	@ 0x40
 800051a:	615a      	str	r2, [r3, #20]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800051c:	193b      	adds	r3, r7, r4
 800051e:	0018      	movs	r0, r3
 8000520:	f003 f882 	bl	8003628 <HAL_RCC_OscConfig>
 8000524:	1e03      	subs	r3, r0, #0
 8000526:	d001      	beq.n	800052c <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000528:	f000 f91c 	bl	8000764 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800052c:	003b      	movs	r3, r7
 800052e:	2207      	movs	r2, #7
 8000530:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000532:	003b      	movs	r3, r7
 8000534:	2200      	movs	r2, #0
 8000536:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000538:	003b      	movs	r3, r7
 800053a:	2200      	movs	r2, #0
 800053c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800053e:	003b      	movs	r3, r7
 8000540:	2200      	movs	r2, #0
 8000542:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000544:	003b      	movs	r3, r7
 8000546:	2200      	movs	r2, #0
 8000548:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800054a:	003b      	movs	r3, r7
 800054c:	2100      	movs	r1, #0
 800054e:	0018      	movs	r0, r3
 8000550:	f003 fa4e 	bl	80039f0 <HAL_RCC_ClockConfig>
 8000554:	1e03      	subs	r3, r0, #0
 8000556:	d001      	beq.n	800055c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000558:	f000 f904 	bl	8000764 <Error_Handler>
  }
}
 800055c:	46c0      	nop			@ (mov r8, r8)
 800055e:	46bd      	mov	sp, r7
 8000560:	b00d      	add	sp, #52	@ 0x34
 8000562:	bd90      	pop	{r4, r7, pc}

08000564 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000568:	4b1b      	ldr	r3, [pc, #108]	@ (80005d8 <MX_I2C1_Init+0x74>)
 800056a:	4a1c      	ldr	r2, [pc, #112]	@ (80005dc <MX_I2C1_Init+0x78>)
 800056c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x40000A0B;
 800056e:	4b1a      	ldr	r3, [pc, #104]	@ (80005d8 <MX_I2C1_Init+0x74>)
 8000570:	4a1b      	ldr	r2, [pc, #108]	@ (80005e0 <MX_I2C1_Init+0x7c>)
 8000572:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000574:	4b18      	ldr	r3, [pc, #96]	@ (80005d8 <MX_I2C1_Init+0x74>)
 8000576:	2200      	movs	r2, #0
 8000578:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800057a:	4b17      	ldr	r3, [pc, #92]	@ (80005d8 <MX_I2C1_Init+0x74>)
 800057c:	2201      	movs	r2, #1
 800057e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000580:	4b15      	ldr	r3, [pc, #84]	@ (80005d8 <MX_I2C1_Init+0x74>)
 8000582:	2200      	movs	r2, #0
 8000584:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000586:	4b14      	ldr	r3, [pc, #80]	@ (80005d8 <MX_I2C1_Init+0x74>)
 8000588:	2200      	movs	r2, #0
 800058a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800058c:	4b12      	ldr	r3, [pc, #72]	@ (80005d8 <MX_I2C1_Init+0x74>)
 800058e:	2200      	movs	r2, #0
 8000590:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000592:	4b11      	ldr	r3, [pc, #68]	@ (80005d8 <MX_I2C1_Init+0x74>)
 8000594:	2200      	movs	r2, #0
 8000596:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000598:	4b0f      	ldr	r3, [pc, #60]	@ (80005d8 <MX_I2C1_Init+0x74>)
 800059a:	2200      	movs	r2, #0
 800059c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800059e:	4b0e      	ldr	r3, [pc, #56]	@ (80005d8 <MX_I2C1_Init+0x74>)
 80005a0:	0018      	movs	r0, r3
 80005a2:	f001 f85b 	bl	800165c <HAL_I2C_Init>
 80005a6:	1e03      	subs	r3, r0, #0
 80005a8:	d001      	beq.n	80005ae <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80005aa:	f000 f8db 	bl	8000764 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80005ae:	4b0a      	ldr	r3, [pc, #40]	@ (80005d8 <MX_I2C1_Init+0x74>)
 80005b0:	2100      	movs	r1, #0
 80005b2:	0018      	movs	r0, r3
 80005b4:	f002 ffa0 	bl	80034f8 <HAL_I2CEx_ConfigAnalogFilter>
 80005b8:	1e03      	subs	r3, r0, #0
 80005ba:	d001      	beq.n	80005c0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80005bc:	f000 f8d2 	bl	8000764 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80005c0:	4b05      	ldr	r3, [pc, #20]	@ (80005d8 <MX_I2C1_Init+0x74>)
 80005c2:	2100      	movs	r1, #0
 80005c4:	0018      	movs	r0, r3
 80005c6:	f002 ffe3 	bl	8003590 <HAL_I2CEx_ConfigDigitalFilter>
 80005ca:	1e03      	subs	r3, r0, #0
 80005cc:	d001      	beq.n	80005d2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80005ce:	f000 f8c9 	bl	8000764 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80005d2:	46c0      	nop			@ (mov r8, r8)
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	2000002c 	.word	0x2000002c
 80005dc:	40005400 	.word	0x40005400
 80005e0:	40000a0b 	.word	0x40000a0b

080005e4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b088      	sub	sp, #32
 80005e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005ea:	2310      	movs	r3, #16
 80005ec:	18fb      	adds	r3, r7, r3
 80005ee:	0018      	movs	r0, r3
 80005f0:	2310      	movs	r3, #16
 80005f2:	001a      	movs	r2, r3
 80005f4:	2100      	movs	r1, #0
 80005f6:	f004 f855 	bl	80046a4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005fa:	1d3b      	adds	r3, r7, #4
 80005fc:	0018      	movs	r0, r3
 80005fe:	230c      	movs	r3, #12
 8000600:	001a      	movs	r2, r3
 8000602:	2100      	movs	r1, #0
 8000604:	f004 f84e 	bl	80046a4 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000608:	4b1e      	ldr	r3, [pc, #120]	@ (8000684 <MX_TIM3_Init+0xa0>)
 800060a:	4a1f      	ldr	r2, [pc, #124]	@ (8000688 <MX_TIM3_Init+0xa4>)
 800060c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 11;
 800060e:	4b1d      	ldr	r3, [pc, #116]	@ (8000684 <MX_TIM3_Init+0xa0>)
 8000610:	220b      	movs	r2, #11
 8000612:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000614:	4b1b      	ldr	r3, [pc, #108]	@ (8000684 <MX_TIM3_Init+0xa0>)
 8000616:	2200      	movs	r2, #0
 8000618:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 800061a:	4b1a      	ldr	r3, [pc, #104]	@ (8000684 <MX_TIM3_Init+0xa0>)
 800061c:	4a1b      	ldr	r2, [pc, #108]	@ (800068c <MX_TIM3_Init+0xa8>)
 800061e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000620:	4b18      	ldr	r3, [pc, #96]	@ (8000684 <MX_TIM3_Init+0xa0>)
 8000622:	2200      	movs	r2, #0
 8000624:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000626:	4b17      	ldr	r3, [pc, #92]	@ (8000684 <MX_TIM3_Init+0xa0>)
 8000628:	2200      	movs	r2, #0
 800062a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800062c:	4b15      	ldr	r3, [pc, #84]	@ (8000684 <MX_TIM3_Init+0xa0>)
 800062e:	0018      	movs	r0, r3
 8000630:	f003 fc18 	bl	8003e64 <HAL_TIM_Base_Init>
 8000634:	1e03      	subs	r3, r0, #0
 8000636:	d001      	beq.n	800063c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000638:	f000 f894 	bl	8000764 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800063c:	2110      	movs	r1, #16
 800063e:	187b      	adds	r3, r7, r1
 8000640:	2280      	movs	r2, #128	@ 0x80
 8000642:	0152      	lsls	r2, r2, #5
 8000644:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000646:	187a      	adds	r2, r7, r1
 8000648:	4b0e      	ldr	r3, [pc, #56]	@ (8000684 <MX_TIM3_Init+0xa0>)
 800064a:	0011      	movs	r1, r2
 800064c:	0018      	movs	r0, r3
 800064e:	f003 fdb1 	bl	80041b4 <HAL_TIM_ConfigClockSource>
 8000652:	1e03      	subs	r3, r0, #0
 8000654:	d001      	beq.n	800065a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000656:	f000 f885 	bl	8000764 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800065a:	1d3b      	adds	r3, r7, #4
 800065c:	2200      	movs	r2, #0
 800065e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000660:	1d3b      	adds	r3, r7, #4
 8000662:	2200      	movs	r2, #0
 8000664:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000666:	1d3a      	adds	r2, r7, #4
 8000668:	4b06      	ldr	r3, [pc, #24]	@ (8000684 <MX_TIM3_Init+0xa0>)
 800066a:	0011      	movs	r1, r2
 800066c:	0018      	movs	r0, r3
 800066e:	f003 ff9f 	bl	80045b0 <HAL_TIMEx_MasterConfigSynchronization>
 8000672:	1e03      	subs	r3, r0, #0
 8000674:	d001      	beq.n	800067a <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000676:	f000 f875 	bl	8000764 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800067a:	46c0      	nop			@ (mov r8, r8)
 800067c:	46bd      	mov	sp, r7
 800067e:	b008      	add	sp, #32
 8000680:	bd80      	pop	{r7, pc}
 8000682:	46c0      	nop			@ (mov r8, r8)
 8000684:	20000138 	.word	0x20000138
 8000688:	40000400 	.word	0x40000400
 800068c:	000003e7 	.word	0x000003e7

08000690 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000696:	4b10      	ldr	r3, [pc, #64]	@ (80006d8 <MX_DMA_Init+0x48>)
 8000698:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800069a:	4b0f      	ldr	r3, [pc, #60]	@ (80006d8 <MX_DMA_Init+0x48>)
 800069c:	2101      	movs	r1, #1
 800069e:	430a      	orrs	r2, r1
 80006a0:	639a      	str	r2, [r3, #56]	@ 0x38
 80006a2:	4b0d      	ldr	r3, [pc, #52]	@ (80006d8 <MX_DMA_Init+0x48>)
 80006a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80006a6:	2201      	movs	r2, #1
 80006a8:	4013      	ands	r3, r2
 80006aa:	607b      	str	r3, [r7, #4]
 80006ac:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80006ae:	2200      	movs	r2, #0
 80006b0:	2100      	movs	r1, #0
 80006b2:	2009      	movs	r0, #9
 80006b4:	f000 fb24 	bl	8000d00 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80006b8:	2009      	movs	r0, #9
 80006ba:	f000 fb36 	bl	8000d2a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 80006be:	2200      	movs	r2, #0
 80006c0:	2100      	movs	r1, #0
 80006c2:	200a      	movs	r0, #10
 80006c4:	f000 fb1c 	bl	8000d00 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80006c8:	200a      	movs	r0, #10
 80006ca:	f000 fb2e 	bl	8000d2a <HAL_NVIC_EnableIRQ>

}
 80006ce:	46c0      	nop			@ (mov r8, r8)
 80006d0:	46bd      	mov	sp, r7
 80006d2:	b002      	add	sp, #8
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	46c0      	nop			@ (mov r8, r8)
 80006d8:	40021000 	.word	0x40021000

080006dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006dc:	b590      	push	{r4, r7, lr}
 80006de:	b089      	sub	sp, #36	@ 0x24
 80006e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e2:	240c      	movs	r4, #12
 80006e4:	193b      	adds	r3, r7, r4
 80006e6:	0018      	movs	r0, r3
 80006e8:	2314      	movs	r3, #20
 80006ea:	001a      	movs	r2, r3
 80006ec:	2100      	movs	r1, #0
 80006ee:	f003 ffd9 	bl	80046a4 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006f2:	4b1b      	ldr	r3, [pc, #108]	@ (8000760 <MX_GPIO_Init+0x84>)
 80006f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80006f6:	4b1a      	ldr	r3, [pc, #104]	@ (8000760 <MX_GPIO_Init+0x84>)
 80006f8:	2102      	movs	r1, #2
 80006fa:	430a      	orrs	r2, r1
 80006fc:	635a      	str	r2, [r3, #52]	@ 0x34
 80006fe:	4b18      	ldr	r3, [pc, #96]	@ (8000760 <MX_GPIO_Init+0x84>)
 8000700:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000702:	2202      	movs	r2, #2
 8000704:	4013      	ands	r3, r2
 8000706:	60bb      	str	r3, [r7, #8]
 8000708:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800070a:	4b15      	ldr	r3, [pc, #84]	@ (8000760 <MX_GPIO_Init+0x84>)
 800070c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800070e:	4b14      	ldr	r3, [pc, #80]	@ (8000760 <MX_GPIO_Init+0x84>)
 8000710:	2101      	movs	r1, #1
 8000712:	430a      	orrs	r2, r1
 8000714:	635a      	str	r2, [r3, #52]	@ 0x34
 8000716:	4b12      	ldr	r3, [pc, #72]	@ (8000760 <MX_GPIO_Init+0x84>)
 8000718:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800071a:	2201      	movs	r2, #1
 800071c:	4013      	ands	r3, r2
 800071e:	607b      	str	r3, [r7, #4]
 8000720:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000722:	23a0      	movs	r3, #160	@ 0xa0
 8000724:	05db      	lsls	r3, r3, #23
 8000726:	2200      	movs	r2, #0
 8000728:	2110      	movs	r1, #16
 800072a:	0018      	movs	r0, r3
 800072c:	f000 ff5e 	bl	80015ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000730:	0021      	movs	r1, r4
 8000732:	187b      	adds	r3, r7, r1
 8000734:	2210      	movs	r2, #16
 8000736:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000738:	187b      	adds	r3, r7, r1
 800073a:	2201      	movs	r2, #1
 800073c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073e:	187b      	adds	r3, r7, r1
 8000740:	2200      	movs	r2, #0
 8000742:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000744:	187b      	adds	r3, r7, r1
 8000746:	2200      	movs	r2, #0
 8000748:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800074a:	187a      	adds	r2, r7, r1
 800074c:	23a0      	movs	r3, #160	@ 0xa0
 800074e:	05db      	lsls	r3, r3, #23
 8000750:	0011      	movs	r1, r2
 8000752:	0018      	movs	r0, r3
 8000754:	f000 fde0 	bl	8001318 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000758:	46c0      	nop			@ (mov r8, r8)
 800075a:	46bd      	mov	sp, r7
 800075c:	b009      	add	sp, #36	@ 0x24
 800075e:	bd90      	pop	{r4, r7, pc}
 8000760:	40021000 	.word	0x40021000

08000764 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000768:	b672      	cpsid	i
}
 800076a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800076c:	46c0      	nop			@ (mov r8, r8)
 800076e:	e7fd      	b.n	800076c <Error_Handler+0x8>

08000770 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000776:	4b0f      	ldr	r3, [pc, #60]	@ (80007b4 <HAL_MspInit+0x44>)
 8000778:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800077a:	4b0e      	ldr	r3, [pc, #56]	@ (80007b4 <HAL_MspInit+0x44>)
 800077c:	2101      	movs	r1, #1
 800077e:	430a      	orrs	r2, r1
 8000780:	641a      	str	r2, [r3, #64]	@ 0x40
 8000782:	4b0c      	ldr	r3, [pc, #48]	@ (80007b4 <HAL_MspInit+0x44>)
 8000784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000786:	2201      	movs	r2, #1
 8000788:	4013      	ands	r3, r2
 800078a:	607b      	str	r3, [r7, #4]
 800078c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800078e:	4b09      	ldr	r3, [pc, #36]	@ (80007b4 <HAL_MspInit+0x44>)
 8000790:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000792:	4b08      	ldr	r3, [pc, #32]	@ (80007b4 <HAL_MspInit+0x44>)
 8000794:	2180      	movs	r1, #128	@ 0x80
 8000796:	0549      	lsls	r1, r1, #21
 8000798:	430a      	orrs	r2, r1
 800079a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800079c:	4b05      	ldr	r3, [pc, #20]	@ (80007b4 <HAL_MspInit+0x44>)
 800079e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80007a0:	2380      	movs	r3, #128	@ 0x80
 80007a2:	055b      	lsls	r3, r3, #21
 80007a4:	4013      	ands	r3, r2
 80007a6:	603b      	str	r3, [r7, #0]
 80007a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007aa:	46c0      	nop			@ (mov r8, r8)
 80007ac:	46bd      	mov	sp, r7
 80007ae:	b002      	add	sp, #8
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	46c0      	nop			@ (mov r8, r8)
 80007b4:	40021000 	.word	0x40021000

080007b8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80007b8:	b590      	push	{r4, r7, lr}
 80007ba:	b091      	sub	sp, #68	@ 0x44
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c0:	232c      	movs	r3, #44	@ 0x2c
 80007c2:	18fb      	adds	r3, r7, r3
 80007c4:	0018      	movs	r0, r3
 80007c6:	2314      	movs	r3, #20
 80007c8:	001a      	movs	r2, r3
 80007ca:	2100      	movs	r1, #0
 80007cc:	f003 ff6a 	bl	80046a4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007d0:	2410      	movs	r4, #16
 80007d2:	193b      	adds	r3, r7, r4
 80007d4:	0018      	movs	r0, r3
 80007d6:	231c      	movs	r3, #28
 80007d8:	001a      	movs	r2, r3
 80007da:	2100      	movs	r1, #0
 80007dc:	f003 ff62 	bl	80046a4 <memset>
  if(hi2c->Instance==I2C1)
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	4a4c      	ldr	r2, [pc, #304]	@ (8000918 <HAL_I2C_MspInit+0x160>)
 80007e6:	4293      	cmp	r3, r2
 80007e8:	d000      	beq.n	80007ec <HAL_I2C_MspInit+0x34>
 80007ea:	e090      	b.n	800090e <HAL_I2C_MspInit+0x156>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80007ec:	193b      	adds	r3, r7, r4
 80007ee:	2240      	movs	r2, #64	@ 0x40
 80007f0:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80007f2:	193b      	adds	r3, r7, r4
 80007f4:	2200      	movs	r2, #0
 80007f6:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007f8:	193b      	adds	r3, r7, r4
 80007fa:	0018      	movs	r0, r3
 80007fc:	f003 fa44 	bl	8003c88 <HAL_RCCEx_PeriphCLKConfig>
 8000800:	1e03      	subs	r3, r0, #0
 8000802:	d001      	beq.n	8000808 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8000804:	f7ff ffae 	bl	8000764 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000808:	4b44      	ldr	r3, [pc, #272]	@ (800091c <HAL_I2C_MspInit+0x164>)
 800080a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800080c:	4b43      	ldr	r3, [pc, #268]	@ (800091c <HAL_I2C_MspInit+0x164>)
 800080e:	2102      	movs	r1, #2
 8000810:	430a      	orrs	r2, r1
 8000812:	635a      	str	r2, [r3, #52]	@ 0x34
 8000814:	4b41      	ldr	r3, [pc, #260]	@ (800091c <HAL_I2C_MspInit+0x164>)
 8000816:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000818:	2202      	movs	r2, #2
 800081a:	4013      	ands	r3, r2
 800081c:	60fb      	str	r3, [r7, #12]
 800081e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB6     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8000820:	212c      	movs	r1, #44	@ 0x2c
 8000822:	187b      	adds	r3, r7, r1
 8000824:	22c0      	movs	r2, #192	@ 0xc0
 8000826:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000828:	187b      	adds	r3, r7, r1
 800082a:	2212      	movs	r2, #18
 800082c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082e:	187b      	adds	r3, r7, r1
 8000830:	2200      	movs	r2, #0
 8000832:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000834:	187b      	adds	r3, r7, r1
 8000836:	2200      	movs	r2, #0
 8000838:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 800083a:	187b      	adds	r3, r7, r1
 800083c:	2206      	movs	r2, #6
 800083e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000840:	187b      	adds	r3, r7, r1
 8000842:	4a37      	ldr	r2, [pc, #220]	@ (8000920 <HAL_I2C_MspInit+0x168>)
 8000844:	0019      	movs	r1, r3
 8000846:	0010      	movs	r0, r2
 8000848:	f000 fd66 	bl	8001318 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800084c:	4b33      	ldr	r3, [pc, #204]	@ (800091c <HAL_I2C_MspInit+0x164>)
 800084e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000850:	4b32      	ldr	r3, [pc, #200]	@ (800091c <HAL_I2C_MspInit+0x164>)
 8000852:	2180      	movs	r1, #128	@ 0x80
 8000854:	0389      	lsls	r1, r1, #14
 8000856:	430a      	orrs	r2, r1
 8000858:	63da      	str	r2, [r3, #60]	@ 0x3c
 800085a:	4b30      	ldr	r3, [pc, #192]	@ (800091c <HAL_I2C_MspInit+0x164>)
 800085c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800085e:	2380      	movs	r3, #128	@ 0x80
 8000860:	039b      	lsls	r3, r3, #14
 8000862:	4013      	ands	r3, r2
 8000864:	60bb      	str	r3, [r7, #8]
 8000866:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel1;
 8000868:	4b2e      	ldr	r3, [pc, #184]	@ (8000924 <HAL_I2C_MspInit+0x16c>)
 800086a:	4a2f      	ldr	r2, [pc, #188]	@ (8000928 <HAL_I2C_MspInit+0x170>)
 800086c:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 800086e:	4b2d      	ldr	r3, [pc, #180]	@ (8000924 <HAL_I2C_MspInit+0x16c>)
 8000870:	220a      	movs	r2, #10
 8000872:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000874:	4b2b      	ldr	r3, [pc, #172]	@ (8000924 <HAL_I2C_MspInit+0x16c>)
 8000876:	2200      	movs	r2, #0
 8000878:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800087a:	4b2a      	ldr	r3, [pc, #168]	@ (8000924 <HAL_I2C_MspInit+0x16c>)
 800087c:	2200      	movs	r2, #0
 800087e:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000880:	4b28      	ldr	r3, [pc, #160]	@ (8000924 <HAL_I2C_MspInit+0x16c>)
 8000882:	2280      	movs	r2, #128	@ 0x80
 8000884:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000886:	4b27      	ldr	r3, [pc, #156]	@ (8000924 <HAL_I2C_MspInit+0x16c>)
 8000888:	2200      	movs	r2, #0
 800088a:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800088c:	4b25      	ldr	r3, [pc, #148]	@ (8000924 <HAL_I2C_MspInit+0x16c>)
 800088e:	2200      	movs	r2, #0
 8000890:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_CIRCULAR;
 8000892:	4b24      	ldr	r3, [pc, #144]	@ (8000924 <HAL_I2C_MspInit+0x16c>)
 8000894:	2220      	movs	r2, #32
 8000896:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000898:	4b22      	ldr	r3, [pc, #136]	@ (8000924 <HAL_I2C_MspInit+0x16c>)
 800089a:	2200      	movs	r2, #0
 800089c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800089e:	4b21      	ldr	r3, [pc, #132]	@ (8000924 <HAL_I2C_MspInit+0x16c>)
 80008a0:	0018      	movs	r0, r3
 80008a2:	f000 fa5f 	bl	8000d64 <HAL_DMA_Init>
 80008a6:	1e03      	subs	r3, r0, #0
 80008a8:	d001      	beq.n	80008ae <HAL_I2C_MspInit+0xf6>
    {
      Error_Handler();
 80008aa:	f7ff ff5b 	bl	8000764 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	4a1c      	ldr	r2, [pc, #112]	@ (8000924 <HAL_I2C_MspInit+0x16c>)
 80008b2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80008b4:	4b1b      	ldr	r3, [pc, #108]	@ (8000924 <HAL_I2C_MspInit+0x16c>)
 80008b6:	687a      	ldr	r2, [r7, #4]
 80008b8:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel2;
 80008ba:	4b1c      	ldr	r3, [pc, #112]	@ (800092c <HAL_I2C_MspInit+0x174>)
 80008bc:	4a1c      	ldr	r2, [pc, #112]	@ (8000930 <HAL_I2C_MspInit+0x178>)
 80008be:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 80008c0:	4b1a      	ldr	r3, [pc, #104]	@ (800092c <HAL_I2C_MspInit+0x174>)
 80008c2:	220b      	movs	r2, #11
 80008c4:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80008c6:	4b19      	ldr	r3, [pc, #100]	@ (800092c <HAL_I2C_MspInit+0x174>)
 80008c8:	2210      	movs	r2, #16
 80008ca:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80008cc:	4b17      	ldr	r3, [pc, #92]	@ (800092c <HAL_I2C_MspInit+0x174>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80008d2:	4b16      	ldr	r3, [pc, #88]	@ (800092c <HAL_I2C_MspInit+0x174>)
 80008d4:	2280      	movs	r2, #128	@ 0x80
 80008d6:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80008d8:	4b14      	ldr	r3, [pc, #80]	@ (800092c <HAL_I2C_MspInit+0x174>)
 80008da:	2200      	movs	r2, #0
 80008dc:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80008de:	4b13      	ldr	r3, [pc, #76]	@ (800092c <HAL_I2C_MspInit+0x174>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_CIRCULAR;
 80008e4:	4b11      	ldr	r3, [pc, #68]	@ (800092c <HAL_I2C_MspInit+0x174>)
 80008e6:	2220      	movs	r2, #32
 80008e8:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80008ea:	4b10      	ldr	r3, [pc, #64]	@ (800092c <HAL_I2C_MspInit+0x174>)
 80008ec:	2280      	movs	r2, #128	@ 0x80
 80008ee:	0152      	lsls	r2, r2, #5
 80008f0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80008f2:	4b0e      	ldr	r3, [pc, #56]	@ (800092c <HAL_I2C_MspInit+0x174>)
 80008f4:	0018      	movs	r0, r3
 80008f6:	f000 fa35 	bl	8000d64 <HAL_DMA_Init>
 80008fa:	1e03      	subs	r3, r0, #0
 80008fc:	d001      	beq.n	8000902 <HAL_I2C_MspInit+0x14a>
    {
      Error_Handler();
 80008fe:	f7ff ff31 	bl	8000764 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	4a09      	ldr	r2, [pc, #36]	@ (800092c <HAL_I2C_MspInit+0x174>)
 8000906:	639a      	str	r2, [r3, #56]	@ 0x38
 8000908:	4b08      	ldr	r3, [pc, #32]	@ (800092c <HAL_I2C_MspInit+0x174>)
 800090a:	687a      	ldr	r2, [r7, #4]
 800090c:	629a      	str	r2, [r3, #40]	@ 0x28
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800090e:	46c0      	nop			@ (mov r8, r8)
 8000910:	46bd      	mov	sp, r7
 8000912:	b011      	add	sp, #68	@ 0x44
 8000914:	bd90      	pop	{r4, r7, pc}
 8000916:	46c0      	nop			@ (mov r8, r8)
 8000918:	40005400 	.word	0x40005400
 800091c:	40021000 	.word	0x40021000
 8000920:	50000400 	.word	0x50000400
 8000924:	20000080 	.word	0x20000080
 8000928:	40020008 	.word	0x40020008
 800092c:	200000dc 	.word	0x200000dc
 8000930:	4002001c 	.word	0x4002001c

08000934 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b084      	sub	sp, #16
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	4a0d      	ldr	r2, [pc, #52]	@ (8000978 <HAL_TIM_Base_MspInit+0x44>)
 8000942:	4293      	cmp	r3, r2
 8000944:	d113      	bne.n	800096e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000946:	4b0d      	ldr	r3, [pc, #52]	@ (800097c <HAL_TIM_Base_MspInit+0x48>)
 8000948:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800094a:	4b0c      	ldr	r3, [pc, #48]	@ (800097c <HAL_TIM_Base_MspInit+0x48>)
 800094c:	2102      	movs	r1, #2
 800094e:	430a      	orrs	r2, r1
 8000950:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000952:	4b0a      	ldr	r3, [pc, #40]	@ (800097c <HAL_TIM_Base_MspInit+0x48>)
 8000954:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000956:	2202      	movs	r2, #2
 8000958:	4013      	ands	r3, r2
 800095a:	60fb      	str	r3, [r7, #12]
 800095c:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800095e:	2200      	movs	r2, #0
 8000960:	2100      	movs	r1, #0
 8000962:	2010      	movs	r0, #16
 8000964:	f000 f9cc 	bl	8000d00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000968:	2010      	movs	r0, #16
 800096a:	f000 f9de 	bl	8000d2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800096e:	46c0      	nop			@ (mov r8, r8)
 8000970:	46bd      	mov	sp, r7
 8000972:	b004      	add	sp, #16
 8000974:	bd80      	pop	{r7, pc}
 8000976:	46c0      	nop			@ (mov r8, r8)
 8000978:	40000400 	.word	0x40000400
 800097c:	40021000 	.word	0x40021000

08000980 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000984:	46c0      	nop			@ (mov r8, r8)
 8000986:	e7fd      	b.n	8000984 <NMI_Handler+0x4>

08000988 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800098c:	46c0      	nop			@ (mov r8, r8)
 800098e:	e7fd      	b.n	800098c <HardFault_Handler+0x4>

08000990 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000994:	46c0      	nop			@ (mov r8, r8)
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}

0800099a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800099a:	b580      	push	{r7, lr}
 800099c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800099e:	46c0      	nop			@ (mov r8, r8)
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}

080009a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009a8:	f000 f8be 	bl	8000b28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009ac:	46c0      	nop			@ (mov r8, r8)
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
	...

080009b4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80009b8:	4b03      	ldr	r3, [pc, #12]	@ (80009c8 <DMA1_Channel1_IRQHandler+0x14>)
 80009ba:	0018      	movs	r0, r3
 80009bc:	f000 fb5e 	bl	800107c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80009c0:	46c0      	nop			@ (mov r8, r8)
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	46c0      	nop			@ (mov r8, r8)
 80009c8:	20000080 	.word	0x20000080

080009cc <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80009d0:	4b03      	ldr	r3, [pc, #12]	@ (80009e0 <DMA1_Channel2_3_IRQHandler+0x14>)
 80009d2:	0018      	movs	r0, r3
 80009d4:	f000 fb52 	bl	800107c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 80009d8:	46c0      	nop			@ (mov r8, r8)
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	46c0      	nop			@ (mov r8, r8)
 80009e0:	200000dc 	.word	0x200000dc

080009e4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80009e8:	4b03      	ldr	r3, [pc, #12]	@ (80009f8 <TIM3_IRQHandler+0x14>)
 80009ea:	0018      	movs	r0, r3
 80009ec:	f003 fae0 	bl	8003fb0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80009f0:	46c0      	nop			@ (mov r8, r8)
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	46c0      	nop			@ (mov r8, r8)
 80009f8:	20000138 	.word	0x20000138

080009fc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a00:	4b03      	ldr	r3, [pc, #12]	@ (8000a10 <SystemInit+0x14>)
 8000a02:	2280      	movs	r2, #128	@ 0x80
 8000a04:	0512      	lsls	r2, r2, #20
 8000a06:	609a      	str	r2, [r3, #8]
#endif
}
 8000a08:	46c0      	nop			@ (mov r8, r8)
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	46c0      	nop			@ (mov r8, r8)
 8000a10:	e000ed00 	.word	0xe000ed00

08000a14 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a14:	480d      	ldr	r0, [pc, #52]	@ (8000a4c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a16:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a18:	f7ff fff0 	bl	80009fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000a1c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000a1e:	e003      	b.n	8000a28 <LoopCopyDataInit>

08000a20 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000a20:	4b0b      	ldr	r3, [pc, #44]	@ (8000a50 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8000a22:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000a24:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000a26:	3104      	adds	r1, #4

08000a28 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000a28:	480a      	ldr	r0, [pc, #40]	@ (8000a54 <LoopForever+0xa>)
  ldr r3, =_edata
 8000a2a:	4b0b      	ldr	r3, [pc, #44]	@ (8000a58 <LoopForever+0xe>)
  adds r2, r0, r1
 8000a2c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000a2e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000a30:	d3f6      	bcc.n	8000a20 <CopyDataInit>
  ldr r2, =_sbss
 8000a32:	4a0a      	ldr	r2, [pc, #40]	@ (8000a5c <LoopForever+0x12>)
  b LoopFillZerobss
 8000a34:	e002      	b.n	8000a3c <LoopFillZerobss>

08000a36 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000a36:	2300      	movs	r3, #0
  str  r3, [r2]
 8000a38:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a3a:	3204      	adds	r2, #4

08000a3c <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8000a3c:	4b08      	ldr	r3, [pc, #32]	@ (8000a60 <LoopForever+0x16>)
  cmp r2, r3
 8000a3e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000a40:	d3f9      	bcc.n	8000a36 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8000a42:	f003 fe37 	bl	80046b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a46:	f7ff fce5 	bl	8000414 <main>

08000a4a <LoopForever>:

LoopForever:
    b LoopForever
 8000a4a:	e7fe      	b.n	8000a4a <LoopForever>
  ldr   r0, =_estack
 8000a4c:	20001800 	.word	0x20001800
  ldr r3, =_sidata
 8000a50:	0800475c 	.word	0x0800475c
  ldr r0, =_sdata
 8000a54:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000a58:	20000010 	.word	0x20000010
  ldr r2, =_sbss
 8000a5c:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 8000a60:	20000220 	.word	0x20000220

08000a64 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a64:	e7fe      	b.n	8000a64 <ADC1_IRQHandler>

08000a66 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a66:	b580      	push	{r7, lr}
 8000a68:	b082      	sub	sp, #8
 8000a6a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a6c:	1dfb      	adds	r3, r7, #7
 8000a6e:	2200      	movs	r2, #0
 8000a70:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a72:	2003      	movs	r0, #3
 8000a74:	f000 f80e 	bl	8000a94 <HAL_InitTick>
 8000a78:	1e03      	subs	r3, r0, #0
 8000a7a:	d003      	beq.n	8000a84 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8000a7c:	1dfb      	adds	r3, r7, #7
 8000a7e:	2201      	movs	r2, #1
 8000a80:	701a      	strb	r2, [r3, #0]
 8000a82:	e001      	b.n	8000a88 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a84:	f7ff fe74 	bl	8000770 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a88:	1dfb      	adds	r3, r7, #7
 8000a8a:	781b      	ldrb	r3, [r3, #0]
}
 8000a8c:	0018      	movs	r0, r3
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	b002      	add	sp, #8
 8000a92:	bd80      	pop	{r7, pc}

08000a94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a94:	b590      	push	{r4, r7, lr}
 8000a96:	b085      	sub	sp, #20
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a9c:	230f      	movs	r3, #15
 8000a9e:	18fb      	adds	r3, r7, r3
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 8000aa4:	4b1d      	ldr	r3, [pc, #116]	@ (8000b1c <HAL_InitTick+0x88>)
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d02b      	beq.n	8000b04 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 8000aac:	4b1c      	ldr	r3, [pc, #112]	@ (8000b20 <HAL_InitTick+0x8c>)
 8000aae:	681c      	ldr	r4, [r3, #0]
 8000ab0:	4b1a      	ldr	r3, [pc, #104]	@ (8000b1c <HAL_InitTick+0x88>)
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	0019      	movs	r1, r3
 8000ab6:	23fa      	movs	r3, #250	@ 0xfa
 8000ab8:	0098      	lsls	r0, r3, #2
 8000aba:	f7ff fb25 	bl	8000108 <__udivsi3>
 8000abe:	0003      	movs	r3, r0
 8000ac0:	0019      	movs	r1, r3
 8000ac2:	0020      	movs	r0, r4
 8000ac4:	f7ff fb20 	bl	8000108 <__udivsi3>
 8000ac8:	0003      	movs	r3, r0
 8000aca:	0018      	movs	r0, r3
 8000acc:	f000 f93d 	bl	8000d4a <HAL_SYSTICK_Config>
 8000ad0:	1e03      	subs	r3, r0, #0
 8000ad2:	d112      	bne.n	8000afa <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	2b03      	cmp	r3, #3
 8000ad8:	d80a      	bhi.n	8000af0 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ada:	6879      	ldr	r1, [r7, #4]
 8000adc:	2301      	movs	r3, #1
 8000ade:	425b      	negs	r3, r3
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	0018      	movs	r0, r3
 8000ae4:	f000 f90c 	bl	8000d00 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ae8:	4b0e      	ldr	r3, [pc, #56]	@ (8000b24 <HAL_InitTick+0x90>)
 8000aea:	687a      	ldr	r2, [r7, #4]
 8000aec:	601a      	str	r2, [r3, #0]
 8000aee:	e00d      	b.n	8000b0c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000af0:	230f      	movs	r3, #15
 8000af2:	18fb      	adds	r3, r7, r3
 8000af4:	2201      	movs	r2, #1
 8000af6:	701a      	strb	r2, [r3, #0]
 8000af8:	e008      	b.n	8000b0c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000afa:	230f      	movs	r3, #15
 8000afc:	18fb      	adds	r3, r7, r3
 8000afe:	2201      	movs	r2, #1
 8000b00:	701a      	strb	r2, [r3, #0]
 8000b02:	e003      	b.n	8000b0c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b04:	230f      	movs	r3, #15
 8000b06:	18fb      	adds	r3, r7, r3
 8000b08:	2201      	movs	r2, #1
 8000b0a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000b0c:	230f      	movs	r3, #15
 8000b0e:	18fb      	adds	r3, r7, r3
 8000b10:	781b      	ldrb	r3, [r3, #0]
}
 8000b12:	0018      	movs	r0, r3
 8000b14:	46bd      	mov	sp, r7
 8000b16:	b005      	add	sp, #20
 8000b18:	bd90      	pop	{r4, r7, pc}
 8000b1a:	46c0      	nop			@ (mov r8, r8)
 8000b1c:	2000000c 	.word	0x2000000c
 8000b20:	20000004 	.word	0x20000004
 8000b24:	20000008 	.word	0x20000008

08000b28 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b2c:	4b05      	ldr	r3, [pc, #20]	@ (8000b44 <HAL_IncTick+0x1c>)
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	001a      	movs	r2, r3
 8000b32:	4b05      	ldr	r3, [pc, #20]	@ (8000b48 <HAL_IncTick+0x20>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	18d2      	adds	r2, r2, r3
 8000b38:	4b03      	ldr	r3, [pc, #12]	@ (8000b48 <HAL_IncTick+0x20>)
 8000b3a:	601a      	str	r2, [r3, #0]
}
 8000b3c:	46c0      	nop			@ (mov r8, r8)
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	46c0      	nop			@ (mov r8, r8)
 8000b44:	2000000c 	.word	0x2000000c
 8000b48:	2000021c 	.word	0x2000021c

08000b4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b50:	4b02      	ldr	r3, [pc, #8]	@ (8000b5c <HAL_GetTick+0x10>)
 8000b52:	681b      	ldr	r3, [r3, #0]
}
 8000b54:	0018      	movs	r0, r3
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	46c0      	nop			@ (mov r8, r8)
 8000b5c:	2000021c 	.word	0x2000021c

08000b60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b084      	sub	sp, #16
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b68:	f7ff fff0 	bl	8000b4c <HAL_GetTick>
 8000b6c:	0003      	movs	r3, r0
 8000b6e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	3301      	adds	r3, #1
 8000b78:	d005      	beq.n	8000b86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b7a:	4b0a      	ldr	r3, [pc, #40]	@ (8000ba4 <HAL_Delay+0x44>)
 8000b7c:	781b      	ldrb	r3, [r3, #0]
 8000b7e:	001a      	movs	r2, r3
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	189b      	adds	r3, r3, r2
 8000b84:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b86:	46c0      	nop			@ (mov r8, r8)
 8000b88:	f7ff ffe0 	bl	8000b4c <HAL_GetTick>
 8000b8c:	0002      	movs	r2, r0
 8000b8e:	68bb      	ldr	r3, [r7, #8]
 8000b90:	1ad3      	subs	r3, r2, r3
 8000b92:	68fa      	ldr	r2, [r7, #12]
 8000b94:	429a      	cmp	r2, r3
 8000b96:	d8f7      	bhi.n	8000b88 <HAL_Delay+0x28>
  {
  }
}
 8000b98:	46c0      	nop			@ (mov r8, r8)
 8000b9a:	46c0      	nop			@ (mov r8, r8)
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	b004      	add	sp, #16
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	46c0      	nop			@ (mov r8, r8)
 8000ba4:	2000000c 	.word	0x2000000c

08000ba8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	0002      	movs	r2, r0
 8000bb0:	1dfb      	adds	r3, r7, #7
 8000bb2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000bb4:	1dfb      	adds	r3, r7, #7
 8000bb6:	781b      	ldrb	r3, [r3, #0]
 8000bb8:	2b7f      	cmp	r3, #127	@ 0x7f
 8000bba:	d809      	bhi.n	8000bd0 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bbc:	1dfb      	adds	r3, r7, #7
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	001a      	movs	r2, r3
 8000bc2:	231f      	movs	r3, #31
 8000bc4:	401a      	ands	r2, r3
 8000bc6:	4b04      	ldr	r3, [pc, #16]	@ (8000bd8 <__NVIC_EnableIRQ+0x30>)
 8000bc8:	2101      	movs	r1, #1
 8000bca:	4091      	lsls	r1, r2
 8000bcc:	000a      	movs	r2, r1
 8000bce:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000bd0:	46c0      	nop			@ (mov r8, r8)
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	b002      	add	sp, #8
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	e000e100 	.word	0xe000e100

08000bdc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bdc:	b590      	push	{r4, r7, lr}
 8000bde:	b083      	sub	sp, #12
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	0002      	movs	r2, r0
 8000be4:	6039      	str	r1, [r7, #0]
 8000be6:	1dfb      	adds	r3, r7, #7
 8000be8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000bea:	1dfb      	adds	r3, r7, #7
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	2b7f      	cmp	r3, #127	@ 0x7f
 8000bf0:	d828      	bhi.n	8000c44 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bf2:	4a2f      	ldr	r2, [pc, #188]	@ (8000cb0 <__NVIC_SetPriority+0xd4>)
 8000bf4:	1dfb      	adds	r3, r7, #7
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	b25b      	sxtb	r3, r3
 8000bfa:	089b      	lsrs	r3, r3, #2
 8000bfc:	33c0      	adds	r3, #192	@ 0xc0
 8000bfe:	009b      	lsls	r3, r3, #2
 8000c00:	589b      	ldr	r3, [r3, r2]
 8000c02:	1dfa      	adds	r2, r7, #7
 8000c04:	7812      	ldrb	r2, [r2, #0]
 8000c06:	0011      	movs	r1, r2
 8000c08:	2203      	movs	r2, #3
 8000c0a:	400a      	ands	r2, r1
 8000c0c:	00d2      	lsls	r2, r2, #3
 8000c0e:	21ff      	movs	r1, #255	@ 0xff
 8000c10:	4091      	lsls	r1, r2
 8000c12:	000a      	movs	r2, r1
 8000c14:	43d2      	mvns	r2, r2
 8000c16:	401a      	ands	r2, r3
 8000c18:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	019b      	lsls	r3, r3, #6
 8000c1e:	22ff      	movs	r2, #255	@ 0xff
 8000c20:	401a      	ands	r2, r3
 8000c22:	1dfb      	adds	r3, r7, #7
 8000c24:	781b      	ldrb	r3, [r3, #0]
 8000c26:	0018      	movs	r0, r3
 8000c28:	2303      	movs	r3, #3
 8000c2a:	4003      	ands	r3, r0
 8000c2c:	00db      	lsls	r3, r3, #3
 8000c2e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c30:	481f      	ldr	r0, [pc, #124]	@ (8000cb0 <__NVIC_SetPriority+0xd4>)
 8000c32:	1dfb      	adds	r3, r7, #7
 8000c34:	781b      	ldrb	r3, [r3, #0]
 8000c36:	b25b      	sxtb	r3, r3
 8000c38:	089b      	lsrs	r3, r3, #2
 8000c3a:	430a      	orrs	r2, r1
 8000c3c:	33c0      	adds	r3, #192	@ 0xc0
 8000c3e:	009b      	lsls	r3, r3, #2
 8000c40:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000c42:	e031      	b.n	8000ca8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c44:	4a1b      	ldr	r2, [pc, #108]	@ (8000cb4 <__NVIC_SetPriority+0xd8>)
 8000c46:	1dfb      	adds	r3, r7, #7
 8000c48:	781b      	ldrb	r3, [r3, #0]
 8000c4a:	0019      	movs	r1, r3
 8000c4c:	230f      	movs	r3, #15
 8000c4e:	400b      	ands	r3, r1
 8000c50:	3b08      	subs	r3, #8
 8000c52:	089b      	lsrs	r3, r3, #2
 8000c54:	3306      	adds	r3, #6
 8000c56:	009b      	lsls	r3, r3, #2
 8000c58:	18d3      	adds	r3, r2, r3
 8000c5a:	3304      	adds	r3, #4
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	1dfa      	adds	r2, r7, #7
 8000c60:	7812      	ldrb	r2, [r2, #0]
 8000c62:	0011      	movs	r1, r2
 8000c64:	2203      	movs	r2, #3
 8000c66:	400a      	ands	r2, r1
 8000c68:	00d2      	lsls	r2, r2, #3
 8000c6a:	21ff      	movs	r1, #255	@ 0xff
 8000c6c:	4091      	lsls	r1, r2
 8000c6e:	000a      	movs	r2, r1
 8000c70:	43d2      	mvns	r2, r2
 8000c72:	401a      	ands	r2, r3
 8000c74:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	019b      	lsls	r3, r3, #6
 8000c7a:	22ff      	movs	r2, #255	@ 0xff
 8000c7c:	401a      	ands	r2, r3
 8000c7e:	1dfb      	adds	r3, r7, #7
 8000c80:	781b      	ldrb	r3, [r3, #0]
 8000c82:	0018      	movs	r0, r3
 8000c84:	2303      	movs	r3, #3
 8000c86:	4003      	ands	r3, r0
 8000c88:	00db      	lsls	r3, r3, #3
 8000c8a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c8c:	4809      	ldr	r0, [pc, #36]	@ (8000cb4 <__NVIC_SetPriority+0xd8>)
 8000c8e:	1dfb      	adds	r3, r7, #7
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	001c      	movs	r4, r3
 8000c94:	230f      	movs	r3, #15
 8000c96:	4023      	ands	r3, r4
 8000c98:	3b08      	subs	r3, #8
 8000c9a:	089b      	lsrs	r3, r3, #2
 8000c9c:	430a      	orrs	r2, r1
 8000c9e:	3306      	adds	r3, #6
 8000ca0:	009b      	lsls	r3, r3, #2
 8000ca2:	18c3      	adds	r3, r0, r3
 8000ca4:	3304      	adds	r3, #4
 8000ca6:	601a      	str	r2, [r3, #0]
}
 8000ca8:	46c0      	nop			@ (mov r8, r8)
 8000caa:	46bd      	mov	sp, r7
 8000cac:	b003      	add	sp, #12
 8000cae:	bd90      	pop	{r4, r7, pc}
 8000cb0:	e000e100 	.word	0xe000e100
 8000cb4:	e000ed00 	.word	0xe000ed00

08000cb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	1e5a      	subs	r2, r3, #1
 8000cc4:	2380      	movs	r3, #128	@ 0x80
 8000cc6:	045b      	lsls	r3, r3, #17
 8000cc8:	429a      	cmp	r2, r3
 8000cca:	d301      	bcc.n	8000cd0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ccc:	2301      	movs	r3, #1
 8000cce:	e010      	b.n	8000cf2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cd0:	4b0a      	ldr	r3, [pc, #40]	@ (8000cfc <SysTick_Config+0x44>)
 8000cd2:	687a      	ldr	r2, [r7, #4]
 8000cd4:	3a01      	subs	r2, #1
 8000cd6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cd8:	2301      	movs	r3, #1
 8000cda:	425b      	negs	r3, r3
 8000cdc:	2103      	movs	r1, #3
 8000cde:	0018      	movs	r0, r3
 8000ce0:	f7ff ff7c 	bl	8000bdc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ce4:	4b05      	ldr	r3, [pc, #20]	@ (8000cfc <SysTick_Config+0x44>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cea:	4b04      	ldr	r3, [pc, #16]	@ (8000cfc <SysTick_Config+0x44>)
 8000cec:	2207      	movs	r2, #7
 8000cee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cf0:	2300      	movs	r3, #0
}
 8000cf2:	0018      	movs	r0, r3
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	b002      	add	sp, #8
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	46c0      	nop			@ (mov r8, r8)
 8000cfc:	e000e010 	.word	0xe000e010

08000d00 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b084      	sub	sp, #16
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	60b9      	str	r1, [r7, #8]
 8000d08:	607a      	str	r2, [r7, #4]
 8000d0a:	210f      	movs	r1, #15
 8000d0c:	187b      	adds	r3, r7, r1
 8000d0e:	1c02      	adds	r2, r0, #0
 8000d10:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000d12:	68ba      	ldr	r2, [r7, #8]
 8000d14:	187b      	adds	r3, r7, r1
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	b25b      	sxtb	r3, r3
 8000d1a:	0011      	movs	r1, r2
 8000d1c:	0018      	movs	r0, r3
 8000d1e:	f7ff ff5d 	bl	8000bdc <__NVIC_SetPriority>
}
 8000d22:	46c0      	nop			@ (mov r8, r8)
 8000d24:	46bd      	mov	sp, r7
 8000d26:	b004      	add	sp, #16
 8000d28:	bd80      	pop	{r7, pc}

08000d2a <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d2a:	b580      	push	{r7, lr}
 8000d2c:	b082      	sub	sp, #8
 8000d2e:	af00      	add	r7, sp, #0
 8000d30:	0002      	movs	r2, r0
 8000d32:	1dfb      	adds	r3, r7, #7
 8000d34:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d36:	1dfb      	adds	r3, r7, #7
 8000d38:	781b      	ldrb	r3, [r3, #0]
 8000d3a:	b25b      	sxtb	r3, r3
 8000d3c:	0018      	movs	r0, r3
 8000d3e:	f7ff ff33 	bl	8000ba8 <__NVIC_EnableIRQ>
}
 8000d42:	46c0      	nop			@ (mov r8, r8)
 8000d44:	46bd      	mov	sp, r7
 8000d46:	b002      	add	sp, #8
 8000d48:	bd80      	pop	{r7, pc}

08000d4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d4a:	b580      	push	{r7, lr}
 8000d4c:	b082      	sub	sp, #8
 8000d4e:	af00      	add	r7, sp, #0
 8000d50:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	0018      	movs	r0, r3
 8000d56:	f7ff ffaf 	bl	8000cb8 <SysTick_Config>
 8000d5a:	0003      	movs	r3, r0
}
 8000d5c:	0018      	movs	r0, r3
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	b002      	add	sp, #8
 8000d62:	bd80      	pop	{r7, pc}

08000d64 <HAL_DMA_Init>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d101      	bne.n	8000d76 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000d72:	2301      	movs	r3, #1
 8000d74:	e077      	b.n	8000e66 <HAL_DMA_Init+0x102>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* calculation of the channel index */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	4a3d      	ldr	r2, [pc, #244]	@ (8000e70 <HAL_DMA_Init+0x10c>)
 8000d7c:	4694      	mov	ip, r2
 8000d7e:	4463      	add	r3, ip
 8000d80:	2114      	movs	r1, #20
 8000d82:	0018      	movs	r0, r3
 8000d84:	f7ff f9c0 	bl	8000108 <__udivsi3>
 8000d88:	0003      	movs	r3, r0
                                                                                (uint32_t)DMA1_Channel1)) << 2U;
 8000d8a:	009a      	lsls	r2, r3, #2
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	2225      	movs	r2, #37	@ 0x25
 8000d94:	2102      	movs	r1, #2
 8000d96:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	681a      	ldr	r2, [r3, #0]
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	4934      	ldr	r1, [pc, #208]	@ (8000e74 <HAL_DMA_Init+0x110>)
 8000da4:	400a      	ands	r2, r1
 8000da6:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	6819      	ldr	r1, [r3, #0]
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	689a      	ldr	r2, [r3, #8]
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	68db      	ldr	r3, [r3, #12]
 8000db6:	431a      	orrs	r2, r3
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	691b      	ldr	r3, [r3, #16]
 8000dbc:	431a      	orrs	r2, r3
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	695b      	ldr	r3, [r3, #20]
 8000dc2:	431a      	orrs	r2, r3
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	699b      	ldr	r3, [r3, #24]
 8000dc8:	431a      	orrs	r2, r3
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	69db      	ldr	r3, [r3, #28]
 8000dce:	431a      	orrs	r2, r3
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	6a1b      	ldr	r3, [r3, #32]
 8000dd4:	431a      	orrs	r2, r3
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	430a      	orrs	r2, r1
 8000ddc:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	0018      	movs	r0, r3
 8000de2:	f000 fa49 	bl	8001278 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	689a      	ldr	r2, [r3, #8]
 8000dea:	2380      	movs	r3, #128	@ 0x80
 8000dec:	01db      	lsls	r3, r3, #7
 8000dee:	429a      	cmp	r2, r3
 8000df0:	d102      	bne.n	8000df8 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	2200      	movs	r2, #0
 8000df6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	685a      	ldr	r2, [r3, #4]
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e00:	21ff      	movs	r1, #255	@ 0xff
 8000e02:	400a      	ands	r2, r1
 8000e04:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e0a:	687a      	ldr	r2, [r7, #4]
 8000e0c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8000e0e:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d011      	beq.n	8000e3c <HAL_DMA_Init+0xd8>
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	2b04      	cmp	r3, #4
 8000e1e:	d80d      	bhi.n	8000e3c <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	0018      	movs	r0, r3
 8000e24:	f000 fa54 	bl	80012d0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000e34:	687a      	ldr	r2, [r7, #4]
 8000e36:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8000e38:	605a      	str	r2, [r3, #4]
 8000e3a:	e008      	b.n	8000e4e <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	2200      	movs	r2, #0
 8000e40:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	2200      	movs	r2, #0
 8000e46:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	2200      	movs	r2, #0
 8000e52:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	2225      	movs	r2, #37	@ 0x25
 8000e58:	2101      	movs	r1, #1
 8000e5a:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	2224      	movs	r2, #36	@ 0x24
 8000e60:	2100      	movs	r1, #0
 8000e62:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000e64:	2300      	movs	r3, #0
}
 8000e66:	0018      	movs	r0, r3
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	b002      	add	sp, #8
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	46c0      	nop			@ (mov r8, r8)
 8000e70:	bffdfff8 	.word	0xbffdfff8
 8000e74:	ffff800f 	.word	0xffff800f

08000e78 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b086      	sub	sp, #24
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	60f8      	str	r0, [r7, #12]
 8000e80:	60b9      	str	r1, [r7, #8]
 8000e82:	607a      	str	r2, [r7, #4]
 8000e84:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000e86:	2317      	movs	r3, #23
 8000e88:	18fb      	adds	r3, r7, r3
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	2224      	movs	r2, #36	@ 0x24
 8000e92:	5c9b      	ldrb	r3, [r3, r2]
 8000e94:	2b01      	cmp	r3, #1
 8000e96:	d101      	bne.n	8000e9c <HAL_DMA_Start_IT+0x24>
 8000e98:	2302      	movs	r3, #2
 8000e9a:	e070      	b.n	8000f7e <HAL_DMA_Start_IT+0x106>
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	2224      	movs	r2, #36	@ 0x24
 8000ea0:	2101      	movs	r1, #1
 8000ea2:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	2225      	movs	r2, #37	@ 0x25
 8000ea8:	5c9b      	ldrb	r3, [r3, r2]
 8000eaa:	b2db      	uxtb	r3, r3
 8000eac:	2b01      	cmp	r3, #1
 8000eae:	d157      	bne.n	8000f60 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	2225      	movs	r2, #37	@ 0x25
 8000eb4:	2102      	movs	r1, #2
 8000eb6:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	2200      	movs	r2, #0
 8000ebc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	681a      	ldr	r2, [r3, #0]
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	2101      	movs	r1, #1
 8000eca:	438a      	bics	r2, r1
 8000ecc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	687a      	ldr	r2, [r7, #4]
 8000ed2:	68b9      	ldr	r1, [r7, #8]
 8000ed4:	68f8      	ldr	r0, [r7, #12]
 8000ed6:	f000 f98f 	bl	80011f8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d008      	beq.n	8000ef4 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	681a      	ldr	r2, [r3, #0]
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	210e      	movs	r1, #14
 8000eee:	430a      	orrs	r2, r1
 8000ef0:	601a      	str	r2, [r3, #0]
 8000ef2:	e00f      	b.n	8000f14 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	681a      	ldr	r2, [r3, #0]
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	2104      	movs	r1, #4
 8000f00:	438a      	bics	r2, r1
 8000f02:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	681a      	ldr	r2, [r3, #0]
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	210a      	movs	r1, #10
 8000f10:	430a      	orrs	r2, r1
 8000f12:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f18:	681a      	ldr	r2, [r3, #0]
 8000f1a:	2380      	movs	r3, #128	@ 0x80
 8000f1c:	025b      	lsls	r3, r3, #9
 8000f1e:	4013      	ands	r3, r2
 8000f20:	d008      	beq.n	8000f34 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f26:	681a      	ldr	r2, [r3, #0]
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f2c:	2180      	movs	r1, #128	@ 0x80
 8000f2e:	0049      	lsls	r1, r1, #1
 8000f30:	430a      	orrs	r2, r1
 8000f32:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d008      	beq.n	8000f4e <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000f40:	681a      	ldr	r2, [r3, #0]
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000f46:	2180      	movs	r1, #128	@ 0x80
 8000f48:	0049      	lsls	r1, r1, #1
 8000f4a:	430a      	orrs	r2, r1
 8000f4c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	681a      	ldr	r2, [r3, #0]
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	2101      	movs	r1, #1
 8000f5a:	430a      	orrs	r2, r1
 8000f5c:	601a      	str	r2, [r3, #0]
 8000f5e:	e007      	b.n	8000f70 <HAL_DMA_Start_IT+0xf8>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	2224      	movs	r2, #36	@ 0x24
 8000f64:	2100      	movs	r1, #0
 8000f66:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000f68:	2317      	movs	r3, #23
 8000f6a:	18fb      	adds	r3, r7, r3
 8000f6c:	2202      	movs	r2, #2
 8000f6e:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hdma);
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	2224      	movs	r2, #36	@ 0x24
 8000f74:	2100      	movs	r1, #0
 8000f76:	5499      	strb	r1, [r3, r2]

  return status;
 8000f78:	2317      	movs	r3, #23
 8000f7a:	18fb      	adds	r3, r7, r3
 8000f7c:	781b      	ldrb	r3, [r3, #0]
}
 8000f7e:	0018      	movs	r0, r3
 8000f80:	46bd      	mov	sp, r7
 8000f82:	b006      	add	sp, #24
 8000f84:	bd80      	pop	{r7, pc}
	...

08000f88 <HAL_DMA_Abort_IT>:
  * @param  hdma    pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b084      	sub	sp, #16
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f90:	230f      	movs	r3, #15
 8000f92:	18fb      	adds	r3, r7, r3
 8000f94:	2200      	movs	r2, #0
 8000f96:	701a      	strb	r2, [r3, #0]

  /* Process Unlocked/locked */
  __HAL_UNLOCK(hdma);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	2224      	movs	r2, #36	@ 0x24
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	5499      	strb	r1, [r3, r2]
  __HAL_LOCK(hdma);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	2224      	movs	r2, #36	@ 0x24
 8000fa4:	5c9b      	ldrb	r3, [r3, r2]
 8000fa6:	2b01      	cmp	r3, #1
 8000fa8:	d101      	bne.n	8000fae <HAL_DMA_Abort_IT+0x26>
 8000faa:	2302      	movs	r3, #2
 8000fac:	e05e      	b.n	800106c <HAL_DMA_Abort_IT+0xe4>
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	2224      	movs	r2, #36	@ 0x24
 8000fb2:	2101      	movs	r1, #1
 8000fb4:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	2225      	movs	r2, #37	@ 0x25
 8000fba:	5c9b      	ldrb	r3, [r3, r2]
 8000fbc:	b2db      	uxtb	r3, r3
 8000fbe:	2b02      	cmp	r3, #2
 8000fc0:	d007      	beq.n	8000fd2 <HAL_DMA_Abort_IT+0x4a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	2204      	movs	r2, #4
 8000fc6:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8000fc8:	230f      	movs	r3, #15
 8000fca:	18fb      	adds	r3, r7, r3
 8000fcc:	2201      	movs	r2, #1
 8000fce:	701a      	strb	r2, [r3, #0]
 8000fd0:	e049      	b.n	8001066 <HAL_DMA_Abort_IT+0xde>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	681a      	ldr	r2, [r3, #0]
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	210e      	movs	r1, #14
 8000fde:	438a      	bics	r2, r1
 8000fe0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	681a      	ldr	r2, [r3, #0]
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	2101      	movs	r1, #1
 8000fee:	438a      	bics	r2, r1
 8000ff0:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ff6:	681a      	ldr	r2, [r3, #0]
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ffc:	491d      	ldr	r1, [pc, #116]	@ (8001074 <HAL_DMA_Abort_IT+0xec>)
 8000ffe:	400a      	ands	r2, r1
 8001000:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1cU)));
 8001002:	4b1d      	ldr	r3, [pc, #116]	@ (8001078 <HAL_DMA_Abort_IT+0xf0>)
 8001004:	6859      	ldr	r1, [r3, #4]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800100a:	221c      	movs	r2, #28
 800100c:	4013      	ands	r3, r2
 800100e:	2201      	movs	r2, #1
 8001010:	409a      	lsls	r2, r3
 8001012:	4b19      	ldr	r3, [pc, #100]	@ (8001078 <HAL_DMA_Abort_IT+0xf0>)
 8001014:	430a      	orrs	r2, r1
 8001016:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800101c:	687a      	ldr	r2, [r7, #4]
 800101e:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001020:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001026:	2b00      	cmp	r3, #0
 8001028:	d00c      	beq.n	8001044 <HAL_DMA_Abort_IT+0xbc>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800102e:	681a      	ldr	r2, [r3, #0]
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001034:	490f      	ldr	r1, [pc, #60]	@ (8001074 <HAL_DMA_Abort_IT+0xec>)
 8001036:	400a      	ands	r2, r1
 8001038:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800103e:	687a      	ldr	r2, [r7, #4]
 8001040:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8001042:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2225      	movs	r2, #37	@ 0x25
 8001048:	2101      	movs	r1, #1
 800104a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2224      	movs	r2, #36	@ 0x24
 8001050:	2100      	movs	r1, #0
 8001052:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001058:	2b00      	cmp	r3, #0
 800105a:	d004      	beq.n	8001066 <HAL_DMA_Abort_IT+0xde>
    {
      hdma->XferAbortCallback(hdma);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001060:	687a      	ldr	r2, [r7, #4]
 8001062:	0010      	movs	r0, r2
 8001064:	4798      	blx	r3
    }
  }
  return status;
 8001066:	230f      	movs	r3, #15
 8001068:	18fb      	adds	r3, r7, r3
 800106a:	781b      	ldrb	r3, [r3, #0]
}
 800106c:	0018      	movs	r0, r3
 800106e:	46bd      	mov	sp, r7
 8001070:	b004      	add	sp, #16
 8001072:	bd80      	pop	{r7, pc}
 8001074:	fffffeff 	.word	0xfffffeff
 8001078:	40020000 	.word	0x40020000

0800107c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b084      	sub	sp, #16
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = DMA1->ISR;
 8001084:	4b55      	ldr	r3, [pc, #340]	@ (80011dc <HAL_DMA_IRQHandler+0x160>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001096:	221c      	movs	r2, #28
 8001098:	4013      	ands	r3, r2
 800109a:	2204      	movs	r2, #4
 800109c:	409a      	lsls	r2, r3
 800109e:	0013      	movs	r3, r2
 80010a0:	68fa      	ldr	r2, [r7, #12]
 80010a2:	4013      	ands	r3, r2
 80010a4:	d027      	beq.n	80010f6 <HAL_DMA_IRQHandler+0x7a>
 80010a6:	68bb      	ldr	r3, [r7, #8]
 80010a8:	2204      	movs	r2, #4
 80010aa:	4013      	ands	r3, r2
 80010ac:	d023      	beq.n	80010f6 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	2220      	movs	r2, #32
 80010b6:	4013      	ands	r3, r2
 80010b8:	d107      	bne.n	80010ca <HAL_DMA_IRQHandler+0x4e>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	2104      	movs	r1, #4
 80010c6:	438a      	bics	r2, r1
 80010c8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)));
 80010ca:	4b44      	ldr	r3, [pc, #272]	@ (80011dc <HAL_DMA_IRQHandler+0x160>)
 80010cc:	6859      	ldr	r1, [r3, #4]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010d2:	221c      	movs	r2, #28
 80010d4:	4013      	ands	r3, r2
 80010d6:	2204      	movs	r2, #4
 80010d8:	409a      	lsls	r2, r3
 80010da:	4b40      	ldr	r3, [pc, #256]	@ (80011dc <HAL_DMA_IRQHandler+0x160>)
 80010dc:	430a      	orrs	r2, r1
 80010de:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d100      	bne.n	80010ea <HAL_DMA_IRQHandler+0x6e>
 80010e8:	e073      	b.n	80011d2 <HAL_DMA_IRQHandler+0x156>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ee:	687a      	ldr	r2, [r7, #4]
 80010f0:	0010      	movs	r0, r2
 80010f2:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80010f4:	e06d      	b.n	80011d2 <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010fa:	221c      	movs	r2, #28
 80010fc:	4013      	ands	r3, r2
 80010fe:	2202      	movs	r2, #2
 8001100:	409a      	lsls	r2, r3
 8001102:	0013      	movs	r3, r2
 8001104:	68fa      	ldr	r2, [r7, #12]
 8001106:	4013      	ands	r3, r2
 8001108:	d02e      	beq.n	8001168 <HAL_DMA_IRQHandler+0xec>
 800110a:	68bb      	ldr	r3, [r7, #8]
 800110c:	2202      	movs	r2, #2
 800110e:	4013      	ands	r3, r2
 8001110:	d02a      	beq.n	8001168 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	2220      	movs	r2, #32
 800111a:	4013      	ands	r3, r2
 800111c:	d10b      	bne.n	8001136 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	681a      	ldr	r2, [r3, #0]
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	210a      	movs	r1, #10
 800112a:	438a      	bics	r2, r1
 800112c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2225      	movs	r2, #37	@ 0x25
 8001132:	2101      	movs	r1, #1
 8001134:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)));
 8001136:	4b29      	ldr	r3, [pc, #164]	@ (80011dc <HAL_DMA_IRQHandler+0x160>)
 8001138:	6859      	ldr	r1, [r3, #4]
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800113e:	221c      	movs	r2, #28
 8001140:	4013      	ands	r3, r2
 8001142:	2202      	movs	r2, #2
 8001144:	409a      	lsls	r2, r3
 8001146:	4b25      	ldr	r3, [pc, #148]	@ (80011dc <HAL_DMA_IRQHandler+0x160>)
 8001148:	430a      	orrs	r2, r1
 800114a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2224      	movs	r2, #36	@ 0x24
 8001150:	2100      	movs	r1, #0
 8001152:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001158:	2b00      	cmp	r3, #0
 800115a:	d03a      	beq.n	80011d2 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001160:	687a      	ldr	r2, [r7, #4]
 8001162:	0010      	movs	r0, r2
 8001164:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001166:	e034      	b.n	80011d2 <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800116c:	221c      	movs	r2, #28
 800116e:	4013      	ands	r3, r2
 8001170:	2208      	movs	r2, #8
 8001172:	409a      	lsls	r2, r3
 8001174:	0013      	movs	r3, r2
 8001176:	68fa      	ldr	r2, [r7, #12]
 8001178:	4013      	ands	r3, r2
 800117a:	d02b      	beq.n	80011d4 <HAL_DMA_IRQHandler+0x158>
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	2208      	movs	r2, #8
 8001180:	4013      	ands	r3, r2
 8001182:	d027      	beq.n	80011d4 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	681a      	ldr	r2, [r3, #0]
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	210e      	movs	r1, #14
 8001190:	438a      	bics	r2, r1
 8001192:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 8001194:	4b11      	ldr	r3, [pc, #68]	@ (80011dc <HAL_DMA_IRQHandler+0x160>)
 8001196:	6859      	ldr	r1, [r3, #4]
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800119c:	221c      	movs	r2, #28
 800119e:	4013      	ands	r3, r2
 80011a0:	2201      	movs	r2, #1
 80011a2:	409a      	lsls	r2, r3
 80011a4:	4b0d      	ldr	r3, [pc, #52]	@ (80011dc <HAL_DMA_IRQHandler+0x160>)
 80011a6:	430a      	orrs	r2, r1
 80011a8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	2201      	movs	r2, #1
 80011ae:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	2225      	movs	r2, #37	@ 0x25
 80011b4:	2101      	movs	r1, #1
 80011b6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	2224      	movs	r2, #36	@ 0x24
 80011bc:	2100      	movs	r1, #0
 80011be:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d005      	beq.n	80011d4 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80011cc:	687a      	ldr	r2, [r7, #4]
 80011ce:	0010      	movs	r0, r2
 80011d0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80011d2:	46c0      	nop			@ (mov r8, r8)
 80011d4:	46c0      	nop			@ (mov r8, r8)
}
 80011d6:	46bd      	mov	sp, r7
 80011d8:	b004      	add	sp, #16
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	40020000 	.word	0x40020000

080011e0 <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2225      	movs	r2, #37	@ 0x25
 80011ec:	5c9b      	ldrb	r3, [r3, r2]
 80011ee:	b2db      	uxtb	r3, r3
}
 80011f0:	0018      	movs	r0, r3
 80011f2:	46bd      	mov	sp, r7
 80011f4:	b002      	add	sp, #8
 80011f6:	bd80      	pop	{r7, pc}

080011f8 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b084      	sub	sp, #16
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	60f8      	str	r0, [r7, #12]
 8001200:	60b9      	str	r1, [r7, #8]
 8001202:	607a      	str	r2, [r7, #4]
 8001204:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800120a:	68fa      	ldr	r2, [r7, #12]
 800120c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800120e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001214:	2b00      	cmp	r3, #0
 8001216:	d004      	beq.n	8001222 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800121c:	68fa      	ldr	r2, [r7, #12]
 800121e:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8001220:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 8001222:	4b14      	ldr	r3, [pc, #80]	@ (8001274 <DMA_SetConfig+0x7c>)
 8001224:	6859      	ldr	r1, [r3, #4]
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800122a:	221c      	movs	r2, #28
 800122c:	4013      	ands	r3, r2
 800122e:	2201      	movs	r2, #1
 8001230:	409a      	lsls	r2, r3
 8001232:	4b10      	ldr	r3, [pc, #64]	@ (8001274 <DMA_SetConfig+0x7c>)
 8001234:	430a      	orrs	r2, r1
 8001236:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	683a      	ldr	r2, [r7, #0]
 800123e:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	689b      	ldr	r3, [r3, #8]
 8001244:	2b10      	cmp	r3, #16
 8001246:	d108      	bne.n	800125a <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	687a      	ldr	r2, [r7, #4]
 800124e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	68ba      	ldr	r2, [r7, #8]
 8001256:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001258:	e007      	b.n	800126a <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	68ba      	ldr	r2, [r7, #8]
 8001260:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	687a      	ldr	r2, [r7, #4]
 8001268:	60da      	str	r2, [r3, #12]
}
 800126a:	46c0      	nop			@ (mov r8, r8)
 800126c:	46bd      	mov	sp, r7
 800126e:	b004      	add	sp, #16
 8001270:	bd80      	pop	{r7, pc}
 8001272:	46c0      	nop			@ (mov r8, r8)
 8001274:	40020000 	.word	0x40020000

08001278 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b084      	sub	sp, #16
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	001a      	movs	r2, r3
 8001286:	23ff      	movs	r3, #255	@ 0xff
 8001288:	4013      	ands	r3, r2
 800128a:	3b08      	subs	r3, #8
 800128c:	2114      	movs	r1, #20
 800128e:	0018      	movs	r0, r3
 8001290:	f7fe ff3a 	bl	8000108 <__udivsi3>
 8001294:	0003      	movs	r3, r0
 8001296:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
                                                             ((hdma->ChannelIndex >> 2U) * \
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800129c:	089b      	lsrs	r3, r3, #2
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
 800129e:	4a0a      	ldr	r2, [pc, #40]	@ (80012c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 80012a0:	4694      	mov	ip, r2
 80012a2:	4463      	add	r3, ip
 80012a4:	009b      	lsls	r3, r3, #2
 80012a6:	001a      	movs	r2, r3
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	645a      	str	r2, [r3, #68]	@ 0x44
                                                              ((uint32_t)DMAMUX1_Channel1 - \
                                                               (uint32_t)DMAMUX1_Channel0)));
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	4a07      	ldr	r2, [pc, #28]	@ (80012cc <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 80012b0:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	221c      	movs	r2, #28
 80012b6:	4013      	ands	r3, r2
 80012b8:	2201      	movs	r2, #1
 80012ba:	409a      	lsls	r2, r3
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 80012c0:	46c0      	nop			@ (mov r8, r8)
 80012c2:	46bd      	mov	sp, r7
 80012c4:	b004      	add	sp, #16
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	10008200 	.word	0x10008200
 80012cc:	40020880 	.word	0x40020880

080012d0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b084      	sub	sp, #16
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	22ff      	movs	r2, #255	@ 0xff
 80012de:	4013      	ands	r3, r2
 80012e0:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + \
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	4a0a      	ldr	r2, [pc, #40]	@ (8001310 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80012e6:	4694      	mov	ip, r2
 80012e8:	4463      	add	r3, ip
 80012ea:	009b      	lsls	r3, r3, #2
 80012ec:	001a      	movs	r2, r3
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	651a      	str	r2, [r3, #80]	@ 0x50
                                                                    ((request - 1U) * 4U)));

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4a07      	ldr	r2, [pc, #28]	@ (8001314 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80012f6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to 4, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	3b01      	subs	r3, #1
 80012fc:	2203      	movs	r2, #3
 80012fe:	4013      	ands	r3, r2
 8001300:	2201      	movs	r2, #1
 8001302:	409a      	lsls	r2, r3
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	659a      	str	r2, [r3, #88]	@ 0x58
}
 8001308:	46c0      	nop			@ (mov r8, r8)
 800130a:	46bd      	mov	sp, r7
 800130c:	b004      	add	sp, #16
 800130e:	bd80      	pop	{r7, pc}
 8001310:	1000823f 	.word	0x1000823f
 8001314:	40020940 	.word	0x40020940

08001318 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b086      	sub	sp, #24
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
 8001320:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8001322:	2300      	movs	r3, #0
 8001324:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001326:	e14d      	b.n	80015c4 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	2101      	movs	r1, #1
 800132e:	693a      	ldr	r2, [r7, #16]
 8001330:	4091      	lsls	r1, r2
 8001332:	000a      	movs	r2, r1
 8001334:	4013      	ands	r3, r2
 8001336:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d100      	bne.n	8001340 <HAL_GPIO_Init+0x28>
 800133e:	e13e      	b.n	80015be <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	2b02      	cmp	r3, #2
 8001346:	d003      	beq.n	8001350 <HAL_GPIO_Init+0x38>
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	2b12      	cmp	r3, #18
 800134e:	d125      	bne.n	800139c <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8001350:	693b      	ldr	r3, [r7, #16]
 8001352:	08da      	lsrs	r2, r3, #3
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	3208      	adds	r2, #8
 8001358:	0092      	lsls	r2, r2, #2
 800135a:	58d3      	ldr	r3, [r2, r3]
 800135c:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * 4U)) ;
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	2207      	movs	r2, #7
 8001362:	4013      	ands	r3, r2
 8001364:	009b      	lsls	r3, r3, #2
 8001366:	220f      	movs	r2, #15
 8001368:	409a      	lsls	r2, r3
 800136a:	0013      	movs	r3, r2
 800136c:	43da      	mvns	r2, r3
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	4013      	ands	r3, r2
 8001372:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	691b      	ldr	r3, [r3, #16]
 8001378:	220f      	movs	r2, #15
 800137a:	401a      	ands	r2, r3
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	2107      	movs	r1, #7
 8001380:	400b      	ands	r3, r1
 8001382:	009b      	lsls	r3, r3, #2
 8001384:	409a      	lsls	r2, r3
 8001386:	0013      	movs	r3, r2
 8001388:	697a      	ldr	r2, [r7, #20]
 800138a:	4313      	orrs	r3, r2
 800138c:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	08da      	lsrs	r2, r3, #3
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	3208      	adds	r2, #8
 8001396:	0092      	lsls	r2, r2, #2
 8001398:	6979      	ldr	r1, [r7, #20]
 800139a:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80013a2:	693b      	ldr	r3, [r7, #16]
 80013a4:	005b      	lsls	r3, r3, #1
 80013a6:	2203      	movs	r2, #3
 80013a8:	409a      	lsls	r2, r3
 80013aa:	0013      	movs	r3, r2
 80013ac:	43da      	mvns	r2, r3
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	4013      	ands	r3, r2
 80013b2:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	2203      	movs	r2, #3
 80013ba:	401a      	ands	r2, r3
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	005b      	lsls	r3, r3, #1
 80013c0:	409a      	lsls	r2, r3
 80013c2:	0013      	movs	r3, r2
 80013c4:	697a      	ldr	r2, [r7, #20]
 80013c6:	4313      	orrs	r3, r2
 80013c8:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	697a      	ldr	r2, [r7, #20]
 80013ce:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	2b01      	cmp	r3, #1
 80013d6:	d00b      	beq.n	80013f0 <HAL_GPIO_Init+0xd8>
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	2b02      	cmp	r3, #2
 80013de:	d007      	beq.n	80013f0 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80013e4:	2b11      	cmp	r3, #17
 80013e6:	d003      	beq.n	80013f0 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	2b12      	cmp	r3, #18
 80013ee:	d130      	bne.n	8001452 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	689b      	ldr	r3, [r3, #8]
 80013f4:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	005b      	lsls	r3, r3, #1
 80013fa:	2203      	movs	r2, #3
 80013fc:	409a      	lsls	r2, r3
 80013fe:	0013      	movs	r3, r2
 8001400:	43da      	mvns	r2, r3
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	4013      	ands	r3, r2
 8001406:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	68da      	ldr	r2, [r3, #12]
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	005b      	lsls	r3, r3, #1
 8001410:	409a      	lsls	r2, r3
 8001412:	0013      	movs	r3, r2
 8001414:	697a      	ldr	r2, [r7, #20]
 8001416:	4313      	orrs	r3, r2
 8001418:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	697a      	ldr	r2, [r7, #20]
 800141e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001426:	2201      	movs	r2, #1
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	409a      	lsls	r2, r3
 800142c:	0013      	movs	r3, r2
 800142e:	43da      	mvns	r2, r3
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	4013      	ands	r3, r2
 8001434:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	091b      	lsrs	r3, r3, #4
 800143c:	2201      	movs	r2, #1
 800143e:	401a      	ands	r2, r3
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	409a      	lsls	r2, r3
 8001444:	0013      	movs	r3, r2
 8001446:	697a      	ldr	r2, [r7, #20]
 8001448:	4313      	orrs	r3, r2
 800144a:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	697a      	ldr	r2, [r7, #20]
 8001450:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	2b03      	cmp	r3, #3
 8001458:	d017      	beq.n	800148a <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	68db      	ldr	r3, [r3, #12]
 800145e:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	005b      	lsls	r3, r3, #1
 8001464:	2203      	movs	r2, #3
 8001466:	409a      	lsls	r2, r3
 8001468:	0013      	movs	r3, r2
 800146a:	43da      	mvns	r2, r3
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	4013      	ands	r3, r2
 8001470:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	689a      	ldr	r2, [r3, #8]
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	005b      	lsls	r3, r3, #1
 800147a:	409a      	lsls	r2, r3
 800147c:	0013      	movs	r3, r2
 800147e:	697a      	ldr	r2, [r7, #20]
 8001480:	4313      	orrs	r3, r2
 8001482:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	697a      	ldr	r2, [r7, #20]
 8001488:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	685a      	ldr	r2, [r3, #4]
 800148e:	2380      	movs	r3, #128	@ 0x80
 8001490:	055b      	lsls	r3, r3, #21
 8001492:	4013      	ands	r3, r2
 8001494:	d100      	bne.n	8001498 <HAL_GPIO_Init+0x180>
 8001496:	e092      	b.n	80015be <HAL_GPIO_Init+0x2a6>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8001498:	4a50      	ldr	r2, [pc, #320]	@ (80015dc <HAL_GPIO_Init+0x2c4>)
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	089b      	lsrs	r3, r3, #2
 800149e:	3318      	adds	r3, #24
 80014a0:	009b      	lsls	r3, r3, #2
 80014a2:	589b      	ldr	r3, [r3, r2]
 80014a4:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	2203      	movs	r2, #3
 80014aa:	4013      	ands	r3, r2
 80014ac:	00db      	lsls	r3, r3, #3
 80014ae:	220f      	movs	r2, #15
 80014b0:	409a      	lsls	r2, r3
 80014b2:	0013      	movs	r3, r2
 80014b4:	43da      	mvns	r2, r3
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	4013      	ands	r3, r2
 80014ba:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 80014bc:	687a      	ldr	r2, [r7, #4]
 80014be:	23a0      	movs	r3, #160	@ 0xa0
 80014c0:	05db      	lsls	r3, r3, #23
 80014c2:	429a      	cmp	r2, r3
 80014c4:	d013      	beq.n	80014ee <HAL_GPIO_Init+0x1d6>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	4a45      	ldr	r2, [pc, #276]	@ (80015e0 <HAL_GPIO_Init+0x2c8>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d00d      	beq.n	80014ea <HAL_GPIO_Init+0x1d2>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	4a44      	ldr	r2, [pc, #272]	@ (80015e4 <HAL_GPIO_Init+0x2cc>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d007      	beq.n	80014e6 <HAL_GPIO_Init+0x1ce>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	4a43      	ldr	r2, [pc, #268]	@ (80015e8 <HAL_GPIO_Init+0x2d0>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d101      	bne.n	80014e2 <HAL_GPIO_Init+0x1ca>
 80014de:	2305      	movs	r3, #5
 80014e0:	e006      	b.n	80014f0 <HAL_GPIO_Init+0x1d8>
 80014e2:	2306      	movs	r3, #6
 80014e4:	e004      	b.n	80014f0 <HAL_GPIO_Init+0x1d8>
 80014e6:	2302      	movs	r3, #2
 80014e8:	e002      	b.n	80014f0 <HAL_GPIO_Init+0x1d8>
 80014ea:	2301      	movs	r3, #1
 80014ec:	e000      	b.n	80014f0 <HAL_GPIO_Init+0x1d8>
 80014ee:	2300      	movs	r3, #0
 80014f0:	693a      	ldr	r2, [r7, #16]
 80014f2:	2103      	movs	r1, #3
 80014f4:	400a      	ands	r2, r1
 80014f6:	00d2      	lsls	r2, r2, #3
 80014f8:	4093      	lsls	r3, r2
 80014fa:	697a      	ldr	r2, [r7, #20]
 80014fc:	4313      	orrs	r3, r2
 80014fe:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8001500:	4936      	ldr	r1, [pc, #216]	@ (80015dc <HAL_GPIO_Init+0x2c4>)
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	089b      	lsrs	r3, r3, #2
 8001506:	3318      	adds	r3, #24
 8001508:	009b      	lsls	r3, r3, #2
 800150a:	697a      	ldr	r2, [r7, #20]
 800150c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 800150e:	4a33      	ldr	r2, [pc, #204]	@ (80015dc <HAL_GPIO_Init+0x2c4>)
 8001510:	2380      	movs	r3, #128	@ 0x80
 8001512:	58d3      	ldr	r3, [r2, r3]
 8001514:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	43da      	mvns	r2, r3
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	4013      	ands	r3, r2
 800151e:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	685a      	ldr	r2, [r3, #4]
 8001524:	2380      	movs	r3, #128	@ 0x80
 8001526:	025b      	lsls	r3, r3, #9
 8001528:	4013      	ands	r3, r2
 800152a:	d003      	beq.n	8001534 <HAL_GPIO_Init+0x21c>
        {
          tmp |= iocurrent;
 800152c:	697a      	ldr	r2, [r7, #20]
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	4313      	orrs	r3, r2
 8001532:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8001534:	4929      	ldr	r1, [pc, #164]	@ (80015dc <HAL_GPIO_Init+0x2c4>)
 8001536:	2280      	movs	r2, #128	@ 0x80
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 800153c:	4a27      	ldr	r2, [pc, #156]	@ (80015dc <HAL_GPIO_Init+0x2c4>)
 800153e:	2384      	movs	r3, #132	@ 0x84
 8001540:	58d3      	ldr	r3, [r2, r3]
 8001542:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	43da      	mvns	r2, r3
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	4013      	ands	r3, r2
 800154c:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	685a      	ldr	r2, [r3, #4]
 8001552:	2380      	movs	r3, #128	@ 0x80
 8001554:	029b      	lsls	r3, r3, #10
 8001556:	4013      	ands	r3, r2
 8001558:	d003      	beq.n	8001562 <HAL_GPIO_Init+0x24a>
        {
          tmp |= iocurrent;
 800155a:	697a      	ldr	r2, [r7, #20]
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	4313      	orrs	r3, r2
 8001560:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8001562:	491e      	ldr	r1, [pc, #120]	@ (80015dc <HAL_GPIO_Init+0x2c4>)
 8001564:	2284      	movs	r2, #132	@ 0x84
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 800156a:	4b1c      	ldr	r3, [pc, #112]	@ (80015dc <HAL_GPIO_Init+0x2c4>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	43da      	mvns	r2, r3
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	4013      	ands	r3, r2
 8001578:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	685a      	ldr	r2, [r3, #4]
 800157e:	2380      	movs	r3, #128	@ 0x80
 8001580:	035b      	lsls	r3, r3, #13
 8001582:	4013      	ands	r3, r2
 8001584:	d003      	beq.n	800158e <HAL_GPIO_Init+0x276>
        {
          tmp |= iocurrent;
 8001586:	697a      	ldr	r2, [r7, #20]
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	4313      	orrs	r3, r2
 800158c:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 800158e:	4b13      	ldr	r3, [pc, #76]	@ (80015dc <HAL_GPIO_Init+0x2c4>)
 8001590:	697a      	ldr	r2, [r7, #20]
 8001592:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 8001594:	4b11      	ldr	r3, [pc, #68]	@ (80015dc <HAL_GPIO_Init+0x2c4>)
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	43da      	mvns	r2, r3
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	4013      	ands	r3, r2
 80015a2:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	685a      	ldr	r2, [r3, #4]
 80015a8:	2380      	movs	r3, #128	@ 0x80
 80015aa:	039b      	lsls	r3, r3, #14
 80015ac:	4013      	ands	r3, r2
 80015ae:	d003      	beq.n	80015b8 <HAL_GPIO_Init+0x2a0>
        {
          tmp |= iocurrent;
 80015b0:	697a      	ldr	r2, [r7, #20]
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	4313      	orrs	r3, r2
 80015b6:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 80015b8:	4b08      	ldr	r3, [pc, #32]	@ (80015dc <HAL_GPIO_Init+0x2c4>)
 80015ba:	697a      	ldr	r2, [r7, #20]
 80015bc:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	3301      	adds	r3, #1
 80015c2:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	681a      	ldr	r2, [r3, #0]
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	40da      	lsrs	r2, r3
 80015cc:	1e13      	subs	r3, r2, #0
 80015ce:	d000      	beq.n	80015d2 <HAL_GPIO_Init+0x2ba>
 80015d0:	e6aa      	b.n	8001328 <HAL_GPIO_Init+0x10>
  }
}
 80015d2:	46c0      	nop			@ (mov r8, r8)
 80015d4:	46c0      	nop			@ (mov r8, r8)
 80015d6:	46bd      	mov	sp, r7
 80015d8:	b006      	add	sp, #24
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	40021800 	.word	0x40021800
 80015e0:	50000400 	.word	0x50000400
 80015e4:	50000800 	.word	0x50000800
 80015e8:	50001400 	.word	0x50001400

080015ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
 80015f4:	0008      	movs	r0, r1
 80015f6:	0011      	movs	r1, r2
 80015f8:	1cbb      	adds	r3, r7, #2
 80015fa:	1c02      	adds	r2, r0, #0
 80015fc:	801a      	strh	r2, [r3, #0]
 80015fe:	1c7b      	adds	r3, r7, #1
 8001600:	1c0a      	adds	r2, r1, #0
 8001602:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001604:	1c7b      	adds	r3, r7, #1
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d004      	beq.n	8001616 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800160c:	1cbb      	adds	r3, r7, #2
 800160e:	881a      	ldrh	r2, [r3, #0]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001614:	e003      	b.n	800161e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001616:	1cbb      	adds	r3, r7, #2
 8001618:	881a      	ldrh	r2, [r3, #0]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800161e:	46c0      	nop			@ (mov r8, r8)
 8001620:	46bd      	mov	sp, r7
 8001622:	b002      	add	sp, #8
 8001624:	bd80      	pop	{r7, pc}

08001626 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for STM32C0 family
  * @param  GPIO_Pin: specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001626:	b580      	push	{r7, lr}
 8001628:	b084      	sub	sp, #16
 800162a:	af00      	add	r7, sp, #0
 800162c:	6078      	str	r0, [r7, #4]
 800162e:	000a      	movs	r2, r1
 8001630:	1cbb      	adds	r3, r7, #2
 8001632:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	695b      	ldr	r3, [r3, #20]
 8001638:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800163a:	1cbb      	adds	r3, r7, #2
 800163c:	881b      	ldrh	r3, [r3, #0]
 800163e:	68fa      	ldr	r2, [r7, #12]
 8001640:	4013      	ands	r3, r2
 8001642:	041a      	lsls	r2, r3, #16
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	43db      	mvns	r3, r3
 8001648:	1cb9      	adds	r1, r7, #2
 800164a:	8809      	ldrh	r1, [r1, #0]
 800164c:	400b      	ands	r3, r1
 800164e:	431a      	orrs	r2, r3
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	619a      	str	r2, [r3, #24]
}
 8001654:	46c0      	nop			@ (mov r8, r8)
 8001656:	46bd      	mov	sp, r7
 8001658:	b004      	add	sp, #16
 800165a:	bd80      	pop	{r7, pc}

0800165c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d101      	bne.n	800166e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800166a:	2301      	movs	r3, #1
 800166c:	e08f      	b.n	800178e <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2241      	movs	r2, #65	@ 0x41
 8001672:	5c9b      	ldrb	r3, [r3, r2]
 8001674:	b2db      	uxtb	r3, r3
 8001676:	2b00      	cmp	r3, #0
 8001678:	d107      	bne.n	800168a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2240      	movs	r2, #64	@ 0x40
 800167e:	2100      	movs	r1, #0
 8001680:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	0018      	movs	r0, r3
 8001686:	f7ff f897 	bl	80007b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2241      	movs	r2, #65	@ 0x41
 800168e:	2124      	movs	r1, #36	@ 0x24
 8001690:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	681a      	ldr	r2, [r3, #0]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	2101      	movs	r1, #1
 800169e:	438a      	bics	r2, r1
 80016a0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	685a      	ldr	r2, [r3, #4]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	493b      	ldr	r1, [pc, #236]	@ (8001798 <HAL_I2C_Init+0x13c>)
 80016ac:	400a      	ands	r2, r1
 80016ae:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	689a      	ldr	r2, [r3, #8]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4938      	ldr	r1, [pc, #224]	@ (800179c <HAL_I2C_Init+0x140>)
 80016bc:	400a      	ands	r2, r1
 80016be:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	68db      	ldr	r3, [r3, #12]
 80016c4:	2b01      	cmp	r3, #1
 80016c6:	d108      	bne.n	80016da <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	689a      	ldr	r2, [r3, #8]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	2180      	movs	r1, #128	@ 0x80
 80016d2:	0209      	lsls	r1, r1, #8
 80016d4:	430a      	orrs	r2, r1
 80016d6:	609a      	str	r2, [r3, #8]
 80016d8:	e007      	b.n	80016ea <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	689a      	ldr	r2, [r3, #8]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	2184      	movs	r1, #132	@ 0x84
 80016e4:	0209      	lsls	r1, r1, #8
 80016e6:	430a      	orrs	r2, r1
 80016e8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	68db      	ldr	r3, [r3, #12]
 80016ee:	2b02      	cmp	r3, #2
 80016f0:	d109      	bne.n	8001706 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	685a      	ldr	r2, [r3, #4]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	2180      	movs	r1, #128	@ 0x80
 80016fe:	0109      	lsls	r1, r1, #4
 8001700:	430a      	orrs	r2, r1
 8001702:	605a      	str	r2, [r3, #4]
 8001704:	e007      	b.n	8001716 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	685a      	ldr	r2, [r3, #4]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4923      	ldr	r1, [pc, #140]	@ (80017a0 <HAL_I2C_Init+0x144>)
 8001712:	400a      	ands	r2, r1
 8001714:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	685a      	ldr	r2, [r3, #4]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4920      	ldr	r1, [pc, #128]	@ (80017a4 <HAL_I2C_Init+0x148>)
 8001722:	430a      	orrs	r2, r1
 8001724:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	68da      	ldr	r2, [r3, #12]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	491a      	ldr	r1, [pc, #104]	@ (800179c <HAL_I2C_Init+0x140>)
 8001732:	400a      	ands	r2, r1
 8001734:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	691a      	ldr	r2, [r3, #16]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	695b      	ldr	r3, [r3, #20]
 800173e:	431a      	orrs	r2, r3
 8001740:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	699b      	ldr	r3, [r3, #24]
 8001746:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	430a      	orrs	r2, r1
 800174e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	69d9      	ldr	r1, [r3, #28]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6a1a      	ldr	r2, [r3, #32]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	430a      	orrs	r2, r1
 800175e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	2101      	movs	r1, #1
 800176c:	430a      	orrs	r2, r1
 800176e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2200      	movs	r2, #0
 8001774:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2241      	movs	r2, #65	@ 0x41
 800177a:	2120      	movs	r1, #32
 800177c:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2200      	movs	r2, #0
 8001782:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2242      	movs	r2, #66	@ 0x42
 8001788:	2100      	movs	r1, #0
 800178a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800178c:	2300      	movs	r3, #0
}
 800178e:	0018      	movs	r0, r3
 8001790:	46bd      	mov	sp, r7
 8001792:	b002      	add	sp, #8
 8001794:	bd80      	pop	{r7, pc}
 8001796:	46c0      	nop			@ (mov r8, r8)
 8001798:	f0ffffff 	.word	0xf0ffffff
 800179c:	ffff7fff 	.word	0xffff7fff
 80017a0:	fffff7ff 	.word	0xfffff7ff
 80017a4:	02008000 	.word	0x02008000

080017a8 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 80017a8:	b5b0      	push	{r4, r5, r7, lr}
 80017aa:	b08a      	sub	sp, #40	@ 0x28
 80017ac:	af02      	add	r7, sp, #8
 80017ae:	60f8      	str	r0, [r7, #12]
 80017b0:	0008      	movs	r0, r1
 80017b2:	607a      	str	r2, [r7, #4]
 80017b4:	0019      	movs	r1, r3
 80017b6:	230a      	movs	r3, #10
 80017b8:	18fb      	adds	r3, r7, r3
 80017ba:	1c02      	adds	r2, r0, #0
 80017bc:	801a      	strh	r2, [r3, #0]
 80017be:	2308      	movs	r3, #8
 80017c0:	18fb      	adds	r3, r7, r3
 80017c2:	1c0a      	adds	r2, r1, #0
 80017c4:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;
  uint32_t sizetoxfer = 0U;
 80017c6:	2300      	movs	r3, #0
 80017c8:	61bb      	str	r3, [r7, #24]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	2241      	movs	r2, #65	@ 0x41
 80017ce:	5c9b      	ldrb	r3, [r3, r2]
 80017d0:	b2db      	uxtb	r3, r3
 80017d2:	2b20      	cmp	r3, #32
 80017d4:	d000      	beq.n	80017d8 <HAL_I2C_Master_Transmit_DMA+0x30>
 80017d6:	e0ff      	b.n	80019d8 <HAL_I2C_Master_Transmit_DMA+0x230>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	699a      	ldr	r2, [r3, #24]
 80017de:	2380      	movs	r3, #128	@ 0x80
 80017e0:	021b      	lsls	r3, r3, #8
 80017e2:	401a      	ands	r2, r3
 80017e4:	2380      	movs	r3, #128	@ 0x80
 80017e6:	021b      	lsls	r3, r3, #8
 80017e8:	429a      	cmp	r2, r3
 80017ea:	d101      	bne.n	80017f0 <HAL_I2C_Master_Transmit_DMA+0x48>
    {
      return HAL_BUSY;
 80017ec:	2302      	movs	r3, #2
 80017ee:	e0f4      	b.n	80019da <HAL_I2C_Master_Transmit_DMA+0x232>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	2240      	movs	r2, #64	@ 0x40
 80017f4:	5c9b      	ldrb	r3, [r3, r2]
 80017f6:	2b01      	cmp	r3, #1
 80017f8:	d101      	bne.n	80017fe <HAL_I2C_Master_Transmit_DMA+0x56>
 80017fa:	2302      	movs	r3, #2
 80017fc:	e0ed      	b.n	80019da <HAL_I2C_Master_Transmit_DMA+0x232>
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	2240      	movs	r2, #64	@ 0x40
 8001802:	2101      	movs	r1, #1
 8001804:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	2241      	movs	r2, #65	@ 0x41
 800180a:	2121      	movs	r1, #33	@ 0x21
 800180c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	2242      	movs	r2, #66	@ 0x42
 8001812:	2110      	movs	r1, #16
 8001814:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	2200      	movs	r2, #0
 800181a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	687a      	ldr	r2, [r7, #4]
 8001820:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	2208      	movs	r2, #8
 8001826:	18ba      	adds	r2, r7, r2
 8001828:	8812      	ldrh	r2, [r2, #0]
 800182a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	4a6d      	ldr	r2, [pc, #436]	@ (80019e4 <HAL_I2C_Master_Transmit_DMA+0x23c>)
 8001830:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	4a6c      	ldr	r2, [pc, #432]	@ (80019e8 <HAL_I2C_Master_Transmit_DMA+0x240>)
 8001836:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800183c:	b29b      	uxth	r3, r3
 800183e:	2bff      	cmp	r3, #255	@ 0xff
 8001840:	d906      	bls.n	8001850 <HAL_I2C_Master_Transmit_DMA+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	22ff      	movs	r2, #255	@ 0xff
 8001846:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8001848:	2380      	movs	r3, #128	@ 0x80
 800184a:	045b      	lsls	r3, r3, #17
 800184c:	61fb      	str	r3, [r7, #28]
 800184e:	e007      	b.n	8001860 <HAL_I2C_Master_Transmit_DMA+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001854:	b29a      	uxth	r2, r3
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800185a:	2380      	movs	r3, #128	@ 0x80
 800185c:	049b      	lsls	r3, r3, #18
 800185e:	61fb      	str	r3, [r7, #28]
    }

    if (hi2c->XferSize > 0U)
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001864:	2b00      	cmp	r3, #0
 8001866:	d01a      	beq.n	800189e <HAL_I2C_Master_Transmit_DMA+0xf6>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800186c:	781a      	ldrb	r2, [r3, #0]
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001878:	1c5a      	adds	r2, r3, #1
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	625a      	str	r2, [r3, #36]	@ 0x24

      sizetoxfer = hi2c->XferSize;
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001882:	61bb      	str	r3, [r7, #24]
      hi2c->XferCount--;
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001888:	b29b      	uxth	r3, r3
 800188a:	3b01      	subs	r3, #1
 800188c:	b29a      	uxth	r2, r3
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001896:	3b01      	subs	r3, #1
 8001898:	b29a      	uxth	r2, r3
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    if (hi2c->XferSize > 0U)
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d100      	bne.n	80018a8 <HAL_I2C_Master_Transmit_DMA+0x100>
 80018a6:	e07c      	b.n	80019a2 <HAL_I2C_Master_Transmit_DMA+0x1fa>
    {
      if (hi2c->hdmatx != NULL)
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d025      	beq.n	80018fc <HAL_I2C_Master_Transmit_DMA+0x154>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80018b4:	4a4d      	ldr	r2, [pc, #308]	@ (80019ec <HAL_I2C_Master_Transmit_DMA+0x244>)
 80018b6:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80018bc:	4a4c      	ldr	r2, [pc, #304]	@ (80019f0 <HAL_I2C_Master_Transmit_DMA+0x248>)
 80018be:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80018c4:	2200      	movs	r2, #0
 80018c6:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80018cc:	2200      	movs	r2, #0
 80018ce:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018d8:	0019      	movs	r1, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	3328      	adds	r3, #40	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 80018e0:	001a      	movs	r2, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 80018e6:	2517      	movs	r5, #23
 80018e8:	197c      	adds	r4, r7, r5
 80018ea:	f7ff fac5 	bl	8000e78 <HAL_DMA_Start_IT>
 80018ee:	0003      	movs	r3, r0
 80018f0:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 80018f2:	197b      	adds	r3, r7, r5
 80018f4:	781b      	ldrb	r3, [r3, #0]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d13f      	bne.n	800197a <HAL_I2C_Master_Transmit_DMA+0x1d2>
 80018fa:	e013      	b.n	8001924 <HAL_I2C_Master_Transmit_DMA+0x17c>
        hi2c->State     = HAL_I2C_STATE_READY;
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	2241      	movs	r2, #65	@ 0x41
 8001900:	2120      	movs	r1, #32
 8001902:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	2242      	movs	r2, #66	@ 0x42
 8001908:	2100      	movs	r1, #0
 800190a:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001910:	2280      	movs	r2, #128	@ 0x80
 8001912:	431a      	orrs	r2, r3
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	2240      	movs	r2, #64	@ 0x40
 800191c:	2100      	movs	r1, #0
 800191e:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8001920:	2301      	movs	r3, #1
 8001922:	e05a      	b.n	80019da <HAL_I2C_Master_Transmit_DMA+0x232>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U),
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001928:	b2db      	uxtb	r3, r3
 800192a:	3301      	adds	r3, #1
 800192c:	b2da      	uxtb	r2, r3
 800192e:	69fc      	ldr	r4, [r7, #28]
 8001930:	230a      	movs	r3, #10
 8001932:	18fb      	adds	r3, r7, r3
 8001934:	8819      	ldrh	r1, [r3, #0]
 8001936:	68f8      	ldr	r0, [r7, #12]
 8001938:	4b2e      	ldr	r3, [pc, #184]	@ (80019f4 <HAL_I2C_Master_Transmit_DMA+0x24c>)
 800193a:	9300      	str	r3, [sp, #0]
 800193c:	0023      	movs	r3, r4
 800193e:	f001 fcb3 	bl	80032a8 <I2C_TransferConfig>
                           xfermode, I2C_GENERATE_START_WRITE);

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001946:	b29a      	uxth	r2, r3
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	b29a      	uxth	r2, r3
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	2240      	movs	r2, #64	@ 0x40
 8001958:	2100      	movs	r1, #0
 800195a:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	2110      	movs	r1, #16
 8001960:	0018      	movs	r0, r3
 8001962:	f001 fcdb 	bl	800331c <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	681a      	ldr	r2, [r3, #0]
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	2180      	movs	r1, #128	@ 0x80
 8001972:	01c9      	lsls	r1, r1, #7
 8001974:	430a      	orrs	r2, r1
 8001976:	601a      	str	r2, [r3, #0]
 8001978:	e02c      	b.n	80019d4 <HAL_I2C_Master_Transmit_DMA+0x22c>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	2241      	movs	r2, #65	@ 0x41
 800197e:	2120      	movs	r1, #32
 8001980:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	2242      	movs	r2, #66	@ 0x42
 8001986:	2100      	movs	r1, #0
 8001988:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800198e:	2210      	movs	r2, #16
 8001990:	431a      	orrs	r2, r3
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	2240      	movs	r2, #64	@ 0x40
 800199a:	2100      	movs	r1, #0
 800199c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800199e:	2301      	movs	r3, #1
 80019a0:	e01b      	b.n	80019da <HAL_I2C_Master_Transmit_DMA+0x232>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	4a14      	ldr	r2, [pc, #80]	@ (80019f8 <HAL_I2C_Master_Transmit_DMA+0x250>)
 80019a6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)sizetoxfer, I2C_AUTOEND_MODE,
 80019a8:	69bb      	ldr	r3, [r7, #24]
 80019aa:	b2da      	uxtb	r2, r3
 80019ac:	2380      	movs	r3, #128	@ 0x80
 80019ae:	049c      	lsls	r4, r3, #18
 80019b0:	230a      	movs	r3, #10
 80019b2:	18fb      	adds	r3, r7, r3
 80019b4:	8819      	ldrh	r1, [r3, #0]
 80019b6:	68f8      	ldr	r0, [r7, #12]
 80019b8:	4b0e      	ldr	r3, [pc, #56]	@ (80019f4 <HAL_I2C_Master_Transmit_DMA+0x24c>)
 80019ba:	9300      	str	r3, [sp, #0]
 80019bc:	0023      	movs	r3, r4
 80019be:	f001 fc73 	bl	80032a8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	2240      	movs	r2, #64	@ 0x40
 80019c6:	2100      	movs	r1, #0
 80019c8:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	2101      	movs	r1, #1
 80019ce:	0018      	movs	r0, r3
 80019d0:	f001 fca4 	bl	800331c <I2C_Enable_IRQ>
    }

    return HAL_OK;
 80019d4:	2300      	movs	r3, #0
 80019d6:	e000      	b.n	80019da <HAL_I2C_Master_Transmit_DMA+0x232>
  }
  else
  {
    return HAL_BUSY;
 80019d8:	2302      	movs	r3, #2
  }
}
 80019da:	0018      	movs	r0, r3
 80019dc:	46bd      	mov	sp, r7
 80019de:	b008      	add	sp, #32
 80019e0:	bdb0      	pop	{r4, r5, r7, pc}
 80019e2:	46c0      	nop			@ (mov r8, r8)
 80019e4:	ffff0000 	.word	0xffff0000
 80019e8:	08002101 	.word	0x08002101
 80019ec:	080030f9 	.word	0x080030f9
 80019f0:	08003239 	.word	0x08003239
 80019f4:	80002000 	.word	0x80002000
 80019f8:	08001c99 	.word	0x08001c99

080019fc <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 80019fc:	b5b0      	push	{r4, r5, r7, lr}
 80019fe:	b088      	sub	sp, #32
 8001a00:	af02      	add	r7, sp, #8
 8001a02:	60f8      	str	r0, [r7, #12]
 8001a04:	0008      	movs	r0, r1
 8001a06:	607a      	str	r2, [r7, #4]
 8001a08:	0019      	movs	r1, r3
 8001a0a:	230a      	movs	r3, #10
 8001a0c:	18fb      	adds	r3, r7, r3
 8001a0e:	1c02      	adds	r2, r0, #0
 8001a10:	801a      	strh	r2, [r3, #0]
 8001a12:	2308      	movs	r3, #8
 8001a14:	18fb      	adds	r3, r7, r3
 8001a16:	1c0a      	adds	r2, r1, #0
 8001a18:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	2241      	movs	r2, #65	@ 0x41
 8001a1e:	5c9b      	ldrb	r3, [r3, r2]
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	2b20      	cmp	r3, #32
 8001a24:	d000      	beq.n	8001a28 <HAL_I2C_Master_Receive_DMA+0x2c>
 8001a26:	e0dd      	b.n	8001be4 <HAL_I2C_Master_Receive_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	699a      	ldr	r2, [r3, #24]
 8001a2e:	2380      	movs	r3, #128	@ 0x80
 8001a30:	021b      	lsls	r3, r3, #8
 8001a32:	401a      	ands	r2, r3
 8001a34:	2380      	movs	r3, #128	@ 0x80
 8001a36:	021b      	lsls	r3, r3, #8
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	d101      	bne.n	8001a40 <HAL_I2C_Master_Receive_DMA+0x44>
    {
      return HAL_BUSY;
 8001a3c:	2302      	movs	r3, #2
 8001a3e:	e0d2      	b.n	8001be6 <HAL_I2C_Master_Receive_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	2240      	movs	r2, #64	@ 0x40
 8001a44:	5c9b      	ldrb	r3, [r3, r2]
 8001a46:	2b01      	cmp	r3, #1
 8001a48:	d101      	bne.n	8001a4e <HAL_I2C_Master_Receive_DMA+0x52>
 8001a4a:	2302      	movs	r3, #2
 8001a4c:	e0cb      	b.n	8001be6 <HAL_I2C_Master_Receive_DMA+0x1ea>
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	2240      	movs	r2, #64	@ 0x40
 8001a52:	2101      	movs	r1, #1
 8001a54:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	2241      	movs	r2, #65	@ 0x41
 8001a5a:	2122      	movs	r1, #34	@ 0x22
 8001a5c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	2242      	movs	r2, #66	@ 0x42
 8001a62:	2110      	movs	r1, #16
 8001a64:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	2200      	movs	r2, #0
 8001a6a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	687a      	ldr	r2, [r7, #4]
 8001a70:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	2208      	movs	r2, #8
 8001a76:	18ba      	adds	r2, r7, r2
 8001a78:	8812      	ldrh	r2, [r2, #0]
 8001a7a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	4a5c      	ldr	r2, [pc, #368]	@ (8001bf0 <HAL_I2C_Master_Receive_DMA+0x1f4>)
 8001a80:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	4a5b      	ldr	r2, [pc, #364]	@ (8001bf4 <HAL_I2C_Master_Receive_DMA+0x1f8>)
 8001a86:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a8c:	b29b      	uxth	r3, r3
 8001a8e:	2bff      	cmp	r3, #255	@ 0xff
 8001a90:	d906      	bls.n	8001aa0 <HAL_I2C_Master_Receive_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	22ff      	movs	r2, #255	@ 0xff
 8001a96:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8001a98:	2380      	movs	r3, #128	@ 0x80
 8001a9a:	045b      	lsls	r3, r3, #17
 8001a9c:	617b      	str	r3, [r7, #20]
 8001a9e:	e007      	b.n	8001ab0 <HAL_I2C_Master_Receive_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001aa4:	b29a      	uxth	r2, r3
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8001aaa:	2380      	movs	r3, #128	@ 0x80
 8001aac:	049b      	lsls	r3, r3, #18
 8001aae:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d100      	bne.n	8001aba <HAL_I2C_Master_Receive_DMA+0xbe>
 8001ab8:	e078      	b.n	8001bac <HAL_I2C_Master_Receive_DMA+0x1b0>
    {
      if (hi2c->hdmarx != NULL)
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d023      	beq.n	8001b0a <HAL_I2C_Master_Receive_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ac6:	4a4c      	ldr	r2, [pc, #304]	@ (8001bf8 <HAL_I2C_Master_Receive_DMA+0x1fc>)
 8001ac8:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ace:	4a4b      	ldr	r2, [pc, #300]	@ (8001bfc <HAL_I2C_Master_Receive_DMA+0x200>)
 8001ad0:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ade:	2200      	movs	r2, #0
 8001ae0:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	3324      	adds	r3, #36	@ 0x24
 8001aec:	0019      	movs	r1, r3
 8001aee:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8001af4:	2513      	movs	r5, #19
 8001af6:	197c      	adds	r4, r7, r5
 8001af8:	f7ff f9be 	bl	8000e78 <HAL_DMA_Start_IT>
 8001afc:	0003      	movs	r3, r0
 8001afe:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8001b00:	197b      	adds	r3, r7, r5
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d13d      	bne.n	8001b84 <HAL_I2C_Master_Receive_DMA+0x188>
 8001b08:	e013      	b.n	8001b32 <HAL_I2C_Master_Receive_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	2241      	movs	r2, #65	@ 0x41
 8001b0e:	2120      	movs	r1, #32
 8001b10:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	2242      	movs	r2, #66	@ 0x42
 8001b16:	2100      	movs	r1, #0
 8001b18:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b1e:	2280      	movs	r2, #128	@ 0x80
 8001b20:	431a      	orrs	r2, r3
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	2240      	movs	r2, #64	@ 0x40
 8001b2a:	2100      	movs	r1, #0
 8001b2c:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e059      	b.n	8001be6 <HAL_I2C_Master_Receive_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b36:	b2da      	uxtb	r2, r3
 8001b38:	697c      	ldr	r4, [r7, #20]
 8001b3a:	230a      	movs	r3, #10
 8001b3c:	18fb      	adds	r3, r7, r3
 8001b3e:	8819      	ldrh	r1, [r3, #0]
 8001b40:	68f8      	ldr	r0, [r7, #12]
 8001b42:	4b2f      	ldr	r3, [pc, #188]	@ (8001c00 <HAL_I2C_Master_Receive_DMA+0x204>)
 8001b44:	9300      	str	r3, [sp, #0]
 8001b46:	0023      	movs	r3, r4
 8001b48:	f001 fbae 	bl	80032a8 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b50:	b29a      	uxth	r2, r3
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b56:	1ad3      	subs	r3, r2, r3
 8001b58:	b29a      	uxth	r2, r3
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	2240      	movs	r2, #64	@ 0x40
 8001b62:	2100      	movs	r1, #0
 8001b64:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	2110      	movs	r1, #16
 8001b6a:	0018      	movs	r0, r3
 8001b6c:	f001 fbd6 	bl	800331c <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	2180      	movs	r1, #128	@ 0x80
 8001b7c:	0209      	lsls	r1, r1, #8
 8001b7e:	430a      	orrs	r2, r1
 8001b80:	601a      	str	r2, [r3, #0]
 8001b82:	e02d      	b.n	8001be0 <HAL_I2C_Master_Receive_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	2241      	movs	r2, #65	@ 0x41
 8001b88:	2120      	movs	r1, #32
 8001b8a:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	2242      	movs	r2, #66	@ 0x42
 8001b90:	2100      	movs	r1, #0
 8001b92:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b98:	2210      	movs	r2, #16
 8001b9a:	431a      	orrs	r2, r3
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	2240      	movs	r2, #64	@ 0x40
 8001ba4:	2100      	movs	r1, #0
 8001ba6:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	e01c      	b.n	8001be6 <HAL_I2C_Master_Receive_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	4a15      	ldr	r2, [pc, #84]	@ (8001c04 <HAL_I2C_Master_Receive_DMA+0x208>)
 8001bb0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bb6:	b2da      	uxtb	r2, r3
 8001bb8:	2380      	movs	r3, #128	@ 0x80
 8001bba:	049c      	lsls	r4, r3, #18
 8001bbc:	230a      	movs	r3, #10
 8001bbe:	18fb      	adds	r3, r7, r3
 8001bc0:	8819      	ldrh	r1, [r3, #0]
 8001bc2:	68f8      	ldr	r0, [r7, #12]
 8001bc4:	4b0e      	ldr	r3, [pc, #56]	@ (8001c00 <HAL_I2C_Master_Receive_DMA+0x204>)
 8001bc6:	9300      	str	r3, [sp, #0]
 8001bc8:	0023      	movs	r3, r4
 8001bca:	f001 fb6d 	bl	80032a8 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	2240      	movs	r2, #64	@ 0x40
 8001bd2:	2100      	movs	r1, #0
 8001bd4:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, RXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	2102      	movs	r1, #2
 8001bda:	0018      	movs	r0, r3
 8001bdc:	f001 fb9e 	bl	800331c <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8001be0:	2300      	movs	r3, #0
 8001be2:	e000      	b.n	8001be6 <HAL_I2C_Master_Receive_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001be4:	2302      	movs	r3, #2
  }
}
 8001be6:	0018      	movs	r0, r3
 8001be8:	46bd      	mov	sp, r7
 8001bea:	b006      	add	sp, #24
 8001bec:	bdb0      	pop	{r4, r5, r7, pc}
 8001bee:	46c0      	nop			@ (mov r8, r8)
 8001bf0:	ffff0000 	.word	0xffff0000
 8001bf4:	08002101 	.word	0x08002101
 8001bf8:	08003199 	.word	0x08003199
 8001bfc:	08003239 	.word	0x08003239
 8001c00:	80002400 	.word	0x80002400
 8001c04:	08001c99 	.word	0x08001c99

08001c08 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8001c10:	46c0      	nop			@ (mov r8, r8)
 8001c12:	46bd      	mov	sp, r7
 8001c14:	b002      	add	sp, #8
 8001c16:	bd80      	pop	{r7, pc}

08001c18 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8001c20:	46c0      	nop			@ (mov r8, r8)
 8001c22:	46bd      	mov	sp, r7
 8001c24:	b002      	add	sp, #8
 8001c26:	bd80      	pop	{r7, pc}

08001c28 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b082      	sub	sp, #8
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
 8001c30:	0008      	movs	r0, r1
 8001c32:	0011      	movs	r1, r2
 8001c34:	1cfb      	adds	r3, r7, #3
 8001c36:	1c02      	adds	r2, r0, #0
 8001c38:	701a      	strb	r2, [r3, #0]
 8001c3a:	003b      	movs	r3, r7
 8001c3c:	1c0a      	adds	r2, r1, #0
 8001c3e:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8001c40:	46c0      	nop			@ (mov r8, r8)
 8001c42:	46bd      	mov	sp, r7
 8001c44:	b002      	add	sp, #8
 8001c46:	bd80      	pop	{r7, pc}

08001c48 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8001c50:	46c0      	nop			@ (mov r8, r8)
 8001c52:	46bd      	mov	sp, r7
 8001c54:	b002      	add	sp, #8
 8001c56:	bd80      	pop	{r7, pc}

08001c58 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8001c60:	46c0      	nop			@ (mov r8, r8)
 8001c62:	46bd      	mov	sp, r7
 8001c64:	b002      	add	sp, #8
 8001c66:	bd80      	pop	{r7, pc}

08001c68 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8001c70:	46c0      	nop			@ (mov r8, r8)
 8001c72:	46bd      	mov	sp, r7
 8001c74:	b002      	add	sp, #8
 8001c76:	bd80      	pop	{r7, pc}

08001c78 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8001c80:	46c0      	nop			@ (mov r8, r8)
 8001c82:	46bd      	mov	sp, r7
 8001c84:	b002      	add	sp, #8
 8001c86:	bd80      	pop	{r7, pc}

08001c88 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001c90:	46c0      	nop			@ (mov r8, r8)
 8001c92:	46bd      	mov	sp, r7
 8001c94:	b002      	add	sp, #8
 8001c96:	bd80      	pop	{r7, pc}

08001c98 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8001c98:	b590      	push	{r4, r7, lr}
 8001c9a:	b089      	sub	sp, #36	@ 0x24
 8001c9c:	af02      	add	r7, sp, #8
 8001c9e:	60f8      	str	r0, [r7, #12]
 8001ca0:	60b9      	str	r1, [r7, #8]
 8001ca2:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	2240      	movs	r2, #64	@ 0x40
 8001cac:	5c9b      	ldrb	r3, [r3, r2]
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d101      	bne.n	8001cb6 <I2C_Master_ISR_IT+0x1e>
 8001cb2:	2302      	movs	r3, #2
 8001cb4:	e11d      	b.n	8001ef2 <I2C_Master_ISR_IT+0x25a>
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	2240      	movs	r2, #64	@ 0x40
 8001cba:	2101      	movs	r1, #1
 8001cbc:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	2210      	movs	r2, #16
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	d012      	beq.n	8001cec <I2C_Master_ISR_IT+0x54>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2210      	movs	r2, #16
 8001cca:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001ccc:	d00e      	beq.n	8001cec <I2C_Master_ISR_IT+0x54>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	2210      	movs	r2, #16
 8001cd4:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cda:	2204      	movs	r2, #4
 8001cdc:	431a      	orrs	r2, r3
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	0018      	movs	r0, r3
 8001ce6:	f001 f9e4 	bl	80030b2 <I2C_Flush_TXDR>
 8001cea:	e0ef      	b.n	8001ecc <I2C_Master_ISR_IT+0x234>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	2204      	movs	r2, #4
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	d021      	beq.n	8001d38 <I2C_Master_ISR_IT+0xa0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2204      	movs	r2, #4
 8001cf8:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001cfa:	d01d      	beq.n	8001d38 <I2C_Master_ISR_IT+0xa0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	2204      	movs	r2, #4
 8001d00:	4393      	bics	r3, r2
 8001d02:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d0e:	b2d2      	uxtb	r2, r2
 8001d10:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d16:	1c5a      	adds	r2, r3, #1
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d20:	3b01      	subs	r3, #1
 8001d22:	b29a      	uxth	r2, r3
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d2c:	b29b      	uxth	r3, r3
 8001d2e:	3b01      	subs	r3, #1
 8001d30:	b29a      	uxth	r2, r3
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001d36:	e0c9      	b.n	8001ecc <I2C_Master_ISR_IT+0x234>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	2240      	movs	r2, #64	@ 0x40
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	d126      	bne.n	8001d8e <I2C_Master_ISR_IT+0xf6>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	2202      	movs	r2, #2
 8001d44:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8001d46:	d022      	beq.n	8001d8e <I2C_Master_ISR_IT+0xf6>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2202      	movs	r2, #2
 8001d4c:	4013      	ands	r3, r2
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001d4e:	d01e      	beq.n	8001d8e <I2C_Master_ISR_IT+0xf6>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d54:	b29b      	uxth	r3, r3
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d100      	bne.n	8001d5c <I2C_Master_ISR_IT+0xc4>
 8001d5a:	e0b7      	b.n	8001ecc <I2C_Master_ISR_IT+0x234>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d60:	781a      	ldrb	r2, [r3, #0]
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d6c:	1c5a      	adds	r2, r3, #1
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d76:	3b01      	subs	r3, #1
 8001d78:	b29a      	uxth	r2, r3
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d82:	b29b      	uxth	r3, r3
 8001d84:	3b01      	subs	r3, #1
 8001d86:	b29a      	uxth	r2, r3
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->XferCount != 0U)
 8001d8c:	e09e      	b.n	8001ecc <I2C_Master_ISR_IT+0x234>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	2280      	movs	r2, #128	@ 0x80
 8001d92:	4013      	ands	r3, r2
 8001d94:	d100      	bne.n	8001d98 <I2C_Master_ISR_IT+0x100>
 8001d96:	e069      	b.n	8001e6c <I2C_Master_ISR_IT+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2240      	movs	r2, #64	@ 0x40
 8001d9c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8001d9e:	d065      	beq.n	8001e6c <I2C_Master_ISR_IT+0x1d4>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001da4:	b29b      	uxth	r3, r3
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d04a      	beq.n	8001e40 <I2C_Master_ISR_IT+0x1a8>
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d146      	bne.n	8001e40 <I2C_Master_ISR_IT+0x1a8>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	b29a      	uxth	r2, r3
 8001dba:	2112      	movs	r1, #18
 8001dbc:	187b      	adds	r3, r7, r1
 8001dbe:	0592      	lsls	r2, r2, #22
 8001dc0:	0d92      	lsrs	r2, r2, #22
 8001dc2:	801a      	strh	r2, [r3, #0]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001dc8:	b29b      	uxth	r3, r3
 8001dca:	2bff      	cmp	r3, #255	@ 0xff
 8001dcc:	d910      	bls.n	8001df0 <I2C_Master_ISR_IT+0x158>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	22ff      	movs	r2, #255	@ 0xff
 8001dd2:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001dd8:	b2da      	uxtb	r2, r3
 8001dda:	2380      	movs	r3, #128	@ 0x80
 8001ddc:	045c      	lsls	r4, r3, #17
 8001dde:	187b      	adds	r3, r7, r1
 8001de0:	8819      	ldrh	r1, [r3, #0]
 8001de2:	68f8      	ldr	r0, [r7, #12]
 8001de4:	2300      	movs	r3, #0
 8001de6:	9300      	str	r3, [sp, #0]
 8001de8:	0023      	movs	r3, r4
 8001dea:	f001 fa5d 	bl	80032a8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001dee:	e03c      	b.n	8001e6a <I2C_Master_ISR_IT+0x1d2>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001df4:	b29a      	uxth	r2, r3
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dfe:	4a3f      	ldr	r2, [pc, #252]	@ (8001efc <I2C_Master_ISR_IT+0x264>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d00e      	beq.n	8001e22 <I2C_Master_ISR_IT+0x18a>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e08:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8001e0e:	2312      	movs	r3, #18
 8001e10:	18fb      	adds	r3, r7, r3
 8001e12:	8819      	ldrh	r1, [r3, #0]
 8001e14:	68f8      	ldr	r0, [r7, #12]
 8001e16:	2300      	movs	r3, #0
 8001e18:	9300      	str	r3, [sp, #0]
 8001e1a:	0023      	movs	r3, r4
 8001e1c:	f001 fa44 	bl	80032a8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e20:	e023      	b.n	8001e6a <I2C_Master_ISR_IT+0x1d2>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e26:	b2da      	uxtb	r2, r3
 8001e28:	2380      	movs	r3, #128	@ 0x80
 8001e2a:	049c      	lsls	r4, r3, #18
 8001e2c:	2312      	movs	r3, #18
 8001e2e:	18fb      	adds	r3, r7, r3
 8001e30:	8819      	ldrh	r1, [r3, #0]
 8001e32:	68f8      	ldr	r0, [r7, #12]
 8001e34:	2300      	movs	r3, #0
 8001e36:	9300      	str	r3, [sp, #0]
 8001e38:	0023      	movs	r3, r4
 8001e3a:	f001 fa35 	bl	80032a8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e3e:	e014      	b.n	8001e6a <I2C_Master_ISR_IT+0x1d2>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	685a      	ldr	r2, [r3, #4]
 8001e46:	2380      	movs	r3, #128	@ 0x80
 8001e48:	049b      	lsls	r3, r3, #18
 8001e4a:	401a      	ands	r2, r3
 8001e4c:	2380      	movs	r3, #128	@ 0x80
 8001e4e:	049b      	lsls	r3, r3, #18
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d004      	beq.n	8001e5e <I2C_Master_ISR_IT+0x1c6>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	0018      	movs	r0, r3
 8001e58:	f000 fd04 	bl	8002864 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001e5c:	e036      	b.n	8001ecc <I2C_Master_ISR_IT+0x234>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	2140      	movs	r1, #64	@ 0x40
 8001e62:	0018      	movs	r0, r3
 8001e64:	f000 fffa 	bl	8002e5c <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001e68:	e030      	b.n	8001ecc <I2C_Master_ISR_IT+0x234>
 8001e6a:	e02f      	b.n	8001ecc <I2C_Master_ISR_IT+0x234>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	2240      	movs	r2, #64	@ 0x40
 8001e70:	4013      	ands	r3, r2
 8001e72:	d02b      	beq.n	8001ecc <I2C_Master_ISR_IT+0x234>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2240      	movs	r2, #64	@ 0x40
 8001e78:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8001e7a:	d027      	beq.n	8001ecc <I2C_Master_ISR_IT+0x234>
  {
    if (hi2c->XferCount == 0U)
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e80:	b29b      	uxth	r3, r3
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d11d      	bne.n	8001ec2 <I2C_Master_ISR_IT+0x22a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	685a      	ldr	r2, [r3, #4]
 8001e8c:	2380      	movs	r3, #128	@ 0x80
 8001e8e:	049b      	lsls	r3, r3, #18
 8001e90:	401a      	ands	r2, r3
 8001e92:	2380      	movs	r3, #128	@ 0x80
 8001e94:	049b      	lsls	r3, r3, #18
 8001e96:	429a      	cmp	r2, r3
 8001e98:	d018      	beq.n	8001ecc <I2C_Master_ISR_IT+0x234>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e9e:	4a17      	ldr	r2, [pc, #92]	@ (8001efc <I2C_Master_ISR_IT+0x264>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d109      	bne.n	8001eb8 <I2C_Master_ISR_IT+0x220>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	685a      	ldr	r2, [r3, #4]
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	2180      	movs	r1, #128	@ 0x80
 8001eb0:	01c9      	lsls	r1, r1, #7
 8001eb2:	430a      	orrs	r2, r1
 8001eb4:	605a      	str	r2, [r3, #4]
 8001eb6:	e009      	b.n	8001ecc <I2C_Master_ISR_IT+0x234>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	0018      	movs	r0, r3
 8001ebc:	f000 fcd2 	bl	8002864 <I2C_ITMasterSeqCplt>
 8001ec0:	e004      	b.n	8001ecc <I2C_Master_ISR_IT+0x234>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	2140      	movs	r1, #64	@ 0x40
 8001ec6:	0018      	movs	r0, r3
 8001ec8:	f000 ffc8 	bl	8002e5c <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	2220      	movs	r2, #32
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	d009      	beq.n	8001ee8 <I2C_Master_ISR_IT+0x250>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2220      	movs	r2, #32
 8001ed8:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001eda:	d005      	beq.n	8001ee8 <I2C_Master_ISR_IT+0x250>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8001edc:	697a      	ldr	r2, [r7, #20]
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	0011      	movs	r1, r2
 8001ee2:	0018      	movs	r0, r3
 8001ee4:	f000 fd64 	bl	80029b0 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	2240      	movs	r2, #64	@ 0x40
 8001eec:	2100      	movs	r1, #0
 8001eee:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001ef0:	2300      	movs	r3, #0
}
 8001ef2:	0018      	movs	r0, r3
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	b007      	add	sp, #28
 8001ef8:	bd90      	pop	{r4, r7, pc}
 8001efa:	46c0      	nop			@ (mov r8, r8)
 8001efc:	ffff0000 	.word	0xffff0000

08001f00 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b086      	sub	sp, #24
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	60f8      	str	r0, [r7, #12]
 8001f08:	60b9      	str	r1, [r7, #8]
 8001f0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f10:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	2240      	movs	r2, #64	@ 0x40
 8001f1a:	5c9b      	ldrb	r3, [r3, r2]
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	d101      	bne.n	8001f24 <I2C_Slave_ISR_IT+0x24>
 8001f20:	2302      	movs	r3, #2
 8001f22:	e0e6      	b.n	80020f2 <I2C_Slave_ISR_IT+0x1f2>
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	2240      	movs	r2, #64	@ 0x40
 8001f28:	2101      	movs	r1, #1
 8001f2a:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	2220      	movs	r2, #32
 8001f30:	4013      	ands	r3, r2
 8001f32:	d009      	beq.n	8001f48 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2220      	movs	r2, #32
 8001f38:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001f3a:	d005      	beq.n	8001f48 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8001f3c:	693a      	ldr	r2, [r7, #16]
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	0011      	movs	r1, r2
 8001f42:	0018      	movs	r0, r3
 8001f44:	f000 fe02 	bl	8002b4c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	2210      	movs	r2, #16
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	d052      	beq.n	8001ff6 <I2C_Slave_ISR_IT+0xf6>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2210      	movs	r2, #16
 8001f54:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001f56:	d04e      	beq.n	8001ff6 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f5c:	b29b      	uxth	r3, r3
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d12d      	bne.n	8001fbe <I2C_Slave_ISR_IT+0xbe>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	2241      	movs	r2, #65	@ 0x41
 8001f66:	5c9b      	ldrb	r3, [r3, r2]
 8001f68:	b2db      	uxtb	r3, r3
 8001f6a:	2b28      	cmp	r3, #40	@ 0x28
 8001f6c:	d10b      	bne.n	8001f86 <I2C_Slave_ISR_IT+0x86>
 8001f6e:	697a      	ldr	r2, [r7, #20]
 8001f70:	2380      	movs	r3, #128	@ 0x80
 8001f72:	049b      	lsls	r3, r3, #18
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d106      	bne.n	8001f86 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8001f78:	693a      	ldr	r2, [r7, #16]
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	0011      	movs	r1, r2
 8001f7e:	0018      	movs	r0, r3
 8001f80:	f000 ff14 	bl	8002dac <I2C_ITListenCplt>
 8001f84:	e036      	b.n	8001ff4 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	2241      	movs	r2, #65	@ 0x41
 8001f8a:	5c9b      	ldrb	r3, [r3, r2]
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	2b29      	cmp	r3, #41	@ 0x29
 8001f90:	d110      	bne.n	8001fb4 <I2C_Slave_ISR_IT+0xb4>
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	4a59      	ldr	r2, [pc, #356]	@ (80020fc <I2C_Slave_ISR_IT+0x1fc>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d00c      	beq.n	8001fb4 <I2C_Slave_ISR_IT+0xb4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	2210      	movs	r2, #16
 8001fa0:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	0018      	movs	r0, r3
 8001fa6:	f001 f884 	bl	80030b2 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	0018      	movs	r0, r3
 8001fae:	f000 fc9b 	bl	80028e8 <I2C_ITSlaveSeqCplt>
 8001fb2:	e01f      	b.n	8001ff4 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	2210      	movs	r2, #16
 8001fba:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8001fbc:	e091      	b.n	80020e2 <I2C_Slave_ISR_IT+0x1e2>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	2210      	movs	r2, #16
 8001fc4:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fca:	2204      	movs	r2, #4
 8001fcc:	431a      	orrs	r2, r3
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d005      	beq.n	8001fe4 <I2C_Slave_ISR_IT+0xe4>
 8001fd8:	697a      	ldr	r2, [r7, #20]
 8001fda:	2380      	movs	r3, #128	@ 0x80
 8001fdc:	045b      	lsls	r3, r3, #17
 8001fde:	429a      	cmp	r2, r3
 8001fe0:	d000      	beq.n	8001fe4 <I2C_Slave_ISR_IT+0xe4>
 8001fe2:	e07e      	b.n	80020e2 <I2C_Slave_ISR_IT+0x1e2>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	0011      	movs	r1, r2
 8001fec:	0018      	movs	r0, r3
 8001fee:	f000 ff35 	bl	8002e5c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8001ff2:	e076      	b.n	80020e2 <I2C_Slave_ISR_IT+0x1e2>
 8001ff4:	e075      	b.n	80020e2 <I2C_Slave_ISR_IT+0x1e2>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	2204      	movs	r2, #4
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	d02f      	beq.n	800205e <I2C_Slave_ISR_IT+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2204      	movs	r2, #4
 8002002:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002004:	d02b      	beq.n	800205e <I2C_Slave_ISR_IT+0x15e>
  {
    if (hi2c->XferCount > 0U)
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800200a:	b29b      	uxth	r3, r3
 800200c:	2b00      	cmp	r3, #0
 800200e:	d018      	beq.n	8002042 <I2C_Slave_ISR_IT+0x142>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800201a:	b2d2      	uxtb	r2, r2
 800201c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002022:	1c5a      	adds	r2, r3, #1
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800202c:	3b01      	subs	r3, #1
 800202e:	b29a      	uxth	r2, r3
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002038:	b29b      	uxth	r3, r3
 800203a:	3b01      	subs	r3, #1
 800203c:	b29a      	uxth	r2, r3
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002046:	b29b      	uxth	r3, r3
 8002048:	2b00      	cmp	r3, #0
 800204a:	d14c      	bne.n	80020e6 <I2C_Slave_ISR_IT+0x1e6>
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	4a2b      	ldr	r2, [pc, #172]	@ (80020fc <I2C_Slave_ISR_IT+0x1fc>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d048      	beq.n	80020e6 <I2C_Slave_ISR_IT+0x1e6>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	0018      	movs	r0, r3
 8002058:	f000 fc46 	bl	80028e8 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800205c:	e043      	b.n	80020e6 <I2C_Slave_ISR_IT+0x1e6>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	2208      	movs	r2, #8
 8002062:	4013      	ands	r3, r2
 8002064:	d00a      	beq.n	800207c <I2C_Slave_ISR_IT+0x17c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2208      	movs	r2, #8
 800206a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800206c:	d006      	beq.n	800207c <I2C_Slave_ISR_IT+0x17c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800206e:	693a      	ldr	r2, [r7, #16]
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	0011      	movs	r1, r2
 8002074:	0018      	movs	r0, r3
 8002076:	f000 fb51 	bl	800271c <I2C_ITAddrCplt>
 800207a:	e035      	b.n	80020e8 <I2C_Slave_ISR_IT+0x1e8>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	2202      	movs	r2, #2
 8002080:	4013      	ands	r3, r2
 8002082:	d031      	beq.n	80020e8 <I2C_Slave_ISR_IT+0x1e8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2202      	movs	r2, #2
 8002088:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800208a:	d02d      	beq.n	80020e8 <I2C_Slave_ISR_IT+0x1e8>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002090:	b29b      	uxth	r3, r3
 8002092:	2b00      	cmp	r3, #0
 8002094:	d018      	beq.n	80020c8 <I2C_Slave_ISR_IT+0x1c8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800209a:	781a      	ldrb	r2, [r3, #0]
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020a6:	1c5a      	adds	r2, r3, #1
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020b0:	b29b      	uxth	r3, r3
 80020b2:	3b01      	subs	r3, #1
 80020b4:	b29a      	uxth	r2, r3
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020be:	3b01      	subs	r3, #1
 80020c0:	b29a      	uxth	r2, r3
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	851a      	strh	r2, [r3, #40]	@ 0x28
 80020c6:	e00f      	b.n	80020e8 <I2C_Slave_ISR_IT+0x1e8>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80020c8:	697a      	ldr	r2, [r7, #20]
 80020ca:	2380      	movs	r3, #128	@ 0x80
 80020cc:	045b      	lsls	r3, r3, #17
 80020ce:	429a      	cmp	r2, r3
 80020d0:	d002      	beq.n	80020d8 <I2C_Slave_ISR_IT+0x1d8>
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d107      	bne.n	80020e8 <I2C_Slave_ISR_IT+0x1e8>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	0018      	movs	r0, r3
 80020dc:	f000 fc04 	bl	80028e8 <I2C_ITSlaveSeqCplt>
 80020e0:	e002      	b.n	80020e8 <I2C_Slave_ISR_IT+0x1e8>
    if (hi2c->XferCount == 0U)
 80020e2:	46c0      	nop			@ (mov r8, r8)
 80020e4:	e000      	b.n	80020e8 <I2C_Slave_ISR_IT+0x1e8>
    if ((hi2c->XferCount == 0U) && \
 80020e6:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	2240      	movs	r2, #64	@ 0x40
 80020ec:	2100      	movs	r1, #0
 80020ee:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80020f0:	2300      	movs	r3, #0
}
 80020f2:	0018      	movs	r0, r3
 80020f4:	46bd      	mov	sp, r7
 80020f6:	b006      	add	sp, #24
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	46c0      	nop			@ (mov r8, r8)
 80020fc:	ffff0000 	.word	0xffff0000

08002100 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8002100:	b590      	push	{r4, r7, lr}
 8002102:	b089      	sub	sp, #36	@ 0x24
 8002104:	af02      	add	r7, sp, #8
 8002106:	60f8      	str	r0, [r7, #12]
 8002108:	60b9      	str	r1, [r7, #8]
 800210a:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	2240      	movs	r2, #64	@ 0x40
 8002110:	5c9b      	ldrb	r3, [r3, r2]
 8002112:	2b01      	cmp	r3, #1
 8002114:	d101      	bne.n	800211a <I2C_Master_ISR_DMA+0x1a>
 8002116:	2302      	movs	r3, #2
 8002118:	e0e7      	b.n	80022ea <I2C_Master_ISR_DMA+0x1ea>
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	2240      	movs	r2, #64	@ 0x40
 800211e:	2101      	movs	r1, #1
 8002120:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002122:	68bb      	ldr	r3, [r7, #8]
 8002124:	2210      	movs	r2, #16
 8002126:	4013      	ands	r3, r2
 8002128:	d017      	beq.n	800215a <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2210      	movs	r2, #16
 800212e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002130:	d013      	beq.n	800215a <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	2210      	movs	r2, #16
 8002138:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800213e:	2204      	movs	r2, #4
 8002140:	431a      	orrs	r2, r3
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	2120      	movs	r1, #32
 800214a:	0018      	movs	r0, r3
 800214c:	f001 f8e6 	bl	800331c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	0018      	movs	r0, r3
 8002154:	f000 ffad 	bl	80030b2 <I2C_Flush_TXDR>
 8002158:	e0c2      	b.n	80022e0 <I2C_Master_ISR_DMA+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	2280      	movs	r2, #128	@ 0x80
 800215e:	4013      	ands	r3, r2
 8002160:	d100      	bne.n	8002164 <I2C_Master_ISR_DMA+0x64>
 8002162:	e07c      	b.n	800225e <I2C_Master_ISR_DMA+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2240      	movs	r2, #64	@ 0x40
 8002168:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800216a:	d100      	bne.n	800216e <I2C_Master_ISR_DMA+0x6e>
 800216c:	e077      	b.n	800225e <I2C_Master_ISR_DMA+0x15e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	2140      	movs	r1, #64	@ 0x40
 800217a:	438a      	bics	r2, r1
 800217c:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002182:	b29b      	uxth	r3, r3
 8002184:	2b00      	cmp	r3, #0
 8002186:	d055      	beq.n	8002234 <I2C_Master_ISR_DMA+0x134>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	b29a      	uxth	r2, r3
 8002190:	2312      	movs	r3, #18
 8002192:	18fb      	adds	r3, r7, r3
 8002194:	0592      	lsls	r2, r2, #22
 8002196:	0d92      	lsrs	r2, r2, #22
 8002198:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800219e:	b29b      	uxth	r3, r3
 80021a0:	2bff      	cmp	r3, #255	@ 0xff
 80021a2:	d906      	bls.n	80021b2 <I2C_Master_ISR_DMA+0xb2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	22ff      	movs	r2, #255	@ 0xff
 80021a8:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 80021aa:	2380      	movs	r3, #128	@ 0x80
 80021ac:	045b      	lsls	r3, r3, #17
 80021ae:	617b      	str	r3, [r7, #20]
 80021b0:	e010      	b.n	80021d4 <I2C_Master_ISR_DMA+0xd4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021b6:	b29a      	uxth	r2, r3
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021c0:	4a4c      	ldr	r2, [pc, #304]	@ (80022f4 <I2C_Master_ISR_DMA+0x1f4>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d003      	beq.n	80021ce <I2C_Master_ISR_DMA+0xce>
        {
          xfermode = hi2c->XferOptions;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021ca:	617b      	str	r3, [r7, #20]
 80021cc:	e002      	b.n	80021d4 <I2C_Master_ISR_DMA+0xd4>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 80021ce:	2380      	movs	r3, #128	@ 0x80
 80021d0:	049b      	lsls	r3, r3, #18
 80021d2:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021d8:	b2da      	uxtb	r2, r3
 80021da:	697c      	ldr	r4, [r7, #20]
 80021dc:	2312      	movs	r3, #18
 80021de:	18fb      	adds	r3, r7, r3
 80021e0:	8819      	ldrh	r1, [r3, #0]
 80021e2:	68f8      	ldr	r0, [r7, #12]
 80021e4:	2300      	movs	r3, #0
 80021e6:	9300      	str	r3, [sp, #0]
 80021e8:	0023      	movs	r3, r4
 80021ea:	f001 f85d 	bl	80032a8 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021f2:	b29a      	uxth	r2, r3
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021f8:	1ad3      	subs	r3, r2, r3
 80021fa:	b29a      	uxth	r2, r3
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	2241      	movs	r2, #65	@ 0x41
 8002204:	5c9b      	ldrb	r3, [r3, r2]
 8002206:	b2db      	uxtb	r3, r3
 8002208:	2b22      	cmp	r3, #34	@ 0x22
 800220a:	d109      	bne.n	8002220 <I2C_Master_ISR_DMA+0x120>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	2180      	movs	r1, #128	@ 0x80
 8002218:	0209      	lsls	r1, r1, #8
 800221a:	430a      	orrs	r2, r1
 800221c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800221e:	e05f      	b.n	80022e0 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	2180      	movs	r1, #128	@ 0x80
 800222c:	01c9      	lsls	r1, r1, #7
 800222e:	430a      	orrs	r2, r1
 8002230:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002232:	e055      	b.n	80022e0 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	685a      	ldr	r2, [r3, #4]
 800223a:	2380      	movs	r3, #128	@ 0x80
 800223c:	049b      	lsls	r3, r3, #18
 800223e:	401a      	ands	r2, r3
 8002240:	2380      	movs	r3, #128	@ 0x80
 8002242:	049b      	lsls	r3, r3, #18
 8002244:	429a      	cmp	r2, r3
 8002246:	d004      	beq.n	8002252 <I2C_Master_ISR_DMA+0x152>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	0018      	movs	r0, r3
 800224c:	f000 fb0a 	bl	8002864 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8002250:	e046      	b.n	80022e0 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	2140      	movs	r1, #64	@ 0x40
 8002256:	0018      	movs	r0, r3
 8002258:	f000 fe00 	bl	8002e5c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800225c:	e040      	b.n	80022e0 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	2240      	movs	r2, #64	@ 0x40
 8002262:	4013      	ands	r3, r2
 8002264:	d02c      	beq.n	80022c0 <I2C_Master_ISR_DMA+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2240      	movs	r2, #64	@ 0x40
 800226a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800226c:	d028      	beq.n	80022c0 <I2C_Master_ISR_DMA+0x1c0>
  {
    if (hi2c->XferCount == 0U)
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002272:	b29b      	uxth	r3, r3
 8002274:	2b00      	cmp	r3, #0
 8002276:	d11d      	bne.n	80022b4 <I2C_Master_ISR_DMA+0x1b4>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	685a      	ldr	r2, [r3, #4]
 800227e:	2380      	movs	r3, #128	@ 0x80
 8002280:	049b      	lsls	r3, r3, #18
 8002282:	401a      	ands	r2, r3
 8002284:	2380      	movs	r3, #128	@ 0x80
 8002286:	049b      	lsls	r3, r3, #18
 8002288:	429a      	cmp	r2, r3
 800228a:	d028      	beq.n	80022de <I2C_Master_ISR_DMA+0x1de>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002290:	4a18      	ldr	r2, [pc, #96]	@ (80022f4 <I2C_Master_ISR_DMA+0x1f4>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d109      	bne.n	80022aa <I2C_Master_ISR_DMA+0x1aa>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	685a      	ldr	r2, [r3, #4]
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	2180      	movs	r1, #128	@ 0x80
 80022a2:	01c9      	lsls	r1, r1, #7
 80022a4:	430a      	orrs	r2, r1
 80022a6:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 80022a8:	e019      	b.n	80022de <I2C_Master_ISR_DMA+0x1de>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	0018      	movs	r0, r3
 80022ae:	f000 fad9 	bl	8002864 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 80022b2:	e014      	b.n	80022de <I2C_Master_ISR_DMA+0x1de>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	2140      	movs	r1, #64	@ 0x40
 80022b8:	0018      	movs	r0, r3
 80022ba:	f000 fdcf 	bl	8002e5c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80022be:	e00e      	b.n	80022de <I2C_Master_ISR_DMA+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	2220      	movs	r2, #32
 80022c4:	4013      	ands	r3, r2
 80022c6:	d00b      	beq.n	80022e0 <I2C_Master_ISR_DMA+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2220      	movs	r2, #32
 80022cc:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80022ce:	d007      	beq.n	80022e0 <I2C_Master_ISR_DMA+0x1e0>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80022d0:	68ba      	ldr	r2, [r7, #8]
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	0011      	movs	r1, r2
 80022d6:	0018      	movs	r0, r3
 80022d8:	f000 fb6a 	bl	80029b0 <I2C_ITMasterCplt>
 80022dc:	e000      	b.n	80022e0 <I2C_Master_ISR_DMA+0x1e0>
    if (hi2c->XferCount == 0U)
 80022de:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	2240      	movs	r2, #64	@ 0x40
 80022e4:	2100      	movs	r1, #0
 80022e6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80022e8:	2300      	movs	r3, #0
}
 80022ea:	0018      	movs	r0, r3
 80022ec:	46bd      	mov	sp, r7
 80022ee:	b007      	add	sp, #28
 80022f0:	bd90      	pop	{r4, r7, pc}
 80022f2:	46c0      	nop			@ (mov r8, r8)
 80022f4:	ffff0000 	.word	0xffff0000

080022f8 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 80022f8:	b590      	push	{r4, r7, lr}
 80022fa:	b089      	sub	sp, #36	@ 0x24
 80022fc:	af02      	add	r7, sp, #8
 80022fe:	60f8      	str	r0, [r7, #12]
 8002300:	60b9      	str	r1, [r7, #8]
 8002302:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8002304:	4b90      	ldr	r3, [pc, #576]	@ (8002548 <I2C_Mem_ISR_DMA+0x250>)
 8002306:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	2240      	movs	r2, #64	@ 0x40
 800230c:	5c9b      	ldrb	r3, [r3, r2]
 800230e:	2b01      	cmp	r3, #1
 8002310:	d101      	bne.n	8002316 <I2C_Mem_ISR_DMA+0x1e>
 8002312:	2302      	movs	r3, #2
 8002314:	e113      	b.n	800253e <I2C_Mem_ISR_DMA+0x246>
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	2240      	movs	r2, #64	@ 0x40
 800231a:	2101      	movs	r1, #1
 800231c:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	2210      	movs	r2, #16
 8002322:	4013      	ands	r3, r2
 8002324:	d017      	beq.n	8002356 <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2210      	movs	r2, #16
 800232a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800232c:	d013      	beq.n	8002356 <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	2210      	movs	r2, #16
 8002334:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800233a:	2204      	movs	r2, #4
 800233c:	431a      	orrs	r2, r3
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	2120      	movs	r1, #32
 8002346:	0018      	movs	r0, r3
 8002348:	f000 ffe8 	bl	800331c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	0018      	movs	r0, r3
 8002350:	f000 feaf 	bl	80030b2 <I2C_Flush_TXDR>
 8002354:	e0ee      	b.n	8002534 <I2C_Mem_ISR_DMA+0x23c>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	2202      	movs	r2, #2
 800235a:	4013      	ands	r3, r2
 800235c:	d00d      	beq.n	800237a <I2C_Mem_ISR_DMA+0x82>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2202      	movs	r2, #2
 8002362:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002364:	d009      	beq.n	800237a <I2C_Mem_ISR_DMA+0x82>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	68fa      	ldr	r2, [r7, #12]
 800236c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800236e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	2201      	movs	r2, #1
 8002374:	4252      	negs	r2, r2
 8002376:	651a      	str	r2, [r3, #80]	@ 0x50
 8002378:	e0dc      	b.n	8002534 <I2C_Mem_ISR_DMA+0x23c>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	2280      	movs	r2, #128	@ 0x80
 800237e:	4013      	ands	r3, r2
 8002380:	d063      	beq.n	800244a <I2C_Mem_ISR_DMA+0x152>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2240      	movs	r2, #64	@ 0x40
 8002386:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002388:	d05f      	beq.n	800244a <I2C_Mem_ISR_DMA+0x152>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	2101      	movs	r1, #1
 800238e:	0018      	movs	r0, r3
 8002390:	f001 f84e 	bl	8003430 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	2110      	movs	r1, #16
 8002398:	0018      	movs	r0, r3
 800239a:	f000 ffbf 	bl	800331c <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023a2:	b29b      	uxth	r3, r3
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d04a      	beq.n	800243e <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023ac:	b29b      	uxth	r3, r3
 80023ae:	2bff      	cmp	r3, #255	@ 0xff
 80023b0:	d910      	bls.n	80023d4 <I2C_Mem_ISR_DMA+0xdc>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	22ff      	movs	r2, #255	@ 0xff
 80023b6:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023bc:	b299      	uxth	r1, r3
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023c2:	b2da      	uxtb	r2, r3
 80023c4:	2380      	movs	r3, #128	@ 0x80
 80023c6:	045b      	lsls	r3, r3, #17
 80023c8:	68f8      	ldr	r0, [r7, #12]
 80023ca:	2400      	movs	r4, #0
 80023cc:	9400      	str	r4, [sp, #0]
 80023ce:	f000 ff6b 	bl	80032a8 <I2C_TransferConfig>
 80023d2:	e011      	b.n	80023f8 <I2C_Mem_ISR_DMA+0x100>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023d8:	b29a      	uxth	r2, r3
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023e2:	b299      	uxth	r1, r3
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023e8:	b2da      	uxtb	r2, r3
 80023ea:	2380      	movs	r3, #128	@ 0x80
 80023ec:	049b      	lsls	r3, r3, #18
 80023ee:	68f8      	ldr	r0, [r7, #12]
 80023f0:	2400      	movs	r4, #0
 80023f2:	9400      	str	r4, [sp, #0]
 80023f4:	f000 ff58 	bl	80032a8 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023fc:	b29a      	uxth	r2, r3
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002402:	1ad3      	subs	r3, r2, r3
 8002404:	b29a      	uxth	r2, r3
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	2241      	movs	r2, #65	@ 0x41
 800240e:	5c9b      	ldrb	r3, [r3, r2]
 8002410:	b2db      	uxtb	r3, r3
 8002412:	2b22      	cmp	r3, #34	@ 0x22
 8002414:	d109      	bne.n	800242a <I2C_Mem_ISR_DMA+0x132>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	2180      	movs	r1, #128	@ 0x80
 8002422:	0209      	lsls	r1, r1, #8
 8002424:	430a      	orrs	r2, r1
 8002426:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002428:	e084      	b.n	8002534 <I2C_Mem_ISR_DMA+0x23c>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	2180      	movs	r1, #128	@ 0x80
 8002436:	01c9      	lsls	r1, r1, #7
 8002438:	430a      	orrs	r2, r1
 800243a:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800243c:	e07a      	b.n	8002534 <I2C_Mem_ISR_DMA+0x23c>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	2140      	movs	r1, #64	@ 0x40
 8002442:	0018      	movs	r0, r3
 8002444:	f000 fd0a 	bl	8002e5c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8002448:	e074      	b.n	8002534 <I2C_Mem_ISR_DMA+0x23c>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	2240      	movs	r2, #64	@ 0x40
 800244e:	4013      	ands	r3, r2
 8002450:	d062      	beq.n	8002518 <I2C_Mem_ISR_DMA+0x220>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2240      	movs	r2, #64	@ 0x40
 8002456:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002458:	d05e      	beq.n	8002518 <I2C_Mem_ISR_DMA+0x220>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	2101      	movs	r1, #1
 800245e:	0018      	movs	r0, r3
 8002460:	f000 ffe6 	bl	8003430 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	2110      	movs	r1, #16
 8002468:	0018      	movs	r0, r3
 800246a:	f000 ff57 	bl	800331c <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	2241      	movs	r2, #65	@ 0x41
 8002472:	5c9b      	ldrb	r3, [r3, r2]
 8002474:	b2db      	uxtb	r3, r3
 8002476:	2b22      	cmp	r3, #34	@ 0x22
 8002478:	d101      	bne.n	800247e <I2C_Mem_ISR_DMA+0x186>
    {
      direction = I2C_GENERATE_START_READ;
 800247a:	4b34      	ldr	r3, [pc, #208]	@ (800254c <I2C_Mem_ISR_DMA+0x254>)
 800247c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002482:	b29b      	uxth	r3, r3
 8002484:	2bff      	cmp	r3, #255	@ 0xff
 8002486:	d911      	bls.n	80024ac <I2C_Mem_ISR_DMA+0x1b4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	22ff      	movs	r2, #255	@ 0xff
 800248c:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002492:	b299      	uxth	r1, r3
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002498:	b2da      	uxtb	r2, r3
 800249a:	2380      	movs	r3, #128	@ 0x80
 800249c:	045c      	lsls	r4, r3, #17
 800249e:	68f8      	ldr	r0, [r7, #12]
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	9300      	str	r3, [sp, #0]
 80024a4:	0023      	movs	r3, r4
 80024a6:	f000 feff 	bl	80032a8 <I2C_TransferConfig>
 80024aa:	e012      	b.n	80024d2 <I2C_Mem_ISR_DMA+0x1da>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024b0:	b29a      	uxth	r2, r3
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024ba:	b299      	uxth	r1, r3
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024c0:	b2da      	uxtb	r2, r3
 80024c2:	2380      	movs	r3, #128	@ 0x80
 80024c4:	049c      	lsls	r4, r3, #18
 80024c6:	68f8      	ldr	r0, [r7, #12]
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	9300      	str	r3, [sp, #0]
 80024cc:	0023      	movs	r3, r4
 80024ce:	f000 feeb 	bl	80032a8 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024d6:	b29a      	uxth	r2, r3
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	b29a      	uxth	r2, r3
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	2241      	movs	r2, #65	@ 0x41
 80024e8:	5c9b      	ldrb	r3, [r3, r2]
 80024ea:	b2db      	uxtb	r3, r3
 80024ec:	2b22      	cmp	r3, #34	@ 0x22
 80024ee:	d109      	bne.n	8002504 <I2C_Mem_ISR_DMA+0x20c>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	2180      	movs	r1, #128	@ 0x80
 80024fc:	0209      	lsls	r1, r1, #8
 80024fe:	430a      	orrs	r2, r1
 8002500:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002502:	e017      	b.n	8002534 <I2C_Mem_ISR_DMA+0x23c>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	2180      	movs	r1, #128	@ 0x80
 8002510:	01c9      	lsls	r1, r1, #7
 8002512:	430a      	orrs	r2, r1
 8002514:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002516:	e00d      	b.n	8002534 <I2C_Mem_ISR_DMA+0x23c>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	2220      	movs	r2, #32
 800251c:	4013      	ands	r3, r2
 800251e:	d009      	beq.n	8002534 <I2C_Mem_ISR_DMA+0x23c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2220      	movs	r2, #32
 8002524:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002526:	d005      	beq.n	8002534 <I2C_Mem_ISR_DMA+0x23c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8002528:	68ba      	ldr	r2, [r7, #8]
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	0011      	movs	r1, r2
 800252e:	0018      	movs	r0, r3
 8002530:	f000 fa3e 	bl	80029b0 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2240      	movs	r2, #64	@ 0x40
 8002538:	2100      	movs	r1, #0
 800253a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800253c:	2300      	movs	r3, #0
}
 800253e:	0018      	movs	r0, r3
 8002540:	46bd      	mov	sp, r7
 8002542:	b007      	add	sp, #28
 8002544:	bd90      	pop	{r4, r7, pc}
 8002546:	46c0      	nop			@ (mov r8, r8)
 8002548:	80002000 	.word	0x80002000
 800254c:	80002400 	.word	0x80002400

08002550 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b088      	sub	sp, #32
 8002554:	af00      	add	r7, sp, #0
 8002556:	60f8      	str	r0, [r7, #12]
 8002558:	60b9      	str	r1, [r7, #8]
 800255a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002560:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8002562:	2300      	movs	r3, #0
 8002564:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	2240      	movs	r2, #64	@ 0x40
 800256a:	5c9b      	ldrb	r3, [r3, r2]
 800256c:	2b01      	cmp	r3, #1
 800256e:	d101      	bne.n	8002574 <I2C_Slave_ISR_DMA+0x24>
 8002570:	2302      	movs	r3, #2
 8002572:	e0cd      	b.n	8002710 <I2C_Slave_ISR_DMA+0x1c0>
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	2240      	movs	r2, #64	@ 0x40
 8002578:	2101      	movs	r1, #1
 800257a:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	2220      	movs	r2, #32
 8002580:	4013      	ands	r3, r2
 8002582:	d009      	beq.n	8002598 <I2C_Slave_ISR_DMA+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2220      	movs	r2, #32
 8002588:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800258a:	d005      	beq.n	8002598 <I2C_Slave_ISR_DMA+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 800258c:	68ba      	ldr	r2, [r7, #8]
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	0011      	movs	r1, r2
 8002592:	0018      	movs	r0, r3
 8002594:	f000 fada 	bl	8002b4c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	2210      	movs	r2, #16
 800259c:	4013      	ands	r3, r2
 800259e:	d100      	bne.n	80025a2 <I2C_Slave_ISR_DMA+0x52>
 80025a0:	e0a3      	b.n	80026ea <I2C_Slave_ISR_DMA+0x19a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2210      	movs	r2, #16
 80025a6:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80025a8:	d100      	bne.n	80025ac <I2C_Slave_ISR_DMA+0x5c>
 80025aa:	e09e      	b.n	80026ea <I2C_Slave_ISR_DMA+0x19a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80025ac:	687a      	ldr	r2, [r7, #4]
 80025ae:	2380      	movs	r3, #128	@ 0x80
 80025b0:	01db      	lsls	r3, r3, #7
 80025b2:	4013      	ands	r3, r2
 80025b4:	d105      	bne.n	80025c2 <I2C_Slave_ISR_DMA+0x72>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 80025b6:	687a      	ldr	r2, [r7, #4]
 80025b8:	2380      	movs	r3, #128	@ 0x80
 80025ba:	021b      	lsls	r3, r3, #8
 80025bc:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80025be:	d100      	bne.n	80025c2 <I2C_Slave_ISR_DMA+0x72>
 80025c0:	e08c      	b.n	80026dc <I2C_Slave_ISR_DMA+0x18c>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d00c      	beq.n	80025e4 <I2C_Slave_ISR_DMA+0x94>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 80025ca:	687a      	ldr	r2, [r7, #4]
 80025cc:	2380      	movs	r3, #128	@ 0x80
 80025ce:	021b      	lsls	r3, r3, #8
 80025d0:	4013      	ands	r3, r2
 80025d2:	d007      	beq.n	80025e4 <I2C_Slave_ISR_DMA+0x94>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d101      	bne.n	80025e4 <I2C_Slave_ISR_DMA+0x94>
          {
            treatdmanack = 1U;
 80025e0:	2301      	movs	r3, #1
 80025e2:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d00c      	beq.n	8002606 <I2C_Slave_ISR_DMA+0xb6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 80025ec:	687a      	ldr	r2, [r7, #4]
 80025ee:	2380      	movs	r3, #128	@ 0x80
 80025f0:	01db      	lsls	r3, r3, #7
 80025f2:	4013      	ands	r3, r2
 80025f4:	d007      	beq.n	8002606 <I2C_Slave_ISR_DMA+0xb6>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d101      	bne.n	8002606 <I2C_Slave_ISR_DMA+0xb6>
          {
            treatdmanack = 1U;
 8002602:	2301      	movs	r3, #1
 8002604:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8002606:	69fb      	ldr	r3, [r7, #28]
 8002608:	2b01      	cmp	r3, #1
 800260a:	d12d      	bne.n	8002668 <I2C_Slave_ISR_DMA+0x118>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	2241      	movs	r2, #65	@ 0x41
 8002610:	5c9b      	ldrb	r3, [r3, r2]
 8002612:	b2db      	uxtb	r3, r3
 8002614:	2b28      	cmp	r3, #40	@ 0x28
 8002616:	d10b      	bne.n	8002630 <I2C_Slave_ISR_DMA+0xe0>
 8002618:	69ba      	ldr	r2, [r7, #24]
 800261a:	2380      	movs	r3, #128	@ 0x80
 800261c:	049b      	lsls	r3, r3, #18
 800261e:	429a      	cmp	r2, r3
 8002620:	d106      	bne.n	8002630 <I2C_Slave_ISR_DMA+0xe0>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8002622:	68ba      	ldr	r2, [r7, #8]
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	0011      	movs	r1, r2
 8002628:	0018      	movs	r0, r3
 800262a:	f000 fbbf 	bl	8002dac <I2C_ITListenCplt>
 800262e:	e054      	b.n	80026da <I2C_Slave_ISR_DMA+0x18a>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	2241      	movs	r2, #65	@ 0x41
 8002634:	5c9b      	ldrb	r3, [r3, r2]
 8002636:	b2db      	uxtb	r3, r3
 8002638:	2b29      	cmp	r3, #41	@ 0x29
 800263a:	d110      	bne.n	800265e <I2C_Slave_ISR_DMA+0x10e>
 800263c:	69bb      	ldr	r3, [r7, #24]
 800263e:	4a36      	ldr	r2, [pc, #216]	@ (8002718 <I2C_Slave_ISR_DMA+0x1c8>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d00c      	beq.n	800265e <I2C_Slave_ISR_DMA+0x10e>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	2210      	movs	r2, #16
 800264a:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	0018      	movs	r0, r3
 8002650:	f000 fd2f 	bl	80030b2 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	0018      	movs	r0, r3
 8002658:	f000 f946 	bl	80028e8 <I2C_ITSlaveSeqCplt>
 800265c:	e03d      	b.n	80026da <I2C_Slave_ISR_DMA+0x18a>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	2210      	movs	r2, #16
 8002664:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8002666:	e03e      	b.n	80026e6 <I2C_Slave_ISR_DMA+0x196>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	2210      	movs	r2, #16
 800266e:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002674:	2204      	movs	r2, #4
 8002676:	431a      	orrs	r2, r3
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800267c:	2317      	movs	r3, #23
 800267e:	18fb      	adds	r3, r7, r3
 8002680:	68fa      	ldr	r2, [r7, #12]
 8002682:	2141      	movs	r1, #65	@ 0x41
 8002684:	5c52      	ldrb	r2, [r2, r1]
 8002686:	701a      	strb	r2, [r3, #0]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002688:	69bb      	ldr	r3, [r7, #24]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d004      	beq.n	8002698 <I2C_Slave_ISR_DMA+0x148>
 800268e:	69ba      	ldr	r2, [r7, #24]
 8002690:	2380      	movs	r3, #128	@ 0x80
 8002692:	045b      	lsls	r3, r3, #17
 8002694:	429a      	cmp	r2, r3
 8002696:	d126      	bne.n	80026e6 <I2C_Slave_ISR_DMA+0x196>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002698:	2217      	movs	r2, #23
 800269a:	18bb      	adds	r3, r7, r2
 800269c:	781b      	ldrb	r3, [r3, #0]
 800269e:	2b21      	cmp	r3, #33	@ 0x21
 80026a0:	d003      	beq.n	80026aa <I2C_Slave_ISR_DMA+0x15a>
 80026a2:	18bb      	adds	r3, r7, r2
 80026a4:	781b      	ldrb	r3, [r3, #0]
 80026a6:	2b29      	cmp	r3, #41	@ 0x29
 80026a8:	d103      	bne.n	80026b2 <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	2221      	movs	r2, #33	@ 0x21
 80026ae:	631a      	str	r2, [r3, #48]	@ 0x30
 80026b0:	e00b      	b.n	80026ca <I2C_Slave_ISR_DMA+0x17a>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80026b2:	2217      	movs	r2, #23
 80026b4:	18bb      	adds	r3, r7, r2
 80026b6:	781b      	ldrb	r3, [r3, #0]
 80026b8:	2b22      	cmp	r3, #34	@ 0x22
 80026ba:	d003      	beq.n	80026c4 <I2C_Slave_ISR_DMA+0x174>
 80026bc:	18bb      	adds	r3, r7, r2
 80026be:	781b      	ldrb	r3, [r3, #0]
 80026c0:	2b2a      	cmp	r3, #42	@ 0x2a
 80026c2:	d102      	bne.n	80026ca <I2C_Slave_ISR_DMA+0x17a>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	2222      	movs	r2, #34	@ 0x22
 80026c8:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	0011      	movs	r1, r2
 80026d2:	0018      	movs	r0, r3
 80026d4:	f000 fbc2 	bl	8002e5c <I2C_ITError>
      if (treatdmanack == 1U)
 80026d8:	e005      	b.n	80026e6 <I2C_Slave_ISR_DMA+0x196>
 80026da:	e004      	b.n	80026e6 <I2C_Slave_ISR_DMA+0x196>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	2210      	movs	r2, #16
 80026e2:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80026e4:	e00f      	b.n	8002706 <I2C_Slave_ISR_DMA+0x1b6>
      if (treatdmanack == 1U)
 80026e6:	46c0      	nop			@ (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80026e8:	e00d      	b.n	8002706 <I2C_Slave_ISR_DMA+0x1b6>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	2208      	movs	r2, #8
 80026ee:	4013      	ands	r3, r2
 80026f0:	d009      	beq.n	8002706 <I2C_Slave_ISR_DMA+0x1b6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2208      	movs	r2, #8
 80026f6:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80026f8:	d005      	beq.n	8002706 <I2C_Slave_ISR_DMA+0x1b6>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 80026fa:	68ba      	ldr	r2, [r7, #8]
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	0011      	movs	r1, r2
 8002700:	0018      	movs	r0, r3
 8002702:	f000 f80b 	bl	800271c <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	2240      	movs	r2, #64	@ 0x40
 800270a:	2100      	movs	r1, #0
 800270c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800270e:	2300      	movs	r3, #0
}
 8002710:	0018      	movs	r0, r3
 8002712:	46bd      	mov	sp, r7
 8002714:	b008      	add	sp, #32
 8002716:	bd80      	pop	{r7, pc}
 8002718:	ffff0000 	.word	0xffff0000

0800271c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800271c:	b5b0      	push	{r4, r5, r7, lr}
 800271e:	b084      	sub	sp, #16
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
 8002724:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2241      	movs	r2, #65	@ 0x41
 800272a:	5c9b      	ldrb	r3, [r3, r2]
 800272c:	b2db      	uxtb	r3, r3
 800272e:	001a      	movs	r2, r3
 8002730:	2328      	movs	r3, #40	@ 0x28
 8002732:	4013      	ands	r3, r2
 8002734:	2b28      	cmp	r3, #40	@ 0x28
 8002736:	d000      	beq.n	800273a <I2C_ITAddrCplt+0x1e>
 8002738:	e088      	b.n	800284c <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	699b      	ldr	r3, [r3, #24]
 8002740:	0c1b      	lsrs	r3, r3, #16
 8002742:	b2da      	uxtb	r2, r3
 8002744:	250f      	movs	r5, #15
 8002746:	197b      	adds	r3, r7, r5
 8002748:	2101      	movs	r1, #1
 800274a:	400a      	ands	r2, r1
 800274c:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	699b      	ldr	r3, [r3, #24]
 8002754:	0c1b      	lsrs	r3, r3, #16
 8002756:	b29a      	uxth	r2, r3
 8002758:	200c      	movs	r0, #12
 800275a:	183b      	adds	r3, r7, r0
 800275c:	21fe      	movs	r1, #254	@ 0xfe
 800275e:	400a      	ands	r2, r1
 8002760:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	b29a      	uxth	r2, r3
 800276a:	240a      	movs	r4, #10
 800276c:	193b      	adds	r3, r7, r4
 800276e:	0592      	lsls	r2, r2, #22
 8002770:	0d92      	lsrs	r2, r2, #22
 8002772:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	68db      	ldr	r3, [r3, #12]
 800277a:	b29a      	uxth	r2, r3
 800277c:	2308      	movs	r3, #8
 800277e:	18fb      	adds	r3, r7, r3
 8002780:	21fe      	movs	r1, #254	@ 0xfe
 8002782:	400a      	ands	r2, r1
 8002784:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	68db      	ldr	r3, [r3, #12]
 800278a:	2b02      	cmp	r3, #2
 800278c:	d148      	bne.n	8002820 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800278e:	0021      	movs	r1, r4
 8002790:	187b      	adds	r3, r7, r1
 8002792:	881b      	ldrh	r3, [r3, #0]
 8002794:	09db      	lsrs	r3, r3, #7
 8002796:	b29a      	uxth	r2, r3
 8002798:	183b      	adds	r3, r7, r0
 800279a:	881b      	ldrh	r3, [r3, #0]
 800279c:	4053      	eors	r3, r2
 800279e:	b29b      	uxth	r3, r3
 80027a0:	001a      	movs	r2, r3
 80027a2:	2306      	movs	r3, #6
 80027a4:	4013      	ands	r3, r2
 80027a6:	d120      	bne.n	80027ea <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 80027a8:	183b      	adds	r3, r7, r0
 80027aa:	187a      	adds	r2, r7, r1
 80027ac:	8812      	ldrh	r2, [r2, #0]
 80027ae:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027b4:	1c5a      	adds	r2, r3, #1
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027be:	2b02      	cmp	r3, #2
 80027c0:	d14c      	bne.n	800285c <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2200      	movs	r2, #0
 80027c6:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	2208      	movs	r2, #8
 80027ce:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2240      	movs	r2, #64	@ 0x40
 80027d4:	2100      	movs	r1, #0
 80027d6:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80027d8:	183b      	adds	r3, r7, r0
 80027da:	881a      	ldrh	r2, [r3, #0]
 80027dc:	197b      	adds	r3, r7, r5
 80027de:	7819      	ldrb	r1, [r3, #0]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	0018      	movs	r0, r3
 80027e4:	f7ff fa20 	bl	8001c28 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80027e8:	e038      	b.n	800285c <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 80027ea:	240c      	movs	r4, #12
 80027ec:	193b      	adds	r3, r7, r4
 80027ee:	2208      	movs	r2, #8
 80027f0:	18ba      	adds	r2, r7, r2
 80027f2:	8812      	ldrh	r2, [r2, #0]
 80027f4:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80027f6:	2380      	movs	r3, #128	@ 0x80
 80027f8:	021a      	lsls	r2, r3, #8
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	0011      	movs	r1, r2
 80027fe:	0018      	movs	r0, r3
 8002800:	f000 fe16 	bl	8003430 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2240      	movs	r2, #64	@ 0x40
 8002808:	2100      	movs	r1, #0
 800280a:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800280c:	193b      	adds	r3, r7, r4
 800280e:	881a      	ldrh	r2, [r3, #0]
 8002810:	230f      	movs	r3, #15
 8002812:	18fb      	adds	r3, r7, r3
 8002814:	7819      	ldrb	r1, [r3, #0]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	0018      	movs	r0, r3
 800281a:	f7ff fa05 	bl	8001c28 <HAL_I2C_AddrCallback>
}
 800281e:	e01d      	b.n	800285c <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002820:	2380      	movs	r3, #128	@ 0x80
 8002822:	021a      	lsls	r2, r3, #8
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	0011      	movs	r1, r2
 8002828:	0018      	movs	r0, r3
 800282a:	f000 fe01 	bl	8003430 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2240      	movs	r2, #64	@ 0x40
 8002832:	2100      	movs	r1, #0
 8002834:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002836:	230c      	movs	r3, #12
 8002838:	18fb      	adds	r3, r7, r3
 800283a:	881a      	ldrh	r2, [r3, #0]
 800283c:	230f      	movs	r3, #15
 800283e:	18fb      	adds	r3, r7, r3
 8002840:	7819      	ldrb	r1, [r3, #0]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	0018      	movs	r0, r3
 8002846:	f7ff f9ef 	bl	8001c28 <HAL_I2C_AddrCallback>
}
 800284a:	e007      	b.n	800285c <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	2208      	movs	r2, #8
 8002852:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2240      	movs	r2, #64	@ 0x40
 8002858:	2100      	movs	r1, #0
 800285a:	5499      	strb	r1, [r3, r2]
}
 800285c:	46c0      	nop			@ (mov r8, r8)
 800285e:	46bd      	mov	sp, r7
 8002860:	b004      	add	sp, #16
 8002862:	bdb0      	pop	{r4, r5, r7, pc}

08002864 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b082      	sub	sp, #8
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2242      	movs	r2, #66	@ 0x42
 8002870:	2100      	movs	r1, #0
 8002872:	5499      	strb	r1, [r3, r2]

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2241      	movs	r2, #65	@ 0x41
 8002878:	5c9b      	ldrb	r3, [r3, r2]
 800287a:	b2db      	uxtb	r3, r3
 800287c:	2b21      	cmp	r3, #33	@ 0x21
 800287e:	d117      	bne.n	80028b0 <I2C_ITMasterSeqCplt+0x4c>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2241      	movs	r2, #65	@ 0x41
 8002884:	2120      	movs	r1, #32
 8002886:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2211      	movs	r2, #17
 800288c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2200      	movs	r2, #0
 8002892:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2101      	movs	r1, #1
 8002898:	0018      	movs	r0, r3
 800289a:	f000 fdc9 	bl	8003430 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2240      	movs	r2, #64	@ 0x40
 80028a2:	2100      	movs	r1, #0
 80028a4:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	0018      	movs	r0, r3
 80028aa:	f7fd fcb9 	bl	8000220 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80028ae:	e016      	b.n	80028de <I2C_ITMasterSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_READY;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2241      	movs	r2, #65	@ 0x41
 80028b4:	2120      	movs	r1, #32
 80028b6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2212      	movs	r2, #18
 80028bc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2200      	movs	r2, #0
 80028c2:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2102      	movs	r1, #2
 80028c8:	0018      	movs	r0, r3
 80028ca:	f000 fdb1 	bl	8003430 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2240      	movs	r2, #64	@ 0x40
 80028d2:	2100      	movs	r1, #0
 80028d4:	5499      	strb	r1, [r3, r2]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	0018      	movs	r0, r3
 80028da:	f7fd fcb7 	bl	800024c <HAL_I2C_MasterRxCpltCallback>
}
 80028de:	46c0      	nop			@ (mov r8, r8)
 80028e0:	46bd      	mov	sp, r7
 80028e2:	b002      	add	sp, #8
 80028e4:	bd80      	pop	{r7, pc}
	...

080028e8 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b084      	sub	sp, #16
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2242      	movs	r2, #66	@ 0x42
 80028fc:	2100      	movs	r1, #0
 80028fe:	5499      	strb	r1, [r3, r2]

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002900:	68fa      	ldr	r2, [r7, #12]
 8002902:	2380      	movs	r3, #128	@ 0x80
 8002904:	01db      	lsls	r3, r3, #7
 8002906:	4013      	ands	r3, r2
 8002908:	d008      	beq.n	800291c <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4924      	ldr	r1, [pc, #144]	@ (80029a8 <I2C_ITSlaveSeqCplt+0xc0>)
 8002916:	400a      	ands	r2, r1
 8002918:	601a      	str	r2, [r3, #0]
 800291a:	e00c      	b.n	8002936 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800291c:	68fa      	ldr	r2, [r7, #12]
 800291e:	2380      	movs	r3, #128	@ 0x80
 8002920:	021b      	lsls	r3, r3, #8
 8002922:	4013      	ands	r3, r2
 8002924:	d007      	beq.n	8002936 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	491e      	ldr	r1, [pc, #120]	@ (80029ac <I2C_ITSlaveSeqCplt+0xc4>)
 8002932:	400a      	ands	r2, r1
 8002934:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2241      	movs	r2, #65	@ 0x41
 800293a:	5c9b      	ldrb	r3, [r3, r2]
 800293c:	b2db      	uxtb	r3, r3
 800293e:	2b29      	cmp	r3, #41	@ 0x29
 8002940:	d114      	bne.n	800296c <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2241      	movs	r2, #65	@ 0x41
 8002946:	2128      	movs	r1, #40	@ 0x28
 8002948:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2221      	movs	r2, #33	@ 0x21
 800294e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2101      	movs	r1, #1
 8002954:	0018      	movs	r0, r3
 8002956:	f000 fd6b 	bl	8003430 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2240      	movs	r2, #64	@ 0x40
 800295e:	2100      	movs	r1, #0
 8002960:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	0018      	movs	r0, r3
 8002966:	f7ff f94f 	bl	8001c08 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800296a:	e019      	b.n	80029a0 <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2241      	movs	r2, #65	@ 0x41
 8002970:	5c9b      	ldrb	r3, [r3, r2]
 8002972:	b2db      	uxtb	r3, r3
 8002974:	2b2a      	cmp	r3, #42	@ 0x2a
 8002976:	d113      	bne.n	80029a0 <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2241      	movs	r2, #65	@ 0x41
 800297c:	2128      	movs	r1, #40	@ 0x28
 800297e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2222      	movs	r2, #34	@ 0x22
 8002984:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2102      	movs	r1, #2
 800298a:	0018      	movs	r0, r3
 800298c:	f000 fd50 	bl	8003430 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2240      	movs	r2, #64	@ 0x40
 8002994:	2100      	movs	r1, #0
 8002996:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	0018      	movs	r0, r3
 800299c:	f7ff f93c 	bl	8001c18 <HAL_I2C_SlaveRxCpltCallback>
}
 80029a0:	46c0      	nop			@ (mov r8, r8)
 80029a2:	46bd      	mov	sp, r7
 80029a4:	b004      	add	sp, #16
 80029a6:	bd80      	pop	{r7, pc}
 80029a8:	ffffbfff 	.word	0xffffbfff
 80029ac:	ffff7fff 	.word	0xffff7fff

080029b0 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b086      	sub	sp, #24
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
 80029b8:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	2220      	movs	r2, #32
 80029c4:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2241      	movs	r2, #65	@ 0x41
 80029ca:	5c9b      	ldrb	r3, [r3, r2]
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	2b21      	cmp	r3, #33	@ 0x21
 80029d0:	d108      	bne.n	80029e4 <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2101      	movs	r1, #1
 80029d6:	0018      	movs	r0, r3
 80029d8:	f000 fd2a 	bl	8003430 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2211      	movs	r2, #17
 80029e0:	631a      	str	r2, [r3, #48]	@ 0x30
 80029e2:	e00d      	b.n	8002a00 <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2241      	movs	r2, #65	@ 0x41
 80029e8:	5c9b      	ldrb	r3, [r3, r2]
 80029ea:	b2db      	uxtb	r3, r3
 80029ec:	2b22      	cmp	r3, #34	@ 0x22
 80029ee:	d107      	bne.n	8002a00 <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2102      	movs	r1, #2
 80029f4:	0018      	movs	r0, r3
 80029f6:	f000 fd1b 	bl	8003430 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2212      	movs	r2, #18
 80029fe:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	685a      	ldr	r2, [r3, #4]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	494e      	ldr	r1, [pc, #312]	@ (8002b44 <I2C_ITMasterCplt+0x194>)
 8002a0c:	400a      	ands	r2, r1
 8002a0e:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2200      	movs	r2, #0
 8002a14:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	4a4b      	ldr	r2, [pc, #300]	@ (8002b48 <I2C_ITMasterCplt+0x198>)
 8002a1a:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	2210      	movs	r2, #16
 8002a20:	4013      	ands	r3, r2
 8002a22:	d009      	beq.n	8002a38 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	2210      	movs	r2, #16
 8002a2a:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a30:	2204      	movs	r2, #4
 8002a32:	431a      	orrs	r2, r3
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2241      	movs	r2, #65	@ 0x41
 8002a3c:	5c9b      	ldrb	r3, [r3, r2]
 8002a3e:	b2db      	uxtb	r3, r3
 8002a40:	2b60      	cmp	r3, #96	@ 0x60
 8002a42:	d109      	bne.n	8002a58 <I2C_ITMasterCplt+0xa8>
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	2204      	movs	r2, #4
 8002a48:	4013      	ands	r3, r2
 8002a4a:	d005      	beq.n	8002a58 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a52:	b2db      	uxtb	r3, r3
 8002a54:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8002a56:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	0018      	movs	r0, r3
 8002a5c:	f000 fb29 	bl	80030b2 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a64:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2241      	movs	r2, #65	@ 0x41
 8002a6a:	5c9b      	ldrb	r3, [r3, r2]
 8002a6c:	b2db      	uxtb	r3, r3
 8002a6e:	2b60      	cmp	r3, #96	@ 0x60
 8002a70:	d002      	beq.n	8002a78 <I2C_ITMasterCplt+0xc8>
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d007      	beq.n	8002a88 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	0011      	movs	r1, r2
 8002a80:	0018      	movs	r0, r3
 8002a82:	f000 f9eb 	bl	8002e5c <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002a86:	e058      	b.n	8002b3a <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2241      	movs	r2, #65	@ 0x41
 8002a8c:	5c9b      	ldrb	r3, [r3, r2]
 8002a8e:	b2db      	uxtb	r3, r3
 8002a90:	2b21      	cmp	r3, #33	@ 0x21
 8002a92:	d126      	bne.n	8002ae2 <I2C_ITMasterCplt+0x132>
    hi2c->State = HAL_I2C_STATE_READY;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2241      	movs	r2, #65	@ 0x41
 8002a98:	2120      	movs	r1, #32
 8002a9a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2242      	movs	r2, #66	@ 0x42
 8002aa6:	5c9b      	ldrb	r3, [r3, r2]
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	2b40      	cmp	r3, #64	@ 0x40
 8002aac:	d10c      	bne.n	8002ac8 <I2C_ITMasterCplt+0x118>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2242      	movs	r2, #66	@ 0x42
 8002ab2:	2100      	movs	r1, #0
 8002ab4:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2240      	movs	r2, #64	@ 0x40
 8002aba:	2100      	movs	r1, #0
 8002abc:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	0018      	movs	r0, r3
 8002ac2:	f7ff f8c9 	bl	8001c58 <HAL_I2C_MemTxCpltCallback>
}
 8002ac6:	e038      	b.n	8002b3a <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2242      	movs	r2, #66	@ 0x42
 8002acc:	2100      	movs	r1, #0
 8002ace:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2240      	movs	r2, #64	@ 0x40
 8002ad4:	2100      	movs	r1, #0
 8002ad6:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	0018      	movs	r0, r3
 8002adc:	f7fd fba0 	bl	8000220 <HAL_I2C_MasterTxCpltCallback>
}
 8002ae0:	e02b      	b.n	8002b3a <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2241      	movs	r2, #65	@ 0x41
 8002ae6:	5c9b      	ldrb	r3, [r3, r2]
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	2b22      	cmp	r3, #34	@ 0x22
 8002aec:	d125      	bne.n	8002b3a <I2C_ITMasterCplt+0x18a>
    hi2c->State = HAL_I2C_STATE_READY;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2241      	movs	r2, #65	@ 0x41
 8002af2:	2120      	movs	r1, #32
 8002af4:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2200      	movs	r2, #0
 8002afa:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2242      	movs	r2, #66	@ 0x42
 8002b00:	5c9b      	ldrb	r3, [r3, r2]
 8002b02:	b2db      	uxtb	r3, r3
 8002b04:	2b40      	cmp	r3, #64	@ 0x40
 8002b06:	d10c      	bne.n	8002b22 <I2C_ITMasterCplt+0x172>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2242      	movs	r2, #66	@ 0x42
 8002b0c:	2100      	movs	r1, #0
 8002b0e:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2240      	movs	r2, #64	@ 0x40
 8002b14:	2100      	movs	r1, #0
 8002b16:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	0018      	movs	r0, r3
 8002b1c:	f7ff f8a4 	bl	8001c68 <HAL_I2C_MemRxCpltCallback>
}
 8002b20:	e00b      	b.n	8002b3a <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2242      	movs	r2, #66	@ 0x42
 8002b26:	2100      	movs	r1, #0
 8002b28:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2240      	movs	r2, #64	@ 0x40
 8002b2e:	2100      	movs	r1, #0
 8002b30:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	0018      	movs	r0, r3
 8002b36:	f7fd fb89 	bl	800024c <HAL_I2C_MasterRxCpltCallback>
}
 8002b3a:	46c0      	nop			@ (mov r8, r8)
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	b006      	add	sp, #24
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	46c0      	nop			@ (mov r8, r8)
 8002b44:	fe00e800 	.word	0xfe00e800
 8002b48:	ffff0000 	.word	0xffff0000

08002b4c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b086      	sub	sp, #24
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
 8002b54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002b62:	200f      	movs	r0, #15
 8002b64:	183b      	adds	r3, r7, r0
 8002b66:	687a      	ldr	r2, [r7, #4]
 8002b68:	2141      	movs	r1, #65	@ 0x41
 8002b6a:	5c52      	ldrb	r2, [r2, r1]
 8002b6c:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	2220      	movs	r2, #32
 8002b74:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002b76:	183b      	adds	r3, r7, r0
 8002b78:	781b      	ldrb	r3, [r3, #0]
 8002b7a:	2b21      	cmp	r3, #33	@ 0x21
 8002b7c:	d003      	beq.n	8002b86 <I2C_ITSlaveCplt+0x3a>
 8002b7e:	183b      	adds	r3, r7, r0
 8002b80:	781b      	ldrb	r3, [r3, #0]
 8002b82:	2b29      	cmp	r3, #41	@ 0x29
 8002b84:	d109      	bne.n	8002b9a <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8002b86:	4a82      	ldr	r2, [pc, #520]	@ (8002d90 <I2C_ITSlaveCplt+0x244>)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	0011      	movs	r1, r2
 8002b8c:	0018      	movs	r0, r3
 8002b8e:	f000 fc4f 	bl	8003430 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2221      	movs	r2, #33	@ 0x21
 8002b96:	631a      	str	r2, [r3, #48]	@ 0x30
 8002b98:	e020      	b.n	8002bdc <I2C_ITSlaveCplt+0x90>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002b9a:	220f      	movs	r2, #15
 8002b9c:	18bb      	adds	r3, r7, r2
 8002b9e:	781b      	ldrb	r3, [r3, #0]
 8002ba0:	2b22      	cmp	r3, #34	@ 0x22
 8002ba2:	d003      	beq.n	8002bac <I2C_ITSlaveCplt+0x60>
 8002ba4:	18bb      	adds	r3, r7, r2
 8002ba6:	781b      	ldrb	r3, [r3, #0]
 8002ba8:	2b2a      	cmp	r3, #42	@ 0x2a
 8002baa:	d109      	bne.n	8002bc0 <I2C_ITSlaveCplt+0x74>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8002bac:	4a79      	ldr	r2, [pc, #484]	@ (8002d94 <I2C_ITSlaveCplt+0x248>)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	0011      	movs	r1, r2
 8002bb2:	0018      	movs	r0, r3
 8002bb4:	f000 fc3c 	bl	8003430 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2222      	movs	r2, #34	@ 0x22
 8002bbc:	631a      	str	r2, [r3, #48]	@ 0x30
 8002bbe:	e00d      	b.n	8002bdc <I2C_ITSlaveCplt+0x90>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8002bc0:	230f      	movs	r3, #15
 8002bc2:	18fb      	adds	r3, r7, r3
 8002bc4:	781b      	ldrb	r3, [r3, #0]
 8002bc6:	2b28      	cmp	r3, #40	@ 0x28
 8002bc8:	d108      	bne.n	8002bdc <I2C_ITSlaveCplt+0x90>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8002bca:	4a73      	ldr	r2, [pc, #460]	@ (8002d98 <I2C_ITSlaveCplt+0x24c>)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	0011      	movs	r1, r2
 8002bd0:	0018      	movs	r0, r3
 8002bd2:	f000 fc2d 	bl	8003430 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	685a      	ldr	r2, [r3, #4]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	2180      	movs	r1, #128	@ 0x80
 8002be8:	0209      	lsls	r1, r1, #8
 8002bea:	430a      	orrs	r2, r1
 8002bec:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	685a      	ldr	r2, [r3, #4]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4968      	ldr	r1, [pc, #416]	@ (8002d9c <I2C_ITSlaveCplt+0x250>)
 8002bfa:	400a      	ands	r2, r1
 8002bfc:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	0018      	movs	r0, r3
 8002c02:	f000 fa56 	bl	80030b2 <I2C_Flush_TXDR>

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002c06:	693a      	ldr	r2, [r7, #16]
 8002c08:	2380      	movs	r3, #128	@ 0x80
 8002c0a:	01db      	lsls	r3, r3, #7
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	d013      	beq.n	8002c38 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4961      	ldr	r1, [pc, #388]	@ (8002da0 <I2C_ITSlaveCplt+0x254>)
 8002c1c:	400a      	ands	r2, r1
 8002c1e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d01f      	beq.n	8002c68 <I2C_ITSlaveCplt+0x11c>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	b29a      	uxth	r2, r3
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002c36:	e017      	b.n	8002c68 <I2C_ITSlaveCplt+0x11c>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002c38:	693a      	ldr	r2, [r7, #16]
 8002c3a:	2380      	movs	r3, #128	@ 0x80
 8002c3c:	021b      	lsls	r3, r3, #8
 8002c3e:	4013      	ands	r3, r2
 8002c40:	d012      	beq.n	8002c68 <I2C_ITSlaveCplt+0x11c>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	681a      	ldr	r2, [r3, #0]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4955      	ldr	r1, [pc, #340]	@ (8002da4 <I2C_ITSlaveCplt+0x258>)
 8002c4e:	400a      	ands	r2, r1
 8002c50:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d006      	beq.n	8002c68 <I2C_ITSlaveCplt+0x11c>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	b29a      	uxth	r2, r3
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	855a      	strh	r2, [r3, #42]	@ 0x2a
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	2204      	movs	r2, #4
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	d020      	beq.n	8002cb2 <I2C_ITSlaveCplt+0x166>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	2204      	movs	r2, #4
 8002c74:	4393      	bics	r3, r2
 8002c76:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c82:	b2d2      	uxtb	r2, r2
 8002c84:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c8a:	1c5a      	adds	r2, r3, #1
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d00c      	beq.n	8002cb2 <I2C_ITSlaveCplt+0x166>
    {
      hi2c->XferSize--;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c9c:	3b01      	subs	r3, #1
 8002c9e:	b29a      	uxth	r2, r3
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ca8:	b29b      	uxth	r3, r3
 8002caa:	3b01      	subs	r3, #1
 8002cac:	b29a      	uxth	r2, r3
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cb6:	b29b      	uxth	r3, r3
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d005      	beq.n	8002cc8 <I2C_ITSlaveCplt+0x17c>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cc0:	2204      	movs	r2, #4
 8002cc2:	431a      	orrs	r2, r3
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2242      	movs	r2, #66	@ 0x42
 8002ccc:	2100      	movs	r1, #0
 8002cce:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d013      	beq.n	8002d06 <I2C_ITSlaveCplt+0x1ba>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	0011      	movs	r1, r2
 8002ce6:	0018      	movs	r0, r3
 8002ce8:	f000 f8b8 	bl	8002e5c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2241      	movs	r2, #65	@ 0x41
 8002cf0:	5c9b      	ldrb	r3, [r3, r2]
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	2b28      	cmp	r3, #40	@ 0x28
 8002cf6:	d147      	bne.n	8002d88 <I2C_ITSlaveCplt+0x23c>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8002cf8:	697a      	ldr	r2, [r7, #20]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	0011      	movs	r1, r2
 8002cfe:	0018      	movs	r0, r3
 8002d00:	f000 f854 	bl	8002dac <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002d04:	e040      	b.n	8002d88 <I2C_ITSlaveCplt+0x23c>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d0a:	4a27      	ldr	r2, [pc, #156]	@ (8002da8 <I2C_ITSlaveCplt+0x25c>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d016      	beq.n	8002d3e <I2C_ITSlaveCplt+0x1f2>
    I2C_ITSlaveSeqCplt(hi2c);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	0018      	movs	r0, r3
 8002d14:	f7ff fde8 	bl	80028e8 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	4a23      	ldr	r2, [pc, #140]	@ (8002da8 <I2C_ITSlaveCplt+0x25c>)
 8002d1c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2241      	movs	r2, #65	@ 0x41
 8002d22:	2120      	movs	r1, #32
 8002d24:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2240      	movs	r2, #64	@ 0x40
 8002d30:	2100      	movs	r1, #0
 8002d32:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	0018      	movs	r0, r3
 8002d38:	f7fe ff86 	bl	8001c48 <HAL_I2C_ListenCpltCallback>
}
 8002d3c:	e024      	b.n	8002d88 <I2C_ITSlaveCplt+0x23c>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2241      	movs	r2, #65	@ 0x41
 8002d42:	5c9b      	ldrb	r3, [r3, r2]
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	2b22      	cmp	r3, #34	@ 0x22
 8002d48:	d10f      	bne.n	8002d6a <I2C_ITSlaveCplt+0x21e>
    hi2c->State = HAL_I2C_STATE_READY;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2241      	movs	r2, #65	@ 0x41
 8002d4e:	2120      	movs	r1, #32
 8002d50:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2200      	movs	r2, #0
 8002d56:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2240      	movs	r2, #64	@ 0x40
 8002d5c:	2100      	movs	r1, #0
 8002d5e:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	0018      	movs	r0, r3
 8002d64:	f7fe ff58 	bl	8001c18 <HAL_I2C_SlaveRxCpltCallback>
}
 8002d68:	e00e      	b.n	8002d88 <I2C_ITSlaveCplt+0x23c>
    hi2c->State = HAL_I2C_STATE_READY;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2241      	movs	r2, #65	@ 0x41
 8002d6e:	2120      	movs	r1, #32
 8002d70:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2200      	movs	r2, #0
 8002d76:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2240      	movs	r2, #64	@ 0x40
 8002d7c:	2100      	movs	r1, #0
 8002d7e:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	0018      	movs	r0, r3
 8002d84:	f7fe ff40 	bl	8001c08 <HAL_I2C_SlaveTxCpltCallback>
}
 8002d88:	46c0      	nop			@ (mov r8, r8)
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	b006      	add	sp, #24
 8002d8e:	bd80      	pop	{r7, pc}
 8002d90:	00008001 	.word	0x00008001
 8002d94:	00008002 	.word	0x00008002
 8002d98:	00008003 	.word	0x00008003
 8002d9c:	fe00e800 	.word	0xfe00e800
 8002da0:	ffffbfff 	.word	0xffffbfff
 8002da4:	ffff7fff 	.word	0xffff7fff
 8002da8:	ffff0000 	.word	0xffff0000

08002dac <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b082      	sub	sp, #8
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
 8002db4:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	4a26      	ldr	r2, [pc, #152]	@ (8002e54 <I2C_ITListenCplt+0xa8>)
 8002dba:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2241      	movs	r2, #65	@ 0x41
 8002dc6:	2120      	movs	r1, #32
 8002dc8:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2242      	movs	r2, #66	@ 0x42
 8002dce:	2100      	movs	r1, #0
 8002dd0:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	2204      	movs	r2, #4
 8002ddc:	4013      	ands	r3, r2
 8002dde:	d022      	beq.n	8002e26 <I2C_ITListenCplt+0x7a>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dea:	b2d2      	uxtb	r2, r2
 8002dec:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002df2:	1c5a      	adds	r2, r3, #1
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d012      	beq.n	8002e26 <I2C_ITListenCplt+0x7a>
    {
      hi2c->XferSize--;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e04:	3b01      	subs	r3, #1
 8002e06:	b29a      	uxth	r2, r3
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e10:	b29b      	uxth	r3, r3
 8002e12:	3b01      	subs	r3, #1
 8002e14:	b29a      	uxth	r2, r3
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e1e:	2204      	movs	r2, #4
 8002e20:	431a      	orrs	r2, r3
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002e26:	4a0c      	ldr	r2, [pc, #48]	@ (8002e58 <I2C_ITListenCplt+0xac>)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	0011      	movs	r1, r2
 8002e2c:	0018      	movs	r0, r3
 8002e2e:	f000 faff 	bl	8003430 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	2210      	movs	r2, #16
 8002e38:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2240      	movs	r2, #64	@ 0x40
 8002e3e:	2100      	movs	r1, #0
 8002e40:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	0018      	movs	r0, r3
 8002e46:	f7fe feff 	bl	8001c48 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8002e4a:	46c0      	nop			@ (mov r8, r8)
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	b002      	add	sp, #8
 8002e50:	bd80      	pop	{r7, pc}
 8002e52:	46c0      	nop			@ (mov r8, r8)
 8002e54:	ffff0000 	.word	0xffff0000
 8002e58:	00008003 	.word	0x00008003

08002e5c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b084      	sub	sp, #16
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
 8002e64:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002e66:	200f      	movs	r0, #15
 8002e68:	183b      	adds	r3, r7, r0
 8002e6a:	687a      	ldr	r2, [r7, #4]
 8002e6c:	2141      	movs	r1, #65	@ 0x41
 8002e6e:	5c52      	ldrb	r2, [r2, r1]
 8002e70:	701a      	strb	r2, [r3, #0]
#if defined(HAL_DMA_MODULE_ENABLED)
  uint32_t tmppreviousstate;
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2242      	movs	r2, #66	@ 0x42
 8002e76:	2100      	movs	r1, #0
 8002e78:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	4a72      	ldr	r2, [pc, #456]	@ (8003048 <I2C_ITError+0x1ec>)
 8002e7e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2200      	movs	r2, #0
 8002e84:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	431a      	orrs	r2, r3
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8002e92:	183b      	adds	r3, r7, r0
 8002e94:	781b      	ldrb	r3, [r3, #0]
 8002e96:	2b28      	cmp	r3, #40	@ 0x28
 8002e98:	d007      	beq.n	8002eaa <I2C_ITError+0x4e>
 8002e9a:	183b      	adds	r3, r7, r0
 8002e9c:	781b      	ldrb	r3, [r3, #0]
 8002e9e:	2b29      	cmp	r3, #41	@ 0x29
 8002ea0:	d003      	beq.n	8002eaa <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8002ea2:	183b      	adds	r3, r7, r0
 8002ea4:	781b      	ldrb	r3, [r3, #0]
 8002ea6:	2b2a      	cmp	r3, #42	@ 0x2a
 8002ea8:	d10c      	bne.n	8002ec4 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2103      	movs	r1, #3
 8002eae:	0018      	movs	r0, r3
 8002eb0:	f000 fabe 	bl	8003430 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2241      	movs	r2, #65	@ 0x41
 8002eb8:	2128      	movs	r1, #40	@ 0x28
 8002eba:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	4a63      	ldr	r2, [pc, #396]	@ (800304c <I2C_ITError+0x1f0>)
 8002ec0:	635a      	str	r2, [r3, #52]	@ 0x34
 8002ec2:	e032      	b.n	8002f2a <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002ec4:	4a62      	ldr	r2, [pc, #392]	@ (8003050 <I2C_ITError+0x1f4>)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	0011      	movs	r1, r2
 8002eca:	0018      	movs	r0, r3
 8002ecc:	f000 fab0 	bl	8003430 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	0018      	movs	r0, r3
 8002ed4:	f000 f8ed 	bl	80030b2 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2241      	movs	r2, #65	@ 0x41
 8002edc:	5c9b      	ldrb	r3, [r3, r2]
 8002ede:	b2db      	uxtb	r3, r3
 8002ee0:	2b60      	cmp	r3, #96	@ 0x60
 8002ee2:	d01f      	beq.n	8002f24 <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2241      	movs	r2, #65	@ 0x41
 8002ee8:	2120      	movs	r1, #32
 8002eea:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	699b      	ldr	r3, [r3, #24]
 8002ef2:	2220      	movs	r2, #32
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	2b20      	cmp	r3, #32
 8002ef8:	d114      	bne.n	8002f24 <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	699b      	ldr	r3, [r3, #24]
 8002f00:	2210      	movs	r2, #16
 8002f02:	4013      	ands	r3, r2
 8002f04:	2b10      	cmp	r3, #16
 8002f06:	d109      	bne.n	8002f1c <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	2210      	movs	r2, #16
 8002f0e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f14:	2204      	movs	r2, #4
 8002f16:	431a      	orrs	r2, r3
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	2220      	movs	r2, #32
 8002f22:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2200      	movs	r2, #0
 8002f28:	635a      	str	r2, [r3, #52]	@ 0x34
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f2e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d03b      	beq.n	8002fb0 <I2C_ITError+0x154>
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	2b11      	cmp	r3, #17
 8002f3c:	d002      	beq.n	8002f44 <I2C_ITError+0xe8>
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	2b21      	cmp	r3, #33	@ 0x21
 8002f42:	d135      	bne.n	8002fb0 <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	681a      	ldr	r2, [r3, #0]
 8002f4a:	2380      	movs	r3, #128	@ 0x80
 8002f4c:	01db      	lsls	r3, r3, #7
 8002f4e:	401a      	ands	r2, r3
 8002f50:	2380      	movs	r3, #128	@ 0x80
 8002f52:	01db      	lsls	r3, r3, #7
 8002f54:	429a      	cmp	r2, r3
 8002f56:	d107      	bne.n	8002f68 <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	493c      	ldr	r1, [pc, #240]	@ (8003054 <I2C_ITError+0x1f8>)
 8002f64:	400a      	ands	r2, r1
 8002f66:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f6c:	0018      	movs	r0, r3
 8002f6e:	f7fe f937 	bl	80011e0 <HAL_DMA_GetState>
 8002f72:	0003      	movs	r3, r0
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d016      	beq.n	8002fa6 <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f7c:	4a36      	ldr	r2, [pc, #216]	@ (8003058 <I2C_ITError+0x1fc>)
 8002f7e:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2240      	movs	r2, #64	@ 0x40
 8002f84:	2100      	movs	r1, #0
 8002f86:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f8c:	0018      	movs	r0, r3
 8002f8e:	f7fd fffb 	bl	8000f88 <HAL_DMA_Abort_IT>
 8002f92:	1e03      	subs	r3, r0, #0
 8002f94:	d051      	beq.n	800303a <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f9a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fa0:	0018      	movs	r0, r3
 8002fa2:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002fa4:	e049      	b.n	800303a <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	0018      	movs	r0, r3
 8002faa:	f000 f859 	bl	8003060 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002fae:	e044      	b.n	800303a <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d03b      	beq.n	8003030 <I2C_ITError+0x1d4>
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	2b12      	cmp	r3, #18
 8002fbc:	d002      	beq.n	8002fc4 <I2C_ITError+0x168>
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	2b22      	cmp	r3, #34	@ 0x22
 8002fc2:	d135      	bne.n	8003030 <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	2380      	movs	r3, #128	@ 0x80
 8002fcc:	021b      	lsls	r3, r3, #8
 8002fce:	401a      	ands	r2, r3
 8002fd0:	2380      	movs	r3, #128	@ 0x80
 8002fd2:	021b      	lsls	r3, r3, #8
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d107      	bne.n	8002fe8 <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	491e      	ldr	r1, [pc, #120]	@ (800305c <I2C_ITError+0x200>)
 8002fe4:	400a      	ands	r2, r1
 8002fe6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fec:	0018      	movs	r0, r3
 8002fee:	f7fe f8f7 	bl	80011e0 <HAL_DMA_GetState>
 8002ff2:	0003      	movs	r3, r0
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d016      	beq.n	8003026 <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ffc:	4a16      	ldr	r2, [pc, #88]	@ (8003058 <I2C_ITError+0x1fc>)
 8002ffe:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2240      	movs	r2, #64	@ 0x40
 8003004:	2100      	movs	r1, #0
 8003006:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800300c:	0018      	movs	r0, r3
 800300e:	f7fd ffbb 	bl	8000f88 <HAL_DMA_Abort_IT>
 8003012:	1e03      	subs	r3, r0, #0
 8003014:	d013      	beq.n	800303e <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800301a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003020:	0018      	movs	r0, r3
 8003022:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003024:	e00b      	b.n	800303e <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	0018      	movs	r0, r3
 800302a:	f000 f819 	bl	8003060 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800302e:	e006      	b.n	800303e <I2C_ITError+0x1e2>
    }
  }
  else
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    I2C_TreatErrorCallback(hi2c);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	0018      	movs	r0, r3
 8003034:	f000 f814 	bl	8003060 <I2C_TreatErrorCallback>
  }
}
 8003038:	e002      	b.n	8003040 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800303a:	46c0      	nop			@ (mov r8, r8)
 800303c:	e000      	b.n	8003040 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800303e:	46c0      	nop			@ (mov r8, r8)
}
 8003040:	46c0      	nop			@ (mov r8, r8)
 8003042:	46bd      	mov	sp, r7
 8003044:	b004      	add	sp, #16
 8003046:	bd80      	pop	{r7, pc}
 8003048:	ffff0000 	.word	0xffff0000
 800304c:	08001f01 	.word	0x08001f01
 8003050:	00008003 	.word	0x00008003
 8003054:	ffffbfff 	.word	0xffffbfff
 8003058:	0800326b 	.word	0x0800326b
 800305c:	ffff7fff 	.word	0xffff7fff

08003060 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b082      	sub	sp, #8
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2241      	movs	r2, #65	@ 0x41
 800306c:	5c9b      	ldrb	r3, [r3, r2]
 800306e:	b2db      	uxtb	r3, r3
 8003070:	2b60      	cmp	r3, #96	@ 0x60
 8003072:	d10f      	bne.n	8003094 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2241      	movs	r2, #65	@ 0x41
 8003078:	2120      	movs	r1, #32
 800307a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2200      	movs	r2, #0
 8003080:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2240      	movs	r2, #64	@ 0x40
 8003086:	2100      	movs	r1, #0
 8003088:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	0018      	movs	r0, r3
 800308e:	f7fe fdfb 	bl	8001c88 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003092:	e00a      	b.n	80030aa <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2200      	movs	r2, #0
 8003098:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2240      	movs	r2, #64	@ 0x40
 800309e:	2100      	movs	r1, #0
 80030a0:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	0018      	movs	r0, r3
 80030a6:	f7fe fde7 	bl	8001c78 <HAL_I2C_ErrorCallback>
}
 80030aa:	46c0      	nop			@ (mov r8, r8)
 80030ac:	46bd      	mov	sp, r7
 80030ae:	b002      	add	sp, #8
 80030b0:	bd80      	pop	{r7, pc}

080030b2 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80030b2:	b580      	push	{r7, lr}
 80030b4:	b082      	sub	sp, #8
 80030b6:	af00      	add	r7, sp, #0
 80030b8:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	699b      	ldr	r3, [r3, #24]
 80030c0:	2202      	movs	r2, #2
 80030c2:	4013      	ands	r3, r2
 80030c4:	2b02      	cmp	r3, #2
 80030c6:	d103      	bne.n	80030d0 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	2200      	movs	r2, #0
 80030ce:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	699b      	ldr	r3, [r3, #24]
 80030d6:	2201      	movs	r2, #1
 80030d8:	4013      	ands	r3, r2
 80030da:	2b01      	cmp	r3, #1
 80030dc:	d007      	beq.n	80030ee <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	699a      	ldr	r2, [r3, #24]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	2101      	movs	r1, #1
 80030ea:	430a      	orrs	r2, r1
 80030ec:	619a      	str	r2, [r3, #24]
  }
}
 80030ee:	46c0      	nop			@ (mov r8, r8)
 80030f0:	46bd      	mov	sp, r7
 80030f2:	b002      	add	sp, #8
 80030f4:	bd80      	pop	{r7, pc}
	...

080030f8 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b084      	sub	sp, #16
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003104:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4920      	ldr	r1, [pc, #128]	@ (8003194 <I2C_DMAMasterTransmitCplt+0x9c>)
 8003112:	400a      	ands	r2, r1
 8003114:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800311a:	b29b      	uxth	r3, r3
 800311c:	2b00      	cmp	r3, #0
 800311e:	d105      	bne.n	800312c <I2C_DMAMasterTransmitCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	2120      	movs	r1, #32
 8003124:	0018      	movs	r0, r3
 8003126:	f000 f8f9 	bl	800331c <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800312a:	e02e      	b.n	800318a <I2C_DMAMasterTransmitCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003130:	68fa      	ldr	r2, [r7, #12]
 8003132:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8003134:	189a      	adds	r2, r3, r2
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800313e:	b29b      	uxth	r3, r3
 8003140:	2bff      	cmp	r3, #255	@ 0xff
 8003142:	d903      	bls.n	800314c <I2C_DMAMasterTransmitCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	22ff      	movs	r2, #255	@ 0xff
 8003148:	851a      	strh	r2, [r3, #40]	@ 0x28
 800314a:	e004      	b.n	8003156 <I2C_DMAMasterTransmitCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003150:	b29a      	uxth	r2, r3
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800315e:	0019      	movs	r1, r3
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	3328      	adds	r3, #40	@ 0x28
 8003166:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800316c:	f7fd fe84 	bl	8000e78 <HAL_DMA_Start_IT>
 8003170:	1e03      	subs	r3, r0, #0
 8003172:	d005      	beq.n	8003180 <I2C_DMAMasterTransmitCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2110      	movs	r1, #16
 8003178:	0018      	movs	r0, r3
 800317a:	f7ff fe6f 	bl	8002e5c <I2C_ITError>
}
 800317e:	e004      	b.n	800318a <I2C_DMAMasterTransmitCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2140      	movs	r1, #64	@ 0x40
 8003184:	0018      	movs	r0, r3
 8003186:	f000 f8c9 	bl	800331c <I2C_Enable_IRQ>
}
 800318a:	46c0      	nop			@ (mov r8, r8)
 800318c:	46bd      	mov	sp, r7
 800318e:	b004      	add	sp, #16
 8003190:	bd80      	pop	{r7, pc}
 8003192:	46c0      	nop			@ (mov r8, r8)
 8003194:	ffffbfff 	.word	0xffffbfff

08003198 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b084      	sub	sp, #16
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031a4:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	681a      	ldr	r2, [r3, #0]
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4920      	ldr	r1, [pc, #128]	@ (8003234 <I2C_DMAMasterReceiveCplt+0x9c>)
 80031b2:	400a      	ands	r2, r1
 80031b4:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031ba:	b29b      	uxth	r3, r3
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d105      	bne.n	80031cc <I2C_DMAMasterReceiveCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	2120      	movs	r1, #32
 80031c4:	0018      	movs	r0, r3
 80031c6:	f000 f8a9 	bl	800331c <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 80031ca:	e02e      	b.n	800322a <I2C_DMAMasterReceiveCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031d0:	68fa      	ldr	r2, [r7, #12]
 80031d2:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 80031d4:	189a      	adds	r2, r3, r2
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031de:	b29b      	uxth	r3, r3
 80031e0:	2bff      	cmp	r3, #255	@ 0xff
 80031e2:	d903      	bls.n	80031ec <I2C_DMAMasterReceiveCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	22ff      	movs	r2, #255	@ 0xff
 80031e8:	851a      	strh	r2, [r3, #40]	@ 0x28
 80031ea:	e004      	b.n	80031f6 <I2C_DMAMasterReceiveCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031f0:	b29a      	uxth	r2, r3
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	3324      	adds	r3, #36	@ 0x24
 8003200:	0019      	movs	r1, r3
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003206:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800320c:	f7fd fe34 	bl	8000e78 <HAL_DMA_Start_IT>
 8003210:	1e03      	subs	r3, r0, #0
 8003212:	d005      	beq.n	8003220 <I2C_DMAMasterReceiveCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2110      	movs	r1, #16
 8003218:	0018      	movs	r0, r3
 800321a:	f7ff fe1f 	bl	8002e5c <I2C_ITError>
}
 800321e:	e004      	b.n	800322a <I2C_DMAMasterReceiveCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2140      	movs	r1, #64	@ 0x40
 8003224:	0018      	movs	r0, r3
 8003226:	f000 f879 	bl	800331c <I2C_Enable_IRQ>
}
 800322a:	46c0      	nop			@ (mov r8, r8)
 800322c:	46bd      	mov	sp, r7
 800322e:	b004      	add	sp, #16
 8003230:	bd80      	pop	{r7, pc}
 8003232:	46c0      	nop			@ (mov r8, r8)
 8003234:	ffff7fff 	.word	0xffff7fff

08003238 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b084      	sub	sp, #16
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003244:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	685a      	ldr	r2, [r3, #4]
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	2180      	movs	r1, #128	@ 0x80
 8003252:	0209      	lsls	r1, r1, #8
 8003254:	430a      	orrs	r2, r1
 8003256:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2110      	movs	r1, #16
 800325c:	0018      	movs	r0, r3
 800325e:	f7ff fdfd 	bl	8002e5c <I2C_ITError>
}
 8003262:	46c0      	nop			@ (mov r8, r8)
 8003264:	46bd      	mov	sp, r7
 8003266:	b004      	add	sp, #16
 8003268:	bd80      	pop	{r7, pc}

0800326a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800326a:	b580      	push	{r7, lr}
 800326c:	b084      	sub	sp, #16
 800326e:	af00      	add	r7, sp, #0
 8003270:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003276:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800327c:	2b00      	cmp	r3, #0
 800327e:	d003      	beq.n	8003288 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003284:	2200      	movs	r2, #0
 8003286:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800328c:	2b00      	cmp	r3, #0
 800328e:	d003      	beq.n	8003298 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003294:	2200      	movs	r2, #0
 8003296:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	0018      	movs	r0, r3
 800329c:	f7ff fee0 	bl	8003060 <I2C_TreatErrorCallback>
}
 80032a0:	46c0      	nop			@ (mov r8, r8)
 80032a2:	46bd      	mov	sp, r7
 80032a4:	b004      	add	sp, #16
 80032a6:	bd80      	pop	{r7, pc}

080032a8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80032a8:	b590      	push	{r4, r7, lr}
 80032aa:	b087      	sub	sp, #28
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	60f8      	str	r0, [r7, #12]
 80032b0:	0008      	movs	r0, r1
 80032b2:	0011      	movs	r1, r2
 80032b4:	607b      	str	r3, [r7, #4]
 80032b6:	240a      	movs	r4, #10
 80032b8:	193b      	adds	r3, r7, r4
 80032ba:	1c02      	adds	r2, r0, #0
 80032bc:	801a      	strh	r2, [r3, #0]
 80032be:	2009      	movs	r0, #9
 80032c0:	183b      	adds	r3, r7, r0
 80032c2:	1c0a      	adds	r2, r1, #0
 80032c4:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80032c6:	193b      	adds	r3, r7, r4
 80032c8:	881b      	ldrh	r3, [r3, #0]
 80032ca:	059b      	lsls	r3, r3, #22
 80032cc:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80032ce:	183b      	adds	r3, r7, r0
 80032d0:	781b      	ldrb	r3, [r3, #0]
 80032d2:	0419      	lsls	r1, r3, #16
 80032d4:	23ff      	movs	r3, #255	@ 0xff
 80032d6:	041b      	lsls	r3, r3, #16
 80032d8:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80032da:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80032e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032e2:	4313      	orrs	r3, r2
 80032e4:	005b      	lsls	r3, r3, #1
 80032e6:	085b      	lsrs	r3, r3, #1
 80032e8:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80032f2:	0d51      	lsrs	r1, r2, #21
 80032f4:	2280      	movs	r2, #128	@ 0x80
 80032f6:	00d2      	lsls	r2, r2, #3
 80032f8:	400a      	ands	r2, r1
 80032fa:	4907      	ldr	r1, [pc, #28]	@ (8003318 <I2C_TransferConfig+0x70>)
 80032fc:	430a      	orrs	r2, r1
 80032fe:	43d2      	mvns	r2, r2
 8003300:	401a      	ands	r2, r3
 8003302:	0011      	movs	r1, r2
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	697a      	ldr	r2, [r7, #20]
 800330a:	430a      	orrs	r2, r1
 800330c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800330e:	46c0      	nop			@ (mov r8, r8)
 8003310:	46bd      	mov	sp, r7
 8003312:	b007      	add	sp, #28
 8003314:	bd90      	pop	{r4, r7, pc}
 8003316:	46c0      	nop			@ (mov r8, r8)
 8003318:	03ff63ff 	.word	0x03ff63ff

0800331c <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b084      	sub	sp, #16
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
 8003324:	000a      	movs	r2, r1
 8003326:	1cbb      	adds	r3, r7, #2
 8003328:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 800332a:	2300      	movs	r3, #0
 800332c:	60fb      	str	r3, [r7, #12]

#if defined(HAL_DMA_MODULE_ENABLED)
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003332:	4b3c      	ldr	r3, [pc, #240]	@ (8003424 <I2C_Enable_IRQ+0x108>)
 8003334:	429a      	cmp	r2, r3
 8003336:	d035      	beq.n	80033a4 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800333c:	4b3a      	ldr	r3, [pc, #232]	@ (8003428 <I2C_Enable_IRQ+0x10c>)
 800333e:	429a      	cmp	r2, r3
 8003340:	d030      	beq.n	80033a4 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8003346:	4b39      	ldr	r3, [pc, #228]	@ (800342c <I2C_Enable_IRQ+0x110>)
 8003348:	429a      	cmp	r2, r3
 800334a:	d02b      	beq.n	80033a4 <I2C_Enable_IRQ+0x88>
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800334c:	1cbb      	adds	r3, r7, #2
 800334e:	2200      	movs	r2, #0
 8003350:	5e9b      	ldrsh	r3, [r3, r2]
 8003352:	2b00      	cmp	r3, #0
 8003354:	da03      	bge.n	800335e <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	22b8      	movs	r2, #184	@ 0xb8
 800335a:	4313      	orrs	r3, r2
 800335c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800335e:	1cbb      	adds	r3, r7, #2
 8003360:	881b      	ldrh	r3, [r3, #0]
 8003362:	2201      	movs	r2, #1
 8003364:	4013      	ands	r3, r2
 8003366:	d003      	beq.n	8003370 <I2C_Enable_IRQ+0x54>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	22f2      	movs	r2, #242	@ 0xf2
 800336c:	4313      	orrs	r3, r2
 800336e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003370:	1cbb      	adds	r3, r7, #2
 8003372:	881b      	ldrh	r3, [r3, #0]
 8003374:	2202      	movs	r2, #2
 8003376:	4013      	ands	r3, r2
 8003378:	d003      	beq.n	8003382 <I2C_Enable_IRQ+0x66>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	22f4      	movs	r2, #244	@ 0xf4
 800337e:	4313      	orrs	r3, r2
 8003380:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003382:	1cbb      	adds	r3, r7, #2
 8003384:	881b      	ldrh	r3, [r3, #0]
 8003386:	2b10      	cmp	r3, #16
 8003388:	d103      	bne.n	8003392 <I2C_Enable_IRQ+0x76>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2290      	movs	r2, #144	@ 0x90
 800338e:	4313      	orrs	r3, r2
 8003390:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003392:	1cbb      	adds	r3, r7, #2
 8003394:	881b      	ldrh	r3, [r3, #0]
 8003396:	2b20      	cmp	r3, #32
 8003398:	d137      	bne.n	800340a <I2C_Enable_IRQ+0xee>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	2220      	movs	r2, #32
 800339e:	4313      	orrs	r3, r2
 80033a0:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80033a2:	e032      	b.n	800340a <I2C_Enable_IRQ+0xee>
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80033a4:	1cbb      	adds	r3, r7, #2
 80033a6:	2200      	movs	r2, #0
 80033a8:	5e9b      	ldrsh	r3, [r3, r2]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	da03      	bge.n	80033b6 <I2C_Enable_IRQ+0x9a>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	22b8      	movs	r2, #184	@ 0xb8
 80033b2:	4313      	orrs	r3, r2
 80033b4:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80033b6:	1cbb      	adds	r3, r7, #2
 80033b8:	881b      	ldrh	r3, [r3, #0]
 80033ba:	2201      	movs	r2, #1
 80033bc:	4013      	ands	r3, r2
 80033be:	d003      	beq.n	80033c8 <I2C_Enable_IRQ+0xac>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	22f2      	movs	r2, #242	@ 0xf2
 80033c4:	4313      	orrs	r3, r2
 80033c6:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80033c8:	1cbb      	adds	r3, r7, #2
 80033ca:	881b      	ldrh	r3, [r3, #0]
 80033cc:	2202      	movs	r2, #2
 80033ce:	4013      	ands	r3, r2
 80033d0:	d003      	beq.n	80033da <I2C_Enable_IRQ+0xbe>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	22f4      	movs	r2, #244	@ 0xf4
 80033d6:	4313      	orrs	r3, r2
 80033d8:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80033da:	1cbb      	adds	r3, r7, #2
 80033dc:	881b      	ldrh	r3, [r3, #0]
 80033de:	2b10      	cmp	r3, #16
 80033e0:	d103      	bne.n	80033ea <I2C_Enable_IRQ+0xce>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2290      	movs	r2, #144	@ 0x90
 80033e6:	4313      	orrs	r3, r2
 80033e8:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80033ea:	1cbb      	adds	r3, r7, #2
 80033ec:	881b      	ldrh	r3, [r3, #0]
 80033ee:	2b20      	cmp	r3, #32
 80033f0:	d103      	bne.n	80033fa <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	2260      	movs	r2, #96	@ 0x60
 80033f6:	4313      	orrs	r3, r2
 80033f8:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80033fa:	1cbb      	adds	r3, r7, #2
 80033fc:	881b      	ldrh	r3, [r3, #0]
 80033fe:	2b40      	cmp	r3, #64	@ 0x40
 8003400:	d103      	bne.n	800340a <I2C_Enable_IRQ+0xee>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2240      	movs	r2, #64	@ 0x40
 8003406:	4313      	orrs	r3, r2
 8003408:	60fb      	str	r3, [r7, #12]
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	6819      	ldr	r1, [r3, #0]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	68fa      	ldr	r2, [r7, #12]
 8003416:	430a      	orrs	r2, r1
 8003418:	601a      	str	r2, [r3, #0]
}
 800341a:	46c0      	nop			@ (mov r8, r8)
 800341c:	46bd      	mov	sp, r7
 800341e:	b004      	add	sp, #16
 8003420:	bd80      	pop	{r7, pc}
 8003422:	46c0      	nop			@ (mov r8, r8)
 8003424:	08002101 	.word	0x08002101
 8003428:	08002551 	.word	0x08002551
 800342c:	080022f9 	.word	0x080022f9

08003430 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b084      	sub	sp, #16
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
 8003438:	000a      	movs	r2, r1
 800343a:	1cbb      	adds	r3, r7, #2
 800343c:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 800343e:	2300      	movs	r3, #0
 8003440:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003442:	1cbb      	adds	r3, r7, #2
 8003444:	881b      	ldrh	r3, [r3, #0]
 8003446:	2201      	movs	r2, #1
 8003448:	4013      	ands	r3, r2
 800344a:	d010      	beq.n	800346e <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2242      	movs	r2, #66	@ 0x42
 8003450:	4313      	orrs	r3, r2
 8003452:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2241      	movs	r2, #65	@ 0x41
 8003458:	5c9b      	ldrb	r3, [r3, r2]
 800345a:	b2db      	uxtb	r3, r3
 800345c:	001a      	movs	r2, r3
 800345e:	2328      	movs	r3, #40	@ 0x28
 8003460:	4013      	ands	r3, r2
 8003462:	2b28      	cmp	r3, #40	@ 0x28
 8003464:	d003      	beq.n	800346e <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	22b0      	movs	r2, #176	@ 0xb0
 800346a:	4313      	orrs	r3, r2
 800346c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800346e:	1cbb      	adds	r3, r7, #2
 8003470:	881b      	ldrh	r3, [r3, #0]
 8003472:	2202      	movs	r2, #2
 8003474:	4013      	ands	r3, r2
 8003476:	d010      	beq.n	800349a <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2244      	movs	r2, #68	@ 0x44
 800347c:	4313      	orrs	r3, r2
 800347e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2241      	movs	r2, #65	@ 0x41
 8003484:	5c9b      	ldrb	r3, [r3, r2]
 8003486:	b2db      	uxtb	r3, r3
 8003488:	001a      	movs	r2, r3
 800348a:	2328      	movs	r3, #40	@ 0x28
 800348c:	4013      	ands	r3, r2
 800348e:	2b28      	cmp	r3, #40	@ 0x28
 8003490:	d003      	beq.n	800349a <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	22b0      	movs	r2, #176	@ 0xb0
 8003496:	4313      	orrs	r3, r2
 8003498:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800349a:	1cbb      	adds	r3, r7, #2
 800349c:	2200      	movs	r2, #0
 800349e:	5e9b      	ldrsh	r3, [r3, r2]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	da03      	bge.n	80034ac <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	22b8      	movs	r2, #184	@ 0xb8
 80034a8:	4313      	orrs	r3, r2
 80034aa:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80034ac:	1cbb      	adds	r3, r7, #2
 80034ae:	881b      	ldrh	r3, [r3, #0]
 80034b0:	2b10      	cmp	r3, #16
 80034b2:	d103      	bne.n	80034bc <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2290      	movs	r2, #144	@ 0x90
 80034b8:	4313      	orrs	r3, r2
 80034ba:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80034bc:	1cbb      	adds	r3, r7, #2
 80034be:	881b      	ldrh	r3, [r3, #0]
 80034c0:	2b20      	cmp	r3, #32
 80034c2:	d103      	bne.n	80034cc <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2220      	movs	r2, #32
 80034c8:	4313      	orrs	r3, r2
 80034ca:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80034cc:	1cbb      	adds	r3, r7, #2
 80034ce:	881b      	ldrh	r3, [r3, #0]
 80034d0:	2b40      	cmp	r3, #64	@ 0x40
 80034d2:	d103      	bne.n	80034dc <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2240      	movs	r2, #64	@ 0x40
 80034d8:	4313      	orrs	r3, r2
 80034da:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	681a      	ldr	r2, [r3, #0]
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	43d9      	mvns	r1, r3
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	400a      	ands	r2, r1
 80034ec:	601a      	str	r2, [r3, #0]
}
 80034ee:	46c0      	nop			@ (mov r8, r8)
 80034f0:	46bd      	mov	sp, r7
 80034f2:	b004      	add	sp, #16
 80034f4:	bd80      	pop	{r7, pc}
	...

080034f8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b082      	sub	sp, #8
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
 8003500:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2241      	movs	r2, #65	@ 0x41
 8003506:	5c9b      	ldrb	r3, [r3, r2]
 8003508:	b2db      	uxtb	r3, r3
 800350a:	2b20      	cmp	r3, #32
 800350c:	d138      	bne.n	8003580 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2240      	movs	r2, #64	@ 0x40
 8003512:	5c9b      	ldrb	r3, [r3, r2]
 8003514:	2b01      	cmp	r3, #1
 8003516:	d101      	bne.n	800351c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003518:	2302      	movs	r3, #2
 800351a:	e032      	b.n	8003582 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2240      	movs	r2, #64	@ 0x40
 8003520:	2101      	movs	r1, #1
 8003522:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2241      	movs	r2, #65	@ 0x41
 8003528:	2124      	movs	r1, #36	@ 0x24
 800352a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	2101      	movs	r1, #1
 8003538:	438a      	bics	r2, r1
 800353a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4911      	ldr	r1, [pc, #68]	@ (800358c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8003548:	400a      	ands	r2, r1
 800354a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	6819      	ldr	r1, [r3, #0]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	683a      	ldr	r2, [r7, #0]
 8003558:	430a      	orrs	r2, r1
 800355a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	2101      	movs	r1, #1
 8003568:	430a      	orrs	r2, r1
 800356a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2241      	movs	r2, #65	@ 0x41
 8003570:	2120      	movs	r1, #32
 8003572:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2240      	movs	r2, #64	@ 0x40
 8003578:	2100      	movs	r1, #0
 800357a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800357c:	2300      	movs	r3, #0
 800357e:	e000      	b.n	8003582 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003580:	2302      	movs	r3, #2
  }
}
 8003582:	0018      	movs	r0, r3
 8003584:	46bd      	mov	sp, r7
 8003586:	b002      	add	sp, #8
 8003588:	bd80      	pop	{r7, pc}
 800358a:	46c0      	nop			@ (mov r8, r8)
 800358c:	ffffefff 	.word	0xffffefff

08003590 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b084      	sub	sp, #16
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
 8003598:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2241      	movs	r2, #65	@ 0x41
 800359e:	5c9b      	ldrb	r3, [r3, r2]
 80035a0:	b2db      	uxtb	r3, r3
 80035a2:	2b20      	cmp	r3, #32
 80035a4:	d139      	bne.n	800361a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2240      	movs	r2, #64	@ 0x40
 80035aa:	5c9b      	ldrb	r3, [r3, r2]
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	d101      	bne.n	80035b4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80035b0:	2302      	movs	r3, #2
 80035b2:	e033      	b.n	800361c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2240      	movs	r2, #64	@ 0x40
 80035b8:	2101      	movs	r1, #1
 80035ba:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2241      	movs	r2, #65	@ 0x41
 80035c0:	2124      	movs	r1, #36	@ 0x24
 80035c2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	2101      	movs	r1, #1
 80035d0:	438a      	bics	r2, r1
 80035d2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	4a11      	ldr	r2, [pc, #68]	@ (8003624 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80035e0:	4013      	ands	r3, r2
 80035e2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	021b      	lsls	r3, r3, #8
 80035e8:	68fa      	ldr	r2, [r7, #12]
 80035ea:	4313      	orrs	r3, r2
 80035ec:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	68fa      	ldr	r2, [r7, #12]
 80035f4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	2101      	movs	r1, #1
 8003602:	430a      	orrs	r2, r1
 8003604:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2241      	movs	r2, #65	@ 0x41
 800360a:	2120      	movs	r1, #32
 800360c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2240      	movs	r2, #64	@ 0x40
 8003612:	2100      	movs	r1, #0
 8003614:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003616:	2300      	movs	r3, #0
 8003618:	e000      	b.n	800361c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800361a:	2302      	movs	r3, #2
  }
}
 800361c:	0018      	movs	r0, r3
 800361e:	46bd      	mov	sp, r7
 8003620:	b004      	add	sp, #16
 8003622:	bd80      	pop	{r7, pc}
 8003624:	fffff0ff 	.word	0xfffff0ff

08003628 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b086      	sub	sp, #24
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d101      	bne.n	800363a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	e1d0      	b.n	80039dc <HAL_RCC_OscConfig+0x3b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	2201      	movs	r2, #1
 8003640:	4013      	ands	r3, r2
 8003642:	d100      	bne.n	8003646 <HAL_RCC_OscConfig+0x1e>
 8003644:	e069      	b.n	800371a <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003646:	4bc8      	ldr	r3, [pc, #800]	@ (8003968 <HAL_RCC_OscConfig+0x340>)
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	2238      	movs	r2, #56	@ 0x38
 800364c:	4013      	ands	r3, r2
 800364e:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	2b08      	cmp	r3, #8
 8003654:	d105      	bne.n	8003662 <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d15d      	bne.n	800371a <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	e1bc      	b.n	80039dc <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	685a      	ldr	r2, [r3, #4]
 8003666:	2380      	movs	r3, #128	@ 0x80
 8003668:	025b      	lsls	r3, r3, #9
 800366a:	429a      	cmp	r2, r3
 800366c:	d107      	bne.n	800367e <HAL_RCC_OscConfig+0x56>
 800366e:	4bbe      	ldr	r3, [pc, #760]	@ (8003968 <HAL_RCC_OscConfig+0x340>)
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	4bbd      	ldr	r3, [pc, #756]	@ (8003968 <HAL_RCC_OscConfig+0x340>)
 8003674:	2180      	movs	r1, #128	@ 0x80
 8003676:	0249      	lsls	r1, r1, #9
 8003678:	430a      	orrs	r2, r1
 800367a:	601a      	str	r2, [r3, #0]
 800367c:	e020      	b.n	80036c0 <HAL_RCC_OscConfig+0x98>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	685a      	ldr	r2, [r3, #4]
 8003682:	23a0      	movs	r3, #160	@ 0xa0
 8003684:	02db      	lsls	r3, r3, #11
 8003686:	429a      	cmp	r2, r3
 8003688:	d10e      	bne.n	80036a8 <HAL_RCC_OscConfig+0x80>
 800368a:	4bb7      	ldr	r3, [pc, #732]	@ (8003968 <HAL_RCC_OscConfig+0x340>)
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	4bb6      	ldr	r3, [pc, #728]	@ (8003968 <HAL_RCC_OscConfig+0x340>)
 8003690:	2180      	movs	r1, #128	@ 0x80
 8003692:	02c9      	lsls	r1, r1, #11
 8003694:	430a      	orrs	r2, r1
 8003696:	601a      	str	r2, [r3, #0]
 8003698:	4bb3      	ldr	r3, [pc, #716]	@ (8003968 <HAL_RCC_OscConfig+0x340>)
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	4bb2      	ldr	r3, [pc, #712]	@ (8003968 <HAL_RCC_OscConfig+0x340>)
 800369e:	2180      	movs	r1, #128	@ 0x80
 80036a0:	0249      	lsls	r1, r1, #9
 80036a2:	430a      	orrs	r2, r1
 80036a4:	601a      	str	r2, [r3, #0]
 80036a6:	e00b      	b.n	80036c0 <HAL_RCC_OscConfig+0x98>
 80036a8:	4baf      	ldr	r3, [pc, #700]	@ (8003968 <HAL_RCC_OscConfig+0x340>)
 80036aa:	681a      	ldr	r2, [r3, #0]
 80036ac:	4bae      	ldr	r3, [pc, #696]	@ (8003968 <HAL_RCC_OscConfig+0x340>)
 80036ae:	49af      	ldr	r1, [pc, #700]	@ (800396c <HAL_RCC_OscConfig+0x344>)
 80036b0:	400a      	ands	r2, r1
 80036b2:	601a      	str	r2, [r3, #0]
 80036b4:	4bac      	ldr	r3, [pc, #688]	@ (8003968 <HAL_RCC_OscConfig+0x340>)
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	4bab      	ldr	r3, [pc, #684]	@ (8003968 <HAL_RCC_OscConfig+0x340>)
 80036ba:	49ad      	ldr	r1, [pc, #692]	@ (8003970 <HAL_RCC_OscConfig+0x348>)
 80036bc:	400a      	ands	r2, r1
 80036be:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d014      	beq.n	80036f2 <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036c8:	f7fd fa40 	bl	8000b4c <HAL_GetTick>
 80036cc:	0003      	movs	r3, r0
 80036ce:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80036d0:	e008      	b.n	80036e4 <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80036d2:	f7fd fa3b 	bl	8000b4c <HAL_GetTick>
 80036d6:	0002      	movs	r2, r0
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	1ad3      	subs	r3, r2, r3
 80036dc:	2b64      	cmp	r3, #100	@ 0x64
 80036de:	d901      	bls.n	80036e4 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 80036e0:	2303      	movs	r3, #3
 80036e2:	e17b      	b.n	80039dc <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80036e4:	4ba0      	ldr	r3, [pc, #640]	@ (8003968 <HAL_RCC_OscConfig+0x340>)
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	2380      	movs	r3, #128	@ 0x80
 80036ea:	029b      	lsls	r3, r3, #10
 80036ec:	4013      	ands	r3, r2
 80036ee:	d0f0      	beq.n	80036d2 <HAL_RCC_OscConfig+0xaa>
 80036f0:	e013      	b.n	800371a <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036f2:	f7fd fa2b 	bl	8000b4c <HAL_GetTick>
 80036f6:	0003      	movs	r3, r0
 80036f8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80036fa:	e008      	b.n	800370e <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80036fc:	f7fd fa26 	bl	8000b4c <HAL_GetTick>
 8003700:	0002      	movs	r2, r0
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	1ad3      	subs	r3, r2, r3
 8003706:	2b64      	cmp	r3, #100	@ 0x64
 8003708:	d901      	bls.n	800370e <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 800370a:	2303      	movs	r3, #3
 800370c:	e166      	b.n	80039dc <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800370e:	4b96      	ldr	r3, [pc, #600]	@ (8003968 <HAL_RCC_OscConfig+0x340>)
 8003710:	681a      	ldr	r2, [r3, #0]
 8003712:	2380      	movs	r3, #128	@ 0x80
 8003714:	029b      	lsls	r3, r3, #10
 8003716:	4013      	ands	r3, r2
 8003718:	d1f0      	bne.n	80036fc <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	2202      	movs	r2, #2
 8003720:	4013      	ands	r3, r2
 8003722:	d100      	bne.n	8003726 <HAL_RCC_OscConfig+0xfe>
 8003724:	e086      	b.n	8003834 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003726:	4b90      	ldr	r3, [pc, #576]	@ (8003968 <HAL_RCC_OscConfig+0x340>)
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	2238      	movs	r2, #56	@ 0x38
 800372c:	4013      	ands	r3, r2
 800372e:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d12f      	bne.n	8003796 <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	68db      	ldr	r3, [r3, #12]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d101      	bne.n	8003742 <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	e14c      	b.n	80039dc <HAL_RCC_OscConfig+0x3b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003742:	4b89      	ldr	r3, [pc, #548]	@ (8003968 <HAL_RCC_OscConfig+0x340>)
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	4a8b      	ldr	r2, [pc, #556]	@ (8003974 <HAL_RCC_OscConfig+0x34c>)
 8003748:	4013      	ands	r3, r2
 800374a:	0019      	movs	r1, r3
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	695b      	ldr	r3, [r3, #20]
 8003750:	021a      	lsls	r2, r3, #8
 8003752:	4b85      	ldr	r3, [pc, #532]	@ (8003968 <HAL_RCC_OscConfig+0x340>)
 8003754:	430a      	orrs	r2, r1
 8003756:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d112      	bne.n	8003784 <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800375e:	4b82      	ldr	r3, [pc, #520]	@ (8003968 <HAL_RCC_OscConfig+0x340>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a85      	ldr	r2, [pc, #532]	@ (8003978 <HAL_RCC_OscConfig+0x350>)
 8003764:	4013      	ands	r3, r2
 8003766:	0019      	movs	r1, r3
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	691a      	ldr	r2, [r3, #16]
 800376c:	4b7e      	ldr	r3, [pc, #504]	@ (8003968 <HAL_RCC_OscConfig+0x340>)
 800376e:	430a      	orrs	r2, r1
 8003770:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8003772:	4b7d      	ldr	r3, [pc, #500]	@ (8003968 <HAL_RCC_OscConfig+0x340>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	0adb      	lsrs	r3, r3, #11
 8003778:	2207      	movs	r2, #7
 800377a:	4013      	ands	r3, r2
 800377c:	4a7f      	ldr	r2, [pc, #508]	@ (800397c <HAL_RCC_OscConfig+0x354>)
 800377e:	40da      	lsrs	r2, r3
 8003780:	4b7f      	ldr	r3, [pc, #508]	@ (8003980 <HAL_RCC_OscConfig+0x358>)
 8003782:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003784:	4b7f      	ldr	r3, [pc, #508]	@ (8003984 <HAL_RCC_OscConfig+0x35c>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	0018      	movs	r0, r3
 800378a:	f7fd f983 	bl	8000a94 <HAL_InitTick>
 800378e:	1e03      	subs	r3, r0, #0
 8003790:	d050      	beq.n	8003834 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	e122      	b.n	80039dc <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	68db      	ldr	r3, [r3, #12]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d030      	beq.n	8003800 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800379e:	4b72      	ldr	r3, [pc, #456]	@ (8003968 <HAL_RCC_OscConfig+0x340>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a75      	ldr	r2, [pc, #468]	@ (8003978 <HAL_RCC_OscConfig+0x350>)
 80037a4:	4013      	ands	r3, r2
 80037a6:	0019      	movs	r1, r3
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	691a      	ldr	r2, [r3, #16]
 80037ac:	4b6e      	ldr	r3, [pc, #440]	@ (8003968 <HAL_RCC_OscConfig+0x340>)
 80037ae:	430a      	orrs	r2, r1
 80037b0:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 80037b2:	4b6d      	ldr	r3, [pc, #436]	@ (8003968 <HAL_RCC_OscConfig+0x340>)
 80037b4:	681a      	ldr	r2, [r3, #0]
 80037b6:	4b6c      	ldr	r3, [pc, #432]	@ (8003968 <HAL_RCC_OscConfig+0x340>)
 80037b8:	2180      	movs	r1, #128	@ 0x80
 80037ba:	0049      	lsls	r1, r1, #1
 80037bc:	430a      	orrs	r2, r1
 80037be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037c0:	f7fd f9c4 	bl	8000b4c <HAL_GetTick>
 80037c4:	0003      	movs	r3, r0
 80037c6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80037c8:	e008      	b.n	80037dc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80037ca:	f7fd f9bf 	bl	8000b4c <HAL_GetTick>
 80037ce:	0002      	movs	r2, r0
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	1ad3      	subs	r3, r2, r3
 80037d4:	2b02      	cmp	r3, #2
 80037d6:	d901      	bls.n	80037dc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80037d8:	2303      	movs	r3, #3
 80037da:	e0ff      	b.n	80039dc <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80037dc:	4b62      	ldr	r3, [pc, #392]	@ (8003968 <HAL_RCC_OscConfig+0x340>)
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	2380      	movs	r3, #128	@ 0x80
 80037e2:	00db      	lsls	r3, r3, #3
 80037e4:	4013      	ands	r3, r2
 80037e6:	d0f0      	beq.n	80037ca <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037e8:	4b5f      	ldr	r3, [pc, #380]	@ (8003968 <HAL_RCC_OscConfig+0x340>)
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	4a61      	ldr	r2, [pc, #388]	@ (8003974 <HAL_RCC_OscConfig+0x34c>)
 80037ee:	4013      	ands	r3, r2
 80037f0:	0019      	movs	r1, r3
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	695b      	ldr	r3, [r3, #20]
 80037f6:	021a      	lsls	r2, r3, #8
 80037f8:	4b5b      	ldr	r3, [pc, #364]	@ (8003968 <HAL_RCC_OscConfig+0x340>)
 80037fa:	430a      	orrs	r2, r1
 80037fc:	605a      	str	r2, [r3, #4]
 80037fe:	e019      	b.n	8003834 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 8003800:	4b59      	ldr	r3, [pc, #356]	@ (8003968 <HAL_RCC_OscConfig+0x340>)
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	4b58      	ldr	r3, [pc, #352]	@ (8003968 <HAL_RCC_OscConfig+0x340>)
 8003806:	4960      	ldr	r1, [pc, #384]	@ (8003988 <HAL_RCC_OscConfig+0x360>)
 8003808:	400a      	ands	r2, r1
 800380a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800380c:	f7fd f99e 	bl	8000b4c <HAL_GetTick>
 8003810:	0003      	movs	r3, r0
 8003812:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003814:	e008      	b.n	8003828 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8003816:	f7fd f999 	bl	8000b4c <HAL_GetTick>
 800381a:	0002      	movs	r2, r0
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	1ad3      	subs	r3, r2, r3
 8003820:	2b02      	cmp	r3, #2
 8003822:	d901      	bls.n	8003828 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8003824:	2303      	movs	r3, #3
 8003826:	e0d9      	b.n	80039dc <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003828:	4b4f      	ldr	r3, [pc, #316]	@ (8003968 <HAL_RCC_OscConfig+0x340>)
 800382a:	681a      	ldr	r2, [r3, #0]
 800382c:	2380      	movs	r3, #128	@ 0x80
 800382e:	00db      	lsls	r3, r3, #3
 8003830:	4013      	ands	r3, r2
 8003832:	d1f0      	bne.n	8003816 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	2208      	movs	r2, #8
 800383a:	4013      	ands	r3, r2
 800383c:	d042      	beq.n	80038c4 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 800383e:	4b4a      	ldr	r3, [pc, #296]	@ (8003968 <HAL_RCC_OscConfig+0x340>)
 8003840:	689b      	ldr	r3, [r3, #8]
 8003842:	2238      	movs	r2, #56	@ 0x38
 8003844:	4013      	ands	r3, r2
 8003846:	2b18      	cmp	r3, #24
 8003848:	d105      	bne.n	8003856 <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	699b      	ldr	r3, [r3, #24]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d138      	bne.n	80038c4 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	e0c2      	b.n	80039dc <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	699b      	ldr	r3, [r3, #24]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d019      	beq.n	8003892 <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800385e:	4b42      	ldr	r3, [pc, #264]	@ (8003968 <HAL_RCC_OscConfig+0x340>)
 8003860:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003862:	4b41      	ldr	r3, [pc, #260]	@ (8003968 <HAL_RCC_OscConfig+0x340>)
 8003864:	2101      	movs	r1, #1
 8003866:	430a      	orrs	r2, r1
 8003868:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800386a:	f7fd f96f 	bl	8000b4c <HAL_GetTick>
 800386e:	0003      	movs	r3, r0
 8003870:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8003872:	e008      	b.n	8003886 <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8003874:	f7fd f96a 	bl	8000b4c <HAL_GetTick>
 8003878:	0002      	movs	r2, r0
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	1ad3      	subs	r3, r2, r3
 800387e:	2b02      	cmp	r3, #2
 8003880:	d901      	bls.n	8003886 <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 8003882:	2303      	movs	r3, #3
 8003884:	e0aa      	b.n	80039dc <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8003886:	4b38      	ldr	r3, [pc, #224]	@ (8003968 <HAL_RCC_OscConfig+0x340>)
 8003888:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800388a:	2202      	movs	r2, #2
 800388c:	4013      	ands	r3, r2
 800388e:	d0f1      	beq.n	8003874 <HAL_RCC_OscConfig+0x24c>
 8003890:	e018      	b.n	80038c4 <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8003892:	4b35      	ldr	r3, [pc, #212]	@ (8003968 <HAL_RCC_OscConfig+0x340>)
 8003894:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003896:	4b34      	ldr	r3, [pc, #208]	@ (8003968 <HAL_RCC_OscConfig+0x340>)
 8003898:	2101      	movs	r1, #1
 800389a:	438a      	bics	r2, r1
 800389c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800389e:	f7fd f955 	bl	8000b4c <HAL_GetTick>
 80038a2:	0003      	movs	r3, r0
 80038a4:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 80038a6:	e008      	b.n	80038ba <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80038a8:	f7fd f950 	bl	8000b4c <HAL_GetTick>
 80038ac:	0002      	movs	r2, r0
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	1ad3      	subs	r3, r2, r3
 80038b2:	2b02      	cmp	r3, #2
 80038b4:	d901      	bls.n	80038ba <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 80038b6:	2303      	movs	r3, #3
 80038b8:	e090      	b.n	80039dc <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 80038ba:	4b2b      	ldr	r3, [pc, #172]	@ (8003968 <HAL_RCC_OscConfig+0x340>)
 80038bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038be:	2202      	movs	r2, #2
 80038c0:	4013      	ands	r3, r2
 80038c2:	d1f1      	bne.n	80038a8 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	2204      	movs	r2, #4
 80038ca:	4013      	ands	r3, r2
 80038cc:	d100      	bne.n	80038d0 <HAL_RCC_OscConfig+0x2a8>
 80038ce:	e084      	b.n	80039da <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038d0:	230f      	movs	r3, #15
 80038d2:	18fb      	adds	r3, r7, r3
 80038d4:	2200      	movs	r2, #0
 80038d6:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 80038d8:	4b23      	ldr	r3, [pc, #140]	@ (8003968 <HAL_RCC_OscConfig+0x340>)
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	2238      	movs	r2, #56	@ 0x38
 80038de:	4013      	ands	r3, r2
 80038e0:	2b20      	cmp	r3, #32
 80038e2:	d106      	bne.n	80038f2 <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d000      	beq.n	80038ee <HAL_RCC_OscConfig+0x2c6>
 80038ec:	e075      	b.n	80039da <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	e074      	b.n	80039dc <HAL_RCC_OscConfig+0x3b4>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	2b01      	cmp	r3, #1
 80038f8:	d106      	bne.n	8003908 <HAL_RCC_OscConfig+0x2e0>
 80038fa:	4b1b      	ldr	r3, [pc, #108]	@ (8003968 <HAL_RCC_OscConfig+0x340>)
 80038fc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80038fe:	4b1a      	ldr	r3, [pc, #104]	@ (8003968 <HAL_RCC_OscConfig+0x340>)
 8003900:	2101      	movs	r1, #1
 8003902:	430a      	orrs	r2, r1
 8003904:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003906:	e01c      	b.n	8003942 <HAL_RCC_OscConfig+0x31a>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	2b05      	cmp	r3, #5
 800390e:	d10c      	bne.n	800392a <HAL_RCC_OscConfig+0x302>
 8003910:	4b15      	ldr	r3, [pc, #84]	@ (8003968 <HAL_RCC_OscConfig+0x340>)
 8003912:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003914:	4b14      	ldr	r3, [pc, #80]	@ (8003968 <HAL_RCC_OscConfig+0x340>)
 8003916:	2104      	movs	r1, #4
 8003918:	430a      	orrs	r2, r1
 800391a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800391c:	4b12      	ldr	r3, [pc, #72]	@ (8003968 <HAL_RCC_OscConfig+0x340>)
 800391e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003920:	4b11      	ldr	r3, [pc, #68]	@ (8003968 <HAL_RCC_OscConfig+0x340>)
 8003922:	2101      	movs	r1, #1
 8003924:	430a      	orrs	r2, r1
 8003926:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003928:	e00b      	b.n	8003942 <HAL_RCC_OscConfig+0x31a>
 800392a:	4b0f      	ldr	r3, [pc, #60]	@ (8003968 <HAL_RCC_OscConfig+0x340>)
 800392c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800392e:	4b0e      	ldr	r3, [pc, #56]	@ (8003968 <HAL_RCC_OscConfig+0x340>)
 8003930:	2101      	movs	r1, #1
 8003932:	438a      	bics	r2, r1
 8003934:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003936:	4b0c      	ldr	r3, [pc, #48]	@ (8003968 <HAL_RCC_OscConfig+0x340>)
 8003938:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800393a:	4b0b      	ldr	r3, [pc, #44]	@ (8003968 <HAL_RCC_OscConfig+0x340>)
 800393c:	2104      	movs	r1, #4
 800393e:	438a      	bics	r2, r1
 8003940:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d028      	beq.n	800399c <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800394a:	f7fd f8ff 	bl	8000b4c <HAL_GetTick>
 800394e:	0003      	movs	r3, r0
 8003950:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8003952:	e01d      	b.n	8003990 <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003954:	f7fd f8fa 	bl	8000b4c <HAL_GetTick>
 8003958:	0002      	movs	r2, r0
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	1ad3      	subs	r3, r2, r3
 800395e:	4a0b      	ldr	r2, [pc, #44]	@ (800398c <HAL_RCC_OscConfig+0x364>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d915      	bls.n	8003990 <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 8003964:	2303      	movs	r3, #3
 8003966:	e039      	b.n	80039dc <HAL_RCC_OscConfig+0x3b4>
 8003968:	40021000 	.word	0x40021000
 800396c:	fffeffff 	.word	0xfffeffff
 8003970:	fffbffff 	.word	0xfffbffff
 8003974:	ffff80ff 	.word	0xffff80ff
 8003978:	ffffc7ff 	.word	0xffffc7ff
 800397c:	02dc6c00 	.word	0x02dc6c00
 8003980:	20000004 	.word	0x20000004
 8003984:	20000008 	.word	0x20000008
 8003988:	fffffeff 	.word	0xfffffeff
 800398c:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8003990:	4b14      	ldr	r3, [pc, #80]	@ (80039e4 <HAL_RCC_OscConfig+0x3bc>)
 8003992:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003994:	2202      	movs	r2, #2
 8003996:	4013      	ands	r3, r2
 8003998:	d0dc      	beq.n	8003954 <HAL_RCC_OscConfig+0x32c>
 800399a:	e013      	b.n	80039c4 <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800399c:	f7fd f8d6 	bl	8000b4c <HAL_GetTick>
 80039a0:	0003      	movs	r3, r0
 80039a2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 80039a4:	e009      	b.n	80039ba <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039a6:	f7fd f8d1 	bl	8000b4c <HAL_GetTick>
 80039aa:	0002      	movs	r2, r0
 80039ac:	693b      	ldr	r3, [r7, #16]
 80039ae:	1ad3      	subs	r3, r2, r3
 80039b0:	4a0d      	ldr	r2, [pc, #52]	@ (80039e8 <HAL_RCC_OscConfig+0x3c0>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d901      	bls.n	80039ba <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 80039b6:	2303      	movs	r3, #3
 80039b8:	e010      	b.n	80039dc <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 80039ba:	4b0a      	ldr	r3, [pc, #40]	@ (80039e4 <HAL_RCC_OscConfig+0x3bc>)
 80039bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039be:	2202      	movs	r2, #2
 80039c0:	4013      	ands	r3, r2
 80039c2:	d1f0      	bne.n	80039a6 <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80039c4:	230f      	movs	r3, #15
 80039c6:	18fb      	adds	r3, r7, r3
 80039c8:	781b      	ldrb	r3, [r3, #0]
 80039ca:	2b01      	cmp	r3, #1
 80039cc:	d105      	bne.n	80039da <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80039ce:	4b05      	ldr	r3, [pc, #20]	@ (80039e4 <HAL_RCC_OscConfig+0x3bc>)
 80039d0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80039d2:	4b04      	ldr	r3, [pc, #16]	@ (80039e4 <HAL_RCC_OscConfig+0x3bc>)
 80039d4:	4905      	ldr	r1, [pc, #20]	@ (80039ec <HAL_RCC_OscConfig+0x3c4>)
 80039d6:	400a      	ands	r2, r1
 80039d8:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
  }
  return HAL_OK;
 80039da:	2300      	movs	r3, #0
}
 80039dc:	0018      	movs	r0, r3
 80039de:	46bd      	mov	sp, r7
 80039e0:	b006      	add	sp, #24
 80039e2:	bd80      	pop	{r7, pc}
 80039e4:	40021000 	.word	0x40021000
 80039e8:	00001388 	.word	0x00001388
 80039ec:	efffffff 	.word	0xefffffff

080039f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b084      	sub	sp, #16
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
 80039f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d101      	bne.n	8003a04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a00:	2301      	movs	r3, #1
 8003a02:	e0e9      	b.n	8003bd8 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a04:	4b76      	ldr	r3, [pc, #472]	@ (8003be0 <HAL_RCC_ClockConfig+0x1f0>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	2207      	movs	r2, #7
 8003a0a:	4013      	ands	r3, r2
 8003a0c:	683a      	ldr	r2, [r7, #0]
 8003a0e:	429a      	cmp	r2, r3
 8003a10:	d91e      	bls.n	8003a50 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a12:	4b73      	ldr	r3, [pc, #460]	@ (8003be0 <HAL_RCC_ClockConfig+0x1f0>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	2207      	movs	r2, #7
 8003a18:	4393      	bics	r3, r2
 8003a1a:	0019      	movs	r1, r3
 8003a1c:	4b70      	ldr	r3, [pc, #448]	@ (8003be0 <HAL_RCC_ClockConfig+0x1f0>)
 8003a1e:	683a      	ldr	r2, [r7, #0]
 8003a20:	430a      	orrs	r2, r1
 8003a22:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003a24:	f7fd f892 	bl	8000b4c <HAL_GetTick>
 8003a28:	0003      	movs	r3, r0
 8003a2a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003a2c:	e009      	b.n	8003a42 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003a2e:	f7fd f88d 	bl	8000b4c <HAL_GetTick>
 8003a32:	0002      	movs	r2, r0
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	1ad3      	subs	r3, r2, r3
 8003a38:	4a6a      	ldr	r2, [pc, #424]	@ (8003be4 <HAL_RCC_ClockConfig+0x1f4>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d901      	bls.n	8003a42 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003a3e:	2303      	movs	r3, #3
 8003a40:	e0ca      	b.n	8003bd8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003a42:	4b67      	ldr	r3, [pc, #412]	@ (8003be0 <HAL_RCC_ClockConfig+0x1f0>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	2207      	movs	r2, #7
 8003a48:	4013      	ands	r3, r2
 8003a4a:	683a      	ldr	r2, [r7, #0]
 8003a4c:	429a      	cmp	r2, r3
 8003a4e:	d1ee      	bne.n	8003a2e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	2202      	movs	r2, #2
 8003a56:	4013      	ands	r3, r2
 8003a58:	d017      	beq.n	8003a8a <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	2204      	movs	r2, #4
 8003a60:	4013      	ands	r3, r2
 8003a62:	d008      	beq.n	8003a76 <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003a64:	4b60      	ldr	r3, [pc, #384]	@ (8003be8 <HAL_RCC_ClockConfig+0x1f8>)
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	4a60      	ldr	r2, [pc, #384]	@ (8003bec <HAL_RCC_ClockConfig+0x1fc>)
 8003a6a:	401a      	ands	r2, r3
 8003a6c:	4b5e      	ldr	r3, [pc, #376]	@ (8003be8 <HAL_RCC_ClockConfig+0x1f8>)
 8003a6e:	21b0      	movs	r1, #176	@ 0xb0
 8003a70:	0109      	lsls	r1, r1, #4
 8003a72:	430a      	orrs	r2, r1
 8003a74:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a76:	4b5c      	ldr	r3, [pc, #368]	@ (8003be8 <HAL_RCC_ClockConfig+0x1f8>)
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	4a5d      	ldr	r2, [pc, #372]	@ (8003bf0 <HAL_RCC_ClockConfig+0x200>)
 8003a7c:	4013      	ands	r3, r2
 8003a7e:	0019      	movs	r1, r3
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	68da      	ldr	r2, [r3, #12]
 8003a84:	4b58      	ldr	r3, [pc, #352]	@ (8003be8 <HAL_RCC_ClockConfig+0x1f8>)
 8003a86:	430a      	orrs	r2, r1
 8003a88:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	2201      	movs	r2, #1
 8003a90:	4013      	ands	r3, r2
 8003a92:	d055      	beq.n	8003b40 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 8003a94:	4b54      	ldr	r3, [pc, #336]	@ (8003be8 <HAL_RCC_ClockConfig+0x1f8>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	221c      	movs	r2, #28
 8003a9a:	4393      	bics	r3, r2
 8003a9c:	0019      	movs	r1, r3
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	689a      	ldr	r2, [r3, #8]
 8003aa2:	4b51      	ldr	r3, [pc, #324]	@ (8003be8 <HAL_RCC_ClockConfig+0x1f8>)
 8003aa4:	430a      	orrs	r2, r1
 8003aa6:	601a      	str	r2, [r3, #0]

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	d107      	bne.n	8003ac0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ab0:	4b4d      	ldr	r3, [pc, #308]	@ (8003be8 <HAL_RCC_ClockConfig+0x1f8>)
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	2380      	movs	r3, #128	@ 0x80
 8003ab6:	029b      	lsls	r3, r3, #10
 8003ab8:	4013      	ands	r3, r2
 8003aba:	d11f      	bne.n	8003afc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	e08b      	b.n	8003bd8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d107      	bne.n	8003ad8 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ac8:	4b47      	ldr	r3, [pc, #284]	@ (8003be8 <HAL_RCC_ClockConfig+0x1f8>)
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	2380      	movs	r3, #128	@ 0x80
 8003ace:	00db      	lsls	r3, r3, #3
 8003ad0:	4013      	ands	r3, r2
 8003ad2:	d113      	bne.n	8003afc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	e07f      	b.n	8003bd8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	2b03      	cmp	r3, #3
 8003ade:	d106      	bne.n	8003aee <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8003ae0:	4b41      	ldr	r3, [pc, #260]	@ (8003be8 <HAL_RCC_ClockConfig+0x1f8>)
 8003ae2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ae4:	2202      	movs	r2, #2
 8003ae6:	4013      	ands	r3, r2
 8003ae8:	d108      	bne.n	8003afc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	e074      	b.n	8003bd8 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8003aee:	4b3e      	ldr	r3, [pc, #248]	@ (8003be8 <HAL_RCC_ClockConfig+0x1f8>)
 8003af0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003af2:	2202      	movs	r2, #2
 8003af4:	4013      	ands	r3, r2
 8003af6:	d101      	bne.n	8003afc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003af8:	2301      	movs	r3, #1
 8003afa:	e06d      	b.n	8003bd8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003afc:	4b3a      	ldr	r3, [pc, #232]	@ (8003be8 <HAL_RCC_ClockConfig+0x1f8>)
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	2207      	movs	r2, #7
 8003b02:	4393      	bics	r3, r2
 8003b04:	0019      	movs	r1, r3
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	685a      	ldr	r2, [r3, #4]
 8003b0a:	4b37      	ldr	r3, [pc, #220]	@ (8003be8 <HAL_RCC_ClockConfig+0x1f8>)
 8003b0c:	430a      	orrs	r2, r1
 8003b0e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b10:	f7fd f81c 	bl	8000b4c <HAL_GetTick>
 8003b14:	0003      	movs	r3, r0
 8003b16:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b18:	e009      	b.n	8003b2e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003b1a:	f7fd f817 	bl	8000b4c <HAL_GetTick>
 8003b1e:	0002      	movs	r2, r0
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	1ad3      	subs	r3, r2, r3
 8003b24:	4a2f      	ldr	r2, [pc, #188]	@ (8003be4 <HAL_RCC_ClockConfig+0x1f4>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d901      	bls.n	8003b2e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8003b2a:	2303      	movs	r3, #3
 8003b2c:	e054      	b.n	8003bd8 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b2e:	4b2e      	ldr	r3, [pc, #184]	@ (8003be8 <HAL_RCC_ClockConfig+0x1f8>)
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	2238      	movs	r2, #56	@ 0x38
 8003b34:	401a      	ands	r2, r3
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	00db      	lsls	r3, r3, #3
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	d1ec      	bne.n	8003b1a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b40:	4b27      	ldr	r3, [pc, #156]	@ (8003be0 <HAL_RCC_ClockConfig+0x1f0>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	2207      	movs	r2, #7
 8003b46:	4013      	ands	r3, r2
 8003b48:	683a      	ldr	r2, [r7, #0]
 8003b4a:	429a      	cmp	r2, r3
 8003b4c:	d21e      	bcs.n	8003b8c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b4e:	4b24      	ldr	r3, [pc, #144]	@ (8003be0 <HAL_RCC_ClockConfig+0x1f0>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	2207      	movs	r2, #7
 8003b54:	4393      	bics	r3, r2
 8003b56:	0019      	movs	r1, r3
 8003b58:	4b21      	ldr	r3, [pc, #132]	@ (8003be0 <HAL_RCC_ClockConfig+0x1f0>)
 8003b5a:	683a      	ldr	r2, [r7, #0]
 8003b5c:	430a      	orrs	r2, r1
 8003b5e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003b60:	f7fc fff4 	bl	8000b4c <HAL_GetTick>
 8003b64:	0003      	movs	r3, r0
 8003b66:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003b68:	e009      	b.n	8003b7e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003b6a:	f7fc ffef 	bl	8000b4c <HAL_GetTick>
 8003b6e:	0002      	movs	r2, r0
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	1ad3      	subs	r3, r2, r3
 8003b74:	4a1b      	ldr	r2, [pc, #108]	@ (8003be4 <HAL_RCC_ClockConfig+0x1f4>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d901      	bls.n	8003b7e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8003b7a:	2303      	movs	r3, #3
 8003b7c:	e02c      	b.n	8003bd8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003b7e:	4b18      	ldr	r3, [pc, #96]	@ (8003be0 <HAL_RCC_ClockConfig+0x1f0>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	2207      	movs	r2, #7
 8003b84:	4013      	ands	r3, r2
 8003b86:	683a      	ldr	r2, [r7, #0]
 8003b88:	429a      	cmp	r2, r3
 8003b8a:	d1ee      	bne.n	8003b6a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	2204      	movs	r2, #4
 8003b92:	4013      	ands	r3, r2
 8003b94:	d009      	beq.n	8003baa <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003b96:	4b14      	ldr	r3, [pc, #80]	@ (8003be8 <HAL_RCC_ClockConfig+0x1f8>)
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	4a16      	ldr	r2, [pc, #88]	@ (8003bf4 <HAL_RCC_ClockConfig+0x204>)
 8003b9c:	4013      	ands	r3, r2
 8003b9e:	0019      	movs	r1, r3
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	691a      	ldr	r2, [r3, #16]
 8003ba4:	4b10      	ldr	r3, [pc, #64]	@ (8003be8 <HAL_RCC_ClockConfig+0x1f8>)
 8003ba6:	430a      	orrs	r2, r1
 8003ba8:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003baa:	f000 f82b 	bl	8003c04 <HAL_RCC_GetSysClockFreq>
 8003bae:	0001      	movs	r1, r0
 8003bb0:	4b0d      	ldr	r3, [pc, #52]	@ (8003be8 <HAL_RCC_ClockConfig+0x1f8>)
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	0a1b      	lsrs	r3, r3, #8
 8003bb6:	220f      	movs	r2, #15
 8003bb8:	401a      	ands	r2, r3
 8003bba:	4b0f      	ldr	r3, [pc, #60]	@ (8003bf8 <HAL_RCC_ClockConfig+0x208>)
 8003bbc:	0092      	lsls	r2, r2, #2
 8003bbe:	58d3      	ldr	r3, [r2, r3]
 8003bc0:	221f      	movs	r2, #31
 8003bc2:	4013      	ands	r3, r2
 8003bc4:	000a      	movs	r2, r1
 8003bc6:	40da      	lsrs	r2, r3
 8003bc8:	4b0c      	ldr	r3, [pc, #48]	@ (8003bfc <HAL_RCC_ClockConfig+0x20c>)
 8003bca:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003bcc:	4b0c      	ldr	r3, [pc, #48]	@ (8003c00 <HAL_RCC_ClockConfig+0x210>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	0018      	movs	r0, r3
 8003bd2:	f7fc ff5f 	bl	8000a94 <HAL_InitTick>
 8003bd6:	0003      	movs	r3, r0
}
 8003bd8:	0018      	movs	r0, r3
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	b004      	add	sp, #16
 8003bde:	bd80      	pop	{r7, pc}
 8003be0:	40022000 	.word	0x40022000
 8003be4:	00001388 	.word	0x00001388
 8003be8:	40021000 	.word	0x40021000
 8003bec:	ffff84ff 	.word	0xffff84ff
 8003bf0:	fffff0ff 	.word	0xfffff0ff
 8003bf4:	ffff8fff 	.word	0xffff8fff
 8003bf8:	08004714 	.word	0x08004714
 8003bfc:	20000004 	.word	0x20000004
 8003c00:	20000008 	.word	0x20000008

08003c04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b082      	sub	sp, #8
 8003c08:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003c0a:	4b1c      	ldr	r3, [pc, #112]	@ (8003c7c <HAL_RCC_GetSysClockFreq+0x78>)
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	2238      	movs	r2, #56	@ 0x38
 8003c10:	4013      	ands	r3, r2
 8003c12:	d10f      	bne.n	8003c34 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003c14:	4b19      	ldr	r3, [pc, #100]	@ (8003c7c <HAL_RCC_GetSysClockFreq+0x78>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	0adb      	lsrs	r3, r3, #11
 8003c1a:	2207      	movs	r2, #7
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	2201      	movs	r2, #1
 8003c20:	409a      	lsls	r2, r3
 8003c22:	0013      	movs	r3, r2
 8003c24:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8003c26:	6839      	ldr	r1, [r7, #0]
 8003c28:	4815      	ldr	r0, [pc, #84]	@ (8003c80 <HAL_RCC_GetSysClockFreq+0x7c>)
 8003c2a:	f7fc fa6d 	bl	8000108 <__udivsi3>
 8003c2e:	0003      	movs	r3, r0
 8003c30:	607b      	str	r3, [r7, #4]
 8003c32:	e01e      	b.n	8003c72 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003c34:	4b11      	ldr	r3, [pc, #68]	@ (8003c7c <HAL_RCC_GetSysClockFreq+0x78>)
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	2238      	movs	r2, #56	@ 0x38
 8003c3a:	4013      	ands	r3, r2
 8003c3c:	2b08      	cmp	r3, #8
 8003c3e:	d102      	bne.n	8003c46 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003c40:	4b10      	ldr	r3, [pc, #64]	@ (8003c84 <HAL_RCC_GetSysClockFreq+0x80>)
 8003c42:	607b      	str	r3, [r7, #4]
 8003c44:	e015      	b.n	8003c72 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8003c46:	4b0d      	ldr	r3, [pc, #52]	@ (8003c7c <HAL_RCC_GetSysClockFreq+0x78>)
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	2238      	movs	r2, #56	@ 0x38
 8003c4c:	4013      	ands	r3, r2
 8003c4e:	2b20      	cmp	r3, #32
 8003c50:	d103      	bne.n	8003c5a <HAL_RCC_GetSysClockFreq+0x56>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8003c52:	2380      	movs	r3, #128	@ 0x80
 8003c54:	021b      	lsls	r3, r3, #8
 8003c56:	607b      	str	r3, [r7, #4]
 8003c58:	e00b      	b.n	8003c72 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8003c5a:	4b08      	ldr	r3, [pc, #32]	@ (8003c7c <HAL_RCC_GetSysClockFreq+0x78>)
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	2238      	movs	r2, #56	@ 0x38
 8003c60:	4013      	ands	r3, r2
 8003c62:	2b18      	cmp	r3, #24
 8003c64:	d103      	bne.n	8003c6e <HAL_RCC_GetSysClockFreq+0x6a>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8003c66:	23fa      	movs	r3, #250	@ 0xfa
 8003c68:	01db      	lsls	r3, r3, #7
 8003c6a:	607b      	str	r3, [r7, #4]
 8003c6c:	e001      	b.n	8003c72 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else
  {
    sysclockfreq = 0U;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	607b      	str	r3, [r7, #4]
  }

  return sysclockfreq;
 8003c72:	687b      	ldr	r3, [r7, #4]
}
 8003c74:	0018      	movs	r0, r3
 8003c76:	46bd      	mov	sp, r7
 8003c78:	b002      	add	sp, #8
 8003c7a:	bd80      	pop	{r7, pc}
 8003c7c:	40021000 	.word	0x40021000
 8003c80:	02dc6c00 	.word	0x02dc6c00
 8003c84:	007a1200 	.word	0x007a1200

08003c88 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to RTC domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b086      	sub	sp, #24
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8003c90:	2313      	movs	r3, #19
 8003c92:	18fb      	adds	r3, r7, r3
 8003c94:	2200      	movs	r2, #0
 8003c96:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003c98:	2312      	movs	r3, #18
 8003c9a:	18fb      	adds	r3, r7, r3
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	2380      	movs	r3, #128	@ 0x80
 8003ca6:	029b      	lsls	r3, r3, #10
 8003ca8:	4013      	ands	r3, r2
 8003caa:	d100      	bne.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x26>
 8003cac:	e079      	b.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x11a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003cae:	2011      	movs	r0, #17
 8003cb0:	183b      	adds	r3, r7, r0
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cb6:	4b64      	ldr	r3, [pc, #400]	@ (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003cb8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003cba:	2380      	movs	r3, #128	@ 0x80
 8003cbc:	055b      	lsls	r3, r3, #21
 8003cbe:	4013      	ands	r3, r2
 8003cc0:	d110      	bne.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cc2:	4b61      	ldr	r3, [pc, #388]	@ (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003cc4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003cc6:	4b60      	ldr	r3, [pc, #384]	@ (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003cc8:	2180      	movs	r1, #128	@ 0x80
 8003cca:	0549      	lsls	r1, r1, #21
 8003ccc:	430a      	orrs	r2, r1
 8003cce:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003cd0:	4b5d      	ldr	r3, [pc, #372]	@ (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003cd2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003cd4:	2380      	movs	r3, #128	@ 0x80
 8003cd6:	055b      	lsls	r3, r3, #21
 8003cd8:	4013      	ands	r3, r2
 8003cda:	60bb      	str	r3, [r7, #8]
 8003cdc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cde:	183b      	adds	r3, r7, r0
 8003ce0:	2201      	movs	r2, #1
 8003ce2:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 8003ce4:	4b58      	ldr	r3, [pc, #352]	@ (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003ce6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003ce8:	23c0      	movs	r3, #192	@ 0xc0
 8003cea:	009b      	lsls	r3, r3, #2
 8003cec:	4013      	ands	r3, r2
 8003cee:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d019      	beq.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	699b      	ldr	r3, [r3, #24]
 8003cfa:	697a      	ldr	r2, [r7, #20]
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	d014      	beq.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 8003d00:	4b51      	ldr	r3, [pc, #324]	@ (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003d02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d04:	4a51      	ldr	r2, [pc, #324]	@ (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003d06:	4013      	ands	r3, r2
 8003d08:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003d0a:	4b4f      	ldr	r3, [pc, #316]	@ (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003d0c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003d0e:	4b4e      	ldr	r3, [pc, #312]	@ (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003d10:	2180      	movs	r1, #128	@ 0x80
 8003d12:	0249      	lsls	r1, r1, #9
 8003d14:	430a      	orrs	r2, r1
 8003d16:	65da      	str	r2, [r3, #92]	@ 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003d18:	4b4b      	ldr	r3, [pc, #300]	@ (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003d1a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003d1c:	4b4a      	ldr	r3, [pc, #296]	@ (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003d1e:	494c      	ldr	r1, [pc, #304]	@ (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8003d20:	400a      	ands	r2, r1
 8003d22:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 8003d24:	4b48      	ldr	r3, [pc, #288]	@ (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003d26:	697a      	ldr	r2, [r7, #20]
 8003d28:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	2201      	movs	r2, #1
 8003d2e:	4013      	ands	r3, r2
 8003d30:	d016      	beq.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d32:	f7fc ff0b 	bl	8000b4c <HAL_GetTick>
 8003d36:	0003      	movs	r3, r0
 8003d38:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8003d3a:	e00c      	b.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0xce>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d3c:	f7fc ff06 	bl	8000b4c <HAL_GetTick>
 8003d40:	0002      	movs	r2, r0
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	1ad3      	subs	r3, r2, r3
 8003d46:	4a43      	ldr	r2, [pc, #268]	@ (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d904      	bls.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0xce>
        {
          ret = HAL_TIMEOUT;
 8003d4c:	2313      	movs	r3, #19
 8003d4e:	18fb      	adds	r3, r7, r3
 8003d50:	2203      	movs	r2, #3
 8003d52:	701a      	strb	r2, [r3, #0]
          break;
 8003d54:	e004      	b.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8003d56:	4b3c      	ldr	r3, [pc, #240]	@ (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003d58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d5a:	2202      	movs	r2, #2
 8003d5c:	4013      	ands	r3, r2
 8003d5e:	d0ed      	beq.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0xb4>
        }
      }
    }

    if (ret == HAL_OK)
 8003d60:	2313      	movs	r3, #19
 8003d62:	18fb      	adds	r3, r7, r3
 8003d64:	781b      	ldrb	r3, [r3, #0]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d10a      	bne.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d6a:	4b37      	ldr	r3, [pc, #220]	@ (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003d6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d6e:	4a37      	ldr	r2, [pc, #220]	@ (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003d70:	4013      	ands	r3, r2
 8003d72:	0019      	movs	r1, r3
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	699a      	ldr	r2, [r3, #24]
 8003d78:	4b33      	ldr	r3, [pc, #204]	@ (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003d7a:	430a      	orrs	r2, r1
 8003d7c:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003d7e:	e005      	b.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x104>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d80:	2312      	movs	r3, #18
 8003d82:	18fb      	adds	r3, r7, r3
 8003d84:	2213      	movs	r2, #19
 8003d86:	18ba      	adds	r2, r7, r2
 8003d88:	7812      	ldrb	r2, [r2, #0]
 8003d8a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003d8c:	2311      	movs	r3, #17
 8003d8e:	18fb      	adds	r3, r7, r3
 8003d90:	781b      	ldrb	r3, [r3, #0]
 8003d92:	2b01      	cmp	r3, #1
 8003d94:	d105      	bne.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d96:	4b2c      	ldr	r3, [pc, #176]	@ (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003d98:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003d9a:	4b2b      	ldr	r3, [pc, #172]	@ (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003d9c:	492e      	ldr	r1, [pc, #184]	@ (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d9e:	400a      	ands	r2, r1
 8003da0:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	2201      	movs	r2, #1
 8003da8:	4013      	ands	r3, r2
 8003daa:	d009      	beq.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x138>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003dac:	4b26      	ldr	r3, [pc, #152]	@ (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003dae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003db0:	2203      	movs	r2, #3
 8003db2:	4393      	bics	r3, r2
 8003db4:	0019      	movs	r1, r3
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	689a      	ldr	r2, [r3, #8]
 8003dba:	4b23      	ldr	r3, [pc, #140]	@ (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003dbc:	430a      	orrs	r2, r1
 8003dbe:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	2240      	movs	r2, #64	@ 0x40
 8003dc6:	4013      	ands	r3, r2
 8003dc8:	d009      	beq.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003dca:	4b1f      	ldr	r3, [pc, #124]	@ (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003dcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dce:	4a23      	ldr	r2, [pc, #140]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003dd0:	4013      	ands	r3, r2
 8003dd2:	0019      	movs	r1, r3
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	68da      	ldr	r2, [r3, #12]
 8003dd8:	4b1b      	ldr	r3, [pc, #108]	@ (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003dda:	430a      	orrs	r2, r1
 8003ddc:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	2380      	movs	r3, #128	@ 0x80
 8003de4:	01db      	lsls	r3, r3, #7
 8003de6:	4013      	ands	r3, r2
 8003de8:	d008      	beq.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x174>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003dea:	4b17      	ldr	r3, [pc, #92]	@ (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003dec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dee:	009b      	lsls	r3, r3, #2
 8003df0:	0899      	lsrs	r1, r3, #2
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	695a      	ldr	r2, [r3, #20]
 8003df6:	4b14      	ldr	r3, [pc, #80]	@ (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003df8:	430a      	orrs	r2, r1
 8003dfa:	655a      	str	r2, [r3, #84]	@ 0x54

  }

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	2380      	movs	r3, #128	@ 0x80
 8003e02:	011b      	lsls	r3, r3, #4
 8003e04:	4013      	ands	r3, r2
 8003e06:	d009      	beq.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x194>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8003e08:	4b0f      	ldr	r3, [pc, #60]	@ (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003e0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e0c:	4a14      	ldr	r2, [pc, #80]	@ (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003e0e:	4013      	ands	r3, r2
 8003e10:	0019      	movs	r1, r3
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	691a      	ldr	r2, [r3, #16]
 8003e16:	4b0c      	ldr	r3, [pc, #48]	@ (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003e18:	430a      	orrs	r2, r1
 8003e1a:	655a      	str	r2, [r3, #84]	@ 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	da09      	bge.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 8003e24:	4b08      	ldr	r3, [pc, #32]	@ (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	22e0      	movs	r2, #224	@ 0xe0
 8003e2a:	4393      	bics	r3, r2
 8003e2c:	0019      	movs	r1, r3
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	685a      	ldr	r2, [r3, #4]
 8003e32:	4b05      	ldr	r3, [pc, #20]	@ (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003e34:	430a      	orrs	r2, r1
 8003e36:	601a      	str	r2, [r3, #0]
  }
  return status;
 8003e38:	2312      	movs	r3, #18
 8003e3a:	18fb      	adds	r3, r7, r3
 8003e3c:	781b      	ldrb	r3, [r3, #0]
}
 8003e3e:	0018      	movs	r0, r3
 8003e40:	46bd      	mov	sp, r7
 8003e42:	b006      	add	sp, #24
 8003e44:	bd80      	pop	{r7, pc}
 8003e46:	46c0      	nop			@ (mov r8, r8)
 8003e48:	40021000 	.word	0x40021000
 8003e4c:	fffffcff 	.word	0xfffffcff
 8003e50:	fffeffff 	.word	0xfffeffff
 8003e54:	00001388 	.word	0x00001388
 8003e58:	efffffff 	.word	0xefffffff
 8003e5c:	ffffcfff 	.word	0xffffcfff
 8003e60:	ffff3fff 	.word	0xffff3fff

08003e64 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b082      	sub	sp, #8
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d101      	bne.n	8003e76 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	e04a      	b.n	8003f0c <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	223d      	movs	r2, #61	@ 0x3d
 8003e7a:	5c9b      	ldrb	r3, [r3, r2]
 8003e7c:	b2db      	uxtb	r3, r3
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d107      	bne.n	8003e92 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	223c      	movs	r2, #60	@ 0x3c
 8003e86:	2100      	movs	r1, #0
 8003e88:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	0018      	movs	r0, r3
 8003e8e:	f7fc fd51 	bl	8000934 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	223d      	movs	r2, #61	@ 0x3d
 8003e96:	2102      	movs	r1, #2
 8003e98:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681a      	ldr	r2, [r3, #0]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	3304      	adds	r3, #4
 8003ea2:	0019      	movs	r1, r3
 8003ea4:	0010      	movs	r0, r2
 8003ea6:	f000 fa7b 	bl	80043a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2248      	movs	r2, #72	@ 0x48
 8003eae:	2101      	movs	r1, #1
 8003eb0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	223e      	movs	r2, #62	@ 0x3e
 8003eb6:	2101      	movs	r1, #1
 8003eb8:	5499      	strb	r1, [r3, r2]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	223f      	movs	r2, #63	@ 0x3f
 8003ebe:	2101      	movs	r1, #1
 8003ec0:	5499      	strb	r1, [r3, r2]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2240      	movs	r2, #64	@ 0x40
 8003ec6:	2101      	movs	r1, #1
 8003ec8:	5499      	strb	r1, [r3, r2]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2241      	movs	r2, #65	@ 0x41
 8003ece:	2101      	movs	r1, #1
 8003ed0:	5499      	strb	r1, [r3, r2]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2242      	movs	r2, #66	@ 0x42
 8003ed6:	2101      	movs	r1, #1
 8003ed8:	5499      	strb	r1, [r3, r2]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2243      	movs	r2, #67	@ 0x43
 8003ede:	2101      	movs	r1, #1
 8003ee0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2244      	movs	r2, #68	@ 0x44
 8003ee6:	2101      	movs	r1, #1
 8003ee8:	5499      	strb	r1, [r3, r2]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2245      	movs	r2, #69	@ 0x45
 8003eee:	2101      	movs	r1, #1
 8003ef0:	5499      	strb	r1, [r3, r2]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2246      	movs	r2, #70	@ 0x46
 8003ef6:	2101      	movs	r1, #1
 8003ef8:	5499      	strb	r1, [r3, r2]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2247      	movs	r2, #71	@ 0x47
 8003efe:	2101      	movs	r1, #1
 8003f00:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	223d      	movs	r2, #61	@ 0x3d
 8003f06:	2101      	movs	r1, #1
 8003f08:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003f0a:	2300      	movs	r3, #0
}
 8003f0c:	0018      	movs	r0, r3
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	b002      	add	sp, #8
 8003f12:	bd80      	pop	{r7, pc}

08003f14 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b084      	sub	sp, #16
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	223d      	movs	r2, #61	@ 0x3d
 8003f20:	5c9b      	ldrb	r3, [r3, r2]
 8003f22:	b2db      	uxtb	r3, r3
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	d001      	beq.n	8003f2c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	e037      	b.n	8003f9c <HAL_TIM_Base_Start_IT+0x88>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	223d      	movs	r2, #61	@ 0x3d
 8003f30:	2102      	movs	r1, #2
 8003f32:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	68da      	ldr	r2, [r3, #12]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	2101      	movs	r1, #1
 8003f40:	430a      	orrs	r2, r1
 8003f42:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a16      	ldr	r2, [pc, #88]	@ (8003fa4 <HAL_TIM_Base_Start_IT+0x90>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d004      	beq.n	8003f58 <HAL_TIM_Base_Start_IT+0x44>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a15      	ldr	r2, [pc, #84]	@ (8003fa8 <HAL_TIM_Base_Start_IT+0x94>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d116      	bne.n	8003f86 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	4a13      	ldr	r2, [pc, #76]	@ (8003fac <HAL_TIM_Base_Start_IT+0x98>)
 8003f60:	4013      	ands	r3, r2
 8003f62:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2b06      	cmp	r3, #6
 8003f68:	d016      	beq.n	8003f98 <HAL_TIM_Base_Start_IT+0x84>
 8003f6a:	68fa      	ldr	r2, [r7, #12]
 8003f6c:	2380      	movs	r3, #128	@ 0x80
 8003f6e:	025b      	lsls	r3, r3, #9
 8003f70:	429a      	cmp	r2, r3
 8003f72:	d011      	beq.n	8003f98 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	681a      	ldr	r2, [r3, #0]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	2101      	movs	r1, #1
 8003f80:	430a      	orrs	r2, r1
 8003f82:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f84:	e008      	b.n	8003f98 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	681a      	ldr	r2, [r3, #0]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	2101      	movs	r1, #1
 8003f92:	430a      	orrs	r2, r1
 8003f94:	601a      	str	r2, [r3, #0]
 8003f96:	e000      	b.n	8003f9a <HAL_TIM_Base_Start_IT+0x86>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f98:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8003f9a:	2300      	movs	r3, #0
}
 8003f9c:	0018      	movs	r0, r3
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	b004      	add	sp, #16
 8003fa2:	bd80      	pop	{r7, pc}
 8003fa4:	40012c00 	.word	0x40012c00
 8003fa8:	40000400 	.word	0x40000400
 8003fac:	00010007 	.word	0x00010007

08003fb0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b084      	sub	sp, #16
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	68db      	ldr	r3, [r3, #12]
 8003fbe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	691b      	ldr	r3, [r3, #16]
 8003fc6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	2202      	movs	r2, #2
 8003fcc:	4013      	ands	r3, r2
 8003fce:	d021      	beq.n	8004014 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2202      	movs	r2, #2
 8003fd4:	4013      	ands	r3, r2
 8003fd6:	d01d      	beq.n	8004014 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	2203      	movs	r2, #3
 8003fde:	4252      	negs	r2, r2
 8003fe0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2201      	movs	r2, #1
 8003fe6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	699b      	ldr	r3, [r3, #24]
 8003fee:	2203      	movs	r2, #3
 8003ff0:	4013      	ands	r3, r2
 8003ff2:	d004      	beq.n	8003ffe <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	0018      	movs	r0, r3
 8003ff8:	f000 f9ba 	bl	8004370 <HAL_TIM_IC_CaptureCallback>
 8003ffc:	e007      	b.n	800400e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	0018      	movs	r0, r3
 8004002:	f000 f9ad 	bl	8004360 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	0018      	movs	r0, r3
 800400a:	f000 f9b9 	bl	8004380 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2200      	movs	r2, #0
 8004012:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	2204      	movs	r2, #4
 8004018:	4013      	ands	r3, r2
 800401a:	d022      	beq.n	8004062 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2204      	movs	r2, #4
 8004020:	4013      	ands	r3, r2
 8004022:	d01e      	beq.n	8004062 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	2205      	movs	r2, #5
 800402a:	4252      	negs	r2, r2
 800402c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2202      	movs	r2, #2
 8004032:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	699a      	ldr	r2, [r3, #24]
 800403a:	23c0      	movs	r3, #192	@ 0xc0
 800403c:	009b      	lsls	r3, r3, #2
 800403e:	4013      	ands	r3, r2
 8004040:	d004      	beq.n	800404c <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	0018      	movs	r0, r3
 8004046:	f000 f993 	bl	8004370 <HAL_TIM_IC_CaptureCallback>
 800404a:	e007      	b.n	800405c <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	0018      	movs	r0, r3
 8004050:	f000 f986 	bl	8004360 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	0018      	movs	r0, r3
 8004058:	f000 f992 	bl	8004380 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2200      	movs	r2, #0
 8004060:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	2208      	movs	r2, #8
 8004066:	4013      	ands	r3, r2
 8004068:	d021      	beq.n	80040ae <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	2208      	movs	r2, #8
 800406e:	4013      	ands	r3, r2
 8004070:	d01d      	beq.n	80040ae <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	2209      	movs	r2, #9
 8004078:	4252      	negs	r2, r2
 800407a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2204      	movs	r2, #4
 8004080:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	69db      	ldr	r3, [r3, #28]
 8004088:	2203      	movs	r2, #3
 800408a:	4013      	ands	r3, r2
 800408c:	d004      	beq.n	8004098 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	0018      	movs	r0, r3
 8004092:	f000 f96d 	bl	8004370 <HAL_TIM_IC_CaptureCallback>
 8004096:	e007      	b.n	80040a8 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	0018      	movs	r0, r3
 800409c:	f000 f960 	bl	8004360 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	0018      	movs	r0, r3
 80040a4:	f000 f96c 	bl	8004380 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2200      	movs	r2, #0
 80040ac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	2210      	movs	r2, #16
 80040b2:	4013      	ands	r3, r2
 80040b4:	d022      	beq.n	80040fc <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2210      	movs	r2, #16
 80040ba:	4013      	ands	r3, r2
 80040bc:	d01e      	beq.n	80040fc <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	2211      	movs	r2, #17
 80040c4:	4252      	negs	r2, r2
 80040c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2208      	movs	r2, #8
 80040cc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	69da      	ldr	r2, [r3, #28]
 80040d4:	23c0      	movs	r3, #192	@ 0xc0
 80040d6:	009b      	lsls	r3, r3, #2
 80040d8:	4013      	ands	r3, r2
 80040da:	d004      	beq.n	80040e6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	0018      	movs	r0, r3
 80040e0:	f000 f946 	bl	8004370 <HAL_TIM_IC_CaptureCallback>
 80040e4:	e007      	b.n	80040f6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	0018      	movs	r0, r3
 80040ea:	f000 f939 	bl	8004360 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	0018      	movs	r0, r3
 80040f2:	f000 f945 	bl	8004380 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2200      	movs	r2, #0
 80040fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	2201      	movs	r2, #1
 8004100:	4013      	ands	r3, r2
 8004102:	d00c      	beq.n	800411e <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2201      	movs	r2, #1
 8004108:	4013      	ands	r3, r2
 800410a:	d008      	beq.n	800411e <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	2202      	movs	r2, #2
 8004112:	4252      	negs	r2, r2
 8004114:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	0018      	movs	r0, r3
 800411a:	f7fc f965 	bl	80003e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	2280      	movs	r2, #128	@ 0x80
 8004122:	4013      	ands	r3, r2
 8004124:	d00c      	beq.n	8004140 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	2280      	movs	r2, #128	@ 0x80
 800412a:	4013      	ands	r3, r2
 800412c:	d008      	beq.n	8004140 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	2281      	movs	r2, #129	@ 0x81
 8004134:	4252      	negs	r2, r2
 8004136:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	0018      	movs	r0, r3
 800413c:	f000 faa2 	bl	8004684 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004140:	68ba      	ldr	r2, [r7, #8]
 8004142:	2380      	movs	r3, #128	@ 0x80
 8004144:	005b      	lsls	r3, r3, #1
 8004146:	4013      	ands	r3, r2
 8004148:	d00b      	beq.n	8004162 <HAL_TIM_IRQHandler+0x1b2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	2280      	movs	r2, #128	@ 0x80
 800414e:	4013      	ands	r3, r2
 8004150:	d007      	beq.n	8004162 <HAL_TIM_IRQHandler+0x1b2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a16      	ldr	r2, [pc, #88]	@ (80041b0 <HAL_TIM_IRQHandler+0x200>)
 8004158:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	0018      	movs	r0, r3
 800415e:	f000 fa99 	bl	8004694 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	2240      	movs	r2, #64	@ 0x40
 8004166:	4013      	ands	r3, r2
 8004168:	d00c      	beq.n	8004184 <HAL_TIM_IRQHandler+0x1d4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2240      	movs	r2, #64	@ 0x40
 800416e:	4013      	ands	r3, r2
 8004170:	d008      	beq.n	8004184 <HAL_TIM_IRQHandler+0x1d4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	2241      	movs	r2, #65	@ 0x41
 8004178:	4252      	negs	r2, r2
 800417a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	0018      	movs	r0, r3
 8004180:	f000 f906 	bl	8004390 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	2220      	movs	r2, #32
 8004188:	4013      	ands	r3, r2
 800418a:	d00c      	beq.n	80041a6 <HAL_TIM_IRQHandler+0x1f6>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2220      	movs	r2, #32
 8004190:	4013      	ands	r3, r2
 8004192:	d008      	beq.n	80041a6 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	2221      	movs	r2, #33	@ 0x21
 800419a:	4252      	negs	r2, r2
 800419c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	0018      	movs	r0, r3
 80041a2:	f000 fa67 	bl	8004674 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80041a6:	46c0      	nop			@ (mov r8, r8)
 80041a8:	46bd      	mov	sp, r7
 80041aa:	b004      	add	sp, #16
 80041ac:	bd80      	pop	{r7, pc}
 80041ae:	46c0      	nop			@ (mov r8, r8)
 80041b0:	fffffeff 	.word	0xfffffeff

080041b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b084      	sub	sp, #16
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
 80041bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80041be:	230f      	movs	r3, #15
 80041c0:	18fb      	adds	r3, r7, r3
 80041c2:	2200      	movs	r2, #0
 80041c4:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	223c      	movs	r2, #60	@ 0x3c
 80041ca:	5c9b      	ldrb	r3, [r3, r2]
 80041cc:	2b01      	cmp	r3, #1
 80041ce:	d101      	bne.n	80041d4 <HAL_TIM_ConfigClockSource+0x20>
 80041d0:	2302      	movs	r3, #2
 80041d2:	e0bc      	b.n	800434e <HAL_TIM_ConfigClockSource+0x19a>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	223c      	movs	r2, #60	@ 0x3c
 80041d8:	2101      	movs	r1, #1
 80041da:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	223d      	movs	r2, #61	@ 0x3d
 80041e0:	2102      	movs	r1, #2
 80041e2:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	4a5a      	ldr	r2, [pc, #360]	@ (8004358 <HAL_TIM_ConfigClockSource+0x1a4>)
 80041f0:	4013      	ands	r3, r2
 80041f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	4a59      	ldr	r2, [pc, #356]	@ (800435c <HAL_TIM_ConfigClockSource+0x1a8>)
 80041f8:	4013      	ands	r3, r2
 80041fa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	68ba      	ldr	r2, [r7, #8]
 8004202:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	2280      	movs	r2, #128	@ 0x80
 800420a:	0192      	lsls	r2, r2, #6
 800420c:	4293      	cmp	r3, r2
 800420e:	d040      	beq.n	8004292 <HAL_TIM_ConfigClockSource+0xde>
 8004210:	2280      	movs	r2, #128	@ 0x80
 8004212:	0192      	lsls	r2, r2, #6
 8004214:	4293      	cmp	r3, r2
 8004216:	d900      	bls.n	800421a <HAL_TIM_ConfigClockSource+0x66>
 8004218:	e088      	b.n	800432c <HAL_TIM_ConfigClockSource+0x178>
 800421a:	2280      	movs	r2, #128	@ 0x80
 800421c:	0152      	lsls	r2, r2, #5
 800421e:	4293      	cmp	r3, r2
 8004220:	d100      	bne.n	8004224 <HAL_TIM_ConfigClockSource+0x70>
 8004222:	e088      	b.n	8004336 <HAL_TIM_ConfigClockSource+0x182>
 8004224:	2280      	movs	r2, #128	@ 0x80
 8004226:	0152      	lsls	r2, r2, #5
 8004228:	4293      	cmp	r3, r2
 800422a:	d900      	bls.n	800422e <HAL_TIM_ConfigClockSource+0x7a>
 800422c:	e07e      	b.n	800432c <HAL_TIM_ConfigClockSource+0x178>
 800422e:	2b70      	cmp	r3, #112	@ 0x70
 8004230:	d018      	beq.n	8004264 <HAL_TIM_ConfigClockSource+0xb0>
 8004232:	d900      	bls.n	8004236 <HAL_TIM_ConfigClockSource+0x82>
 8004234:	e07a      	b.n	800432c <HAL_TIM_ConfigClockSource+0x178>
 8004236:	2b60      	cmp	r3, #96	@ 0x60
 8004238:	d04f      	beq.n	80042da <HAL_TIM_ConfigClockSource+0x126>
 800423a:	d900      	bls.n	800423e <HAL_TIM_ConfigClockSource+0x8a>
 800423c:	e076      	b.n	800432c <HAL_TIM_ConfigClockSource+0x178>
 800423e:	2b50      	cmp	r3, #80	@ 0x50
 8004240:	d03b      	beq.n	80042ba <HAL_TIM_ConfigClockSource+0x106>
 8004242:	d900      	bls.n	8004246 <HAL_TIM_ConfigClockSource+0x92>
 8004244:	e072      	b.n	800432c <HAL_TIM_ConfigClockSource+0x178>
 8004246:	2b40      	cmp	r3, #64	@ 0x40
 8004248:	d057      	beq.n	80042fa <HAL_TIM_ConfigClockSource+0x146>
 800424a:	d900      	bls.n	800424e <HAL_TIM_ConfigClockSource+0x9a>
 800424c:	e06e      	b.n	800432c <HAL_TIM_ConfigClockSource+0x178>
 800424e:	2b30      	cmp	r3, #48	@ 0x30
 8004250:	d063      	beq.n	800431a <HAL_TIM_ConfigClockSource+0x166>
 8004252:	d86b      	bhi.n	800432c <HAL_TIM_ConfigClockSource+0x178>
 8004254:	2b20      	cmp	r3, #32
 8004256:	d060      	beq.n	800431a <HAL_TIM_ConfigClockSource+0x166>
 8004258:	d868      	bhi.n	800432c <HAL_TIM_ConfigClockSource+0x178>
 800425a:	2b00      	cmp	r3, #0
 800425c:	d05d      	beq.n	800431a <HAL_TIM_ConfigClockSource+0x166>
 800425e:	2b10      	cmp	r3, #16
 8004260:	d05b      	beq.n	800431a <HAL_TIM_ConfigClockSource+0x166>
 8004262:	e063      	b.n	800432c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004274:	f000 f97c 	bl	8004570 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	689b      	ldr	r3, [r3, #8]
 800427e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	2277      	movs	r2, #119	@ 0x77
 8004284:	4313      	orrs	r3, r2
 8004286:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	68ba      	ldr	r2, [r7, #8]
 800428e:	609a      	str	r2, [r3, #8]
      break;
 8004290:	e052      	b.n	8004338 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80042a2:	f000 f965 	bl	8004570 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	689a      	ldr	r2, [r3, #8]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	2180      	movs	r1, #128	@ 0x80
 80042b2:	01c9      	lsls	r1, r1, #7
 80042b4:	430a      	orrs	r2, r1
 80042b6:	609a      	str	r2, [r3, #8]
      break;
 80042b8:	e03e      	b.n	8004338 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80042c6:	001a      	movs	r2, r3
 80042c8:	f000 f8d6 	bl	8004478 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	2150      	movs	r1, #80	@ 0x50
 80042d2:	0018      	movs	r0, r3
 80042d4:	f000 f930 	bl	8004538 <TIM_ITRx_SetConfig>
      break;
 80042d8:	e02e      	b.n	8004338 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80042e6:	001a      	movs	r2, r3
 80042e8:	f000 f8f4 	bl	80044d4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	2160      	movs	r1, #96	@ 0x60
 80042f2:	0018      	movs	r0, r3
 80042f4:	f000 f920 	bl	8004538 <TIM_ITRx_SetConfig>
      break;
 80042f8:	e01e      	b.n	8004338 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004306:	001a      	movs	r2, r3
 8004308:	f000 f8b6 	bl	8004478 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	2140      	movs	r1, #64	@ 0x40
 8004312:	0018      	movs	r0, r3
 8004314:	f000 f910 	bl	8004538 <TIM_ITRx_SetConfig>
      break;
 8004318:	e00e      	b.n	8004338 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681a      	ldr	r2, [r3, #0]
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	0019      	movs	r1, r3
 8004324:	0010      	movs	r0, r2
 8004326:	f000 f907 	bl	8004538 <TIM_ITRx_SetConfig>
      break;
 800432a:	e005      	b.n	8004338 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 800432c:	230f      	movs	r3, #15
 800432e:	18fb      	adds	r3, r7, r3
 8004330:	2201      	movs	r2, #1
 8004332:	701a      	strb	r2, [r3, #0]
      break;
 8004334:	e000      	b.n	8004338 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8004336:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	223d      	movs	r2, #61	@ 0x3d
 800433c:	2101      	movs	r1, #1
 800433e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	223c      	movs	r2, #60	@ 0x3c
 8004344:	2100      	movs	r1, #0
 8004346:	5499      	strb	r1, [r3, r2]

  return status;
 8004348:	230f      	movs	r3, #15
 800434a:	18fb      	adds	r3, r7, r3
 800434c:	781b      	ldrb	r3, [r3, #0]
}
 800434e:	0018      	movs	r0, r3
 8004350:	46bd      	mov	sp, r7
 8004352:	b004      	add	sp, #16
 8004354:	bd80      	pop	{r7, pc}
 8004356:	46c0      	nop			@ (mov r8, r8)
 8004358:	ffceff88 	.word	0xffceff88
 800435c:	ffff00ff 	.word	0xffff00ff

08004360 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b082      	sub	sp, #8
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004368:	46c0      	nop			@ (mov r8, r8)
 800436a:	46bd      	mov	sp, r7
 800436c:	b002      	add	sp, #8
 800436e:	bd80      	pop	{r7, pc}

08004370 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b082      	sub	sp, #8
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004378:	46c0      	nop			@ (mov r8, r8)
 800437a:	46bd      	mov	sp, r7
 800437c:	b002      	add	sp, #8
 800437e:	bd80      	pop	{r7, pc}

08004380 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b082      	sub	sp, #8
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004388:	46c0      	nop			@ (mov r8, r8)
 800438a:	46bd      	mov	sp, r7
 800438c:	b002      	add	sp, #8
 800438e:	bd80      	pop	{r7, pc}

08004390 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b082      	sub	sp, #8
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004398:	46c0      	nop			@ (mov r8, r8)
 800439a:	46bd      	mov	sp, r7
 800439c:	b002      	add	sp, #8
 800439e:	bd80      	pop	{r7, pc}

080043a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b084      	sub	sp, #16
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
 80043a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	4a2b      	ldr	r2, [pc, #172]	@ (8004460 <TIM_Base_SetConfig+0xc0>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d003      	beq.n	80043c0 <TIM_Base_SetConfig+0x20>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	4a2a      	ldr	r2, [pc, #168]	@ (8004464 <TIM_Base_SetConfig+0xc4>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d108      	bne.n	80043d2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2270      	movs	r2, #112	@ 0x70
 80043c4:	4393      	bics	r3, r2
 80043c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	68fa      	ldr	r2, [r7, #12]
 80043ce:	4313      	orrs	r3, r2
 80043d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	4a22      	ldr	r2, [pc, #136]	@ (8004460 <TIM_Base_SetConfig+0xc0>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d00f      	beq.n	80043fa <TIM_Base_SetConfig+0x5a>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	4a21      	ldr	r2, [pc, #132]	@ (8004464 <TIM_Base_SetConfig+0xc4>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d00b      	beq.n	80043fa <TIM_Base_SetConfig+0x5a>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	4a20      	ldr	r2, [pc, #128]	@ (8004468 <TIM_Base_SetConfig+0xc8>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d007      	beq.n	80043fa <TIM_Base_SetConfig+0x5a>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	4a1f      	ldr	r2, [pc, #124]	@ (800446c <TIM_Base_SetConfig+0xcc>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d003      	beq.n	80043fa <TIM_Base_SetConfig+0x5a>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	4a1e      	ldr	r2, [pc, #120]	@ (8004470 <TIM_Base_SetConfig+0xd0>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d108      	bne.n	800440c <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	4a1d      	ldr	r2, [pc, #116]	@ (8004474 <TIM_Base_SetConfig+0xd4>)
 80043fe:	4013      	ands	r3, r2
 8004400:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	68db      	ldr	r3, [r3, #12]
 8004406:	68fa      	ldr	r2, [r7, #12]
 8004408:	4313      	orrs	r3, r2
 800440a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	2280      	movs	r2, #128	@ 0x80
 8004410:	4393      	bics	r3, r2
 8004412:	001a      	movs	r2, r3
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	695b      	ldr	r3, [r3, #20]
 8004418:	4313      	orrs	r3, r2
 800441a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	68fa      	ldr	r2, [r7, #12]
 8004420:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	689a      	ldr	r2, [r3, #8]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	681a      	ldr	r2, [r3, #0]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	4a0a      	ldr	r2, [pc, #40]	@ (8004460 <TIM_Base_SetConfig+0xc0>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d007      	beq.n	800444a <TIM_Base_SetConfig+0xaa>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	4a0b      	ldr	r2, [pc, #44]	@ (800446c <TIM_Base_SetConfig+0xcc>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d003      	beq.n	800444a <TIM_Base_SetConfig+0xaa>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	4a0a      	ldr	r2, [pc, #40]	@ (8004470 <TIM_Base_SetConfig+0xd0>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d103      	bne.n	8004452 <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	691a      	ldr	r2, [r3, #16]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2201      	movs	r2, #1
 8004456:	615a      	str	r2, [r3, #20]
}
 8004458:	46c0      	nop			@ (mov r8, r8)
 800445a:	46bd      	mov	sp, r7
 800445c:	b004      	add	sp, #16
 800445e:	bd80      	pop	{r7, pc}
 8004460:	40012c00 	.word	0x40012c00
 8004464:	40000400 	.word	0x40000400
 8004468:	40002000 	.word	0x40002000
 800446c:	40014400 	.word	0x40014400
 8004470:	40014800 	.word	0x40014800
 8004474:	fffffcff 	.word	0xfffffcff

08004478 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b086      	sub	sp, #24
 800447c:	af00      	add	r7, sp, #0
 800447e:	60f8      	str	r0, [r7, #12]
 8004480:	60b9      	str	r1, [r7, #8]
 8004482:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	6a1b      	ldr	r3, [r3, #32]
 8004488:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	6a1b      	ldr	r3, [r3, #32]
 800448e:	2201      	movs	r2, #1
 8004490:	4393      	bics	r3, r2
 8004492:	001a      	movs	r2, r3
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	699b      	ldr	r3, [r3, #24]
 800449c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	22f0      	movs	r2, #240	@ 0xf0
 80044a2:	4393      	bics	r3, r2
 80044a4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	011b      	lsls	r3, r3, #4
 80044aa:	693a      	ldr	r2, [r7, #16]
 80044ac:	4313      	orrs	r3, r2
 80044ae:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	220a      	movs	r2, #10
 80044b4:	4393      	bics	r3, r2
 80044b6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80044b8:	697a      	ldr	r2, [r7, #20]
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	4313      	orrs	r3, r2
 80044be:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	693a      	ldr	r2, [r7, #16]
 80044c4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	697a      	ldr	r2, [r7, #20]
 80044ca:	621a      	str	r2, [r3, #32]
}
 80044cc:	46c0      	nop			@ (mov r8, r8)
 80044ce:	46bd      	mov	sp, r7
 80044d0:	b006      	add	sp, #24
 80044d2:	bd80      	pop	{r7, pc}

080044d4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b086      	sub	sp, #24
 80044d8:	af00      	add	r7, sp, #0
 80044da:	60f8      	str	r0, [r7, #12]
 80044dc:	60b9      	str	r1, [r7, #8]
 80044de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	6a1b      	ldr	r3, [r3, #32]
 80044e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	6a1b      	ldr	r3, [r3, #32]
 80044ea:	2210      	movs	r2, #16
 80044ec:	4393      	bics	r3, r2
 80044ee:	001a      	movs	r2, r3
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	699b      	ldr	r3, [r3, #24]
 80044f8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	4a0d      	ldr	r2, [pc, #52]	@ (8004534 <TIM_TI2_ConfigInputStage+0x60>)
 80044fe:	4013      	ands	r3, r2
 8004500:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	031b      	lsls	r3, r3, #12
 8004506:	693a      	ldr	r2, [r7, #16]
 8004508:	4313      	orrs	r3, r2
 800450a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	22a0      	movs	r2, #160	@ 0xa0
 8004510:	4393      	bics	r3, r2
 8004512:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	011b      	lsls	r3, r3, #4
 8004518:	697a      	ldr	r2, [r7, #20]
 800451a:	4313      	orrs	r3, r2
 800451c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	693a      	ldr	r2, [r7, #16]
 8004522:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	697a      	ldr	r2, [r7, #20]
 8004528:	621a      	str	r2, [r3, #32]
}
 800452a:	46c0      	nop			@ (mov r8, r8)
 800452c:	46bd      	mov	sp, r7
 800452e:	b006      	add	sp, #24
 8004530:	bd80      	pop	{r7, pc}
 8004532:	46c0      	nop			@ (mov r8, r8)
 8004534:	ffff0fff 	.word	0xffff0fff

08004538 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b084      	sub	sp, #16
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
 8004540:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	4a08      	ldr	r2, [pc, #32]	@ (800456c <TIM_ITRx_SetConfig+0x34>)
 800454c:	4013      	ands	r3, r2
 800454e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004550:	683a      	ldr	r2, [r7, #0]
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	4313      	orrs	r3, r2
 8004556:	2207      	movs	r2, #7
 8004558:	4313      	orrs	r3, r2
 800455a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	68fa      	ldr	r2, [r7, #12]
 8004560:	609a      	str	r2, [r3, #8]
}
 8004562:	46c0      	nop			@ (mov r8, r8)
 8004564:	46bd      	mov	sp, r7
 8004566:	b004      	add	sp, #16
 8004568:	bd80      	pop	{r7, pc}
 800456a:	46c0      	nop			@ (mov r8, r8)
 800456c:	ffcfff8f 	.word	0xffcfff8f

08004570 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b086      	sub	sp, #24
 8004574:	af00      	add	r7, sp, #0
 8004576:	60f8      	str	r0, [r7, #12]
 8004578:	60b9      	str	r1, [r7, #8]
 800457a:	607a      	str	r2, [r7, #4]
 800457c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	689b      	ldr	r3, [r3, #8]
 8004582:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	4a09      	ldr	r2, [pc, #36]	@ (80045ac <TIM_ETR_SetConfig+0x3c>)
 8004588:	4013      	ands	r3, r2
 800458a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	021a      	lsls	r2, r3, #8
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	431a      	orrs	r2, r3
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	4313      	orrs	r3, r2
 8004598:	697a      	ldr	r2, [r7, #20]
 800459a:	4313      	orrs	r3, r2
 800459c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	697a      	ldr	r2, [r7, #20]
 80045a2:	609a      	str	r2, [r3, #8]
}
 80045a4:	46c0      	nop			@ (mov r8, r8)
 80045a6:	46bd      	mov	sp, r7
 80045a8:	b006      	add	sp, #24
 80045aa:	bd80      	pop	{r7, pc}
 80045ac:	ffff00ff 	.word	0xffff00ff

080045b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b084      	sub	sp, #16
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
 80045b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	223c      	movs	r2, #60	@ 0x3c
 80045be:	5c9b      	ldrb	r3, [r3, r2]
 80045c0:	2b01      	cmp	r3, #1
 80045c2:	d101      	bne.n	80045c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80045c4:	2302      	movs	r3, #2
 80045c6:	e04a      	b.n	800465e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	223c      	movs	r2, #60	@ 0x3c
 80045cc:	2101      	movs	r1, #1
 80045ce:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	223d      	movs	r2, #61	@ 0x3d
 80045d4:	2102      	movs	r1, #2
 80045d6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	689b      	ldr	r3, [r3, #8]
 80045e6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a1e      	ldr	r2, [pc, #120]	@ (8004668 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d108      	bne.n	8004604 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	4a1d      	ldr	r2, [pc, #116]	@ (800466c <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 80045f6:	4013      	ands	r3, r2
 80045f8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	68fa      	ldr	r2, [r7, #12]
 8004600:	4313      	orrs	r3, r2
 8004602:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	2270      	movs	r2, #112	@ 0x70
 8004608:	4393      	bics	r3, r2
 800460a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	68fa      	ldr	r2, [r7, #12]
 8004612:	4313      	orrs	r3, r2
 8004614:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	68fa      	ldr	r2, [r7, #12]
 800461c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a11      	ldr	r2, [pc, #68]	@ (8004668 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d004      	beq.n	8004632 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a10      	ldr	r2, [pc, #64]	@ (8004670 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d10c      	bne.n	800464c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	2280      	movs	r2, #128	@ 0x80
 8004636:	4393      	bics	r3, r2
 8004638:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	68ba      	ldr	r2, [r7, #8]
 8004640:	4313      	orrs	r3, r2
 8004642:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	68ba      	ldr	r2, [r7, #8]
 800464a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	223d      	movs	r2, #61	@ 0x3d
 8004650:	2101      	movs	r1, #1
 8004652:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	223c      	movs	r2, #60	@ 0x3c
 8004658:	2100      	movs	r1, #0
 800465a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800465c:	2300      	movs	r3, #0
}
 800465e:	0018      	movs	r0, r3
 8004660:	46bd      	mov	sp, r7
 8004662:	b004      	add	sp, #16
 8004664:	bd80      	pop	{r7, pc}
 8004666:	46c0      	nop			@ (mov r8, r8)
 8004668:	40012c00 	.word	0x40012c00
 800466c:	ff0fffff 	.word	0xff0fffff
 8004670:	40000400 	.word	0x40000400

08004674 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b082      	sub	sp, #8
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800467c:	46c0      	nop			@ (mov r8, r8)
 800467e:	46bd      	mov	sp, r7
 8004680:	b002      	add	sp, #8
 8004682:	bd80      	pop	{r7, pc}

08004684 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b082      	sub	sp, #8
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800468c:	46c0      	nop			@ (mov r8, r8)
 800468e:	46bd      	mov	sp, r7
 8004690:	b002      	add	sp, #8
 8004692:	bd80      	pop	{r7, pc}

08004694 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b082      	sub	sp, #8
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800469c:	46c0      	nop			@ (mov r8, r8)
 800469e:	46bd      	mov	sp, r7
 80046a0:	b002      	add	sp, #8
 80046a2:	bd80      	pop	{r7, pc}

080046a4 <memset>:
 80046a4:	0003      	movs	r3, r0
 80046a6:	1882      	adds	r2, r0, r2
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d100      	bne.n	80046ae <memset+0xa>
 80046ac:	4770      	bx	lr
 80046ae:	7019      	strb	r1, [r3, #0]
 80046b0:	3301      	adds	r3, #1
 80046b2:	e7f9      	b.n	80046a8 <memset+0x4>

080046b4 <__libc_init_array>:
 80046b4:	b570      	push	{r4, r5, r6, lr}
 80046b6:	2600      	movs	r6, #0
 80046b8:	4c0c      	ldr	r4, [pc, #48]	@ (80046ec <__libc_init_array+0x38>)
 80046ba:	4d0d      	ldr	r5, [pc, #52]	@ (80046f0 <__libc_init_array+0x3c>)
 80046bc:	1b64      	subs	r4, r4, r5
 80046be:	10a4      	asrs	r4, r4, #2
 80046c0:	42a6      	cmp	r6, r4
 80046c2:	d109      	bne.n	80046d8 <__libc_init_array+0x24>
 80046c4:	2600      	movs	r6, #0
 80046c6:	f000 f819 	bl	80046fc <_init>
 80046ca:	4c0a      	ldr	r4, [pc, #40]	@ (80046f4 <__libc_init_array+0x40>)
 80046cc:	4d0a      	ldr	r5, [pc, #40]	@ (80046f8 <__libc_init_array+0x44>)
 80046ce:	1b64      	subs	r4, r4, r5
 80046d0:	10a4      	asrs	r4, r4, #2
 80046d2:	42a6      	cmp	r6, r4
 80046d4:	d105      	bne.n	80046e2 <__libc_init_array+0x2e>
 80046d6:	bd70      	pop	{r4, r5, r6, pc}
 80046d8:	00b3      	lsls	r3, r6, #2
 80046da:	58eb      	ldr	r3, [r5, r3]
 80046dc:	4798      	blx	r3
 80046de:	3601      	adds	r6, #1
 80046e0:	e7ee      	b.n	80046c0 <__libc_init_array+0xc>
 80046e2:	00b3      	lsls	r3, r6, #2
 80046e4:	58eb      	ldr	r3, [r5, r3]
 80046e6:	4798      	blx	r3
 80046e8:	3601      	adds	r6, #1
 80046ea:	e7f2      	b.n	80046d2 <__libc_init_array+0x1e>
 80046ec:	08004754 	.word	0x08004754
 80046f0:	08004754 	.word	0x08004754
 80046f4:	08004758 	.word	0x08004758
 80046f8:	08004754 	.word	0x08004754

080046fc <_init>:
 80046fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046fe:	46c0      	nop			@ (mov r8, r8)
 8004700:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004702:	bc08      	pop	{r3}
 8004704:	469e      	mov	lr, r3
 8004706:	4770      	bx	lr

08004708 <_fini>:
 8004708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800470a:	46c0      	nop			@ (mov r8, r8)
 800470c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800470e:	bc08      	pop	{r3}
 8004710:	469e      	mov	lr, r3
 8004712:	4770      	bx	lr
