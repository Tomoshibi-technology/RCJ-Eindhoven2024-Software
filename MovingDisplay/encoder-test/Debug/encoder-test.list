
encoder-test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000046e4  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  080047a4  080047a4  000057a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800481c  0800481c  0000600c  2**0
                  CONTENTS
  4 .ARM          00000000  0800481c  0800481c  0000600c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800481c  0800481c  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800481c  0800481c  0000581c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004820  08004820  00005820  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004824  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000184  20000010  08004830  00006010  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000194  08004830  00006194  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011110  00000000  00000000  00006034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020b2  00000000  00000000  00017144  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f20  00000000  00000000  000191f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c0d  00000000  00000000  0001a118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014337  00000000  00000000  0001ad25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001315e  00000000  00000000  0002f05c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000816d8  00000000  00000000  000421ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c3892  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000388c  00000000  00000000  000c38d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  000c7164  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800478c 	.word	0x0800478c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	0800478c 	.word	0x0800478c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	@ 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	@ 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			@ (mov r8, r8)

080003f4 <__aeabi_dadd>:
 80003f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80003f6:	4657      	mov	r7, sl
 80003f8:	464e      	mov	r6, r9
 80003fa:	4645      	mov	r5, r8
 80003fc:	46de      	mov	lr, fp
 80003fe:	b5e0      	push	{r5, r6, r7, lr}
 8000400:	b083      	sub	sp, #12
 8000402:	9000      	str	r0, [sp, #0]
 8000404:	9101      	str	r1, [sp, #4]
 8000406:	030c      	lsls	r4, r1, #12
 8000408:	004f      	lsls	r7, r1, #1
 800040a:	0fce      	lsrs	r6, r1, #31
 800040c:	0a61      	lsrs	r1, r4, #9
 800040e:	9c00      	ldr	r4, [sp, #0]
 8000410:	031d      	lsls	r5, r3, #12
 8000412:	0f64      	lsrs	r4, r4, #29
 8000414:	430c      	orrs	r4, r1
 8000416:	9900      	ldr	r1, [sp, #0]
 8000418:	9200      	str	r2, [sp, #0]
 800041a:	9301      	str	r3, [sp, #4]
 800041c:	00c8      	lsls	r0, r1, #3
 800041e:	0059      	lsls	r1, r3, #1
 8000420:	0d4b      	lsrs	r3, r1, #21
 8000422:	4699      	mov	r9, r3
 8000424:	9a00      	ldr	r2, [sp, #0]
 8000426:	9b01      	ldr	r3, [sp, #4]
 8000428:	0a6d      	lsrs	r5, r5, #9
 800042a:	0fd9      	lsrs	r1, r3, #31
 800042c:	0f53      	lsrs	r3, r2, #29
 800042e:	432b      	orrs	r3, r5
 8000430:	469a      	mov	sl, r3
 8000432:	9b00      	ldr	r3, [sp, #0]
 8000434:	0d7f      	lsrs	r7, r7, #21
 8000436:	00da      	lsls	r2, r3, #3
 8000438:	4694      	mov	ip, r2
 800043a:	464a      	mov	r2, r9
 800043c:	46b0      	mov	r8, r6
 800043e:	1aba      	subs	r2, r7, r2
 8000440:	428e      	cmp	r6, r1
 8000442:	d100      	bne.n	8000446 <__aeabi_dadd+0x52>
 8000444:	e0b0      	b.n	80005a8 <__aeabi_dadd+0x1b4>
 8000446:	2a00      	cmp	r2, #0
 8000448:	dc00      	bgt.n	800044c <__aeabi_dadd+0x58>
 800044a:	e078      	b.n	800053e <__aeabi_dadd+0x14a>
 800044c:	4649      	mov	r1, r9
 800044e:	2900      	cmp	r1, #0
 8000450:	d100      	bne.n	8000454 <__aeabi_dadd+0x60>
 8000452:	e0e9      	b.n	8000628 <__aeabi_dadd+0x234>
 8000454:	49c9      	ldr	r1, [pc, #804]	@ (800077c <__aeabi_dadd+0x388>)
 8000456:	428f      	cmp	r7, r1
 8000458:	d100      	bne.n	800045c <__aeabi_dadd+0x68>
 800045a:	e195      	b.n	8000788 <__aeabi_dadd+0x394>
 800045c:	2501      	movs	r5, #1
 800045e:	2a38      	cmp	r2, #56	@ 0x38
 8000460:	dc16      	bgt.n	8000490 <__aeabi_dadd+0x9c>
 8000462:	2180      	movs	r1, #128	@ 0x80
 8000464:	4653      	mov	r3, sl
 8000466:	0409      	lsls	r1, r1, #16
 8000468:	430b      	orrs	r3, r1
 800046a:	469a      	mov	sl, r3
 800046c:	2a1f      	cmp	r2, #31
 800046e:	dd00      	ble.n	8000472 <__aeabi_dadd+0x7e>
 8000470:	e1e7      	b.n	8000842 <__aeabi_dadd+0x44e>
 8000472:	2120      	movs	r1, #32
 8000474:	4655      	mov	r5, sl
 8000476:	1a8b      	subs	r3, r1, r2
 8000478:	4661      	mov	r1, ip
 800047a:	409d      	lsls	r5, r3
 800047c:	40d1      	lsrs	r1, r2
 800047e:	430d      	orrs	r5, r1
 8000480:	4661      	mov	r1, ip
 8000482:	4099      	lsls	r1, r3
 8000484:	1e4b      	subs	r3, r1, #1
 8000486:	4199      	sbcs	r1, r3
 8000488:	4653      	mov	r3, sl
 800048a:	40d3      	lsrs	r3, r2
 800048c:	430d      	orrs	r5, r1
 800048e:	1ae4      	subs	r4, r4, r3
 8000490:	1b45      	subs	r5, r0, r5
 8000492:	42a8      	cmp	r0, r5
 8000494:	4180      	sbcs	r0, r0
 8000496:	4240      	negs	r0, r0
 8000498:	1a24      	subs	r4, r4, r0
 800049a:	0223      	lsls	r3, r4, #8
 800049c:	d400      	bmi.n	80004a0 <__aeabi_dadd+0xac>
 800049e:	e10f      	b.n	80006c0 <__aeabi_dadd+0x2cc>
 80004a0:	0264      	lsls	r4, r4, #9
 80004a2:	0a64      	lsrs	r4, r4, #9
 80004a4:	2c00      	cmp	r4, #0
 80004a6:	d100      	bne.n	80004aa <__aeabi_dadd+0xb6>
 80004a8:	e139      	b.n	800071e <__aeabi_dadd+0x32a>
 80004aa:	0020      	movs	r0, r4
 80004ac:	f000 fe38 	bl	8001120 <__clzsi2>
 80004b0:	0003      	movs	r3, r0
 80004b2:	3b08      	subs	r3, #8
 80004b4:	2120      	movs	r1, #32
 80004b6:	0028      	movs	r0, r5
 80004b8:	1aca      	subs	r2, r1, r3
 80004ba:	40d0      	lsrs	r0, r2
 80004bc:	409c      	lsls	r4, r3
 80004be:	0002      	movs	r2, r0
 80004c0:	409d      	lsls	r5, r3
 80004c2:	4322      	orrs	r2, r4
 80004c4:	429f      	cmp	r7, r3
 80004c6:	dd00      	ble.n	80004ca <__aeabi_dadd+0xd6>
 80004c8:	e173      	b.n	80007b2 <__aeabi_dadd+0x3be>
 80004ca:	1bd8      	subs	r0, r3, r7
 80004cc:	3001      	adds	r0, #1
 80004ce:	1a09      	subs	r1, r1, r0
 80004d0:	002c      	movs	r4, r5
 80004d2:	408d      	lsls	r5, r1
 80004d4:	40c4      	lsrs	r4, r0
 80004d6:	1e6b      	subs	r3, r5, #1
 80004d8:	419d      	sbcs	r5, r3
 80004da:	0013      	movs	r3, r2
 80004dc:	40c2      	lsrs	r2, r0
 80004de:	408b      	lsls	r3, r1
 80004e0:	4325      	orrs	r5, r4
 80004e2:	2700      	movs	r7, #0
 80004e4:	0014      	movs	r4, r2
 80004e6:	431d      	orrs	r5, r3
 80004e8:	076b      	lsls	r3, r5, #29
 80004ea:	d009      	beq.n	8000500 <__aeabi_dadd+0x10c>
 80004ec:	230f      	movs	r3, #15
 80004ee:	402b      	ands	r3, r5
 80004f0:	2b04      	cmp	r3, #4
 80004f2:	d005      	beq.n	8000500 <__aeabi_dadd+0x10c>
 80004f4:	1d2b      	adds	r3, r5, #4
 80004f6:	42ab      	cmp	r3, r5
 80004f8:	41ad      	sbcs	r5, r5
 80004fa:	426d      	negs	r5, r5
 80004fc:	1964      	adds	r4, r4, r5
 80004fe:	001d      	movs	r5, r3
 8000500:	0223      	lsls	r3, r4, #8
 8000502:	d400      	bmi.n	8000506 <__aeabi_dadd+0x112>
 8000504:	e12d      	b.n	8000762 <__aeabi_dadd+0x36e>
 8000506:	4a9d      	ldr	r2, [pc, #628]	@ (800077c <__aeabi_dadd+0x388>)
 8000508:	3701      	adds	r7, #1
 800050a:	4297      	cmp	r7, r2
 800050c:	d100      	bne.n	8000510 <__aeabi_dadd+0x11c>
 800050e:	e0d3      	b.n	80006b8 <__aeabi_dadd+0x2c4>
 8000510:	4646      	mov	r6, r8
 8000512:	499b      	ldr	r1, [pc, #620]	@ (8000780 <__aeabi_dadd+0x38c>)
 8000514:	08ed      	lsrs	r5, r5, #3
 8000516:	4021      	ands	r1, r4
 8000518:	074a      	lsls	r2, r1, #29
 800051a:	432a      	orrs	r2, r5
 800051c:	057c      	lsls	r4, r7, #21
 800051e:	024d      	lsls	r5, r1, #9
 8000520:	0b2d      	lsrs	r5, r5, #12
 8000522:	0d64      	lsrs	r4, r4, #21
 8000524:	0524      	lsls	r4, r4, #20
 8000526:	432c      	orrs	r4, r5
 8000528:	07f6      	lsls	r6, r6, #31
 800052a:	4334      	orrs	r4, r6
 800052c:	0010      	movs	r0, r2
 800052e:	0021      	movs	r1, r4
 8000530:	b003      	add	sp, #12
 8000532:	bcf0      	pop	{r4, r5, r6, r7}
 8000534:	46bb      	mov	fp, r7
 8000536:	46b2      	mov	sl, r6
 8000538:	46a9      	mov	r9, r5
 800053a:	46a0      	mov	r8, r4
 800053c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800053e:	2a00      	cmp	r2, #0
 8000540:	d100      	bne.n	8000544 <__aeabi_dadd+0x150>
 8000542:	e084      	b.n	800064e <__aeabi_dadd+0x25a>
 8000544:	464a      	mov	r2, r9
 8000546:	1bd2      	subs	r2, r2, r7
 8000548:	2f00      	cmp	r7, #0
 800054a:	d000      	beq.n	800054e <__aeabi_dadd+0x15a>
 800054c:	e16d      	b.n	800082a <__aeabi_dadd+0x436>
 800054e:	0025      	movs	r5, r4
 8000550:	4305      	orrs	r5, r0
 8000552:	d100      	bne.n	8000556 <__aeabi_dadd+0x162>
 8000554:	e127      	b.n	80007a6 <__aeabi_dadd+0x3b2>
 8000556:	1e56      	subs	r6, r2, #1
 8000558:	2a01      	cmp	r2, #1
 800055a:	d100      	bne.n	800055e <__aeabi_dadd+0x16a>
 800055c:	e23b      	b.n	80009d6 <__aeabi_dadd+0x5e2>
 800055e:	4d87      	ldr	r5, [pc, #540]	@ (800077c <__aeabi_dadd+0x388>)
 8000560:	42aa      	cmp	r2, r5
 8000562:	d100      	bne.n	8000566 <__aeabi_dadd+0x172>
 8000564:	e26a      	b.n	8000a3c <__aeabi_dadd+0x648>
 8000566:	2501      	movs	r5, #1
 8000568:	2e38      	cmp	r6, #56	@ 0x38
 800056a:	dc12      	bgt.n	8000592 <__aeabi_dadd+0x19e>
 800056c:	0032      	movs	r2, r6
 800056e:	2a1f      	cmp	r2, #31
 8000570:	dd00      	ble.n	8000574 <__aeabi_dadd+0x180>
 8000572:	e1f8      	b.n	8000966 <__aeabi_dadd+0x572>
 8000574:	2620      	movs	r6, #32
 8000576:	0025      	movs	r5, r4
 8000578:	1ab6      	subs	r6, r6, r2
 800057a:	0007      	movs	r7, r0
 800057c:	4653      	mov	r3, sl
 800057e:	40b0      	lsls	r0, r6
 8000580:	40d4      	lsrs	r4, r2
 8000582:	40b5      	lsls	r5, r6
 8000584:	40d7      	lsrs	r7, r2
 8000586:	1e46      	subs	r6, r0, #1
 8000588:	41b0      	sbcs	r0, r6
 800058a:	1b1b      	subs	r3, r3, r4
 800058c:	469a      	mov	sl, r3
 800058e:	433d      	orrs	r5, r7
 8000590:	4305      	orrs	r5, r0
 8000592:	4662      	mov	r2, ip
 8000594:	1b55      	subs	r5, r2, r5
 8000596:	45ac      	cmp	ip, r5
 8000598:	4192      	sbcs	r2, r2
 800059a:	4653      	mov	r3, sl
 800059c:	4252      	negs	r2, r2
 800059e:	000e      	movs	r6, r1
 80005a0:	464f      	mov	r7, r9
 80005a2:	4688      	mov	r8, r1
 80005a4:	1a9c      	subs	r4, r3, r2
 80005a6:	e778      	b.n	800049a <__aeabi_dadd+0xa6>
 80005a8:	2a00      	cmp	r2, #0
 80005aa:	dc00      	bgt.n	80005ae <__aeabi_dadd+0x1ba>
 80005ac:	e08e      	b.n	80006cc <__aeabi_dadd+0x2d8>
 80005ae:	4649      	mov	r1, r9
 80005b0:	2900      	cmp	r1, #0
 80005b2:	d175      	bne.n	80006a0 <__aeabi_dadd+0x2ac>
 80005b4:	4661      	mov	r1, ip
 80005b6:	4653      	mov	r3, sl
 80005b8:	4319      	orrs	r1, r3
 80005ba:	d100      	bne.n	80005be <__aeabi_dadd+0x1ca>
 80005bc:	e0f6      	b.n	80007ac <__aeabi_dadd+0x3b8>
 80005be:	1e51      	subs	r1, r2, #1
 80005c0:	2a01      	cmp	r2, #1
 80005c2:	d100      	bne.n	80005c6 <__aeabi_dadd+0x1d2>
 80005c4:	e191      	b.n	80008ea <__aeabi_dadd+0x4f6>
 80005c6:	4d6d      	ldr	r5, [pc, #436]	@ (800077c <__aeabi_dadd+0x388>)
 80005c8:	42aa      	cmp	r2, r5
 80005ca:	d100      	bne.n	80005ce <__aeabi_dadd+0x1da>
 80005cc:	e0dc      	b.n	8000788 <__aeabi_dadd+0x394>
 80005ce:	2501      	movs	r5, #1
 80005d0:	2938      	cmp	r1, #56	@ 0x38
 80005d2:	dc14      	bgt.n	80005fe <__aeabi_dadd+0x20a>
 80005d4:	000a      	movs	r2, r1
 80005d6:	2a1f      	cmp	r2, #31
 80005d8:	dd00      	ble.n	80005dc <__aeabi_dadd+0x1e8>
 80005da:	e1a2      	b.n	8000922 <__aeabi_dadd+0x52e>
 80005dc:	2120      	movs	r1, #32
 80005de:	4653      	mov	r3, sl
 80005e0:	1a89      	subs	r1, r1, r2
 80005e2:	408b      	lsls	r3, r1
 80005e4:	001d      	movs	r5, r3
 80005e6:	4663      	mov	r3, ip
 80005e8:	40d3      	lsrs	r3, r2
 80005ea:	431d      	orrs	r5, r3
 80005ec:	4663      	mov	r3, ip
 80005ee:	408b      	lsls	r3, r1
 80005f0:	0019      	movs	r1, r3
 80005f2:	1e4b      	subs	r3, r1, #1
 80005f4:	4199      	sbcs	r1, r3
 80005f6:	4653      	mov	r3, sl
 80005f8:	40d3      	lsrs	r3, r2
 80005fa:	430d      	orrs	r5, r1
 80005fc:	18e4      	adds	r4, r4, r3
 80005fe:	182d      	adds	r5, r5, r0
 8000600:	4285      	cmp	r5, r0
 8000602:	4180      	sbcs	r0, r0
 8000604:	4240      	negs	r0, r0
 8000606:	1824      	adds	r4, r4, r0
 8000608:	0223      	lsls	r3, r4, #8
 800060a:	d559      	bpl.n	80006c0 <__aeabi_dadd+0x2cc>
 800060c:	4b5b      	ldr	r3, [pc, #364]	@ (800077c <__aeabi_dadd+0x388>)
 800060e:	3701      	adds	r7, #1
 8000610:	429f      	cmp	r7, r3
 8000612:	d051      	beq.n	80006b8 <__aeabi_dadd+0x2c4>
 8000614:	2101      	movs	r1, #1
 8000616:	4b5a      	ldr	r3, [pc, #360]	@ (8000780 <__aeabi_dadd+0x38c>)
 8000618:	086a      	lsrs	r2, r5, #1
 800061a:	401c      	ands	r4, r3
 800061c:	4029      	ands	r1, r5
 800061e:	430a      	orrs	r2, r1
 8000620:	07e5      	lsls	r5, r4, #31
 8000622:	4315      	orrs	r5, r2
 8000624:	0864      	lsrs	r4, r4, #1
 8000626:	e75f      	b.n	80004e8 <__aeabi_dadd+0xf4>
 8000628:	4661      	mov	r1, ip
 800062a:	4653      	mov	r3, sl
 800062c:	4319      	orrs	r1, r3
 800062e:	d100      	bne.n	8000632 <__aeabi_dadd+0x23e>
 8000630:	e0bc      	b.n	80007ac <__aeabi_dadd+0x3b8>
 8000632:	1e51      	subs	r1, r2, #1
 8000634:	2a01      	cmp	r2, #1
 8000636:	d100      	bne.n	800063a <__aeabi_dadd+0x246>
 8000638:	e164      	b.n	8000904 <__aeabi_dadd+0x510>
 800063a:	4d50      	ldr	r5, [pc, #320]	@ (800077c <__aeabi_dadd+0x388>)
 800063c:	42aa      	cmp	r2, r5
 800063e:	d100      	bne.n	8000642 <__aeabi_dadd+0x24e>
 8000640:	e16a      	b.n	8000918 <__aeabi_dadd+0x524>
 8000642:	2501      	movs	r5, #1
 8000644:	2938      	cmp	r1, #56	@ 0x38
 8000646:	dd00      	ble.n	800064a <__aeabi_dadd+0x256>
 8000648:	e722      	b.n	8000490 <__aeabi_dadd+0x9c>
 800064a:	000a      	movs	r2, r1
 800064c:	e70e      	b.n	800046c <__aeabi_dadd+0x78>
 800064e:	4a4d      	ldr	r2, [pc, #308]	@ (8000784 <__aeabi_dadd+0x390>)
 8000650:	1c7d      	adds	r5, r7, #1
 8000652:	4215      	tst	r5, r2
 8000654:	d000      	beq.n	8000658 <__aeabi_dadd+0x264>
 8000656:	e0d0      	b.n	80007fa <__aeabi_dadd+0x406>
 8000658:	0025      	movs	r5, r4
 800065a:	4662      	mov	r2, ip
 800065c:	4653      	mov	r3, sl
 800065e:	4305      	orrs	r5, r0
 8000660:	431a      	orrs	r2, r3
 8000662:	2f00      	cmp	r7, #0
 8000664:	d000      	beq.n	8000668 <__aeabi_dadd+0x274>
 8000666:	e137      	b.n	80008d8 <__aeabi_dadd+0x4e4>
 8000668:	2d00      	cmp	r5, #0
 800066a:	d100      	bne.n	800066e <__aeabi_dadd+0x27a>
 800066c:	e1a8      	b.n	80009c0 <__aeabi_dadd+0x5cc>
 800066e:	2a00      	cmp	r2, #0
 8000670:	d100      	bne.n	8000674 <__aeabi_dadd+0x280>
 8000672:	e16a      	b.n	800094a <__aeabi_dadd+0x556>
 8000674:	4663      	mov	r3, ip
 8000676:	1ac5      	subs	r5, r0, r3
 8000678:	4653      	mov	r3, sl
 800067a:	1ae2      	subs	r2, r4, r3
 800067c:	42a8      	cmp	r0, r5
 800067e:	419b      	sbcs	r3, r3
 8000680:	425b      	negs	r3, r3
 8000682:	1ad3      	subs	r3, r2, r3
 8000684:	021a      	lsls	r2, r3, #8
 8000686:	d400      	bmi.n	800068a <__aeabi_dadd+0x296>
 8000688:	e203      	b.n	8000a92 <__aeabi_dadd+0x69e>
 800068a:	4663      	mov	r3, ip
 800068c:	1a1d      	subs	r5, r3, r0
 800068e:	45ac      	cmp	ip, r5
 8000690:	4192      	sbcs	r2, r2
 8000692:	4653      	mov	r3, sl
 8000694:	4252      	negs	r2, r2
 8000696:	1b1c      	subs	r4, r3, r4
 8000698:	000e      	movs	r6, r1
 800069a:	4688      	mov	r8, r1
 800069c:	1aa4      	subs	r4, r4, r2
 800069e:	e723      	b.n	80004e8 <__aeabi_dadd+0xf4>
 80006a0:	4936      	ldr	r1, [pc, #216]	@ (800077c <__aeabi_dadd+0x388>)
 80006a2:	428f      	cmp	r7, r1
 80006a4:	d070      	beq.n	8000788 <__aeabi_dadd+0x394>
 80006a6:	2501      	movs	r5, #1
 80006a8:	2a38      	cmp	r2, #56	@ 0x38
 80006aa:	dca8      	bgt.n	80005fe <__aeabi_dadd+0x20a>
 80006ac:	2180      	movs	r1, #128	@ 0x80
 80006ae:	4653      	mov	r3, sl
 80006b0:	0409      	lsls	r1, r1, #16
 80006b2:	430b      	orrs	r3, r1
 80006b4:	469a      	mov	sl, r3
 80006b6:	e78e      	b.n	80005d6 <__aeabi_dadd+0x1e2>
 80006b8:	003c      	movs	r4, r7
 80006ba:	2500      	movs	r5, #0
 80006bc:	2200      	movs	r2, #0
 80006be:	e731      	b.n	8000524 <__aeabi_dadd+0x130>
 80006c0:	2307      	movs	r3, #7
 80006c2:	402b      	ands	r3, r5
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d000      	beq.n	80006ca <__aeabi_dadd+0x2d6>
 80006c8:	e710      	b.n	80004ec <__aeabi_dadd+0xf8>
 80006ca:	e093      	b.n	80007f4 <__aeabi_dadd+0x400>
 80006cc:	2a00      	cmp	r2, #0
 80006ce:	d074      	beq.n	80007ba <__aeabi_dadd+0x3c6>
 80006d0:	464a      	mov	r2, r9
 80006d2:	1bd2      	subs	r2, r2, r7
 80006d4:	2f00      	cmp	r7, #0
 80006d6:	d100      	bne.n	80006da <__aeabi_dadd+0x2e6>
 80006d8:	e0c7      	b.n	800086a <__aeabi_dadd+0x476>
 80006da:	4928      	ldr	r1, [pc, #160]	@ (800077c <__aeabi_dadd+0x388>)
 80006dc:	4589      	cmp	r9, r1
 80006de:	d100      	bne.n	80006e2 <__aeabi_dadd+0x2ee>
 80006e0:	e185      	b.n	80009ee <__aeabi_dadd+0x5fa>
 80006e2:	2501      	movs	r5, #1
 80006e4:	2a38      	cmp	r2, #56	@ 0x38
 80006e6:	dc12      	bgt.n	800070e <__aeabi_dadd+0x31a>
 80006e8:	2180      	movs	r1, #128	@ 0x80
 80006ea:	0409      	lsls	r1, r1, #16
 80006ec:	430c      	orrs	r4, r1
 80006ee:	2a1f      	cmp	r2, #31
 80006f0:	dd00      	ble.n	80006f4 <__aeabi_dadd+0x300>
 80006f2:	e1ab      	b.n	8000a4c <__aeabi_dadd+0x658>
 80006f4:	2120      	movs	r1, #32
 80006f6:	0025      	movs	r5, r4
 80006f8:	1a89      	subs	r1, r1, r2
 80006fa:	0007      	movs	r7, r0
 80006fc:	4088      	lsls	r0, r1
 80006fe:	408d      	lsls	r5, r1
 8000700:	40d7      	lsrs	r7, r2
 8000702:	1e41      	subs	r1, r0, #1
 8000704:	4188      	sbcs	r0, r1
 8000706:	40d4      	lsrs	r4, r2
 8000708:	433d      	orrs	r5, r7
 800070a:	4305      	orrs	r5, r0
 800070c:	44a2      	add	sl, r4
 800070e:	4465      	add	r5, ip
 8000710:	4565      	cmp	r5, ip
 8000712:	4192      	sbcs	r2, r2
 8000714:	4252      	negs	r2, r2
 8000716:	4452      	add	r2, sl
 8000718:	0014      	movs	r4, r2
 800071a:	464f      	mov	r7, r9
 800071c:	e774      	b.n	8000608 <__aeabi_dadd+0x214>
 800071e:	0028      	movs	r0, r5
 8000720:	f000 fcfe 	bl	8001120 <__clzsi2>
 8000724:	0003      	movs	r3, r0
 8000726:	3318      	adds	r3, #24
 8000728:	2b1f      	cmp	r3, #31
 800072a:	dc00      	bgt.n	800072e <__aeabi_dadd+0x33a>
 800072c:	e6c2      	b.n	80004b4 <__aeabi_dadd+0xc0>
 800072e:	002a      	movs	r2, r5
 8000730:	3808      	subs	r0, #8
 8000732:	4082      	lsls	r2, r0
 8000734:	429f      	cmp	r7, r3
 8000736:	dd00      	ble.n	800073a <__aeabi_dadd+0x346>
 8000738:	e0a9      	b.n	800088e <__aeabi_dadd+0x49a>
 800073a:	1bdb      	subs	r3, r3, r7
 800073c:	1c58      	adds	r0, r3, #1
 800073e:	281f      	cmp	r0, #31
 8000740:	dc00      	bgt.n	8000744 <__aeabi_dadd+0x350>
 8000742:	e1ac      	b.n	8000a9e <__aeabi_dadd+0x6aa>
 8000744:	0015      	movs	r5, r2
 8000746:	3b1f      	subs	r3, #31
 8000748:	40dd      	lsrs	r5, r3
 800074a:	2820      	cmp	r0, #32
 800074c:	d005      	beq.n	800075a <__aeabi_dadd+0x366>
 800074e:	2340      	movs	r3, #64	@ 0x40
 8000750:	1a1b      	subs	r3, r3, r0
 8000752:	409a      	lsls	r2, r3
 8000754:	1e53      	subs	r3, r2, #1
 8000756:	419a      	sbcs	r2, r3
 8000758:	4315      	orrs	r5, r2
 800075a:	2307      	movs	r3, #7
 800075c:	2700      	movs	r7, #0
 800075e:	402b      	ands	r3, r5
 8000760:	e7b0      	b.n	80006c4 <__aeabi_dadd+0x2d0>
 8000762:	08ed      	lsrs	r5, r5, #3
 8000764:	4b05      	ldr	r3, [pc, #20]	@ (800077c <__aeabi_dadd+0x388>)
 8000766:	0762      	lsls	r2, r4, #29
 8000768:	432a      	orrs	r2, r5
 800076a:	08e4      	lsrs	r4, r4, #3
 800076c:	429f      	cmp	r7, r3
 800076e:	d00f      	beq.n	8000790 <__aeabi_dadd+0x39c>
 8000770:	0324      	lsls	r4, r4, #12
 8000772:	0b25      	lsrs	r5, r4, #12
 8000774:	057c      	lsls	r4, r7, #21
 8000776:	0d64      	lsrs	r4, r4, #21
 8000778:	e6d4      	b.n	8000524 <__aeabi_dadd+0x130>
 800077a:	46c0      	nop			@ (mov r8, r8)
 800077c:	000007ff 	.word	0x000007ff
 8000780:	ff7fffff 	.word	0xff7fffff
 8000784:	000007fe 	.word	0x000007fe
 8000788:	08c0      	lsrs	r0, r0, #3
 800078a:	0762      	lsls	r2, r4, #29
 800078c:	4302      	orrs	r2, r0
 800078e:	08e4      	lsrs	r4, r4, #3
 8000790:	0013      	movs	r3, r2
 8000792:	4323      	orrs	r3, r4
 8000794:	d100      	bne.n	8000798 <__aeabi_dadd+0x3a4>
 8000796:	e186      	b.n	8000aa6 <__aeabi_dadd+0x6b2>
 8000798:	2580      	movs	r5, #128	@ 0x80
 800079a:	032d      	lsls	r5, r5, #12
 800079c:	4325      	orrs	r5, r4
 800079e:	032d      	lsls	r5, r5, #12
 80007a0:	4cc3      	ldr	r4, [pc, #780]	@ (8000ab0 <__aeabi_dadd+0x6bc>)
 80007a2:	0b2d      	lsrs	r5, r5, #12
 80007a4:	e6be      	b.n	8000524 <__aeabi_dadd+0x130>
 80007a6:	4660      	mov	r0, ip
 80007a8:	4654      	mov	r4, sl
 80007aa:	000e      	movs	r6, r1
 80007ac:	0017      	movs	r7, r2
 80007ae:	08c5      	lsrs	r5, r0, #3
 80007b0:	e7d8      	b.n	8000764 <__aeabi_dadd+0x370>
 80007b2:	4cc0      	ldr	r4, [pc, #768]	@ (8000ab4 <__aeabi_dadd+0x6c0>)
 80007b4:	1aff      	subs	r7, r7, r3
 80007b6:	4014      	ands	r4, r2
 80007b8:	e696      	b.n	80004e8 <__aeabi_dadd+0xf4>
 80007ba:	4abf      	ldr	r2, [pc, #764]	@ (8000ab8 <__aeabi_dadd+0x6c4>)
 80007bc:	1c79      	adds	r1, r7, #1
 80007be:	4211      	tst	r1, r2
 80007c0:	d16b      	bne.n	800089a <__aeabi_dadd+0x4a6>
 80007c2:	0022      	movs	r2, r4
 80007c4:	4302      	orrs	r2, r0
 80007c6:	2f00      	cmp	r7, #0
 80007c8:	d000      	beq.n	80007cc <__aeabi_dadd+0x3d8>
 80007ca:	e0db      	b.n	8000984 <__aeabi_dadd+0x590>
 80007cc:	2a00      	cmp	r2, #0
 80007ce:	d100      	bne.n	80007d2 <__aeabi_dadd+0x3de>
 80007d0:	e12d      	b.n	8000a2e <__aeabi_dadd+0x63a>
 80007d2:	4662      	mov	r2, ip
 80007d4:	4653      	mov	r3, sl
 80007d6:	431a      	orrs	r2, r3
 80007d8:	d100      	bne.n	80007dc <__aeabi_dadd+0x3e8>
 80007da:	e0b6      	b.n	800094a <__aeabi_dadd+0x556>
 80007dc:	4663      	mov	r3, ip
 80007de:	18c5      	adds	r5, r0, r3
 80007e0:	4285      	cmp	r5, r0
 80007e2:	4180      	sbcs	r0, r0
 80007e4:	4454      	add	r4, sl
 80007e6:	4240      	negs	r0, r0
 80007e8:	1824      	adds	r4, r4, r0
 80007ea:	0223      	lsls	r3, r4, #8
 80007ec:	d502      	bpl.n	80007f4 <__aeabi_dadd+0x400>
 80007ee:	000f      	movs	r7, r1
 80007f0:	4bb0      	ldr	r3, [pc, #704]	@ (8000ab4 <__aeabi_dadd+0x6c0>)
 80007f2:	401c      	ands	r4, r3
 80007f4:	003a      	movs	r2, r7
 80007f6:	0028      	movs	r0, r5
 80007f8:	e7d8      	b.n	80007ac <__aeabi_dadd+0x3b8>
 80007fa:	4662      	mov	r2, ip
 80007fc:	1a85      	subs	r5, r0, r2
 80007fe:	42a8      	cmp	r0, r5
 8000800:	4192      	sbcs	r2, r2
 8000802:	4653      	mov	r3, sl
 8000804:	4252      	negs	r2, r2
 8000806:	4691      	mov	r9, r2
 8000808:	1ae3      	subs	r3, r4, r3
 800080a:	001a      	movs	r2, r3
 800080c:	464b      	mov	r3, r9
 800080e:	1ad2      	subs	r2, r2, r3
 8000810:	0013      	movs	r3, r2
 8000812:	4691      	mov	r9, r2
 8000814:	021a      	lsls	r2, r3, #8
 8000816:	d454      	bmi.n	80008c2 <__aeabi_dadd+0x4ce>
 8000818:	464a      	mov	r2, r9
 800081a:	464c      	mov	r4, r9
 800081c:	432a      	orrs	r2, r5
 800081e:	d000      	beq.n	8000822 <__aeabi_dadd+0x42e>
 8000820:	e640      	b.n	80004a4 <__aeabi_dadd+0xb0>
 8000822:	2600      	movs	r6, #0
 8000824:	2400      	movs	r4, #0
 8000826:	2500      	movs	r5, #0
 8000828:	e67c      	b.n	8000524 <__aeabi_dadd+0x130>
 800082a:	4da1      	ldr	r5, [pc, #644]	@ (8000ab0 <__aeabi_dadd+0x6bc>)
 800082c:	45a9      	cmp	r9, r5
 800082e:	d100      	bne.n	8000832 <__aeabi_dadd+0x43e>
 8000830:	e090      	b.n	8000954 <__aeabi_dadd+0x560>
 8000832:	2501      	movs	r5, #1
 8000834:	2a38      	cmp	r2, #56	@ 0x38
 8000836:	dd00      	ble.n	800083a <__aeabi_dadd+0x446>
 8000838:	e6ab      	b.n	8000592 <__aeabi_dadd+0x19e>
 800083a:	2580      	movs	r5, #128	@ 0x80
 800083c:	042d      	lsls	r5, r5, #16
 800083e:	432c      	orrs	r4, r5
 8000840:	e695      	b.n	800056e <__aeabi_dadd+0x17a>
 8000842:	0011      	movs	r1, r2
 8000844:	4655      	mov	r5, sl
 8000846:	3920      	subs	r1, #32
 8000848:	40cd      	lsrs	r5, r1
 800084a:	46a9      	mov	r9, r5
 800084c:	2a20      	cmp	r2, #32
 800084e:	d006      	beq.n	800085e <__aeabi_dadd+0x46a>
 8000850:	2140      	movs	r1, #64	@ 0x40
 8000852:	4653      	mov	r3, sl
 8000854:	1a8a      	subs	r2, r1, r2
 8000856:	4093      	lsls	r3, r2
 8000858:	4662      	mov	r2, ip
 800085a:	431a      	orrs	r2, r3
 800085c:	4694      	mov	ip, r2
 800085e:	4665      	mov	r5, ip
 8000860:	1e6b      	subs	r3, r5, #1
 8000862:	419d      	sbcs	r5, r3
 8000864:	464b      	mov	r3, r9
 8000866:	431d      	orrs	r5, r3
 8000868:	e612      	b.n	8000490 <__aeabi_dadd+0x9c>
 800086a:	0021      	movs	r1, r4
 800086c:	4301      	orrs	r1, r0
 800086e:	d100      	bne.n	8000872 <__aeabi_dadd+0x47e>
 8000870:	e0c4      	b.n	80009fc <__aeabi_dadd+0x608>
 8000872:	1e51      	subs	r1, r2, #1
 8000874:	2a01      	cmp	r2, #1
 8000876:	d100      	bne.n	800087a <__aeabi_dadd+0x486>
 8000878:	e0fb      	b.n	8000a72 <__aeabi_dadd+0x67e>
 800087a:	4d8d      	ldr	r5, [pc, #564]	@ (8000ab0 <__aeabi_dadd+0x6bc>)
 800087c:	42aa      	cmp	r2, r5
 800087e:	d100      	bne.n	8000882 <__aeabi_dadd+0x48e>
 8000880:	e0b5      	b.n	80009ee <__aeabi_dadd+0x5fa>
 8000882:	2501      	movs	r5, #1
 8000884:	2938      	cmp	r1, #56	@ 0x38
 8000886:	dd00      	ble.n	800088a <__aeabi_dadd+0x496>
 8000888:	e741      	b.n	800070e <__aeabi_dadd+0x31a>
 800088a:	000a      	movs	r2, r1
 800088c:	e72f      	b.n	80006ee <__aeabi_dadd+0x2fa>
 800088e:	4c89      	ldr	r4, [pc, #548]	@ (8000ab4 <__aeabi_dadd+0x6c0>)
 8000890:	1aff      	subs	r7, r7, r3
 8000892:	4014      	ands	r4, r2
 8000894:	0762      	lsls	r2, r4, #29
 8000896:	08e4      	lsrs	r4, r4, #3
 8000898:	e76a      	b.n	8000770 <__aeabi_dadd+0x37c>
 800089a:	4a85      	ldr	r2, [pc, #532]	@ (8000ab0 <__aeabi_dadd+0x6bc>)
 800089c:	4291      	cmp	r1, r2
 800089e:	d100      	bne.n	80008a2 <__aeabi_dadd+0x4ae>
 80008a0:	e0e3      	b.n	8000a6a <__aeabi_dadd+0x676>
 80008a2:	4663      	mov	r3, ip
 80008a4:	18c2      	adds	r2, r0, r3
 80008a6:	4282      	cmp	r2, r0
 80008a8:	4180      	sbcs	r0, r0
 80008aa:	0023      	movs	r3, r4
 80008ac:	4240      	negs	r0, r0
 80008ae:	4453      	add	r3, sl
 80008b0:	181b      	adds	r3, r3, r0
 80008b2:	07dd      	lsls	r5, r3, #31
 80008b4:	085c      	lsrs	r4, r3, #1
 80008b6:	2307      	movs	r3, #7
 80008b8:	0852      	lsrs	r2, r2, #1
 80008ba:	4315      	orrs	r5, r2
 80008bc:	000f      	movs	r7, r1
 80008be:	402b      	ands	r3, r5
 80008c0:	e700      	b.n	80006c4 <__aeabi_dadd+0x2d0>
 80008c2:	4663      	mov	r3, ip
 80008c4:	1a1d      	subs	r5, r3, r0
 80008c6:	45ac      	cmp	ip, r5
 80008c8:	4192      	sbcs	r2, r2
 80008ca:	4653      	mov	r3, sl
 80008cc:	4252      	negs	r2, r2
 80008ce:	1b1c      	subs	r4, r3, r4
 80008d0:	000e      	movs	r6, r1
 80008d2:	4688      	mov	r8, r1
 80008d4:	1aa4      	subs	r4, r4, r2
 80008d6:	e5e5      	b.n	80004a4 <__aeabi_dadd+0xb0>
 80008d8:	2d00      	cmp	r5, #0
 80008da:	d000      	beq.n	80008de <__aeabi_dadd+0x4ea>
 80008dc:	e091      	b.n	8000a02 <__aeabi_dadd+0x60e>
 80008de:	2a00      	cmp	r2, #0
 80008e0:	d138      	bne.n	8000954 <__aeabi_dadd+0x560>
 80008e2:	2480      	movs	r4, #128	@ 0x80
 80008e4:	2600      	movs	r6, #0
 80008e6:	0324      	lsls	r4, r4, #12
 80008e8:	e756      	b.n	8000798 <__aeabi_dadd+0x3a4>
 80008ea:	4663      	mov	r3, ip
 80008ec:	18c5      	adds	r5, r0, r3
 80008ee:	4285      	cmp	r5, r0
 80008f0:	4180      	sbcs	r0, r0
 80008f2:	4454      	add	r4, sl
 80008f4:	4240      	negs	r0, r0
 80008f6:	1824      	adds	r4, r4, r0
 80008f8:	2701      	movs	r7, #1
 80008fa:	0223      	lsls	r3, r4, #8
 80008fc:	d400      	bmi.n	8000900 <__aeabi_dadd+0x50c>
 80008fe:	e6df      	b.n	80006c0 <__aeabi_dadd+0x2cc>
 8000900:	2702      	movs	r7, #2
 8000902:	e687      	b.n	8000614 <__aeabi_dadd+0x220>
 8000904:	4663      	mov	r3, ip
 8000906:	1ac5      	subs	r5, r0, r3
 8000908:	42a8      	cmp	r0, r5
 800090a:	4180      	sbcs	r0, r0
 800090c:	4653      	mov	r3, sl
 800090e:	4240      	negs	r0, r0
 8000910:	1ae4      	subs	r4, r4, r3
 8000912:	2701      	movs	r7, #1
 8000914:	1a24      	subs	r4, r4, r0
 8000916:	e5c0      	b.n	800049a <__aeabi_dadd+0xa6>
 8000918:	0762      	lsls	r2, r4, #29
 800091a:	08c0      	lsrs	r0, r0, #3
 800091c:	4302      	orrs	r2, r0
 800091e:	08e4      	lsrs	r4, r4, #3
 8000920:	e736      	b.n	8000790 <__aeabi_dadd+0x39c>
 8000922:	0011      	movs	r1, r2
 8000924:	4653      	mov	r3, sl
 8000926:	3920      	subs	r1, #32
 8000928:	40cb      	lsrs	r3, r1
 800092a:	4699      	mov	r9, r3
 800092c:	2a20      	cmp	r2, #32
 800092e:	d006      	beq.n	800093e <__aeabi_dadd+0x54a>
 8000930:	2140      	movs	r1, #64	@ 0x40
 8000932:	4653      	mov	r3, sl
 8000934:	1a8a      	subs	r2, r1, r2
 8000936:	4093      	lsls	r3, r2
 8000938:	4662      	mov	r2, ip
 800093a:	431a      	orrs	r2, r3
 800093c:	4694      	mov	ip, r2
 800093e:	4665      	mov	r5, ip
 8000940:	1e6b      	subs	r3, r5, #1
 8000942:	419d      	sbcs	r5, r3
 8000944:	464b      	mov	r3, r9
 8000946:	431d      	orrs	r5, r3
 8000948:	e659      	b.n	80005fe <__aeabi_dadd+0x20a>
 800094a:	0762      	lsls	r2, r4, #29
 800094c:	08c0      	lsrs	r0, r0, #3
 800094e:	4302      	orrs	r2, r0
 8000950:	08e4      	lsrs	r4, r4, #3
 8000952:	e70d      	b.n	8000770 <__aeabi_dadd+0x37c>
 8000954:	4653      	mov	r3, sl
 8000956:	075a      	lsls	r2, r3, #29
 8000958:	4663      	mov	r3, ip
 800095a:	08d8      	lsrs	r0, r3, #3
 800095c:	4653      	mov	r3, sl
 800095e:	000e      	movs	r6, r1
 8000960:	4302      	orrs	r2, r0
 8000962:	08dc      	lsrs	r4, r3, #3
 8000964:	e714      	b.n	8000790 <__aeabi_dadd+0x39c>
 8000966:	0015      	movs	r5, r2
 8000968:	0026      	movs	r6, r4
 800096a:	3d20      	subs	r5, #32
 800096c:	40ee      	lsrs	r6, r5
 800096e:	2a20      	cmp	r2, #32
 8000970:	d003      	beq.n	800097a <__aeabi_dadd+0x586>
 8000972:	2540      	movs	r5, #64	@ 0x40
 8000974:	1aaa      	subs	r2, r5, r2
 8000976:	4094      	lsls	r4, r2
 8000978:	4320      	orrs	r0, r4
 800097a:	1e42      	subs	r2, r0, #1
 800097c:	4190      	sbcs	r0, r2
 800097e:	0005      	movs	r5, r0
 8000980:	4335      	orrs	r5, r6
 8000982:	e606      	b.n	8000592 <__aeabi_dadd+0x19e>
 8000984:	2a00      	cmp	r2, #0
 8000986:	d07c      	beq.n	8000a82 <__aeabi_dadd+0x68e>
 8000988:	4662      	mov	r2, ip
 800098a:	4653      	mov	r3, sl
 800098c:	08c0      	lsrs	r0, r0, #3
 800098e:	431a      	orrs	r2, r3
 8000990:	d100      	bne.n	8000994 <__aeabi_dadd+0x5a0>
 8000992:	e6fa      	b.n	800078a <__aeabi_dadd+0x396>
 8000994:	0762      	lsls	r2, r4, #29
 8000996:	4310      	orrs	r0, r2
 8000998:	2280      	movs	r2, #128	@ 0x80
 800099a:	08e4      	lsrs	r4, r4, #3
 800099c:	0312      	lsls	r2, r2, #12
 800099e:	4214      	tst	r4, r2
 80009a0:	d008      	beq.n	80009b4 <__aeabi_dadd+0x5c0>
 80009a2:	08d9      	lsrs	r1, r3, #3
 80009a4:	4211      	tst	r1, r2
 80009a6:	d105      	bne.n	80009b4 <__aeabi_dadd+0x5c0>
 80009a8:	4663      	mov	r3, ip
 80009aa:	08d8      	lsrs	r0, r3, #3
 80009ac:	4653      	mov	r3, sl
 80009ae:	000c      	movs	r4, r1
 80009b0:	075b      	lsls	r3, r3, #29
 80009b2:	4318      	orrs	r0, r3
 80009b4:	0f42      	lsrs	r2, r0, #29
 80009b6:	00c0      	lsls	r0, r0, #3
 80009b8:	08c0      	lsrs	r0, r0, #3
 80009ba:	0752      	lsls	r2, r2, #29
 80009bc:	4302      	orrs	r2, r0
 80009be:	e6e7      	b.n	8000790 <__aeabi_dadd+0x39c>
 80009c0:	2a00      	cmp	r2, #0
 80009c2:	d100      	bne.n	80009c6 <__aeabi_dadd+0x5d2>
 80009c4:	e72d      	b.n	8000822 <__aeabi_dadd+0x42e>
 80009c6:	4663      	mov	r3, ip
 80009c8:	08d8      	lsrs	r0, r3, #3
 80009ca:	4653      	mov	r3, sl
 80009cc:	075a      	lsls	r2, r3, #29
 80009ce:	000e      	movs	r6, r1
 80009d0:	4302      	orrs	r2, r0
 80009d2:	08dc      	lsrs	r4, r3, #3
 80009d4:	e6cc      	b.n	8000770 <__aeabi_dadd+0x37c>
 80009d6:	4663      	mov	r3, ip
 80009d8:	1a1d      	subs	r5, r3, r0
 80009da:	45ac      	cmp	ip, r5
 80009dc:	4192      	sbcs	r2, r2
 80009de:	4653      	mov	r3, sl
 80009e0:	4252      	negs	r2, r2
 80009e2:	1b1c      	subs	r4, r3, r4
 80009e4:	000e      	movs	r6, r1
 80009e6:	4688      	mov	r8, r1
 80009e8:	1aa4      	subs	r4, r4, r2
 80009ea:	3701      	adds	r7, #1
 80009ec:	e555      	b.n	800049a <__aeabi_dadd+0xa6>
 80009ee:	4663      	mov	r3, ip
 80009f0:	08d9      	lsrs	r1, r3, #3
 80009f2:	4653      	mov	r3, sl
 80009f4:	075a      	lsls	r2, r3, #29
 80009f6:	430a      	orrs	r2, r1
 80009f8:	08dc      	lsrs	r4, r3, #3
 80009fa:	e6c9      	b.n	8000790 <__aeabi_dadd+0x39c>
 80009fc:	4660      	mov	r0, ip
 80009fe:	4654      	mov	r4, sl
 8000a00:	e6d4      	b.n	80007ac <__aeabi_dadd+0x3b8>
 8000a02:	08c0      	lsrs	r0, r0, #3
 8000a04:	2a00      	cmp	r2, #0
 8000a06:	d100      	bne.n	8000a0a <__aeabi_dadd+0x616>
 8000a08:	e6bf      	b.n	800078a <__aeabi_dadd+0x396>
 8000a0a:	0762      	lsls	r2, r4, #29
 8000a0c:	4310      	orrs	r0, r2
 8000a0e:	2280      	movs	r2, #128	@ 0x80
 8000a10:	08e4      	lsrs	r4, r4, #3
 8000a12:	0312      	lsls	r2, r2, #12
 8000a14:	4214      	tst	r4, r2
 8000a16:	d0cd      	beq.n	80009b4 <__aeabi_dadd+0x5c0>
 8000a18:	08dd      	lsrs	r5, r3, #3
 8000a1a:	4215      	tst	r5, r2
 8000a1c:	d1ca      	bne.n	80009b4 <__aeabi_dadd+0x5c0>
 8000a1e:	4663      	mov	r3, ip
 8000a20:	08d8      	lsrs	r0, r3, #3
 8000a22:	4653      	mov	r3, sl
 8000a24:	075b      	lsls	r3, r3, #29
 8000a26:	000e      	movs	r6, r1
 8000a28:	002c      	movs	r4, r5
 8000a2a:	4318      	orrs	r0, r3
 8000a2c:	e7c2      	b.n	80009b4 <__aeabi_dadd+0x5c0>
 8000a2e:	4663      	mov	r3, ip
 8000a30:	08d9      	lsrs	r1, r3, #3
 8000a32:	4653      	mov	r3, sl
 8000a34:	075a      	lsls	r2, r3, #29
 8000a36:	430a      	orrs	r2, r1
 8000a38:	08dc      	lsrs	r4, r3, #3
 8000a3a:	e699      	b.n	8000770 <__aeabi_dadd+0x37c>
 8000a3c:	4663      	mov	r3, ip
 8000a3e:	08d8      	lsrs	r0, r3, #3
 8000a40:	4653      	mov	r3, sl
 8000a42:	075a      	lsls	r2, r3, #29
 8000a44:	000e      	movs	r6, r1
 8000a46:	4302      	orrs	r2, r0
 8000a48:	08dc      	lsrs	r4, r3, #3
 8000a4a:	e6a1      	b.n	8000790 <__aeabi_dadd+0x39c>
 8000a4c:	0011      	movs	r1, r2
 8000a4e:	0027      	movs	r7, r4
 8000a50:	3920      	subs	r1, #32
 8000a52:	40cf      	lsrs	r7, r1
 8000a54:	2a20      	cmp	r2, #32
 8000a56:	d003      	beq.n	8000a60 <__aeabi_dadd+0x66c>
 8000a58:	2140      	movs	r1, #64	@ 0x40
 8000a5a:	1a8a      	subs	r2, r1, r2
 8000a5c:	4094      	lsls	r4, r2
 8000a5e:	4320      	orrs	r0, r4
 8000a60:	1e42      	subs	r2, r0, #1
 8000a62:	4190      	sbcs	r0, r2
 8000a64:	0005      	movs	r5, r0
 8000a66:	433d      	orrs	r5, r7
 8000a68:	e651      	b.n	800070e <__aeabi_dadd+0x31a>
 8000a6a:	000c      	movs	r4, r1
 8000a6c:	2500      	movs	r5, #0
 8000a6e:	2200      	movs	r2, #0
 8000a70:	e558      	b.n	8000524 <__aeabi_dadd+0x130>
 8000a72:	4460      	add	r0, ip
 8000a74:	4560      	cmp	r0, ip
 8000a76:	4192      	sbcs	r2, r2
 8000a78:	4454      	add	r4, sl
 8000a7a:	4252      	negs	r2, r2
 8000a7c:	0005      	movs	r5, r0
 8000a7e:	18a4      	adds	r4, r4, r2
 8000a80:	e73a      	b.n	80008f8 <__aeabi_dadd+0x504>
 8000a82:	4653      	mov	r3, sl
 8000a84:	075a      	lsls	r2, r3, #29
 8000a86:	4663      	mov	r3, ip
 8000a88:	08d9      	lsrs	r1, r3, #3
 8000a8a:	4653      	mov	r3, sl
 8000a8c:	430a      	orrs	r2, r1
 8000a8e:	08dc      	lsrs	r4, r3, #3
 8000a90:	e67e      	b.n	8000790 <__aeabi_dadd+0x39c>
 8000a92:	001a      	movs	r2, r3
 8000a94:	001c      	movs	r4, r3
 8000a96:	432a      	orrs	r2, r5
 8000a98:	d000      	beq.n	8000a9c <__aeabi_dadd+0x6a8>
 8000a9a:	e6ab      	b.n	80007f4 <__aeabi_dadd+0x400>
 8000a9c:	e6c1      	b.n	8000822 <__aeabi_dadd+0x42e>
 8000a9e:	2120      	movs	r1, #32
 8000aa0:	2500      	movs	r5, #0
 8000aa2:	1a09      	subs	r1, r1, r0
 8000aa4:	e519      	b.n	80004da <__aeabi_dadd+0xe6>
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	2500      	movs	r5, #0
 8000aaa:	4c01      	ldr	r4, [pc, #4]	@ (8000ab0 <__aeabi_dadd+0x6bc>)
 8000aac:	e53a      	b.n	8000524 <__aeabi_dadd+0x130>
 8000aae:	46c0      	nop			@ (mov r8, r8)
 8000ab0:	000007ff 	.word	0x000007ff
 8000ab4:	ff7fffff 	.word	0xff7fffff
 8000ab8:	000007fe 	.word	0x000007fe

08000abc <__aeabi_dmul>:
 8000abc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000abe:	4657      	mov	r7, sl
 8000ac0:	46de      	mov	lr, fp
 8000ac2:	464e      	mov	r6, r9
 8000ac4:	4645      	mov	r5, r8
 8000ac6:	b5e0      	push	{r5, r6, r7, lr}
 8000ac8:	001f      	movs	r7, r3
 8000aca:	030b      	lsls	r3, r1, #12
 8000acc:	0b1b      	lsrs	r3, r3, #12
 8000ace:	0016      	movs	r6, r2
 8000ad0:	469a      	mov	sl, r3
 8000ad2:	0fca      	lsrs	r2, r1, #31
 8000ad4:	004b      	lsls	r3, r1, #1
 8000ad6:	0004      	movs	r4, r0
 8000ad8:	4693      	mov	fp, r2
 8000ada:	b087      	sub	sp, #28
 8000adc:	0d5b      	lsrs	r3, r3, #21
 8000ade:	d100      	bne.n	8000ae2 <__aeabi_dmul+0x26>
 8000ae0:	e0d5      	b.n	8000c8e <__aeabi_dmul+0x1d2>
 8000ae2:	4abb      	ldr	r2, [pc, #748]	@ (8000dd0 <__aeabi_dmul+0x314>)
 8000ae4:	4293      	cmp	r3, r2
 8000ae6:	d100      	bne.n	8000aea <__aeabi_dmul+0x2e>
 8000ae8:	e0f8      	b.n	8000cdc <__aeabi_dmul+0x220>
 8000aea:	4651      	mov	r1, sl
 8000aec:	0f42      	lsrs	r2, r0, #29
 8000aee:	00c9      	lsls	r1, r1, #3
 8000af0:	430a      	orrs	r2, r1
 8000af2:	2180      	movs	r1, #128	@ 0x80
 8000af4:	0409      	lsls	r1, r1, #16
 8000af6:	4311      	orrs	r1, r2
 8000af8:	00c2      	lsls	r2, r0, #3
 8000afa:	4691      	mov	r9, r2
 8000afc:	4ab5      	ldr	r2, [pc, #724]	@ (8000dd4 <__aeabi_dmul+0x318>)
 8000afe:	468a      	mov	sl, r1
 8000b00:	189d      	adds	r5, r3, r2
 8000b02:	2300      	movs	r3, #0
 8000b04:	4698      	mov	r8, r3
 8000b06:	9302      	str	r3, [sp, #8]
 8000b08:	033c      	lsls	r4, r7, #12
 8000b0a:	007b      	lsls	r3, r7, #1
 8000b0c:	0ffa      	lsrs	r2, r7, #31
 8000b0e:	0030      	movs	r0, r6
 8000b10:	0b24      	lsrs	r4, r4, #12
 8000b12:	0d5b      	lsrs	r3, r3, #21
 8000b14:	9200      	str	r2, [sp, #0]
 8000b16:	d100      	bne.n	8000b1a <__aeabi_dmul+0x5e>
 8000b18:	e096      	b.n	8000c48 <__aeabi_dmul+0x18c>
 8000b1a:	4aad      	ldr	r2, [pc, #692]	@ (8000dd0 <__aeabi_dmul+0x314>)
 8000b1c:	4293      	cmp	r3, r2
 8000b1e:	d031      	beq.n	8000b84 <__aeabi_dmul+0xc8>
 8000b20:	0f72      	lsrs	r2, r6, #29
 8000b22:	00e4      	lsls	r4, r4, #3
 8000b24:	4322      	orrs	r2, r4
 8000b26:	2480      	movs	r4, #128	@ 0x80
 8000b28:	0424      	lsls	r4, r4, #16
 8000b2a:	4314      	orrs	r4, r2
 8000b2c:	4aa9      	ldr	r2, [pc, #676]	@ (8000dd4 <__aeabi_dmul+0x318>)
 8000b2e:	00f0      	lsls	r0, r6, #3
 8000b30:	4694      	mov	ip, r2
 8000b32:	4463      	add	r3, ip
 8000b34:	195b      	adds	r3, r3, r5
 8000b36:	1c5a      	adds	r2, r3, #1
 8000b38:	9201      	str	r2, [sp, #4]
 8000b3a:	4642      	mov	r2, r8
 8000b3c:	2600      	movs	r6, #0
 8000b3e:	2a0a      	cmp	r2, #10
 8000b40:	dc42      	bgt.n	8000bc8 <__aeabi_dmul+0x10c>
 8000b42:	465a      	mov	r2, fp
 8000b44:	9900      	ldr	r1, [sp, #0]
 8000b46:	404a      	eors	r2, r1
 8000b48:	4693      	mov	fp, r2
 8000b4a:	4642      	mov	r2, r8
 8000b4c:	2a02      	cmp	r2, #2
 8000b4e:	dc32      	bgt.n	8000bb6 <__aeabi_dmul+0xfa>
 8000b50:	3a01      	subs	r2, #1
 8000b52:	2a01      	cmp	r2, #1
 8000b54:	d900      	bls.n	8000b58 <__aeabi_dmul+0x9c>
 8000b56:	e149      	b.n	8000dec <__aeabi_dmul+0x330>
 8000b58:	2e02      	cmp	r6, #2
 8000b5a:	d100      	bne.n	8000b5e <__aeabi_dmul+0xa2>
 8000b5c:	e0ca      	b.n	8000cf4 <__aeabi_dmul+0x238>
 8000b5e:	2e01      	cmp	r6, #1
 8000b60:	d13d      	bne.n	8000bde <__aeabi_dmul+0x122>
 8000b62:	2300      	movs	r3, #0
 8000b64:	2400      	movs	r4, #0
 8000b66:	2200      	movs	r2, #0
 8000b68:	0010      	movs	r0, r2
 8000b6a:	465a      	mov	r2, fp
 8000b6c:	051b      	lsls	r3, r3, #20
 8000b6e:	4323      	orrs	r3, r4
 8000b70:	07d2      	lsls	r2, r2, #31
 8000b72:	4313      	orrs	r3, r2
 8000b74:	0019      	movs	r1, r3
 8000b76:	b007      	add	sp, #28
 8000b78:	bcf0      	pop	{r4, r5, r6, r7}
 8000b7a:	46bb      	mov	fp, r7
 8000b7c:	46b2      	mov	sl, r6
 8000b7e:	46a9      	mov	r9, r5
 8000b80:	46a0      	mov	r8, r4
 8000b82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b84:	4b92      	ldr	r3, [pc, #584]	@ (8000dd0 <__aeabi_dmul+0x314>)
 8000b86:	4326      	orrs	r6, r4
 8000b88:	18eb      	adds	r3, r5, r3
 8000b8a:	2e00      	cmp	r6, #0
 8000b8c:	d100      	bne.n	8000b90 <__aeabi_dmul+0xd4>
 8000b8e:	e0bb      	b.n	8000d08 <__aeabi_dmul+0x24c>
 8000b90:	2203      	movs	r2, #3
 8000b92:	4641      	mov	r1, r8
 8000b94:	4311      	orrs	r1, r2
 8000b96:	465a      	mov	r2, fp
 8000b98:	4688      	mov	r8, r1
 8000b9a:	9900      	ldr	r1, [sp, #0]
 8000b9c:	404a      	eors	r2, r1
 8000b9e:	2180      	movs	r1, #128	@ 0x80
 8000ba0:	0109      	lsls	r1, r1, #4
 8000ba2:	468c      	mov	ip, r1
 8000ba4:	0029      	movs	r1, r5
 8000ba6:	4461      	add	r1, ip
 8000ba8:	9101      	str	r1, [sp, #4]
 8000baa:	4641      	mov	r1, r8
 8000bac:	290a      	cmp	r1, #10
 8000bae:	dd00      	ble.n	8000bb2 <__aeabi_dmul+0xf6>
 8000bb0:	e233      	b.n	800101a <__aeabi_dmul+0x55e>
 8000bb2:	4693      	mov	fp, r2
 8000bb4:	2603      	movs	r6, #3
 8000bb6:	4642      	mov	r2, r8
 8000bb8:	2701      	movs	r7, #1
 8000bba:	4097      	lsls	r7, r2
 8000bbc:	21a6      	movs	r1, #166	@ 0xa6
 8000bbe:	003a      	movs	r2, r7
 8000bc0:	00c9      	lsls	r1, r1, #3
 8000bc2:	400a      	ands	r2, r1
 8000bc4:	420f      	tst	r7, r1
 8000bc6:	d031      	beq.n	8000c2c <__aeabi_dmul+0x170>
 8000bc8:	9e02      	ldr	r6, [sp, #8]
 8000bca:	2e02      	cmp	r6, #2
 8000bcc:	d100      	bne.n	8000bd0 <__aeabi_dmul+0x114>
 8000bce:	e235      	b.n	800103c <__aeabi_dmul+0x580>
 8000bd0:	2e03      	cmp	r6, #3
 8000bd2:	d100      	bne.n	8000bd6 <__aeabi_dmul+0x11a>
 8000bd4:	e1d2      	b.n	8000f7c <__aeabi_dmul+0x4c0>
 8000bd6:	4654      	mov	r4, sl
 8000bd8:	4648      	mov	r0, r9
 8000bda:	2e01      	cmp	r6, #1
 8000bdc:	d0c1      	beq.n	8000b62 <__aeabi_dmul+0xa6>
 8000bde:	9a01      	ldr	r2, [sp, #4]
 8000be0:	4b7d      	ldr	r3, [pc, #500]	@ (8000dd8 <__aeabi_dmul+0x31c>)
 8000be2:	4694      	mov	ip, r2
 8000be4:	4463      	add	r3, ip
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	dc00      	bgt.n	8000bec <__aeabi_dmul+0x130>
 8000bea:	e0c0      	b.n	8000d6e <__aeabi_dmul+0x2b2>
 8000bec:	0742      	lsls	r2, r0, #29
 8000bee:	d009      	beq.n	8000c04 <__aeabi_dmul+0x148>
 8000bf0:	220f      	movs	r2, #15
 8000bf2:	4002      	ands	r2, r0
 8000bf4:	2a04      	cmp	r2, #4
 8000bf6:	d005      	beq.n	8000c04 <__aeabi_dmul+0x148>
 8000bf8:	1d02      	adds	r2, r0, #4
 8000bfa:	4282      	cmp	r2, r0
 8000bfc:	4180      	sbcs	r0, r0
 8000bfe:	4240      	negs	r0, r0
 8000c00:	1824      	adds	r4, r4, r0
 8000c02:	0010      	movs	r0, r2
 8000c04:	01e2      	lsls	r2, r4, #7
 8000c06:	d506      	bpl.n	8000c16 <__aeabi_dmul+0x15a>
 8000c08:	4b74      	ldr	r3, [pc, #464]	@ (8000ddc <__aeabi_dmul+0x320>)
 8000c0a:	9a01      	ldr	r2, [sp, #4]
 8000c0c:	401c      	ands	r4, r3
 8000c0e:	2380      	movs	r3, #128	@ 0x80
 8000c10:	4694      	mov	ip, r2
 8000c12:	00db      	lsls	r3, r3, #3
 8000c14:	4463      	add	r3, ip
 8000c16:	4a72      	ldr	r2, [pc, #456]	@ (8000de0 <__aeabi_dmul+0x324>)
 8000c18:	4293      	cmp	r3, r2
 8000c1a:	dc6b      	bgt.n	8000cf4 <__aeabi_dmul+0x238>
 8000c1c:	0762      	lsls	r2, r4, #29
 8000c1e:	08c0      	lsrs	r0, r0, #3
 8000c20:	0264      	lsls	r4, r4, #9
 8000c22:	055b      	lsls	r3, r3, #21
 8000c24:	4302      	orrs	r2, r0
 8000c26:	0b24      	lsrs	r4, r4, #12
 8000c28:	0d5b      	lsrs	r3, r3, #21
 8000c2a:	e79d      	b.n	8000b68 <__aeabi_dmul+0xac>
 8000c2c:	2190      	movs	r1, #144	@ 0x90
 8000c2e:	0089      	lsls	r1, r1, #2
 8000c30:	420f      	tst	r7, r1
 8000c32:	d163      	bne.n	8000cfc <__aeabi_dmul+0x240>
 8000c34:	2288      	movs	r2, #136	@ 0x88
 8000c36:	423a      	tst	r2, r7
 8000c38:	d100      	bne.n	8000c3c <__aeabi_dmul+0x180>
 8000c3a:	e0d7      	b.n	8000dec <__aeabi_dmul+0x330>
 8000c3c:	9b00      	ldr	r3, [sp, #0]
 8000c3e:	46a2      	mov	sl, r4
 8000c40:	469b      	mov	fp, r3
 8000c42:	4681      	mov	r9, r0
 8000c44:	9602      	str	r6, [sp, #8]
 8000c46:	e7bf      	b.n	8000bc8 <__aeabi_dmul+0x10c>
 8000c48:	0023      	movs	r3, r4
 8000c4a:	4333      	orrs	r3, r6
 8000c4c:	d100      	bne.n	8000c50 <__aeabi_dmul+0x194>
 8000c4e:	e07f      	b.n	8000d50 <__aeabi_dmul+0x294>
 8000c50:	2c00      	cmp	r4, #0
 8000c52:	d100      	bne.n	8000c56 <__aeabi_dmul+0x19a>
 8000c54:	e1ad      	b.n	8000fb2 <__aeabi_dmul+0x4f6>
 8000c56:	0020      	movs	r0, r4
 8000c58:	f000 fa62 	bl	8001120 <__clzsi2>
 8000c5c:	0002      	movs	r2, r0
 8000c5e:	0003      	movs	r3, r0
 8000c60:	3a0b      	subs	r2, #11
 8000c62:	201d      	movs	r0, #29
 8000c64:	0019      	movs	r1, r3
 8000c66:	1a82      	subs	r2, r0, r2
 8000c68:	0030      	movs	r0, r6
 8000c6a:	3908      	subs	r1, #8
 8000c6c:	40d0      	lsrs	r0, r2
 8000c6e:	408c      	lsls	r4, r1
 8000c70:	4304      	orrs	r4, r0
 8000c72:	0030      	movs	r0, r6
 8000c74:	4088      	lsls	r0, r1
 8000c76:	4a5b      	ldr	r2, [pc, #364]	@ (8000de4 <__aeabi_dmul+0x328>)
 8000c78:	1aeb      	subs	r3, r5, r3
 8000c7a:	4694      	mov	ip, r2
 8000c7c:	4463      	add	r3, ip
 8000c7e:	1c5a      	adds	r2, r3, #1
 8000c80:	9201      	str	r2, [sp, #4]
 8000c82:	4642      	mov	r2, r8
 8000c84:	2600      	movs	r6, #0
 8000c86:	2a0a      	cmp	r2, #10
 8000c88:	dc00      	bgt.n	8000c8c <__aeabi_dmul+0x1d0>
 8000c8a:	e75a      	b.n	8000b42 <__aeabi_dmul+0x86>
 8000c8c:	e79c      	b.n	8000bc8 <__aeabi_dmul+0x10c>
 8000c8e:	4653      	mov	r3, sl
 8000c90:	4303      	orrs	r3, r0
 8000c92:	4699      	mov	r9, r3
 8000c94:	d054      	beq.n	8000d40 <__aeabi_dmul+0x284>
 8000c96:	4653      	mov	r3, sl
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d100      	bne.n	8000c9e <__aeabi_dmul+0x1e2>
 8000c9c:	e177      	b.n	8000f8e <__aeabi_dmul+0x4d2>
 8000c9e:	4650      	mov	r0, sl
 8000ca0:	f000 fa3e 	bl	8001120 <__clzsi2>
 8000ca4:	230b      	movs	r3, #11
 8000ca6:	425b      	negs	r3, r3
 8000ca8:	469c      	mov	ip, r3
 8000caa:	0002      	movs	r2, r0
 8000cac:	4484      	add	ip, r0
 8000cae:	0011      	movs	r1, r2
 8000cb0:	4650      	mov	r0, sl
 8000cb2:	3908      	subs	r1, #8
 8000cb4:	4088      	lsls	r0, r1
 8000cb6:	231d      	movs	r3, #29
 8000cb8:	4680      	mov	r8, r0
 8000cba:	4660      	mov	r0, ip
 8000cbc:	1a1b      	subs	r3, r3, r0
 8000cbe:	0020      	movs	r0, r4
 8000cc0:	40d8      	lsrs	r0, r3
 8000cc2:	0003      	movs	r3, r0
 8000cc4:	4640      	mov	r0, r8
 8000cc6:	4303      	orrs	r3, r0
 8000cc8:	469a      	mov	sl, r3
 8000cca:	0023      	movs	r3, r4
 8000ccc:	408b      	lsls	r3, r1
 8000cce:	4699      	mov	r9, r3
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	4d44      	ldr	r5, [pc, #272]	@ (8000de4 <__aeabi_dmul+0x328>)
 8000cd4:	4698      	mov	r8, r3
 8000cd6:	1aad      	subs	r5, r5, r2
 8000cd8:	9302      	str	r3, [sp, #8]
 8000cda:	e715      	b.n	8000b08 <__aeabi_dmul+0x4c>
 8000cdc:	4652      	mov	r2, sl
 8000cde:	4302      	orrs	r2, r0
 8000ce0:	4691      	mov	r9, r2
 8000ce2:	d126      	bne.n	8000d32 <__aeabi_dmul+0x276>
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	001d      	movs	r5, r3
 8000ce8:	2302      	movs	r3, #2
 8000cea:	4692      	mov	sl, r2
 8000cec:	3208      	adds	r2, #8
 8000cee:	4690      	mov	r8, r2
 8000cf0:	9302      	str	r3, [sp, #8]
 8000cf2:	e709      	b.n	8000b08 <__aeabi_dmul+0x4c>
 8000cf4:	2400      	movs	r4, #0
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	4b35      	ldr	r3, [pc, #212]	@ (8000dd0 <__aeabi_dmul+0x314>)
 8000cfa:	e735      	b.n	8000b68 <__aeabi_dmul+0xac>
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	2480      	movs	r4, #128	@ 0x80
 8000d00:	469b      	mov	fp, r3
 8000d02:	0324      	lsls	r4, r4, #12
 8000d04:	4b32      	ldr	r3, [pc, #200]	@ (8000dd0 <__aeabi_dmul+0x314>)
 8000d06:	e72f      	b.n	8000b68 <__aeabi_dmul+0xac>
 8000d08:	2202      	movs	r2, #2
 8000d0a:	4641      	mov	r1, r8
 8000d0c:	4311      	orrs	r1, r2
 8000d0e:	2280      	movs	r2, #128	@ 0x80
 8000d10:	0112      	lsls	r2, r2, #4
 8000d12:	4694      	mov	ip, r2
 8000d14:	002a      	movs	r2, r5
 8000d16:	4462      	add	r2, ip
 8000d18:	4688      	mov	r8, r1
 8000d1a:	9201      	str	r2, [sp, #4]
 8000d1c:	290a      	cmp	r1, #10
 8000d1e:	dd00      	ble.n	8000d22 <__aeabi_dmul+0x266>
 8000d20:	e752      	b.n	8000bc8 <__aeabi_dmul+0x10c>
 8000d22:	465a      	mov	r2, fp
 8000d24:	2000      	movs	r0, #0
 8000d26:	9900      	ldr	r1, [sp, #0]
 8000d28:	0004      	movs	r4, r0
 8000d2a:	404a      	eors	r2, r1
 8000d2c:	4693      	mov	fp, r2
 8000d2e:	2602      	movs	r6, #2
 8000d30:	e70b      	b.n	8000b4a <__aeabi_dmul+0x8e>
 8000d32:	220c      	movs	r2, #12
 8000d34:	001d      	movs	r5, r3
 8000d36:	2303      	movs	r3, #3
 8000d38:	4681      	mov	r9, r0
 8000d3a:	4690      	mov	r8, r2
 8000d3c:	9302      	str	r3, [sp, #8]
 8000d3e:	e6e3      	b.n	8000b08 <__aeabi_dmul+0x4c>
 8000d40:	2300      	movs	r3, #0
 8000d42:	469a      	mov	sl, r3
 8000d44:	3304      	adds	r3, #4
 8000d46:	4698      	mov	r8, r3
 8000d48:	3b03      	subs	r3, #3
 8000d4a:	2500      	movs	r5, #0
 8000d4c:	9302      	str	r3, [sp, #8]
 8000d4e:	e6db      	b.n	8000b08 <__aeabi_dmul+0x4c>
 8000d50:	4642      	mov	r2, r8
 8000d52:	3301      	adds	r3, #1
 8000d54:	431a      	orrs	r2, r3
 8000d56:	002b      	movs	r3, r5
 8000d58:	4690      	mov	r8, r2
 8000d5a:	1c5a      	adds	r2, r3, #1
 8000d5c:	9201      	str	r2, [sp, #4]
 8000d5e:	4642      	mov	r2, r8
 8000d60:	2400      	movs	r4, #0
 8000d62:	2000      	movs	r0, #0
 8000d64:	2601      	movs	r6, #1
 8000d66:	2a0a      	cmp	r2, #10
 8000d68:	dc00      	bgt.n	8000d6c <__aeabi_dmul+0x2b0>
 8000d6a:	e6ea      	b.n	8000b42 <__aeabi_dmul+0x86>
 8000d6c:	e72c      	b.n	8000bc8 <__aeabi_dmul+0x10c>
 8000d6e:	2201      	movs	r2, #1
 8000d70:	1ad2      	subs	r2, r2, r3
 8000d72:	2a38      	cmp	r2, #56	@ 0x38
 8000d74:	dd00      	ble.n	8000d78 <__aeabi_dmul+0x2bc>
 8000d76:	e6f4      	b.n	8000b62 <__aeabi_dmul+0xa6>
 8000d78:	2a1f      	cmp	r2, #31
 8000d7a:	dc00      	bgt.n	8000d7e <__aeabi_dmul+0x2c2>
 8000d7c:	e12a      	b.n	8000fd4 <__aeabi_dmul+0x518>
 8000d7e:	211f      	movs	r1, #31
 8000d80:	4249      	negs	r1, r1
 8000d82:	1acb      	subs	r3, r1, r3
 8000d84:	0021      	movs	r1, r4
 8000d86:	40d9      	lsrs	r1, r3
 8000d88:	000b      	movs	r3, r1
 8000d8a:	2a20      	cmp	r2, #32
 8000d8c:	d005      	beq.n	8000d9a <__aeabi_dmul+0x2de>
 8000d8e:	4a16      	ldr	r2, [pc, #88]	@ (8000de8 <__aeabi_dmul+0x32c>)
 8000d90:	9d01      	ldr	r5, [sp, #4]
 8000d92:	4694      	mov	ip, r2
 8000d94:	4465      	add	r5, ip
 8000d96:	40ac      	lsls	r4, r5
 8000d98:	4320      	orrs	r0, r4
 8000d9a:	1e42      	subs	r2, r0, #1
 8000d9c:	4190      	sbcs	r0, r2
 8000d9e:	4318      	orrs	r0, r3
 8000da0:	2307      	movs	r3, #7
 8000da2:	0019      	movs	r1, r3
 8000da4:	2400      	movs	r4, #0
 8000da6:	4001      	ands	r1, r0
 8000da8:	4203      	tst	r3, r0
 8000daa:	d00c      	beq.n	8000dc6 <__aeabi_dmul+0x30a>
 8000dac:	230f      	movs	r3, #15
 8000dae:	4003      	ands	r3, r0
 8000db0:	2b04      	cmp	r3, #4
 8000db2:	d100      	bne.n	8000db6 <__aeabi_dmul+0x2fa>
 8000db4:	e140      	b.n	8001038 <__aeabi_dmul+0x57c>
 8000db6:	1d03      	adds	r3, r0, #4
 8000db8:	4283      	cmp	r3, r0
 8000dba:	41a4      	sbcs	r4, r4
 8000dbc:	0018      	movs	r0, r3
 8000dbe:	4264      	negs	r4, r4
 8000dc0:	0761      	lsls	r1, r4, #29
 8000dc2:	0264      	lsls	r4, r4, #9
 8000dc4:	0b24      	lsrs	r4, r4, #12
 8000dc6:	08c2      	lsrs	r2, r0, #3
 8000dc8:	2300      	movs	r3, #0
 8000dca:	430a      	orrs	r2, r1
 8000dcc:	e6cc      	b.n	8000b68 <__aeabi_dmul+0xac>
 8000dce:	46c0      	nop			@ (mov r8, r8)
 8000dd0:	000007ff 	.word	0x000007ff
 8000dd4:	fffffc01 	.word	0xfffffc01
 8000dd8:	000003ff 	.word	0x000003ff
 8000ddc:	feffffff 	.word	0xfeffffff
 8000de0:	000007fe 	.word	0x000007fe
 8000de4:	fffffc0d 	.word	0xfffffc0d
 8000de8:	0000043e 	.word	0x0000043e
 8000dec:	4649      	mov	r1, r9
 8000dee:	464a      	mov	r2, r9
 8000df0:	0409      	lsls	r1, r1, #16
 8000df2:	0c09      	lsrs	r1, r1, #16
 8000df4:	000d      	movs	r5, r1
 8000df6:	0c16      	lsrs	r6, r2, #16
 8000df8:	0c02      	lsrs	r2, r0, #16
 8000dfa:	0400      	lsls	r0, r0, #16
 8000dfc:	0c00      	lsrs	r0, r0, #16
 8000dfe:	4345      	muls	r5, r0
 8000e00:	46ac      	mov	ip, r5
 8000e02:	0005      	movs	r5, r0
 8000e04:	4375      	muls	r5, r6
 8000e06:	46a8      	mov	r8, r5
 8000e08:	0015      	movs	r5, r2
 8000e0a:	000f      	movs	r7, r1
 8000e0c:	4375      	muls	r5, r6
 8000e0e:	9200      	str	r2, [sp, #0]
 8000e10:	9502      	str	r5, [sp, #8]
 8000e12:	002a      	movs	r2, r5
 8000e14:	9d00      	ldr	r5, [sp, #0]
 8000e16:	436f      	muls	r7, r5
 8000e18:	4665      	mov	r5, ip
 8000e1a:	0c2d      	lsrs	r5, r5, #16
 8000e1c:	46a9      	mov	r9, r5
 8000e1e:	4447      	add	r7, r8
 8000e20:	444f      	add	r7, r9
 8000e22:	45b8      	cmp	r8, r7
 8000e24:	d905      	bls.n	8000e32 <__aeabi_dmul+0x376>
 8000e26:	0015      	movs	r5, r2
 8000e28:	2280      	movs	r2, #128	@ 0x80
 8000e2a:	0252      	lsls	r2, r2, #9
 8000e2c:	4690      	mov	r8, r2
 8000e2e:	4445      	add	r5, r8
 8000e30:	9502      	str	r5, [sp, #8]
 8000e32:	0c3d      	lsrs	r5, r7, #16
 8000e34:	9503      	str	r5, [sp, #12]
 8000e36:	4665      	mov	r5, ip
 8000e38:	042d      	lsls	r5, r5, #16
 8000e3a:	043f      	lsls	r7, r7, #16
 8000e3c:	0c2d      	lsrs	r5, r5, #16
 8000e3e:	46ac      	mov	ip, r5
 8000e40:	003d      	movs	r5, r7
 8000e42:	4465      	add	r5, ip
 8000e44:	9504      	str	r5, [sp, #16]
 8000e46:	0c25      	lsrs	r5, r4, #16
 8000e48:	0424      	lsls	r4, r4, #16
 8000e4a:	0c24      	lsrs	r4, r4, #16
 8000e4c:	46ac      	mov	ip, r5
 8000e4e:	0025      	movs	r5, r4
 8000e50:	4375      	muls	r5, r6
 8000e52:	46a8      	mov	r8, r5
 8000e54:	4665      	mov	r5, ip
 8000e56:	000f      	movs	r7, r1
 8000e58:	4369      	muls	r1, r5
 8000e5a:	4441      	add	r1, r8
 8000e5c:	4689      	mov	r9, r1
 8000e5e:	4367      	muls	r7, r4
 8000e60:	0c39      	lsrs	r1, r7, #16
 8000e62:	4449      	add	r1, r9
 8000e64:	436e      	muls	r6, r5
 8000e66:	4588      	cmp	r8, r1
 8000e68:	d903      	bls.n	8000e72 <__aeabi_dmul+0x3b6>
 8000e6a:	2280      	movs	r2, #128	@ 0x80
 8000e6c:	0252      	lsls	r2, r2, #9
 8000e6e:	4690      	mov	r8, r2
 8000e70:	4446      	add	r6, r8
 8000e72:	0c0d      	lsrs	r5, r1, #16
 8000e74:	46a8      	mov	r8, r5
 8000e76:	0035      	movs	r5, r6
 8000e78:	4445      	add	r5, r8
 8000e7a:	9505      	str	r5, [sp, #20]
 8000e7c:	9d03      	ldr	r5, [sp, #12]
 8000e7e:	043f      	lsls	r7, r7, #16
 8000e80:	46a8      	mov	r8, r5
 8000e82:	0c3f      	lsrs	r7, r7, #16
 8000e84:	0409      	lsls	r1, r1, #16
 8000e86:	19c9      	adds	r1, r1, r7
 8000e88:	4488      	add	r8, r1
 8000e8a:	4645      	mov	r5, r8
 8000e8c:	9503      	str	r5, [sp, #12]
 8000e8e:	4655      	mov	r5, sl
 8000e90:	042e      	lsls	r6, r5, #16
 8000e92:	0c36      	lsrs	r6, r6, #16
 8000e94:	0c2f      	lsrs	r7, r5, #16
 8000e96:	0035      	movs	r5, r6
 8000e98:	4345      	muls	r5, r0
 8000e9a:	4378      	muls	r0, r7
 8000e9c:	4681      	mov	r9, r0
 8000e9e:	0038      	movs	r0, r7
 8000ea0:	46a8      	mov	r8, r5
 8000ea2:	0c2d      	lsrs	r5, r5, #16
 8000ea4:	46aa      	mov	sl, r5
 8000ea6:	9a00      	ldr	r2, [sp, #0]
 8000ea8:	4350      	muls	r0, r2
 8000eaa:	4372      	muls	r2, r6
 8000eac:	444a      	add	r2, r9
 8000eae:	4452      	add	r2, sl
 8000eb0:	4591      	cmp	r9, r2
 8000eb2:	d903      	bls.n	8000ebc <__aeabi_dmul+0x400>
 8000eb4:	2580      	movs	r5, #128	@ 0x80
 8000eb6:	026d      	lsls	r5, r5, #9
 8000eb8:	46a9      	mov	r9, r5
 8000eba:	4448      	add	r0, r9
 8000ebc:	0c15      	lsrs	r5, r2, #16
 8000ebe:	46a9      	mov	r9, r5
 8000ec0:	4645      	mov	r5, r8
 8000ec2:	042d      	lsls	r5, r5, #16
 8000ec4:	0c2d      	lsrs	r5, r5, #16
 8000ec6:	46a8      	mov	r8, r5
 8000ec8:	4665      	mov	r5, ip
 8000eca:	437d      	muls	r5, r7
 8000ecc:	0412      	lsls	r2, r2, #16
 8000ece:	4448      	add	r0, r9
 8000ed0:	4490      	add	r8, r2
 8000ed2:	46a9      	mov	r9, r5
 8000ed4:	0032      	movs	r2, r6
 8000ed6:	4665      	mov	r5, ip
 8000ed8:	4362      	muls	r2, r4
 8000eda:	436e      	muls	r6, r5
 8000edc:	437c      	muls	r4, r7
 8000ede:	0c17      	lsrs	r7, r2, #16
 8000ee0:	1936      	adds	r6, r6, r4
 8000ee2:	19bf      	adds	r7, r7, r6
 8000ee4:	42bc      	cmp	r4, r7
 8000ee6:	d903      	bls.n	8000ef0 <__aeabi_dmul+0x434>
 8000ee8:	2480      	movs	r4, #128	@ 0x80
 8000eea:	0264      	lsls	r4, r4, #9
 8000eec:	46a4      	mov	ip, r4
 8000eee:	44e1      	add	r9, ip
 8000ef0:	9c02      	ldr	r4, [sp, #8]
 8000ef2:	9e03      	ldr	r6, [sp, #12]
 8000ef4:	46a4      	mov	ip, r4
 8000ef6:	9d05      	ldr	r5, [sp, #20]
 8000ef8:	4466      	add	r6, ip
 8000efa:	428e      	cmp	r6, r1
 8000efc:	4189      	sbcs	r1, r1
 8000efe:	46ac      	mov	ip, r5
 8000f00:	0412      	lsls	r2, r2, #16
 8000f02:	043c      	lsls	r4, r7, #16
 8000f04:	0c12      	lsrs	r2, r2, #16
 8000f06:	18a2      	adds	r2, r4, r2
 8000f08:	4462      	add	r2, ip
 8000f0a:	4249      	negs	r1, r1
 8000f0c:	1854      	adds	r4, r2, r1
 8000f0e:	4446      	add	r6, r8
 8000f10:	46a4      	mov	ip, r4
 8000f12:	4546      	cmp	r6, r8
 8000f14:	41a4      	sbcs	r4, r4
 8000f16:	4682      	mov	sl, r0
 8000f18:	4264      	negs	r4, r4
 8000f1a:	46a0      	mov	r8, r4
 8000f1c:	42aa      	cmp	r2, r5
 8000f1e:	4192      	sbcs	r2, r2
 8000f20:	458c      	cmp	ip, r1
 8000f22:	4189      	sbcs	r1, r1
 8000f24:	44e2      	add	sl, ip
 8000f26:	44d0      	add	r8, sl
 8000f28:	4249      	negs	r1, r1
 8000f2a:	4252      	negs	r2, r2
 8000f2c:	430a      	orrs	r2, r1
 8000f2e:	45a0      	cmp	r8, r4
 8000f30:	41a4      	sbcs	r4, r4
 8000f32:	4582      	cmp	sl, r0
 8000f34:	4189      	sbcs	r1, r1
 8000f36:	4264      	negs	r4, r4
 8000f38:	4249      	negs	r1, r1
 8000f3a:	430c      	orrs	r4, r1
 8000f3c:	4641      	mov	r1, r8
 8000f3e:	0c3f      	lsrs	r7, r7, #16
 8000f40:	19d2      	adds	r2, r2, r7
 8000f42:	1912      	adds	r2, r2, r4
 8000f44:	0dcc      	lsrs	r4, r1, #23
 8000f46:	9904      	ldr	r1, [sp, #16]
 8000f48:	0270      	lsls	r0, r6, #9
 8000f4a:	4308      	orrs	r0, r1
 8000f4c:	1e41      	subs	r1, r0, #1
 8000f4e:	4188      	sbcs	r0, r1
 8000f50:	4641      	mov	r1, r8
 8000f52:	444a      	add	r2, r9
 8000f54:	0df6      	lsrs	r6, r6, #23
 8000f56:	0252      	lsls	r2, r2, #9
 8000f58:	4330      	orrs	r0, r6
 8000f5a:	0249      	lsls	r1, r1, #9
 8000f5c:	4314      	orrs	r4, r2
 8000f5e:	4308      	orrs	r0, r1
 8000f60:	01d2      	lsls	r2, r2, #7
 8000f62:	d535      	bpl.n	8000fd0 <__aeabi_dmul+0x514>
 8000f64:	2201      	movs	r2, #1
 8000f66:	0843      	lsrs	r3, r0, #1
 8000f68:	4002      	ands	r2, r0
 8000f6a:	4313      	orrs	r3, r2
 8000f6c:	07e0      	lsls	r0, r4, #31
 8000f6e:	4318      	orrs	r0, r3
 8000f70:	0864      	lsrs	r4, r4, #1
 8000f72:	e634      	b.n	8000bde <__aeabi_dmul+0x122>
 8000f74:	9b00      	ldr	r3, [sp, #0]
 8000f76:	46a2      	mov	sl, r4
 8000f78:	469b      	mov	fp, r3
 8000f7a:	4681      	mov	r9, r0
 8000f7c:	2480      	movs	r4, #128	@ 0x80
 8000f7e:	4653      	mov	r3, sl
 8000f80:	0324      	lsls	r4, r4, #12
 8000f82:	431c      	orrs	r4, r3
 8000f84:	0324      	lsls	r4, r4, #12
 8000f86:	464a      	mov	r2, r9
 8000f88:	4b2e      	ldr	r3, [pc, #184]	@ (8001044 <__aeabi_dmul+0x588>)
 8000f8a:	0b24      	lsrs	r4, r4, #12
 8000f8c:	e5ec      	b.n	8000b68 <__aeabi_dmul+0xac>
 8000f8e:	f000 f8c7 	bl	8001120 <__clzsi2>
 8000f92:	2315      	movs	r3, #21
 8000f94:	469c      	mov	ip, r3
 8000f96:	4484      	add	ip, r0
 8000f98:	0002      	movs	r2, r0
 8000f9a:	4663      	mov	r3, ip
 8000f9c:	3220      	adds	r2, #32
 8000f9e:	2b1c      	cmp	r3, #28
 8000fa0:	dc00      	bgt.n	8000fa4 <__aeabi_dmul+0x4e8>
 8000fa2:	e684      	b.n	8000cae <__aeabi_dmul+0x1f2>
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	4699      	mov	r9, r3
 8000fa8:	0023      	movs	r3, r4
 8000faa:	3808      	subs	r0, #8
 8000fac:	4083      	lsls	r3, r0
 8000fae:	469a      	mov	sl, r3
 8000fb0:	e68e      	b.n	8000cd0 <__aeabi_dmul+0x214>
 8000fb2:	f000 f8b5 	bl	8001120 <__clzsi2>
 8000fb6:	0002      	movs	r2, r0
 8000fb8:	0003      	movs	r3, r0
 8000fba:	3215      	adds	r2, #21
 8000fbc:	3320      	adds	r3, #32
 8000fbe:	2a1c      	cmp	r2, #28
 8000fc0:	dc00      	bgt.n	8000fc4 <__aeabi_dmul+0x508>
 8000fc2:	e64e      	b.n	8000c62 <__aeabi_dmul+0x1a6>
 8000fc4:	0002      	movs	r2, r0
 8000fc6:	0034      	movs	r4, r6
 8000fc8:	3a08      	subs	r2, #8
 8000fca:	2000      	movs	r0, #0
 8000fcc:	4094      	lsls	r4, r2
 8000fce:	e652      	b.n	8000c76 <__aeabi_dmul+0x1ba>
 8000fd0:	9301      	str	r3, [sp, #4]
 8000fd2:	e604      	b.n	8000bde <__aeabi_dmul+0x122>
 8000fd4:	4b1c      	ldr	r3, [pc, #112]	@ (8001048 <__aeabi_dmul+0x58c>)
 8000fd6:	0021      	movs	r1, r4
 8000fd8:	469c      	mov	ip, r3
 8000fda:	0003      	movs	r3, r0
 8000fdc:	9d01      	ldr	r5, [sp, #4]
 8000fde:	40d3      	lsrs	r3, r2
 8000fe0:	4465      	add	r5, ip
 8000fe2:	40a9      	lsls	r1, r5
 8000fe4:	4319      	orrs	r1, r3
 8000fe6:	0003      	movs	r3, r0
 8000fe8:	40ab      	lsls	r3, r5
 8000fea:	1e58      	subs	r0, r3, #1
 8000fec:	4183      	sbcs	r3, r0
 8000fee:	4319      	orrs	r1, r3
 8000ff0:	0008      	movs	r0, r1
 8000ff2:	40d4      	lsrs	r4, r2
 8000ff4:	074b      	lsls	r3, r1, #29
 8000ff6:	d009      	beq.n	800100c <__aeabi_dmul+0x550>
 8000ff8:	230f      	movs	r3, #15
 8000ffa:	400b      	ands	r3, r1
 8000ffc:	2b04      	cmp	r3, #4
 8000ffe:	d005      	beq.n	800100c <__aeabi_dmul+0x550>
 8001000:	1d0b      	adds	r3, r1, #4
 8001002:	428b      	cmp	r3, r1
 8001004:	4180      	sbcs	r0, r0
 8001006:	4240      	negs	r0, r0
 8001008:	1824      	adds	r4, r4, r0
 800100a:	0018      	movs	r0, r3
 800100c:	0223      	lsls	r3, r4, #8
 800100e:	d400      	bmi.n	8001012 <__aeabi_dmul+0x556>
 8001010:	e6d6      	b.n	8000dc0 <__aeabi_dmul+0x304>
 8001012:	2301      	movs	r3, #1
 8001014:	2400      	movs	r4, #0
 8001016:	2200      	movs	r2, #0
 8001018:	e5a6      	b.n	8000b68 <__aeabi_dmul+0xac>
 800101a:	290f      	cmp	r1, #15
 800101c:	d1aa      	bne.n	8000f74 <__aeabi_dmul+0x4b8>
 800101e:	2380      	movs	r3, #128	@ 0x80
 8001020:	4652      	mov	r2, sl
 8001022:	031b      	lsls	r3, r3, #12
 8001024:	421a      	tst	r2, r3
 8001026:	d0a9      	beq.n	8000f7c <__aeabi_dmul+0x4c0>
 8001028:	421c      	tst	r4, r3
 800102a:	d1a7      	bne.n	8000f7c <__aeabi_dmul+0x4c0>
 800102c:	431c      	orrs	r4, r3
 800102e:	9b00      	ldr	r3, [sp, #0]
 8001030:	0002      	movs	r2, r0
 8001032:	469b      	mov	fp, r3
 8001034:	4b03      	ldr	r3, [pc, #12]	@ (8001044 <__aeabi_dmul+0x588>)
 8001036:	e597      	b.n	8000b68 <__aeabi_dmul+0xac>
 8001038:	2400      	movs	r4, #0
 800103a:	e6c1      	b.n	8000dc0 <__aeabi_dmul+0x304>
 800103c:	2400      	movs	r4, #0
 800103e:	4b01      	ldr	r3, [pc, #4]	@ (8001044 <__aeabi_dmul+0x588>)
 8001040:	0022      	movs	r2, r4
 8001042:	e591      	b.n	8000b68 <__aeabi_dmul+0xac>
 8001044:	000007ff 	.word	0x000007ff
 8001048:	0000041e 	.word	0x0000041e

0800104c <__aeabi_d2iz>:
 800104c:	000b      	movs	r3, r1
 800104e:	0002      	movs	r2, r0
 8001050:	b570      	push	{r4, r5, r6, lr}
 8001052:	4d16      	ldr	r5, [pc, #88]	@ (80010ac <__aeabi_d2iz+0x60>)
 8001054:	030c      	lsls	r4, r1, #12
 8001056:	b082      	sub	sp, #8
 8001058:	0049      	lsls	r1, r1, #1
 800105a:	2000      	movs	r0, #0
 800105c:	9200      	str	r2, [sp, #0]
 800105e:	9301      	str	r3, [sp, #4]
 8001060:	0b24      	lsrs	r4, r4, #12
 8001062:	0d49      	lsrs	r1, r1, #21
 8001064:	0fde      	lsrs	r6, r3, #31
 8001066:	42a9      	cmp	r1, r5
 8001068:	dd04      	ble.n	8001074 <__aeabi_d2iz+0x28>
 800106a:	4811      	ldr	r0, [pc, #68]	@ (80010b0 <__aeabi_d2iz+0x64>)
 800106c:	4281      	cmp	r1, r0
 800106e:	dd03      	ble.n	8001078 <__aeabi_d2iz+0x2c>
 8001070:	4b10      	ldr	r3, [pc, #64]	@ (80010b4 <__aeabi_d2iz+0x68>)
 8001072:	18f0      	adds	r0, r6, r3
 8001074:	b002      	add	sp, #8
 8001076:	bd70      	pop	{r4, r5, r6, pc}
 8001078:	2080      	movs	r0, #128	@ 0x80
 800107a:	0340      	lsls	r0, r0, #13
 800107c:	4320      	orrs	r0, r4
 800107e:	4c0e      	ldr	r4, [pc, #56]	@ (80010b8 <__aeabi_d2iz+0x6c>)
 8001080:	1a64      	subs	r4, r4, r1
 8001082:	2c1f      	cmp	r4, #31
 8001084:	dd08      	ble.n	8001098 <__aeabi_d2iz+0x4c>
 8001086:	4b0d      	ldr	r3, [pc, #52]	@ (80010bc <__aeabi_d2iz+0x70>)
 8001088:	1a5b      	subs	r3, r3, r1
 800108a:	40d8      	lsrs	r0, r3
 800108c:	0003      	movs	r3, r0
 800108e:	4258      	negs	r0, r3
 8001090:	2e00      	cmp	r6, #0
 8001092:	d1ef      	bne.n	8001074 <__aeabi_d2iz+0x28>
 8001094:	0018      	movs	r0, r3
 8001096:	e7ed      	b.n	8001074 <__aeabi_d2iz+0x28>
 8001098:	4b09      	ldr	r3, [pc, #36]	@ (80010c0 <__aeabi_d2iz+0x74>)
 800109a:	9a00      	ldr	r2, [sp, #0]
 800109c:	469c      	mov	ip, r3
 800109e:	0003      	movs	r3, r0
 80010a0:	4461      	add	r1, ip
 80010a2:	408b      	lsls	r3, r1
 80010a4:	40e2      	lsrs	r2, r4
 80010a6:	4313      	orrs	r3, r2
 80010a8:	e7f1      	b.n	800108e <__aeabi_d2iz+0x42>
 80010aa:	46c0      	nop			@ (mov r8, r8)
 80010ac:	000003fe 	.word	0x000003fe
 80010b0:	0000041d 	.word	0x0000041d
 80010b4:	7fffffff 	.word	0x7fffffff
 80010b8:	00000433 	.word	0x00000433
 80010bc:	00000413 	.word	0x00000413
 80010c0:	fffffbed 	.word	0xfffffbed

080010c4 <__aeabi_i2d>:
 80010c4:	b570      	push	{r4, r5, r6, lr}
 80010c6:	2800      	cmp	r0, #0
 80010c8:	d016      	beq.n	80010f8 <__aeabi_i2d+0x34>
 80010ca:	17c3      	asrs	r3, r0, #31
 80010cc:	18c5      	adds	r5, r0, r3
 80010ce:	405d      	eors	r5, r3
 80010d0:	0fc4      	lsrs	r4, r0, #31
 80010d2:	0028      	movs	r0, r5
 80010d4:	f000 f824 	bl	8001120 <__clzsi2>
 80010d8:	4b10      	ldr	r3, [pc, #64]	@ (800111c <__aeabi_i2d+0x58>)
 80010da:	1a1b      	subs	r3, r3, r0
 80010dc:	055b      	lsls	r3, r3, #21
 80010de:	0d5b      	lsrs	r3, r3, #21
 80010e0:	280a      	cmp	r0, #10
 80010e2:	dc14      	bgt.n	800110e <__aeabi_i2d+0x4a>
 80010e4:	0002      	movs	r2, r0
 80010e6:	002e      	movs	r6, r5
 80010e8:	3215      	adds	r2, #21
 80010ea:	4096      	lsls	r6, r2
 80010ec:	220b      	movs	r2, #11
 80010ee:	1a12      	subs	r2, r2, r0
 80010f0:	40d5      	lsrs	r5, r2
 80010f2:	032d      	lsls	r5, r5, #12
 80010f4:	0b2d      	lsrs	r5, r5, #12
 80010f6:	e003      	b.n	8001100 <__aeabi_i2d+0x3c>
 80010f8:	2400      	movs	r4, #0
 80010fa:	2300      	movs	r3, #0
 80010fc:	2500      	movs	r5, #0
 80010fe:	2600      	movs	r6, #0
 8001100:	051b      	lsls	r3, r3, #20
 8001102:	432b      	orrs	r3, r5
 8001104:	07e4      	lsls	r4, r4, #31
 8001106:	4323      	orrs	r3, r4
 8001108:	0030      	movs	r0, r6
 800110a:	0019      	movs	r1, r3
 800110c:	bd70      	pop	{r4, r5, r6, pc}
 800110e:	380b      	subs	r0, #11
 8001110:	4085      	lsls	r5, r0
 8001112:	032d      	lsls	r5, r5, #12
 8001114:	2600      	movs	r6, #0
 8001116:	0b2d      	lsrs	r5, r5, #12
 8001118:	e7f2      	b.n	8001100 <__aeabi_i2d+0x3c>
 800111a:	46c0      	nop			@ (mov r8, r8)
 800111c:	0000041e 	.word	0x0000041e

08001120 <__clzsi2>:
 8001120:	211c      	movs	r1, #28
 8001122:	2301      	movs	r3, #1
 8001124:	041b      	lsls	r3, r3, #16
 8001126:	4298      	cmp	r0, r3
 8001128:	d301      	bcc.n	800112e <__clzsi2+0xe>
 800112a:	0c00      	lsrs	r0, r0, #16
 800112c:	3910      	subs	r1, #16
 800112e:	0a1b      	lsrs	r3, r3, #8
 8001130:	4298      	cmp	r0, r3
 8001132:	d301      	bcc.n	8001138 <__clzsi2+0x18>
 8001134:	0a00      	lsrs	r0, r0, #8
 8001136:	3908      	subs	r1, #8
 8001138:	091b      	lsrs	r3, r3, #4
 800113a:	4298      	cmp	r0, r3
 800113c:	d301      	bcc.n	8001142 <__clzsi2+0x22>
 800113e:	0900      	lsrs	r0, r0, #4
 8001140:	3904      	subs	r1, #4
 8001142:	a202      	add	r2, pc, #8	@ (adr r2, 800114c <__clzsi2+0x2c>)
 8001144:	5c10      	ldrb	r0, [r2, r0]
 8001146:	1840      	adds	r0, r0, r1
 8001148:	4770      	bx	lr
 800114a:	46c0      	nop			@ (mov r8, r8)
 800114c:	02020304 	.word	0x02020304
 8001150:	01010101 	.word	0x01010101
	...

0800115c <readCounter>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint64_t readCounter()
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
  return (counter*65535) + TIM3->CNT;
 8001160:	4b08      	ldr	r3, [pc, #32]	@ (8001184 <readCounter+0x28>)
 8001162:	681a      	ldr	r2, [r3, #0]
 8001164:	0013      	movs	r3, r2
 8001166:	041b      	lsls	r3, r3, #16
 8001168:	1a9a      	subs	r2, r3, r2
 800116a:	4b07      	ldr	r3, [pc, #28]	@ (8001188 <readCounter+0x2c>)
 800116c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800116e:	18d3      	adds	r3, r2, r3
 8001170:	0018      	movs	r0, r3
 8001172:	2300      	movs	r3, #0
 8001174:	0019      	movs	r1, r3
 8001176:	0002      	movs	r2, r0
 8001178:	000b      	movs	r3, r1
}
 800117a:	0010      	movs	r0, r2
 800117c:	0019      	movs	r1, r3
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	46c0      	nop			@ (mov r8, r8)
 8001184:	20000178 	.word	0x20000178
 8001188:	40000400 	.word	0x40000400

0800118c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
    if (htim == &htim3){
 8001194:	687a      	ldr	r2, [r7, #4]
 8001196:	4b06      	ldr	r3, [pc, #24]	@ (80011b0 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001198:	429a      	cmp	r2, r3
 800119a:	d104      	bne.n	80011a6 <HAL_TIM_PeriodElapsedCallback+0x1a>
        counter++;
 800119c:	4b05      	ldr	r3, [pc, #20]	@ (80011b4 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	1c5a      	adds	r2, r3, #1
 80011a2:	4b04      	ldr	r3, [pc, #16]	@ (80011b4 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80011a4:	601a      	str	r2, [r3, #0]
    }
}
 80011a6:	46c0      	nop			@ (mov r8, r8)
 80011a8:	46bd      	mov	sp, r7
 80011aa:	b002      	add	sp, #8
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	46c0      	nop			@ (mov r8, r8)
 80011b0:	20000080 	.word	0x20000080
 80011b4:	20000178 	.word	0x20000178

080011b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011ba:	b089      	sub	sp, #36	@ 0x24
 80011bc:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */
	uint8_t ID = 0;
 80011be:	230f      	movs	r3, #15
 80011c0:	18fb      	adds	r3, r7, r3
 80011c2:	2200      	movs	r2, #0
 80011c4:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011c6:	f000 fc94 	bl	8001af2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011ca:	f000 f9dd 	bl	8001588 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011ce:	f000 fae9 	bl	80017a4 <MX_GPIO_Init>
  MX_TIM3_Init();
 80011d2:	f000 fa5d 	bl	8001690 <MX_TIM3_Init>
  MX_I2C1_Init();
 80011d6:	f000 fa1b 	bl	8001610 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 80011da:	f000 faaf 	bl	800173c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 80011de:	4bd2      	ldr	r3, [pc, #840]	@ (8001528 <main+0x370>)
 80011e0:	0018      	movs	r0, r3
 80011e2:	f002 fa39 	bl	8003658 <HAL_TIM_Base_Start_IT>

  uint16_t AS5600_ADDR = 0x36 << 1;
 80011e6:	210c      	movs	r1, #12
 80011e8:	187b      	adds	r3, r7, r1
 80011ea:	226c      	movs	r2, #108	@ 0x6c
 80011ec:	801a      	strh	r2, [r3, #0]
  uint8_t ANGLE_ADDR = 0x0E;
 80011ee:	200b      	movs	r0, #11
 80011f0:	183b      	adds	r3, r7, r0
 80011f2:	220e      	movs	r2, #14
 80011f4:	701a      	strb	r2, [r3, #0]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_I2C_Master_Transmit(&hi2c1, AS5600_ADDR, &ANGLE_ADDR, 1, 10);
 80011f6:	183a      	adds	r2, r7, r0
 80011f8:	000e      	movs	r6, r1
 80011fa:	187b      	adds	r3, r7, r1
 80011fc:	8819      	ldrh	r1, [r3, #0]
 80011fe:	48cb      	ldr	r0, [pc, #812]	@ (800152c <main+0x374>)
 8001200:	230a      	movs	r3, #10
 8001202:	9300      	str	r3, [sp, #0]
 8001204:	2301      	movs	r3, #1
 8001206:	f001 f817 	bl	8002238 <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(&hi2c1, AS5600_ADDR, rxBuf, 2, 10);
 800120a:	4ac9      	ldr	r2, [pc, #804]	@ (8001530 <main+0x378>)
 800120c:	19bb      	adds	r3, r7, r6
 800120e:	8819      	ldrh	r1, [r3, #0]
 8001210:	48c6      	ldr	r0, [pc, #792]	@ (800152c <main+0x374>)
 8001212:	230a      	movs	r3, #10
 8001214:	9300      	str	r3, [sp, #0]
 8001216:	2302      	movs	r3, #2
 8001218:	f001 f938 	bl	800248c <HAL_I2C_Master_Receive>

  uint32_t d_pcounter, Ltika_pcounter;
  d_pcounter = Ltika_pcounter = readCounter();
 800121c:	f7ff ff9e 	bl	800115c <readCounter>
 8001220:	0002      	movs	r2, r0
 8001222:	000b      	movs	r3, r1
 8001224:	0013      	movs	r3, r2
 8001226:	613b      	str	r3, [r7, #16]
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	617b      	str	r3, [r7, #20]

  pAngle = rxBuf[0]*256 + rxBuf[1];
 800122c:	4bc0      	ldr	r3, [pc, #768]	@ (8001530 <main+0x378>)
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	021b      	lsls	r3, r3, #8
 8001232:	b29b      	uxth	r3, r3
 8001234:	4abe      	ldr	r2, [pc, #760]	@ (8001530 <main+0x378>)
 8001236:	7852      	ldrb	r2, [r2, #1]
 8001238:	189b      	adds	r3, r3, r2
 800123a:	b29a      	uxth	r2, r3
 800123c:	4bbd      	ldr	r3, [pc, #756]	@ (8001534 <main+0x37c>)
 800123e:	801a      	strh	r2, [r3, #0]
  ptotalAng = pAngle;
 8001240:	4bbc      	ldr	r3, [pc, #752]	@ (8001534 <main+0x37c>)
 8001242:	881b      	ldrh	r3, [r3, #0]
 8001244:	001a      	movs	r2, r3
 8001246:	4bbc      	ldr	r3, [pc, #752]	@ (8001538 <main+0x380>)
 8001248:	601a      	str	r2, [r3, #0]

  while (1)
  {
	u_counter = readCounter();
 800124a:	f7ff ff87 	bl	800115c <readCounter>
 800124e:	0002      	movs	r2, r0
 8001250:	000b      	movs	r3, r1
 8001252:	49ba      	ldr	r1, [pc, #744]	@ (800153c <main+0x384>)
 8001254:	600a      	str	r2, [r1, #0]
 8001256:	604b      	str	r3, [r1, #4]

	HAL_I2C_Master_Transmit(&hi2c1, AS5600_ADDR, &ANGLE_ADDR, 1, 10);
 8001258:	230b      	movs	r3, #11
 800125a:	18fa      	adds	r2, r7, r3
 800125c:	260c      	movs	r6, #12
 800125e:	19bb      	adds	r3, r7, r6
 8001260:	8819      	ldrh	r1, [r3, #0]
 8001262:	48b2      	ldr	r0, [pc, #712]	@ (800152c <main+0x374>)
 8001264:	230a      	movs	r3, #10
 8001266:	9300      	str	r3, [sp, #0]
 8001268:	2301      	movs	r3, #1
 800126a:	f000 ffe5 	bl	8002238 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, AS5600_ADDR, rxBuf, 2, 10);
 800126e:	4ab0      	ldr	r2, [pc, #704]	@ (8001530 <main+0x378>)
 8001270:	19bb      	adds	r3, r7, r6
 8001272:	8819      	ldrh	r1, [r3, #0]
 8001274:	48ad      	ldr	r0, [pc, #692]	@ (800152c <main+0x374>)
 8001276:	230a      	movs	r3, #10
 8001278:	9300      	str	r3, [sp, #0]
 800127a:	2302      	movs	r3, #2
 800127c:	f001 f906 	bl	800248c <HAL_I2C_Master_Receive>

	dtime = readCounter() - d_pcounter;
 8001280:	f7ff ff6c 	bl	800115c <readCounter>
 8001284:	0002      	movs	r2, r0
 8001286:	000b      	movs	r3, r1
 8001288:	b292      	uxth	r2, r2
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	b29b      	uxth	r3, r3
 800128e:	1ad3      	subs	r3, r2, r3
 8001290:	b29a      	uxth	r2, r3
 8001292:	4bab      	ldr	r3, [pc, #684]	@ (8001540 <main+0x388>)
 8001294:	801a      	strh	r2, [r3, #0]
	d_pcounter = d_pcounter + dtime;
 8001296:	4baa      	ldr	r3, [pc, #680]	@ (8001540 <main+0x388>)
 8001298:	881b      	ldrh	r3, [r3, #0]
 800129a:	001a      	movs	r2, r3
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	189b      	adds	r3, r3, r2
 80012a0:	617b      	str	r3, [r7, #20]

	Angle = rxBuf[0]*256 + rxBuf[1];
 80012a2:	4ba3      	ldr	r3, [pc, #652]	@ (8001530 <main+0x378>)
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	021b      	lsls	r3, r3, #8
 80012a8:	b29b      	uxth	r3, r3
 80012aa:	4aa1      	ldr	r2, [pc, #644]	@ (8001530 <main+0x378>)
 80012ac:	7852      	ldrb	r2, [r2, #1]
 80012ae:	189b      	adds	r3, r3, r2
 80012b0:	b29a      	uxth	r2, r3
 80012b2:	4ba4      	ldr	r3, [pc, #656]	@ (8001544 <main+0x38c>)
 80012b4:	801a      	strh	r2, [r3, #0]

	if(Angle-pAngle>0 && abs(Angle-pAngle)<3000){
 80012b6:	4ba3      	ldr	r3, [pc, #652]	@ (8001544 <main+0x38c>)
 80012b8:	881b      	ldrh	r3, [r3, #0]
 80012ba:	001a      	movs	r2, r3
 80012bc:	4b9d      	ldr	r3, [pc, #628]	@ (8001534 <main+0x37c>)
 80012be:	881b      	ldrh	r3, [r3, #0]
 80012c0:	1ad3      	subs	r3, r2, r3
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	dd1d      	ble.n	8001302 <main+0x14a>
 80012c6:	4b9f      	ldr	r3, [pc, #636]	@ (8001544 <main+0x38c>)
 80012c8:	881b      	ldrh	r3, [r3, #0]
 80012ca:	001a      	movs	r2, r3
 80012cc:	4b99      	ldr	r3, [pc, #612]	@ (8001534 <main+0x37c>)
 80012ce:	881b      	ldrh	r3, [r3, #0]
 80012d0:	1ad3      	subs	r3, r2, r3
 80012d2:	4a9d      	ldr	r2, [pc, #628]	@ (8001548 <main+0x390>)
 80012d4:	4293      	cmp	r3, r2
 80012d6:	db14      	blt.n	8001302 <main+0x14a>
 80012d8:	4b9a      	ldr	r3, [pc, #616]	@ (8001544 <main+0x38c>)
 80012da:	881b      	ldrh	r3, [r3, #0]
 80012dc:	001a      	movs	r2, r3
 80012de:	4b95      	ldr	r3, [pc, #596]	@ (8001534 <main+0x37c>)
 80012e0:	881b      	ldrh	r3, [r3, #0]
 80012e2:	1ad3      	subs	r3, r2, r3
 80012e4:	4a99      	ldr	r2, [pc, #612]	@ (800154c <main+0x394>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	dc0b      	bgt.n	8001302 <main+0x14a>
		totalAng = ptotalAng + (Angle-pAngle);
 80012ea:	4b96      	ldr	r3, [pc, #600]	@ (8001544 <main+0x38c>)
 80012ec:	881b      	ldrh	r3, [r3, #0]
 80012ee:	001a      	movs	r2, r3
 80012f0:	4b90      	ldr	r3, [pc, #576]	@ (8001534 <main+0x37c>)
 80012f2:	881b      	ldrh	r3, [r3, #0]
 80012f4:	1ad2      	subs	r2, r2, r3
 80012f6:	4b90      	ldr	r3, [pc, #576]	@ (8001538 <main+0x380>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	18d2      	adds	r2, r2, r3
 80012fc:	4b94      	ldr	r3, [pc, #592]	@ (8001550 <main+0x398>)
 80012fe:	601a      	str	r2, [r3, #0]
 8001300:	e06c      	b.n	80013dc <main+0x224>
	}else if(Angle-pAngle<0 && abs(Angle-pAngle)<3000){
 8001302:	4b90      	ldr	r3, [pc, #576]	@ (8001544 <main+0x38c>)
 8001304:	881b      	ldrh	r3, [r3, #0]
 8001306:	001a      	movs	r2, r3
 8001308:	4b8a      	ldr	r3, [pc, #552]	@ (8001534 <main+0x37c>)
 800130a:	881b      	ldrh	r3, [r3, #0]
 800130c:	1ad3      	subs	r3, r2, r3
 800130e:	d51d      	bpl.n	800134c <main+0x194>
 8001310:	4b8c      	ldr	r3, [pc, #560]	@ (8001544 <main+0x38c>)
 8001312:	881b      	ldrh	r3, [r3, #0]
 8001314:	001a      	movs	r2, r3
 8001316:	4b87      	ldr	r3, [pc, #540]	@ (8001534 <main+0x37c>)
 8001318:	881b      	ldrh	r3, [r3, #0]
 800131a:	1ad3      	subs	r3, r2, r3
 800131c:	4a8a      	ldr	r2, [pc, #552]	@ (8001548 <main+0x390>)
 800131e:	4293      	cmp	r3, r2
 8001320:	db14      	blt.n	800134c <main+0x194>
 8001322:	4b88      	ldr	r3, [pc, #544]	@ (8001544 <main+0x38c>)
 8001324:	881b      	ldrh	r3, [r3, #0]
 8001326:	001a      	movs	r2, r3
 8001328:	4b82      	ldr	r3, [pc, #520]	@ (8001534 <main+0x37c>)
 800132a:	881b      	ldrh	r3, [r3, #0]
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	4a87      	ldr	r2, [pc, #540]	@ (800154c <main+0x394>)
 8001330:	4293      	cmp	r3, r2
 8001332:	dc0b      	bgt.n	800134c <main+0x194>
		totalAng = ptotalAng + (Angle-pAngle);
 8001334:	4b83      	ldr	r3, [pc, #524]	@ (8001544 <main+0x38c>)
 8001336:	881b      	ldrh	r3, [r3, #0]
 8001338:	001a      	movs	r2, r3
 800133a:	4b7e      	ldr	r3, [pc, #504]	@ (8001534 <main+0x37c>)
 800133c:	881b      	ldrh	r3, [r3, #0]
 800133e:	1ad2      	subs	r2, r2, r3
 8001340:	4b7d      	ldr	r3, [pc, #500]	@ (8001538 <main+0x380>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	18d2      	adds	r2, r2, r3
 8001346:	4b82      	ldr	r3, [pc, #520]	@ (8001550 <main+0x398>)
 8001348:	601a      	str	r2, [r3, #0]
 800134a:	e047      	b.n	80013dc <main+0x224>
	}else if(Angle-pAngle>0 && abs(Angle-pAngle)>3000){
 800134c:	4b7d      	ldr	r3, [pc, #500]	@ (8001544 <main+0x38c>)
 800134e:	881b      	ldrh	r3, [r3, #0]
 8001350:	001a      	movs	r2, r3
 8001352:	4b78      	ldr	r3, [pc, #480]	@ (8001534 <main+0x37c>)
 8001354:	881b      	ldrh	r3, [r3, #0]
 8001356:	1ad3      	subs	r3, r2, r3
 8001358:	2b00      	cmp	r3, #0
 800135a:	dd19      	ble.n	8001390 <main+0x1d8>
 800135c:	4b79      	ldr	r3, [pc, #484]	@ (8001544 <main+0x38c>)
 800135e:	881b      	ldrh	r3, [r3, #0]
 8001360:	001a      	movs	r2, r3
 8001362:	4b74      	ldr	r3, [pc, #464]	@ (8001534 <main+0x37c>)
 8001364:	881b      	ldrh	r3, [r3, #0]
 8001366:	1ad3      	subs	r3, r2, r3
 8001368:	17da      	asrs	r2, r3, #31
 800136a:	189b      	adds	r3, r3, r2
 800136c:	4053      	eors	r3, r2
 800136e:	4a79      	ldr	r2, [pc, #484]	@ (8001554 <main+0x39c>)
 8001370:	4293      	cmp	r3, r2
 8001372:	dd0d      	ble.n	8001390 <main+0x1d8>
		totalAng = ptotalAng - ((4095-Angle)+pAngle);
 8001374:	4b70      	ldr	r3, [pc, #448]	@ (8001538 <main+0x380>)
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	4b72      	ldr	r3, [pc, #456]	@ (8001544 <main+0x38c>)
 800137a:	881b      	ldrh	r3, [r3, #0]
 800137c:	0019      	movs	r1, r3
 800137e:	4b76      	ldr	r3, [pc, #472]	@ (8001558 <main+0x3a0>)
 8001380:	1a5b      	subs	r3, r3, r1
 8001382:	496c      	ldr	r1, [pc, #432]	@ (8001534 <main+0x37c>)
 8001384:	8809      	ldrh	r1, [r1, #0]
 8001386:	185b      	adds	r3, r3, r1
 8001388:	1ad2      	subs	r2, r2, r3
 800138a:	4b71      	ldr	r3, [pc, #452]	@ (8001550 <main+0x398>)
 800138c:	601a      	str	r2, [r3, #0]
 800138e:	e025      	b.n	80013dc <main+0x224>
	}else if(Angle-pAngle<0 && abs(Angle-pAngle)>3000){
 8001390:	4b6c      	ldr	r3, [pc, #432]	@ (8001544 <main+0x38c>)
 8001392:	881b      	ldrh	r3, [r3, #0]
 8001394:	001a      	movs	r2, r3
 8001396:	4b67      	ldr	r3, [pc, #412]	@ (8001534 <main+0x37c>)
 8001398:	881b      	ldrh	r3, [r3, #0]
 800139a:	1ad3      	subs	r3, r2, r3
 800139c:	d51a      	bpl.n	80013d4 <main+0x21c>
 800139e:	4b69      	ldr	r3, [pc, #420]	@ (8001544 <main+0x38c>)
 80013a0:	881b      	ldrh	r3, [r3, #0]
 80013a2:	001a      	movs	r2, r3
 80013a4:	4b63      	ldr	r3, [pc, #396]	@ (8001534 <main+0x37c>)
 80013a6:	881b      	ldrh	r3, [r3, #0]
 80013a8:	1ad3      	subs	r3, r2, r3
 80013aa:	17da      	asrs	r2, r3, #31
 80013ac:	189b      	adds	r3, r3, r2
 80013ae:	4053      	eors	r3, r2
 80013b0:	4a68      	ldr	r2, [pc, #416]	@ (8001554 <main+0x39c>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	dd0e      	ble.n	80013d4 <main+0x21c>
		totalAng = ptotalAng + Angle + (4095-pAngle);
 80013b6:	4b63      	ldr	r3, [pc, #396]	@ (8001544 <main+0x38c>)
 80013b8:	881b      	ldrh	r3, [r3, #0]
 80013ba:	001a      	movs	r2, r3
 80013bc:	4b5e      	ldr	r3, [pc, #376]	@ (8001538 <main+0x380>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	18d2      	adds	r2, r2, r3
 80013c2:	4b5c      	ldr	r3, [pc, #368]	@ (8001534 <main+0x37c>)
 80013c4:	881b      	ldrh	r3, [r3, #0]
 80013c6:	0019      	movs	r1, r3
 80013c8:	4b63      	ldr	r3, [pc, #396]	@ (8001558 <main+0x3a0>)
 80013ca:	1a5b      	subs	r3, r3, r1
 80013cc:	18d2      	adds	r2, r2, r3
 80013ce:	4b60      	ldr	r3, [pc, #384]	@ (8001550 <main+0x398>)
 80013d0:	601a      	str	r2, [r3, #0]
 80013d2:	e003      	b.n	80013dc <main+0x224>
	}else{
		totalAng = ptotalAng;
 80013d4:	4b58      	ldr	r3, [pc, #352]	@ (8001538 <main+0x380>)
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	4b5d      	ldr	r3, [pc, #372]	@ (8001550 <main+0x398>)
 80013da:	601a      	str	r2, [r3, #0]
	}

	dAngle = totalAng - ptotalAng;
 80013dc:	4b5c      	ldr	r3, [pc, #368]	@ (8001550 <main+0x398>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	b29a      	uxth	r2, r3
 80013e2:	4b55      	ldr	r3, [pc, #340]	@ (8001538 <main+0x380>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	b29b      	uxth	r3, r3
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	b29b      	uxth	r3, r3
 80013ec:	b21a      	sxth	r2, r3
 80013ee:	4b5b      	ldr	r3, [pc, #364]	@ (800155c <main+0x3a4>)
 80013f0:	801a      	strh	r2, [r3, #0]
    speed = dAngle*78125/ dtime;
 80013f2:	4b5a      	ldr	r3, [pc, #360]	@ (800155c <main+0x3a4>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	5e9b      	ldrsh	r3, [r3, r2]
 80013f8:	0019      	movs	r1, r3
 80013fa:	000a      	movs	r2, r1
 80013fc:	0152      	lsls	r2, r2, #5
 80013fe:	1a52      	subs	r2, r2, r1
 8001400:	0193      	lsls	r3, r2, #6
 8001402:	1a9b      	subs	r3, r3, r2
 8001404:	00db      	lsls	r3, r3, #3
 8001406:	185b      	adds	r3, r3, r1
 8001408:	009a      	lsls	r2, r3, #2
 800140a:	189a      	adds	r2, r3, r2
 800140c:	4b4c      	ldr	r3, [pc, #304]	@ (8001540 <main+0x388>)
 800140e:	881b      	ldrh	r3, [r3, #0]
 8001410:	0019      	movs	r1, r3
 8001412:	0010      	movs	r0, r2
 8001414:	f7fe ff02 	bl	800021c <__divsi3>
 8001418:	0003      	movs	r3, r0
 800141a:	b21a      	sxth	r2, r3
 800141c:	4b50      	ldr	r3, [pc, #320]	@ (8001560 <main+0x3a8>)
 800141e:	801a      	strh	r2, [r3, #0]
    speed = (0.8*speed) + (0.2*pspeed);
 8001420:	4b4f      	ldr	r3, [pc, #316]	@ (8001560 <main+0x3a8>)
 8001422:	2200      	movs	r2, #0
 8001424:	5e9b      	ldrsh	r3, [r3, r2]
 8001426:	0018      	movs	r0, r3
 8001428:	f7ff fe4c 	bl	80010c4 <__aeabi_i2d>
 800142c:	4a4d      	ldr	r2, [pc, #308]	@ (8001564 <main+0x3ac>)
 800142e:	4b4e      	ldr	r3, [pc, #312]	@ (8001568 <main+0x3b0>)
 8001430:	f7ff fb44 	bl	8000abc <__aeabi_dmul>
 8001434:	0002      	movs	r2, r0
 8001436:	000b      	movs	r3, r1
 8001438:	603a      	str	r2, [r7, #0]
 800143a:	607b      	str	r3, [r7, #4]
 800143c:	4b4b      	ldr	r3, [pc, #300]	@ (800156c <main+0x3b4>)
 800143e:	2100      	movs	r1, #0
 8001440:	5e5b      	ldrsh	r3, [r3, r1]
 8001442:	0018      	movs	r0, r3
 8001444:	f7ff fe3e 	bl	80010c4 <__aeabi_i2d>
 8001448:	4a46      	ldr	r2, [pc, #280]	@ (8001564 <main+0x3ac>)
 800144a:	4b49      	ldr	r3, [pc, #292]	@ (8001570 <main+0x3b8>)
 800144c:	f7ff fb36 	bl	8000abc <__aeabi_dmul>
 8001450:	0002      	movs	r2, r0
 8001452:	000b      	movs	r3, r1
 8001454:	6838      	ldr	r0, [r7, #0]
 8001456:	6879      	ldr	r1, [r7, #4]
 8001458:	f7fe ffcc 	bl	80003f4 <__aeabi_dadd>
 800145c:	0002      	movs	r2, r0
 800145e:	000b      	movs	r3, r1
 8001460:	0010      	movs	r0, r2
 8001462:	0019      	movs	r1, r3
 8001464:	f7ff fdf2 	bl	800104c <__aeabi_d2iz>
 8001468:	0003      	movs	r3, r0
 800146a:	b21a      	sxth	r2, r3
 800146c:	4b3c      	ldr	r3, [pc, #240]	@ (8001560 <main+0x3a8>)
 800146e:	801a      	strh	r2, [r3, #0]

	ptotalAng = totalAng;
 8001470:	4b37      	ldr	r3, [pc, #220]	@ (8001550 <main+0x398>)
 8001472:	681a      	ldr	r2, [r3, #0]
 8001474:	4b30      	ldr	r3, [pc, #192]	@ (8001538 <main+0x380>)
 8001476:	601a      	str	r2, [r3, #0]
	pAngle = Angle;
 8001478:	4b32      	ldr	r3, [pc, #200]	@ (8001544 <main+0x38c>)
 800147a:	881a      	ldrh	r2, [r3, #0]
 800147c:	4b2d      	ldr	r3, [pc, #180]	@ (8001534 <main+0x37c>)
 800147e:	801a      	strh	r2, [r3, #0]
    pspeed = speed;
 8001480:	4b37      	ldr	r3, [pc, #220]	@ (8001560 <main+0x3a8>)
 8001482:	2200      	movs	r2, #0
 8001484:	5e9a      	ldrsh	r2, [r3, r2]
 8001486:	4b39      	ldr	r3, [pc, #228]	@ (800156c <main+0x3b4>)
 8001488:	801a      	strh	r2, [r3, #0]

    send_speed = speed + 5000;
 800148a:	4b35      	ldr	r3, [pc, #212]	@ (8001560 <main+0x3a8>)
 800148c:	2200      	movs	r2, #0
 800148e:	5e9b      	ldrsh	r3, [r3, r2]
 8001490:	b29b      	uxth	r3, r3
 8001492:	4a38      	ldr	r2, [pc, #224]	@ (8001574 <main+0x3bc>)
 8001494:	4694      	mov	ip, r2
 8001496:	4463      	add	r3, ip
 8001498:	b29b      	uxth	r3, r3
 800149a:	b21a      	sxth	r2, r3
 800149c:	4b36      	ldr	r3, [pc, #216]	@ (8001578 <main+0x3c0>)
 800149e:	801a      	strh	r2, [r3, #0]
    speed_array[0] = 250 + ID;
 80014a0:	230f      	movs	r3, #15
 80014a2:	18fb      	adds	r3, r7, r3
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	3b06      	subs	r3, #6
 80014a8:	b2da      	uxtb	r2, r3
 80014aa:	4b34      	ldr	r3, [pc, #208]	@ (800157c <main+0x3c4>)
 80014ac:	701a      	strb	r2, [r3, #0]
	speed_array[1] = send_speed % 100;
 80014ae:	4b32      	ldr	r3, [pc, #200]	@ (8001578 <main+0x3c0>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	5e9b      	ldrsh	r3, [r3, r2]
 80014b4:	2164      	movs	r1, #100	@ 0x64
 80014b6:	0018      	movs	r0, r3
 80014b8:	f7fe ff96 	bl	80003e8 <__aeabi_idivmod>
 80014bc:	000b      	movs	r3, r1
 80014be:	b21b      	sxth	r3, r3
 80014c0:	b2da      	uxtb	r2, r3
 80014c2:	4b2e      	ldr	r3, [pc, #184]	@ (800157c <main+0x3c4>)
 80014c4:	705a      	strb	r2, [r3, #1]
	speed_array[2] = send_speed / 100;
 80014c6:	4b2c      	ldr	r3, [pc, #176]	@ (8001578 <main+0x3c0>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	5e9b      	ldrsh	r3, [r3, r2]
 80014cc:	2164      	movs	r1, #100	@ 0x64
 80014ce:	0018      	movs	r0, r3
 80014d0:	f7fe fea4 	bl	800021c <__divsi3>
 80014d4:	0003      	movs	r3, r0
 80014d6:	b21b      	sxth	r3, r3
 80014d8:	b2da      	uxtb	r2, r3
 80014da:	4b28      	ldr	r3, [pc, #160]	@ (800157c <main+0x3c4>)
 80014dc:	709a      	strb	r2, [r3, #2]

    HAL_UART_Transmit(&huart2, speed_array, 3, 10);
 80014de:	4927      	ldr	r1, [pc, #156]	@ (800157c <main+0x3c4>)
 80014e0:	4827      	ldr	r0, [pc, #156]	@ (8001580 <main+0x3c8>)
 80014e2:	230a      	movs	r3, #10
 80014e4:	2203      	movs	r2, #3
 80014e6:	f002 fcd5 	bl	8003e94 <HAL_UART_Transmit>


	if(readCounter() - Ltika_pcounter > 1000000){
 80014ea:	f7ff fe37 	bl	800115c <readCounter>
 80014ee:	0002      	movs	r2, r0
 80014f0:	000b      	movs	r3, r1
 80014f2:	6939      	ldr	r1, [r7, #16]
 80014f4:	000c      	movs	r4, r1
 80014f6:	2100      	movs	r1, #0
 80014f8:	000d      	movs	r5, r1
 80014fa:	1b12      	subs	r2, r2, r4
 80014fc:	41ab      	sbcs	r3, r5
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d104      	bne.n	800150c <main+0x354>
 8001502:	d000      	beq.n	8001506 <main+0x34e>
 8001504:	e6a1      	b.n	800124a <main+0x92>
 8001506:	491f      	ldr	r1, [pc, #124]	@ (8001584 <main+0x3cc>)
 8001508:	428a      	cmp	r2, r1
 800150a:	d90b      	bls.n	8001524 <main+0x36c>
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800150c:	23a0      	movs	r3, #160	@ 0xa0
 800150e:	05db      	lsls	r3, r3, #23
 8001510:	2110      	movs	r1, #16
 8001512:	0018      	movs	r0, r3
 8001514:	f000 fdcf 	bl	80020b6 <HAL_GPIO_TogglePin>
		Ltika_pcounter = readCounter();
 8001518:	f7ff fe20 	bl	800115c <readCounter>
 800151c:	0002      	movs	r2, r0
 800151e:	000b      	movs	r3, r1
 8001520:	0013      	movs	r3, r2
 8001522:	613b      	str	r3, [r7, #16]
	u_counter = readCounter();
 8001524:	e691      	b.n	800124a <main+0x92>
 8001526:	46c0      	nop			@ (mov r8, r8)
 8001528:	20000080 	.word	0x20000080
 800152c:	2000002c 	.word	0x2000002c
 8001530:	20000160 	.word	0x20000160
 8001534:	20000172 	.word	0x20000172
 8001538:	2000016c 	.word	0x2000016c
 800153c:	20000180 	.word	0x20000180
 8001540:	20000188 	.word	0x20000188
 8001544:	20000170 	.word	0x20000170
 8001548:	fffff449 	.word	0xfffff449
 800154c:	00000bb7 	.word	0x00000bb7
 8001550:	20000168 	.word	0x20000168
 8001554:	00000bb8 	.word	0x00000bb8
 8001558:	00000fff 	.word	0x00000fff
 800155c:	20000174 	.word	0x20000174
 8001560:	2000018a 	.word	0x2000018a
 8001564:	9999999a 	.word	0x9999999a
 8001568:	3fe99999 	.word	0x3fe99999
 800156c:	2000018c 	.word	0x2000018c
 8001570:	3fc99999 	.word	0x3fc99999
 8001574:	00001388 	.word	0x00001388
 8001578:	2000018e 	.word	0x2000018e
 800157c:	20000164 	.word	0x20000164
 8001580:	200000cc 	.word	0x200000cc
 8001584:	000f4240 	.word	0x000f4240

08001588 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001588:	b590      	push	{r4, r7, lr}
 800158a:	b08d      	sub	sp, #52	@ 0x34
 800158c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800158e:	2414      	movs	r4, #20
 8001590:	193b      	adds	r3, r7, r4
 8001592:	0018      	movs	r0, r3
 8001594:	231c      	movs	r3, #28
 8001596:	001a      	movs	r2, r3
 8001598:	2100      	movs	r1, #0
 800159a:	f003 f8cb 	bl	8004734 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800159e:	003b      	movs	r3, r7
 80015a0:	0018      	movs	r0, r3
 80015a2:	2314      	movs	r3, #20
 80015a4:	001a      	movs	r2, r3
 80015a6:	2100      	movs	r1, #0
 80015a8:	f003 f8c4 	bl	8004734 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80015ac:	193b      	adds	r3, r7, r4
 80015ae:	2202      	movs	r2, #2
 80015b0:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015b2:	193b      	adds	r3, r7, r4
 80015b4:	2280      	movs	r2, #128	@ 0x80
 80015b6:	0052      	lsls	r2, r2, #1
 80015b8:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80015ba:	193b      	adds	r3, r7, r4
 80015bc:	2200      	movs	r2, #0
 80015be:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015c0:	193b      	adds	r3, r7, r4
 80015c2:	2240      	movs	r2, #64	@ 0x40
 80015c4:	615a      	str	r2, [r3, #20]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015c6:	193b      	adds	r3, r7, r4
 80015c8:	0018      	movs	r0, r3
 80015ca:	f001 fbad 	bl	8002d28 <HAL_RCC_OscConfig>
 80015ce:	1e03      	subs	r3, r0, #0
 80015d0:	d001      	beq.n	80015d6 <SystemClock_Config+0x4e>
  {
    Error_Handler();
 80015d2:	f000 f937 	bl	8001844 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015d6:	003b      	movs	r3, r7
 80015d8:	2207      	movs	r2, #7
 80015da:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80015dc:	003b      	movs	r3, r7
 80015de:	2200      	movs	r2, #0
 80015e0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80015e2:	003b      	movs	r3, r7
 80015e4:	2200      	movs	r2, #0
 80015e6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80015e8:	003b      	movs	r3, r7
 80015ea:	2200      	movs	r2, #0
 80015ec:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80015ee:	003b      	movs	r3, r7
 80015f0:	2200      	movs	r2, #0
 80015f2:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80015f4:	003b      	movs	r3, r7
 80015f6:	2101      	movs	r1, #1
 80015f8:	0018      	movs	r0, r3
 80015fa:	f001 fd79 	bl	80030f0 <HAL_RCC_ClockConfig>
 80015fe:	1e03      	subs	r3, r0, #0
 8001600:	d001      	beq.n	8001606 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8001602:	f000 f91f 	bl	8001844 <Error_Handler>
  }
}
 8001606:	46c0      	nop			@ (mov r8, r8)
 8001608:	46bd      	mov	sp, r7
 800160a:	b00d      	add	sp, #52	@ 0x34
 800160c:	bd90      	pop	{r4, r7, pc}
	...

08001610 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001614:	4b1b      	ldr	r3, [pc, #108]	@ (8001684 <MX_I2C1_Init+0x74>)
 8001616:	4a1c      	ldr	r2, [pc, #112]	@ (8001688 <MX_I2C1_Init+0x78>)
 8001618:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 800161a:	4b1a      	ldr	r3, [pc, #104]	@ (8001684 <MX_I2C1_Init+0x74>)
 800161c:	4a1b      	ldr	r2, [pc, #108]	@ (800168c <MX_I2C1_Init+0x7c>)
 800161e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001620:	4b18      	ldr	r3, [pc, #96]	@ (8001684 <MX_I2C1_Init+0x74>)
 8001622:	2200      	movs	r2, #0
 8001624:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001626:	4b17      	ldr	r3, [pc, #92]	@ (8001684 <MX_I2C1_Init+0x74>)
 8001628:	2201      	movs	r2, #1
 800162a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800162c:	4b15      	ldr	r3, [pc, #84]	@ (8001684 <MX_I2C1_Init+0x74>)
 800162e:	2200      	movs	r2, #0
 8001630:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001632:	4b14      	ldr	r3, [pc, #80]	@ (8001684 <MX_I2C1_Init+0x74>)
 8001634:	2200      	movs	r2, #0
 8001636:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001638:	4b12      	ldr	r3, [pc, #72]	@ (8001684 <MX_I2C1_Init+0x74>)
 800163a:	2200      	movs	r2, #0
 800163c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800163e:	4b11      	ldr	r3, [pc, #68]	@ (8001684 <MX_I2C1_Init+0x74>)
 8001640:	2200      	movs	r2, #0
 8001642:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001644:	4b0f      	ldr	r3, [pc, #60]	@ (8001684 <MX_I2C1_Init+0x74>)
 8001646:	2200      	movs	r2, #0
 8001648:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800164a:	4b0e      	ldr	r3, [pc, #56]	@ (8001684 <MX_I2C1_Init+0x74>)
 800164c:	0018      	movs	r0, r3
 800164e:	f000 fd4d 	bl	80020ec <HAL_I2C_Init>
 8001652:	1e03      	subs	r3, r0, #0
 8001654:	d001      	beq.n	800165a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001656:	f000 f8f5 	bl	8001844 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800165a:	4b0a      	ldr	r3, [pc, #40]	@ (8001684 <MX_I2C1_Init+0x74>)
 800165c:	2100      	movs	r1, #0
 800165e:	0018      	movs	r0, r3
 8001660:	f001 faca 	bl	8002bf8 <HAL_I2CEx_ConfigAnalogFilter>
 8001664:	1e03      	subs	r3, r0, #0
 8001666:	d001      	beq.n	800166c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001668:	f000 f8ec 	bl	8001844 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800166c:	4b05      	ldr	r3, [pc, #20]	@ (8001684 <MX_I2C1_Init+0x74>)
 800166e:	2100      	movs	r1, #0
 8001670:	0018      	movs	r0, r3
 8001672:	f001 fb0d 	bl	8002c90 <HAL_I2CEx_ConfigDigitalFilter>
 8001676:	1e03      	subs	r3, r0, #0
 8001678:	d001      	beq.n	800167e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800167a:	f000 f8e3 	bl	8001844 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800167e:	46c0      	nop			@ (mov r8, r8)
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	2000002c 	.word	0x2000002c
 8001688:	40005400 	.word	0x40005400
 800168c:	20303e5d 	.word	0x20303e5d

08001690 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b088      	sub	sp, #32
 8001694:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001696:	2310      	movs	r3, #16
 8001698:	18fb      	adds	r3, r7, r3
 800169a:	0018      	movs	r0, r3
 800169c:	2310      	movs	r3, #16
 800169e:	001a      	movs	r2, r3
 80016a0:	2100      	movs	r1, #0
 80016a2:	f003 f847 	bl	8004734 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016a6:	1d3b      	adds	r3, r7, #4
 80016a8:	0018      	movs	r0, r3
 80016aa:	230c      	movs	r3, #12
 80016ac:	001a      	movs	r2, r3
 80016ae:	2100      	movs	r1, #0
 80016b0:	f003 f840 	bl	8004734 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80016b4:	4b1e      	ldr	r3, [pc, #120]	@ (8001730 <MX_TIM3_Init+0xa0>)
 80016b6:	4a1f      	ldr	r2, [pc, #124]	@ (8001734 <MX_TIM3_Init+0xa4>)
 80016b8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 47;
 80016ba:	4b1d      	ldr	r3, [pc, #116]	@ (8001730 <MX_TIM3_Init+0xa0>)
 80016bc:	222f      	movs	r2, #47	@ 0x2f
 80016be:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016c0:	4b1b      	ldr	r3, [pc, #108]	@ (8001730 <MX_TIM3_Init+0xa0>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80016c6:	4b1a      	ldr	r3, [pc, #104]	@ (8001730 <MX_TIM3_Init+0xa0>)
 80016c8:	4a1b      	ldr	r2, [pc, #108]	@ (8001738 <MX_TIM3_Init+0xa8>)
 80016ca:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016cc:	4b18      	ldr	r3, [pc, #96]	@ (8001730 <MX_TIM3_Init+0xa0>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016d2:	4b17      	ldr	r3, [pc, #92]	@ (8001730 <MX_TIM3_Init+0xa0>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80016d8:	4b15      	ldr	r3, [pc, #84]	@ (8001730 <MX_TIM3_Init+0xa0>)
 80016da:	0018      	movs	r0, r3
 80016dc:	f001 ff64 	bl	80035a8 <HAL_TIM_Base_Init>
 80016e0:	1e03      	subs	r3, r0, #0
 80016e2:	d001      	beq.n	80016e8 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80016e4:	f000 f8ae 	bl	8001844 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016e8:	2110      	movs	r1, #16
 80016ea:	187b      	adds	r3, r7, r1
 80016ec:	2280      	movs	r2, #128	@ 0x80
 80016ee:	0152      	lsls	r2, r2, #5
 80016f0:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80016f2:	187a      	adds	r2, r7, r1
 80016f4:	4b0e      	ldr	r3, [pc, #56]	@ (8001730 <MX_TIM3_Init+0xa0>)
 80016f6:	0011      	movs	r1, r2
 80016f8:	0018      	movs	r0, r3
 80016fa:	f002 f8fd 	bl	80038f8 <HAL_TIM_ConfigClockSource>
 80016fe:	1e03      	subs	r3, r0, #0
 8001700:	d001      	beq.n	8001706 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001702:	f000 f89f 	bl	8001844 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001706:	1d3b      	adds	r3, r7, #4
 8001708:	2200      	movs	r2, #0
 800170a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800170c:	1d3b      	adds	r3, r7, #4
 800170e:	2200      	movs	r2, #0
 8001710:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001712:	1d3a      	adds	r2, r7, #4
 8001714:	4b06      	ldr	r3, [pc, #24]	@ (8001730 <MX_TIM3_Init+0xa0>)
 8001716:	0011      	movs	r1, r2
 8001718:	0018      	movs	r0, r3
 800171a:	f002 faeb 	bl	8003cf4 <HAL_TIMEx_MasterConfigSynchronization>
 800171e:	1e03      	subs	r3, r0, #0
 8001720:	d001      	beq.n	8001726 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8001722:	f000 f88f 	bl	8001844 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001726:	46c0      	nop			@ (mov r8, r8)
 8001728:	46bd      	mov	sp, r7
 800172a:	b008      	add	sp, #32
 800172c:	bd80      	pop	{r7, pc}
 800172e:	46c0      	nop			@ (mov r8, r8)
 8001730:	20000080 	.word	0x20000080
 8001734:	40000400 	.word	0x40000400
 8001738:	0000ffff 	.word	0x0000ffff

0800173c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001740:	4b16      	ldr	r3, [pc, #88]	@ (800179c <MX_USART2_UART_Init+0x60>)
 8001742:	4a17      	ldr	r2, [pc, #92]	@ (80017a0 <MX_USART2_UART_Init+0x64>)
 8001744:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001746:	4b15      	ldr	r3, [pc, #84]	@ (800179c <MX_USART2_UART_Init+0x60>)
 8001748:	22e1      	movs	r2, #225	@ 0xe1
 800174a:	0252      	lsls	r2, r2, #9
 800174c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800174e:	4b13      	ldr	r3, [pc, #76]	@ (800179c <MX_USART2_UART_Init+0x60>)
 8001750:	2200      	movs	r2, #0
 8001752:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001754:	4b11      	ldr	r3, [pc, #68]	@ (800179c <MX_USART2_UART_Init+0x60>)
 8001756:	2200      	movs	r2, #0
 8001758:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800175a:	4b10      	ldr	r3, [pc, #64]	@ (800179c <MX_USART2_UART_Init+0x60>)
 800175c:	2200      	movs	r2, #0
 800175e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001760:	4b0e      	ldr	r3, [pc, #56]	@ (800179c <MX_USART2_UART_Init+0x60>)
 8001762:	220c      	movs	r2, #12
 8001764:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001766:	4b0d      	ldr	r3, [pc, #52]	@ (800179c <MX_USART2_UART_Init+0x60>)
 8001768:	2200      	movs	r2, #0
 800176a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800176c:	4b0b      	ldr	r3, [pc, #44]	@ (800179c <MX_USART2_UART_Init+0x60>)
 800176e:	2200      	movs	r2, #0
 8001770:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001772:	4b0a      	ldr	r3, [pc, #40]	@ (800179c <MX_USART2_UART_Init+0x60>)
 8001774:	2200      	movs	r2, #0
 8001776:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001778:	4b08      	ldr	r3, [pc, #32]	@ (800179c <MX_USART2_UART_Init+0x60>)
 800177a:	2200      	movs	r2, #0
 800177c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800177e:	4b07      	ldr	r3, [pc, #28]	@ (800179c <MX_USART2_UART_Init+0x60>)
 8001780:	2200      	movs	r2, #0
 8001782:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001784:	4b05      	ldr	r3, [pc, #20]	@ (800179c <MX_USART2_UART_Init+0x60>)
 8001786:	0018      	movs	r0, r3
 8001788:	f002 fb2e 	bl	8003de8 <HAL_UART_Init>
 800178c:	1e03      	subs	r3, r0, #0
 800178e:	d001      	beq.n	8001794 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001790:	f000 f858 	bl	8001844 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001794:	46c0      	nop			@ (mov r8, r8)
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	46c0      	nop			@ (mov r8, r8)
 800179c:	200000cc 	.word	0x200000cc
 80017a0:	40004400 	.word	0x40004400

080017a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017a4:	b590      	push	{r4, r7, lr}
 80017a6:	b089      	sub	sp, #36	@ 0x24
 80017a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017aa:	240c      	movs	r4, #12
 80017ac:	193b      	adds	r3, r7, r4
 80017ae:	0018      	movs	r0, r3
 80017b0:	2314      	movs	r3, #20
 80017b2:	001a      	movs	r2, r3
 80017b4:	2100      	movs	r1, #0
 80017b6:	f002 ffbd 	bl	8004734 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ba:	4b21      	ldr	r3, [pc, #132]	@ (8001840 <MX_GPIO_Init+0x9c>)
 80017bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80017be:	4b20      	ldr	r3, [pc, #128]	@ (8001840 <MX_GPIO_Init+0x9c>)
 80017c0:	2102      	movs	r1, #2
 80017c2:	430a      	orrs	r2, r1
 80017c4:	635a      	str	r2, [r3, #52]	@ 0x34
 80017c6:	4b1e      	ldr	r3, [pc, #120]	@ (8001840 <MX_GPIO_Init+0x9c>)
 80017c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80017ca:	2202      	movs	r2, #2
 80017cc:	4013      	ands	r3, r2
 80017ce:	60bb      	str	r3, [r7, #8]
 80017d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017d2:	4b1b      	ldr	r3, [pc, #108]	@ (8001840 <MX_GPIO_Init+0x9c>)
 80017d4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80017d6:	4b1a      	ldr	r3, [pc, #104]	@ (8001840 <MX_GPIO_Init+0x9c>)
 80017d8:	2104      	movs	r1, #4
 80017da:	430a      	orrs	r2, r1
 80017dc:	635a      	str	r2, [r3, #52]	@ 0x34
 80017de:	4b18      	ldr	r3, [pc, #96]	@ (8001840 <MX_GPIO_Init+0x9c>)
 80017e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80017e2:	2204      	movs	r2, #4
 80017e4:	4013      	ands	r3, r2
 80017e6:	607b      	str	r3, [r7, #4]
 80017e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ea:	4b15      	ldr	r3, [pc, #84]	@ (8001840 <MX_GPIO_Init+0x9c>)
 80017ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80017ee:	4b14      	ldr	r3, [pc, #80]	@ (8001840 <MX_GPIO_Init+0x9c>)
 80017f0:	2101      	movs	r1, #1
 80017f2:	430a      	orrs	r2, r1
 80017f4:	635a      	str	r2, [r3, #52]	@ 0x34
 80017f6:	4b12      	ldr	r3, [pc, #72]	@ (8001840 <MX_GPIO_Init+0x9c>)
 80017f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80017fa:	2201      	movs	r2, #1
 80017fc:	4013      	ands	r3, r2
 80017fe:	603b      	str	r3, [r7, #0]
 8001800:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001802:	23a0      	movs	r3, #160	@ 0xa0
 8001804:	05db      	lsls	r3, r3, #23
 8001806:	2200      	movs	r2, #0
 8001808:	2110      	movs	r1, #16
 800180a:	0018      	movs	r0, r3
 800180c:	f000 fc36 	bl	800207c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001810:	0021      	movs	r1, r4
 8001812:	187b      	adds	r3, r7, r1
 8001814:	2210      	movs	r2, #16
 8001816:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001818:	187b      	adds	r3, r7, r1
 800181a:	2201      	movs	r2, #1
 800181c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181e:	187b      	adds	r3, r7, r1
 8001820:	2200      	movs	r2, #0
 8001822:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001824:	187b      	adds	r3, r7, r1
 8001826:	2200      	movs	r2, #0
 8001828:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800182a:	187a      	adds	r2, r7, r1
 800182c:	23a0      	movs	r3, #160	@ 0xa0
 800182e:	05db      	lsls	r3, r3, #23
 8001830:	0011      	movs	r1, r2
 8001832:	0018      	movs	r0, r3
 8001834:	f000 fab8 	bl	8001da8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001838:	46c0      	nop			@ (mov r8, r8)
 800183a:	46bd      	mov	sp, r7
 800183c:	b009      	add	sp, #36	@ 0x24
 800183e:	bd90      	pop	{r4, r7, pc}
 8001840:	40021000 	.word	0x40021000

08001844 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001848:	b672      	cpsid	i
}
 800184a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800184c:	46c0      	nop			@ (mov r8, r8)
 800184e:	e7fd      	b.n	800184c <Error_Handler+0x8>

08001850 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001856:	4b0f      	ldr	r3, [pc, #60]	@ (8001894 <HAL_MspInit+0x44>)
 8001858:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800185a:	4b0e      	ldr	r3, [pc, #56]	@ (8001894 <HAL_MspInit+0x44>)
 800185c:	2101      	movs	r1, #1
 800185e:	430a      	orrs	r2, r1
 8001860:	641a      	str	r2, [r3, #64]	@ 0x40
 8001862:	4b0c      	ldr	r3, [pc, #48]	@ (8001894 <HAL_MspInit+0x44>)
 8001864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001866:	2201      	movs	r2, #1
 8001868:	4013      	ands	r3, r2
 800186a:	607b      	str	r3, [r7, #4]
 800186c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800186e:	4b09      	ldr	r3, [pc, #36]	@ (8001894 <HAL_MspInit+0x44>)
 8001870:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001872:	4b08      	ldr	r3, [pc, #32]	@ (8001894 <HAL_MspInit+0x44>)
 8001874:	2180      	movs	r1, #128	@ 0x80
 8001876:	0549      	lsls	r1, r1, #21
 8001878:	430a      	orrs	r2, r1
 800187a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800187c:	4b05      	ldr	r3, [pc, #20]	@ (8001894 <HAL_MspInit+0x44>)
 800187e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001880:	2380      	movs	r3, #128	@ 0x80
 8001882:	055b      	lsls	r3, r3, #21
 8001884:	4013      	ands	r3, r2
 8001886:	603b      	str	r3, [r7, #0]
 8001888:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800188a:	46c0      	nop			@ (mov r8, r8)
 800188c:	46bd      	mov	sp, r7
 800188e:	b002      	add	sp, #8
 8001890:	bd80      	pop	{r7, pc}
 8001892:	46c0      	nop			@ (mov r8, r8)
 8001894:	40021000 	.word	0x40021000

08001898 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001898:	b590      	push	{r4, r7, lr}
 800189a:	b091      	sub	sp, #68	@ 0x44
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a0:	232c      	movs	r3, #44	@ 0x2c
 80018a2:	18fb      	adds	r3, r7, r3
 80018a4:	0018      	movs	r0, r3
 80018a6:	2314      	movs	r3, #20
 80018a8:	001a      	movs	r2, r3
 80018aa:	2100      	movs	r1, #0
 80018ac:	f002 ff42 	bl	8004734 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018b0:	2410      	movs	r4, #16
 80018b2:	193b      	adds	r3, r7, r4
 80018b4:	0018      	movs	r0, r3
 80018b6:	231c      	movs	r3, #28
 80018b8:	001a      	movs	r2, r3
 80018ba:	2100      	movs	r1, #0
 80018bc:	f002 ff3a 	bl	8004734 <memset>
  if(hi2c->Instance==I2C1)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a22      	ldr	r2, [pc, #136]	@ (8001950 <HAL_I2C_MspInit+0xb8>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d13d      	bne.n	8001946 <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80018ca:	193b      	adds	r3, r7, r4
 80018cc:	2240      	movs	r2, #64	@ 0x40
 80018ce:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80018d0:	193b      	adds	r3, r7, r4
 80018d2:	2200      	movs	r2, #0
 80018d4:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018d6:	193b      	adds	r3, r7, r4
 80018d8:	0018      	movs	r0, r3
 80018da:	f001 fd77 	bl	80033cc <HAL_RCCEx_PeriphCLKConfig>
 80018de:	1e03      	subs	r3, r0, #0
 80018e0:	d001      	beq.n	80018e6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80018e2:	f7ff ffaf 	bl	8001844 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018e6:	4b1b      	ldr	r3, [pc, #108]	@ (8001954 <HAL_I2C_MspInit+0xbc>)
 80018e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80018ea:	4b1a      	ldr	r3, [pc, #104]	@ (8001954 <HAL_I2C_MspInit+0xbc>)
 80018ec:	2102      	movs	r1, #2
 80018ee:	430a      	orrs	r2, r1
 80018f0:	635a      	str	r2, [r3, #52]	@ 0x34
 80018f2:	4b18      	ldr	r3, [pc, #96]	@ (8001954 <HAL_I2C_MspInit+0xbc>)
 80018f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80018f6:	2202      	movs	r2, #2
 80018f8:	4013      	ands	r3, r2
 80018fa:	60fb      	str	r3, [r7, #12]
 80018fc:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB6     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 80018fe:	212c      	movs	r1, #44	@ 0x2c
 8001900:	187b      	adds	r3, r7, r1
 8001902:	22c0      	movs	r2, #192	@ 0xc0
 8001904:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001906:	187b      	adds	r3, r7, r1
 8001908:	2212      	movs	r2, #18
 800190a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190c:	187b      	adds	r3, r7, r1
 800190e:	2200      	movs	r2, #0
 8001910:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001912:	187b      	adds	r3, r7, r1
 8001914:	2200      	movs	r2, #0
 8001916:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8001918:	187b      	adds	r3, r7, r1
 800191a:	2206      	movs	r2, #6
 800191c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800191e:	187b      	adds	r3, r7, r1
 8001920:	4a0d      	ldr	r2, [pc, #52]	@ (8001958 <HAL_I2C_MspInit+0xc0>)
 8001922:	0019      	movs	r1, r3
 8001924:	0010      	movs	r0, r2
 8001926:	f000 fa3f 	bl	8001da8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800192a:	4b0a      	ldr	r3, [pc, #40]	@ (8001954 <HAL_I2C_MspInit+0xbc>)
 800192c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800192e:	4b09      	ldr	r3, [pc, #36]	@ (8001954 <HAL_I2C_MspInit+0xbc>)
 8001930:	2180      	movs	r1, #128	@ 0x80
 8001932:	0389      	lsls	r1, r1, #14
 8001934:	430a      	orrs	r2, r1
 8001936:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001938:	4b06      	ldr	r3, [pc, #24]	@ (8001954 <HAL_I2C_MspInit+0xbc>)
 800193a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800193c:	2380      	movs	r3, #128	@ 0x80
 800193e:	039b      	lsls	r3, r3, #14
 8001940:	4013      	ands	r3, r2
 8001942:	60bb      	str	r3, [r7, #8]
 8001944:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001946:	46c0      	nop			@ (mov r8, r8)
 8001948:	46bd      	mov	sp, r7
 800194a:	b011      	add	sp, #68	@ 0x44
 800194c:	bd90      	pop	{r4, r7, pc}
 800194e:	46c0      	nop			@ (mov r8, r8)
 8001950:	40005400 	.word	0x40005400
 8001954:	40021000 	.word	0x40021000
 8001958:	50000400 	.word	0x50000400

0800195c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b084      	sub	sp, #16
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a0d      	ldr	r2, [pc, #52]	@ (80019a0 <HAL_TIM_Base_MspInit+0x44>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d113      	bne.n	8001996 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800196e:	4b0d      	ldr	r3, [pc, #52]	@ (80019a4 <HAL_TIM_Base_MspInit+0x48>)
 8001970:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001972:	4b0c      	ldr	r3, [pc, #48]	@ (80019a4 <HAL_TIM_Base_MspInit+0x48>)
 8001974:	2102      	movs	r1, #2
 8001976:	430a      	orrs	r2, r1
 8001978:	63da      	str	r2, [r3, #60]	@ 0x3c
 800197a:	4b0a      	ldr	r3, [pc, #40]	@ (80019a4 <HAL_TIM_Base_MspInit+0x48>)
 800197c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800197e:	2202      	movs	r2, #2
 8001980:	4013      	ands	r3, r2
 8001982:	60fb      	str	r3, [r7, #12]
 8001984:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001986:	2200      	movs	r2, #0
 8001988:	2100      	movs	r1, #0
 800198a:	2010      	movs	r0, #16
 800198c:	f000 f9da 	bl	8001d44 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001990:	2010      	movs	r0, #16
 8001992:	f000 f9ec 	bl	8001d6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001996:	46c0      	nop			@ (mov r8, r8)
 8001998:	46bd      	mov	sp, r7
 800199a:	b004      	add	sp, #16
 800199c:	bd80      	pop	{r7, pc}
 800199e:	46c0      	nop			@ (mov r8, r8)
 80019a0:	40000400 	.word	0x40000400
 80019a4:	40021000 	.word	0x40021000

080019a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019a8:	b590      	push	{r4, r7, lr}
 80019aa:	b08b      	sub	sp, #44	@ 0x2c
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b0:	2414      	movs	r4, #20
 80019b2:	193b      	adds	r3, r7, r4
 80019b4:	0018      	movs	r0, r3
 80019b6:	2314      	movs	r3, #20
 80019b8:	001a      	movs	r2, r3
 80019ba:	2100      	movs	r1, #0
 80019bc:	f002 feba 	bl	8004734 <memset>
  if(huart->Instance==USART2)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a1b      	ldr	r2, [pc, #108]	@ (8001a34 <HAL_UART_MspInit+0x8c>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d130      	bne.n	8001a2c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80019ca:	4b1b      	ldr	r3, [pc, #108]	@ (8001a38 <HAL_UART_MspInit+0x90>)
 80019cc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80019ce:	4b1a      	ldr	r3, [pc, #104]	@ (8001a38 <HAL_UART_MspInit+0x90>)
 80019d0:	2180      	movs	r1, #128	@ 0x80
 80019d2:	0289      	lsls	r1, r1, #10
 80019d4:	430a      	orrs	r2, r1
 80019d6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80019d8:	4b17      	ldr	r3, [pc, #92]	@ (8001a38 <HAL_UART_MspInit+0x90>)
 80019da:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80019dc:	2380      	movs	r3, #128	@ 0x80
 80019de:	029b      	lsls	r3, r3, #10
 80019e0:	4013      	ands	r3, r2
 80019e2:	613b      	str	r3, [r7, #16]
 80019e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019e6:	4b14      	ldr	r3, [pc, #80]	@ (8001a38 <HAL_UART_MspInit+0x90>)
 80019e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80019ea:	4b13      	ldr	r3, [pc, #76]	@ (8001a38 <HAL_UART_MspInit+0x90>)
 80019ec:	2101      	movs	r1, #1
 80019ee:	430a      	orrs	r2, r1
 80019f0:	635a      	str	r2, [r3, #52]	@ 0x34
 80019f2:	4b11      	ldr	r3, [pc, #68]	@ (8001a38 <HAL_UART_MspInit+0x90>)
 80019f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019f6:	2201      	movs	r2, #1
 80019f8:	4013      	ands	r3, r2
 80019fa:	60fb      	str	r3, [r7, #12]
 80019fc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80019fe:	0021      	movs	r1, r4
 8001a00:	187b      	adds	r3, r7, r1
 8001a02:	220c      	movs	r2, #12
 8001a04:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a06:	187b      	adds	r3, r7, r1
 8001a08:	2202      	movs	r2, #2
 8001a0a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0c:	187b      	adds	r3, r7, r1
 8001a0e:	2200      	movs	r2, #0
 8001a10:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a12:	187b      	adds	r3, r7, r1
 8001a14:	2200      	movs	r2, #0
 8001a16:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001a18:	187b      	adds	r3, r7, r1
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a1e:	187a      	adds	r2, r7, r1
 8001a20:	23a0      	movs	r3, #160	@ 0xa0
 8001a22:	05db      	lsls	r3, r3, #23
 8001a24:	0011      	movs	r1, r2
 8001a26:	0018      	movs	r0, r3
 8001a28:	f000 f9be 	bl	8001da8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001a2c:	46c0      	nop			@ (mov r8, r8)
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	b00b      	add	sp, #44	@ 0x2c
 8001a32:	bd90      	pop	{r4, r7, pc}
 8001a34:	40004400 	.word	0x40004400
 8001a38:	40021000 	.word	0x40021000

08001a3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a40:	46c0      	nop			@ (mov r8, r8)
 8001a42:	e7fd      	b.n	8001a40 <NMI_Handler+0x4>

08001a44 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a48:	46c0      	nop			@ (mov r8, r8)
 8001a4a:	e7fd      	b.n	8001a48 <HardFault_Handler+0x4>

08001a4c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001a50:	46c0      	nop			@ (mov r8, r8)
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}

08001a56 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a56:	b580      	push	{r7, lr}
 8001a58:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a5a:	46c0      	nop			@ (mov r8, r8)
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}

08001a60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a64:	f000 f8a6 	bl	8001bb4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a68:	46c0      	nop			@ (mov r8, r8)
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
	...

08001a70 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001a74:	4b03      	ldr	r3, [pc, #12]	@ (8001a84 <TIM3_IRQHandler+0x14>)
 8001a76:	0018      	movs	r0, r3
 8001a78:	f001 fe3c 	bl	80036f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001a7c:	46c0      	nop			@ (mov r8, r8)
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	46c0      	nop			@ (mov r8, r8)
 8001a84:	20000080 	.word	0x20000080

08001a88 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001a8c:	4b03      	ldr	r3, [pc, #12]	@ (8001a9c <SystemInit+0x14>)
 8001a8e:	2280      	movs	r2, #128	@ 0x80
 8001a90:	0512      	lsls	r2, r2, #20
 8001a92:	609a      	str	r2, [r3, #8]
#endif
}
 8001a94:	46c0      	nop			@ (mov r8, r8)
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	46c0      	nop			@ (mov r8, r8)
 8001a9c:	e000ed00 	.word	0xe000ed00

08001aa0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001aa0:	480d      	ldr	r0, [pc, #52]	@ (8001ad8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001aa2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001aa4:	f7ff fff0 	bl	8001a88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001aa8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001aaa:	e003      	b.n	8001ab4 <LoopCopyDataInit>

08001aac <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001aac:	4b0b      	ldr	r3, [pc, #44]	@ (8001adc <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8001aae:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001ab0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001ab2:	3104      	adds	r1, #4

08001ab4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001ab4:	480a      	ldr	r0, [pc, #40]	@ (8001ae0 <LoopForever+0xa>)
  ldr r3, =_edata
 8001ab6:	4b0b      	ldr	r3, [pc, #44]	@ (8001ae4 <LoopForever+0xe>)
  adds r2, r0, r1
 8001ab8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001aba:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001abc:	d3f6      	bcc.n	8001aac <CopyDataInit>
  ldr r2, =_sbss
 8001abe:	4a0a      	ldr	r2, [pc, #40]	@ (8001ae8 <LoopForever+0x12>)
  b LoopFillZerobss
 8001ac0:	e002      	b.n	8001ac8 <LoopFillZerobss>

08001ac2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001ac2:	2300      	movs	r3, #0
  str  r3, [r2]
 8001ac4:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ac6:	3204      	adds	r2, #4

08001ac8 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8001ac8:	4b08      	ldr	r3, [pc, #32]	@ (8001aec <LoopForever+0x16>)
  cmp r2, r3
 8001aca:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001acc:	d3f9      	bcc.n	8001ac2 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8001ace:	f002 fe39 	bl	8004744 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001ad2:	f7ff fb71 	bl	80011b8 <main>

08001ad6 <LoopForever>:

LoopForever:
    b LoopForever
 8001ad6:	e7fe      	b.n	8001ad6 <LoopForever>
  ldr   r0, =_estack
 8001ad8:	20001800 	.word	0x20001800
  ldr r3, =_sidata
 8001adc:	08004824 	.word	0x08004824
  ldr r0, =_sdata
 8001ae0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001ae4:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8001ae8:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 8001aec:	20000194 	.word	0x20000194

08001af0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001af0:	e7fe      	b.n	8001af0 <ADC1_IRQHandler>

08001af2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001af2:	b580      	push	{r7, lr}
 8001af4:	b082      	sub	sp, #8
 8001af6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001af8:	1dfb      	adds	r3, r7, #7
 8001afa:	2200      	movs	r2, #0
 8001afc:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001afe:	2003      	movs	r0, #3
 8001b00:	f000 f80e 	bl	8001b20 <HAL_InitTick>
 8001b04:	1e03      	subs	r3, r0, #0
 8001b06:	d003      	beq.n	8001b10 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8001b08:	1dfb      	adds	r3, r7, #7
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	701a      	strb	r2, [r3, #0]
 8001b0e:	e001      	b.n	8001b14 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001b10:	f7ff fe9e 	bl	8001850 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001b14:	1dfb      	adds	r3, r7, #7
 8001b16:	781b      	ldrb	r3, [r3, #0]
}
 8001b18:	0018      	movs	r0, r3
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	b002      	add	sp, #8
 8001b1e:	bd80      	pop	{r7, pc}

08001b20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b20:	b590      	push	{r4, r7, lr}
 8001b22:	b085      	sub	sp, #20
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001b28:	230f      	movs	r3, #15
 8001b2a:	18fb      	adds	r3, r7, r3
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 8001b30:	4b1d      	ldr	r3, [pc, #116]	@ (8001ba8 <HAL_InitTick+0x88>)
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d02b      	beq.n	8001b90 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 8001b38:	4b1c      	ldr	r3, [pc, #112]	@ (8001bac <HAL_InitTick+0x8c>)
 8001b3a:	681c      	ldr	r4, [r3, #0]
 8001b3c:	4b1a      	ldr	r3, [pc, #104]	@ (8001ba8 <HAL_InitTick+0x88>)
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	0019      	movs	r1, r3
 8001b42:	23fa      	movs	r3, #250	@ 0xfa
 8001b44:	0098      	lsls	r0, r3, #2
 8001b46:	f7fe fadf 	bl	8000108 <__udivsi3>
 8001b4a:	0003      	movs	r3, r0
 8001b4c:	0019      	movs	r1, r3
 8001b4e:	0020      	movs	r0, r4
 8001b50:	f7fe fada 	bl	8000108 <__udivsi3>
 8001b54:	0003      	movs	r3, r0
 8001b56:	0018      	movs	r0, r3
 8001b58:	f000 f919 	bl	8001d8e <HAL_SYSTICK_Config>
 8001b5c:	1e03      	subs	r3, r0, #0
 8001b5e:	d112      	bne.n	8001b86 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2b03      	cmp	r3, #3
 8001b64:	d80a      	bhi.n	8001b7c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b66:	6879      	ldr	r1, [r7, #4]
 8001b68:	2301      	movs	r3, #1
 8001b6a:	425b      	negs	r3, r3
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	0018      	movs	r0, r3
 8001b70:	f000 f8e8 	bl	8001d44 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b74:	4b0e      	ldr	r3, [pc, #56]	@ (8001bb0 <HAL_InitTick+0x90>)
 8001b76:	687a      	ldr	r2, [r7, #4]
 8001b78:	601a      	str	r2, [r3, #0]
 8001b7a:	e00d      	b.n	8001b98 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001b7c:	230f      	movs	r3, #15
 8001b7e:	18fb      	adds	r3, r7, r3
 8001b80:	2201      	movs	r2, #1
 8001b82:	701a      	strb	r2, [r3, #0]
 8001b84:	e008      	b.n	8001b98 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001b86:	230f      	movs	r3, #15
 8001b88:	18fb      	adds	r3, r7, r3
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	701a      	strb	r2, [r3, #0]
 8001b8e:	e003      	b.n	8001b98 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001b90:	230f      	movs	r3, #15
 8001b92:	18fb      	adds	r3, r7, r3
 8001b94:	2201      	movs	r2, #1
 8001b96:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001b98:	230f      	movs	r3, #15
 8001b9a:	18fb      	adds	r3, r7, r3
 8001b9c:	781b      	ldrb	r3, [r3, #0]
}
 8001b9e:	0018      	movs	r0, r3
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	b005      	add	sp, #20
 8001ba4:	bd90      	pop	{r4, r7, pc}
 8001ba6:	46c0      	nop			@ (mov r8, r8)
 8001ba8:	20000008 	.word	0x20000008
 8001bac:	20000000 	.word	0x20000000
 8001bb0:	20000004 	.word	0x20000004

08001bb4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001bb8:	4b05      	ldr	r3, [pc, #20]	@ (8001bd0 <HAL_IncTick+0x1c>)
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	001a      	movs	r2, r3
 8001bbe:	4b05      	ldr	r3, [pc, #20]	@ (8001bd4 <HAL_IncTick+0x20>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	18d2      	adds	r2, r2, r3
 8001bc4:	4b03      	ldr	r3, [pc, #12]	@ (8001bd4 <HAL_IncTick+0x20>)
 8001bc6:	601a      	str	r2, [r3, #0]
}
 8001bc8:	46c0      	nop			@ (mov r8, r8)
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	46c0      	nop			@ (mov r8, r8)
 8001bd0:	20000008 	.word	0x20000008
 8001bd4:	20000190 	.word	0x20000190

08001bd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	af00      	add	r7, sp, #0
  return uwTick;
 8001bdc:	4b02      	ldr	r3, [pc, #8]	@ (8001be8 <HAL_GetTick+0x10>)
 8001bde:	681b      	ldr	r3, [r3, #0]
}
 8001be0:	0018      	movs	r0, r3
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	46c0      	nop			@ (mov r8, r8)
 8001be8:	20000190 	.word	0x20000190

08001bec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	0002      	movs	r2, r0
 8001bf4:	1dfb      	adds	r3, r7, #7
 8001bf6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001bf8:	1dfb      	adds	r3, r7, #7
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	2b7f      	cmp	r3, #127	@ 0x7f
 8001bfe:	d809      	bhi.n	8001c14 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c00:	1dfb      	adds	r3, r7, #7
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	001a      	movs	r2, r3
 8001c06:	231f      	movs	r3, #31
 8001c08:	401a      	ands	r2, r3
 8001c0a:	4b04      	ldr	r3, [pc, #16]	@ (8001c1c <__NVIC_EnableIRQ+0x30>)
 8001c0c:	2101      	movs	r1, #1
 8001c0e:	4091      	lsls	r1, r2
 8001c10:	000a      	movs	r2, r1
 8001c12:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001c14:	46c0      	nop			@ (mov r8, r8)
 8001c16:	46bd      	mov	sp, r7
 8001c18:	b002      	add	sp, #8
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	e000e100 	.word	0xe000e100

08001c20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c20:	b590      	push	{r4, r7, lr}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	0002      	movs	r2, r0
 8001c28:	6039      	str	r1, [r7, #0]
 8001c2a:	1dfb      	adds	r3, r7, #7
 8001c2c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001c2e:	1dfb      	adds	r3, r7, #7
 8001c30:	781b      	ldrb	r3, [r3, #0]
 8001c32:	2b7f      	cmp	r3, #127	@ 0x7f
 8001c34:	d828      	bhi.n	8001c88 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c36:	4a2f      	ldr	r2, [pc, #188]	@ (8001cf4 <__NVIC_SetPriority+0xd4>)
 8001c38:	1dfb      	adds	r3, r7, #7
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	b25b      	sxtb	r3, r3
 8001c3e:	089b      	lsrs	r3, r3, #2
 8001c40:	33c0      	adds	r3, #192	@ 0xc0
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	589b      	ldr	r3, [r3, r2]
 8001c46:	1dfa      	adds	r2, r7, #7
 8001c48:	7812      	ldrb	r2, [r2, #0]
 8001c4a:	0011      	movs	r1, r2
 8001c4c:	2203      	movs	r2, #3
 8001c4e:	400a      	ands	r2, r1
 8001c50:	00d2      	lsls	r2, r2, #3
 8001c52:	21ff      	movs	r1, #255	@ 0xff
 8001c54:	4091      	lsls	r1, r2
 8001c56:	000a      	movs	r2, r1
 8001c58:	43d2      	mvns	r2, r2
 8001c5a:	401a      	ands	r2, r3
 8001c5c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	019b      	lsls	r3, r3, #6
 8001c62:	22ff      	movs	r2, #255	@ 0xff
 8001c64:	401a      	ands	r2, r3
 8001c66:	1dfb      	adds	r3, r7, #7
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	0018      	movs	r0, r3
 8001c6c:	2303      	movs	r3, #3
 8001c6e:	4003      	ands	r3, r0
 8001c70:	00db      	lsls	r3, r3, #3
 8001c72:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c74:	481f      	ldr	r0, [pc, #124]	@ (8001cf4 <__NVIC_SetPriority+0xd4>)
 8001c76:	1dfb      	adds	r3, r7, #7
 8001c78:	781b      	ldrb	r3, [r3, #0]
 8001c7a:	b25b      	sxtb	r3, r3
 8001c7c:	089b      	lsrs	r3, r3, #2
 8001c7e:	430a      	orrs	r2, r1
 8001c80:	33c0      	adds	r3, #192	@ 0xc0
 8001c82:	009b      	lsls	r3, r3, #2
 8001c84:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001c86:	e031      	b.n	8001cec <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c88:	4a1b      	ldr	r2, [pc, #108]	@ (8001cf8 <__NVIC_SetPriority+0xd8>)
 8001c8a:	1dfb      	adds	r3, r7, #7
 8001c8c:	781b      	ldrb	r3, [r3, #0]
 8001c8e:	0019      	movs	r1, r3
 8001c90:	230f      	movs	r3, #15
 8001c92:	400b      	ands	r3, r1
 8001c94:	3b08      	subs	r3, #8
 8001c96:	089b      	lsrs	r3, r3, #2
 8001c98:	3306      	adds	r3, #6
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	18d3      	adds	r3, r2, r3
 8001c9e:	3304      	adds	r3, #4
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	1dfa      	adds	r2, r7, #7
 8001ca4:	7812      	ldrb	r2, [r2, #0]
 8001ca6:	0011      	movs	r1, r2
 8001ca8:	2203      	movs	r2, #3
 8001caa:	400a      	ands	r2, r1
 8001cac:	00d2      	lsls	r2, r2, #3
 8001cae:	21ff      	movs	r1, #255	@ 0xff
 8001cb0:	4091      	lsls	r1, r2
 8001cb2:	000a      	movs	r2, r1
 8001cb4:	43d2      	mvns	r2, r2
 8001cb6:	401a      	ands	r2, r3
 8001cb8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	019b      	lsls	r3, r3, #6
 8001cbe:	22ff      	movs	r2, #255	@ 0xff
 8001cc0:	401a      	ands	r2, r3
 8001cc2:	1dfb      	adds	r3, r7, #7
 8001cc4:	781b      	ldrb	r3, [r3, #0]
 8001cc6:	0018      	movs	r0, r3
 8001cc8:	2303      	movs	r3, #3
 8001cca:	4003      	ands	r3, r0
 8001ccc:	00db      	lsls	r3, r3, #3
 8001cce:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001cd0:	4809      	ldr	r0, [pc, #36]	@ (8001cf8 <__NVIC_SetPriority+0xd8>)
 8001cd2:	1dfb      	adds	r3, r7, #7
 8001cd4:	781b      	ldrb	r3, [r3, #0]
 8001cd6:	001c      	movs	r4, r3
 8001cd8:	230f      	movs	r3, #15
 8001cda:	4023      	ands	r3, r4
 8001cdc:	3b08      	subs	r3, #8
 8001cde:	089b      	lsrs	r3, r3, #2
 8001ce0:	430a      	orrs	r2, r1
 8001ce2:	3306      	adds	r3, #6
 8001ce4:	009b      	lsls	r3, r3, #2
 8001ce6:	18c3      	adds	r3, r0, r3
 8001ce8:	3304      	adds	r3, #4
 8001cea:	601a      	str	r2, [r3, #0]
}
 8001cec:	46c0      	nop			@ (mov r8, r8)
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	b003      	add	sp, #12
 8001cf2:	bd90      	pop	{r4, r7, pc}
 8001cf4:	e000e100 	.word	0xe000e100
 8001cf8:	e000ed00 	.word	0xe000ed00

08001cfc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	1e5a      	subs	r2, r3, #1
 8001d08:	2380      	movs	r3, #128	@ 0x80
 8001d0a:	045b      	lsls	r3, r3, #17
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d301      	bcc.n	8001d14 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d10:	2301      	movs	r3, #1
 8001d12:	e010      	b.n	8001d36 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d14:	4b0a      	ldr	r3, [pc, #40]	@ (8001d40 <SysTick_Config+0x44>)
 8001d16:	687a      	ldr	r2, [r7, #4]
 8001d18:	3a01      	subs	r2, #1
 8001d1a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	425b      	negs	r3, r3
 8001d20:	2103      	movs	r1, #3
 8001d22:	0018      	movs	r0, r3
 8001d24:	f7ff ff7c 	bl	8001c20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d28:	4b05      	ldr	r3, [pc, #20]	@ (8001d40 <SysTick_Config+0x44>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d2e:	4b04      	ldr	r3, [pc, #16]	@ (8001d40 <SysTick_Config+0x44>)
 8001d30:	2207      	movs	r2, #7
 8001d32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d34:	2300      	movs	r3, #0
}
 8001d36:	0018      	movs	r0, r3
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	b002      	add	sp, #8
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	46c0      	nop			@ (mov r8, r8)
 8001d40:	e000e010 	.word	0xe000e010

08001d44 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b084      	sub	sp, #16
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	60b9      	str	r1, [r7, #8]
 8001d4c:	607a      	str	r2, [r7, #4]
 8001d4e:	210f      	movs	r1, #15
 8001d50:	187b      	adds	r3, r7, r1
 8001d52:	1c02      	adds	r2, r0, #0
 8001d54:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001d56:	68ba      	ldr	r2, [r7, #8]
 8001d58:	187b      	adds	r3, r7, r1
 8001d5a:	781b      	ldrb	r3, [r3, #0]
 8001d5c:	b25b      	sxtb	r3, r3
 8001d5e:	0011      	movs	r1, r2
 8001d60:	0018      	movs	r0, r3
 8001d62:	f7ff ff5d 	bl	8001c20 <__NVIC_SetPriority>
}
 8001d66:	46c0      	nop			@ (mov r8, r8)
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	b004      	add	sp, #16
 8001d6c:	bd80      	pop	{r7, pc}

08001d6e <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d6e:	b580      	push	{r7, lr}
 8001d70:	b082      	sub	sp, #8
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	0002      	movs	r2, r0
 8001d76:	1dfb      	adds	r3, r7, #7
 8001d78:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d7a:	1dfb      	adds	r3, r7, #7
 8001d7c:	781b      	ldrb	r3, [r3, #0]
 8001d7e:	b25b      	sxtb	r3, r3
 8001d80:	0018      	movs	r0, r3
 8001d82:	f7ff ff33 	bl	8001bec <__NVIC_EnableIRQ>
}
 8001d86:	46c0      	nop			@ (mov r8, r8)
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	b002      	add	sp, #8
 8001d8c:	bd80      	pop	{r7, pc}

08001d8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d8e:	b580      	push	{r7, lr}
 8001d90:	b082      	sub	sp, #8
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	0018      	movs	r0, r3
 8001d9a:	f7ff ffaf 	bl	8001cfc <SysTick_Config>
 8001d9e:	0003      	movs	r3, r0
}
 8001da0:	0018      	movs	r0, r3
 8001da2:	46bd      	mov	sp, r7
 8001da4:	b002      	add	sp, #8
 8001da6:	bd80      	pop	{r7, pc}

08001da8 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b086      	sub	sp, #24
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
 8001db0:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8001db2:	2300      	movs	r3, #0
 8001db4:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001db6:	e14d      	b.n	8002054 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	2101      	movs	r1, #1
 8001dbe:	693a      	ldr	r2, [r7, #16]
 8001dc0:	4091      	lsls	r1, r2
 8001dc2:	000a      	movs	r2, r1
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d100      	bne.n	8001dd0 <HAL_GPIO_Init+0x28>
 8001dce:	e13e      	b.n	800204e <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	2b02      	cmp	r3, #2
 8001dd6:	d003      	beq.n	8001de0 <HAL_GPIO_Init+0x38>
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	2b12      	cmp	r3, #18
 8001dde:	d125      	bne.n	8001e2c <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	08da      	lsrs	r2, r3, #3
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	3208      	adds	r2, #8
 8001de8:	0092      	lsls	r2, r2, #2
 8001dea:	58d3      	ldr	r3, [r2, r3]
 8001dec:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * 4U)) ;
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	2207      	movs	r2, #7
 8001df2:	4013      	ands	r3, r2
 8001df4:	009b      	lsls	r3, r3, #2
 8001df6:	220f      	movs	r2, #15
 8001df8:	409a      	lsls	r2, r3
 8001dfa:	0013      	movs	r3, r2
 8001dfc:	43da      	mvns	r2, r3
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	4013      	ands	r3, r2
 8001e02:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	691b      	ldr	r3, [r3, #16]
 8001e08:	220f      	movs	r2, #15
 8001e0a:	401a      	ands	r2, r3
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	2107      	movs	r1, #7
 8001e10:	400b      	ands	r3, r1
 8001e12:	009b      	lsls	r3, r3, #2
 8001e14:	409a      	lsls	r2, r3
 8001e16:	0013      	movs	r3, r2
 8001e18:	697a      	ldr	r2, [r7, #20]
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	08da      	lsrs	r2, r3, #3
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	3208      	adds	r2, #8
 8001e26:	0092      	lsls	r2, r2, #2
 8001e28:	6979      	ldr	r1, [r7, #20]
 8001e2a:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	005b      	lsls	r3, r3, #1
 8001e36:	2203      	movs	r2, #3
 8001e38:	409a      	lsls	r2, r3
 8001e3a:	0013      	movs	r3, r2
 8001e3c:	43da      	mvns	r2, r3
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	4013      	ands	r3, r2
 8001e42:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	2203      	movs	r2, #3
 8001e4a:	401a      	ands	r2, r3
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	005b      	lsls	r3, r3, #1
 8001e50:	409a      	lsls	r2, r3
 8001e52:	0013      	movs	r3, r2
 8001e54:	697a      	ldr	r2, [r7, #20]
 8001e56:	4313      	orrs	r3, r2
 8001e58:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	697a      	ldr	r2, [r7, #20]
 8001e5e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	2b01      	cmp	r3, #1
 8001e66:	d00b      	beq.n	8001e80 <HAL_GPIO_Init+0xd8>
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	2b02      	cmp	r3, #2
 8001e6e:	d007      	beq.n	8001e80 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e74:	2b11      	cmp	r3, #17
 8001e76:	d003      	beq.n	8001e80 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	2b12      	cmp	r3, #18
 8001e7e:	d130      	bne.n	8001ee2 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	005b      	lsls	r3, r3, #1
 8001e8a:	2203      	movs	r2, #3
 8001e8c:	409a      	lsls	r2, r3
 8001e8e:	0013      	movs	r3, r2
 8001e90:	43da      	mvns	r2, r3
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	4013      	ands	r3, r2
 8001e96:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	68da      	ldr	r2, [r3, #12]
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	005b      	lsls	r3, r3, #1
 8001ea0:	409a      	lsls	r2, r3
 8001ea2:	0013      	movs	r3, r2
 8001ea4:	697a      	ldr	r2, [r7, #20]
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	697a      	ldr	r2, [r7, #20]
 8001eae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	409a      	lsls	r2, r3
 8001ebc:	0013      	movs	r3, r2
 8001ebe:	43da      	mvns	r2, r3
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	091b      	lsrs	r3, r3, #4
 8001ecc:	2201      	movs	r2, #1
 8001ece:	401a      	ands	r2, r3
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	409a      	lsls	r2, r3
 8001ed4:	0013      	movs	r3, r2
 8001ed6:	697a      	ldr	r2, [r7, #20]
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	697a      	ldr	r2, [r7, #20]
 8001ee0:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	2b03      	cmp	r3, #3
 8001ee8:	d017      	beq.n	8001f1a <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	68db      	ldr	r3, [r3, #12]
 8001eee:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	005b      	lsls	r3, r3, #1
 8001ef4:	2203      	movs	r2, #3
 8001ef6:	409a      	lsls	r2, r3
 8001ef8:	0013      	movs	r3, r2
 8001efa:	43da      	mvns	r2, r3
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	4013      	ands	r3, r2
 8001f00:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	689a      	ldr	r2, [r3, #8]
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	005b      	lsls	r3, r3, #1
 8001f0a:	409a      	lsls	r2, r3
 8001f0c:	0013      	movs	r3, r2
 8001f0e:	697a      	ldr	r2, [r7, #20]
 8001f10:	4313      	orrs	r3, r2
 8001f12:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	697a      	ldr	r2, [r7, #20]
 8001f18:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	685a      	ldr	r2, [r3, #4]
 8001f1e:	2380      	movs	r3, #128	@ 0x80
 8001f20:	055b      	lsls	r3, r3, #21
 8001f22:	4013      	ands	r3, r2
 8001f24:	d100      	bne.n	8001f28 <HAL_GPIO_Init+0x180>
 8001f26:	e092      	b.n	800204e <HAL_GPIO_Init+0x2a6>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8001f28:	4a50      	ldr	r2, [pc, #320]	@ (800206c <HAL_GPIO_Init+0x2c4>)
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	089b      	lsrs	r3, r3, #2
 8001f2e:	3318      	adds	r3, #24
 8001f30:	009b      	lsls	r3, r3, #2
 8001f32:	589b      	ldr	r3, [r3, r2]
 8001f34:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	2203      	movs	r2, #3
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	00db      	lsls	r3, r3, #3
 8001f3e:	220f      	movs	r2, #15
 8001f40:	409a      	lsls	r2, r3
 8001f42:	0013      	movs	r3, r2
 8001f44:	43da      	mvns	r2, r3
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	4013      	ands	r3, r2
 8001f4a:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8001f4c:	687a      	ldr	r2, [r7, #4]
 8001f4e:	23a0      	movs	r3, #160	@ 0xa0
 8001f50:	05db      	lsls	r3, r3, #23
 8001f52:	429a      	cmp	r2, r3
 8001f54:	d013      	beq.n	8001f7e <HAL_GPIO_Init+0x1d6>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	4a45      	ldr	r2, [pc, #276]	@ (8002070 <HAL_GPIO_Init+0x2c8>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d00d      	beq.n	8001f7a <HAL_GPIO_Init+0x1d2>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4a44      	ldr	r2, [pc, #272]	@ (8002074 <HAL_GPIO_Init+0x2cc>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d007      	beq.n	8001f76 <HAL_GPIO_Init+0x1ce>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	4a43      	ldr	r2, [pc, #268]	@ (8002078 <HAL_GPIO_Init+0x2d0>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d101      	bne.n	8001f72 <HAL_GPIO_Init+0x1ca>
 8001f6e:	2305      	movs	r3, #5
 8001f70:	e006      	b.n	8001f80 <HAL_GPIO_Init+0x1d8>
 8001f72:	2306      	movs	r3, #6
 8001f74:	e004      	b.n	8001f80 <HAL_GPIO_Init+0x1d8>
 8001f76:	2302      	movs	r3, #2
 8001f78:	e002      	b.n	8001f80 <HAL_GPIO_Init+0x1d8>
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e000      	b.n	8001f80 <HAL_GPIO_Init+0x1d8>
 8001f7e:	2300      	movs	r3, #0
 8001f80:	693a      	ldr	r2, [r7, #16]
 8001f82:	2103      	movs	r1, #3
 8001f84:	400a      	ands	r2, r1
 8001f86:	00d2      	lsls	r2, r2, #3
 8001f88:	4093      	lsls	r3, r2
 8001f8a:	697a      	ldr	r2, [r7, #20]
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8001f90:	4936      	ldr	r1, [pc, #216]	@ (800206c <HAL_GPIO_Init+0x2c4>)
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	089b      	lsrs	r3, r3, #2
 8001f96:	3318      	adds	r3, #24
 8001f98:	009b      	lsls	r3, r3, #2
 8001f9a:	697a      	ldr	r2, [r7, #20]
 8001f9c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 8001f9e:	4a33      	ldr	r2, [pc, #204]	@ (800206c <HAL_GPIO_Init+0x2c4>)
 8001fa0:	2380      	movs	r3, #128	@ 0x80
 8001fa2:	58d3      	ldr	r3, [r2, r3]
 8001fa4:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	43da      	mvns	r2, r3
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	4013      	ands	r3, r2
 8001fae:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	685a      	ldr	r2, [r3, #4]
 8001fb4:	2380      	movs	r3, #128	@ 0x80
 8001fb6:	025b      	lsls	r3, r3, #9
 8001fb8:	4013      	ands	r3, r2
 8001fba:	d003      	beq.n	8001fc4 <HAL_GPIO_Init+0x21c>
        {
          tmp |= iocurrent;
 8001fbc:	697a      	ldr	r2, [r7, #20]
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8001fc4:	4929      	ldr	r1, [pc, #164]	@ (800206c <HAL_GPIO_Init+0x2c4>)
 8001fc6:	2280      	movs	r2, #128	@ 0x80
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 8001fcc:	4a27      	ldr	r2, [pc, #156]	@ (800206c <HAL_GPIO_Init+0x2c4>)
 8001fce:	2384      	movs	r3, #132	@ 0x84
 8001fd0:	58d3      	ldr	r3, [r2, r3]
 8001fd2:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	43da      	mvns	r2, r3
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	4013      	ands	r3, r2
 8001fdc:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	685a      	ldr	r2, [r3, #4]
 8001fe2:	2380      	movs	r3, #128	@ 0x80
 8001fe4:	029b      	lsls	r3, r3, #10
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	d003      	beq.n	8001ff2 <HAL_GPIO_Init+0x24a>
        {
          tmp |= iocurrent;
 8001fea:	697a      	ldr	r2, [r7, #20]
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8001ff2:	491e      	ldr	r1, [pc, #120]	@ (800206c <HAL_GPIO_Init+0x2c4>)
 8001ff4:	2284      	movs	r2, #132	@ 0x84
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8001ffa:	4b1c      	ldr	r3, [pc, #112]	@ (800206c <HAL_GPIO_Init+0x2c4>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	43da      	mvns	r2, r3
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	4013      	ands	r3, r2
 8002008:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	685a      	ldr	r2, [r3, #4]
 800200e:	2380      	movs	r3, #128	@ 0x80
 8002010:	035b      	lsls	r3, r3, #13
 8002012:	4013      	ands	r3, r2
 8002014:	d003      	beq.n	800201e <HAL_GPIO_Init+0x276>
        {
          tmp |= iocurrent;
 8002016:	697a      	ldr	r2, [r7, #20]
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	4313      	orrs	r3, r2
 800201c:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 800201e:	4b13      	ldr	r3, [pc, #76]	@ (800206c <HAL_GPIO_Init+0x2c4>)
 8002020:	697a      	ldr	r2, [r7, #20]
 8002022:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 8002024:	4b11      	ldr	r3, [pc, #68]	@ (800206c <HAL_GPIO_Init+0x2c4>)
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	43da      	mvns	r2, r3
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	4013      	ands	r3, r2
 8002032:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	685a      	ldr	r2, [r3, #4]
 8002038:	2380      	movs	r3, #128	@ 0x80
 800203a:	039b      	lsls	r3, r3, #14
 800203c:	4013      	ands	r3, r2
 800203e:	d003      	beq.n	8002048 <HAL_GPIO_Init+0x2a0>
        {
          tmp |= iocurrent;
 8002040:	697a      	ldr	r2, [r7, #20]
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	4313      	orrs	r3, r2
 8002046:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8002048:	4b08      	ldr	r3, [pc, #32]	@ (800206c <HAL_GPIO_Init+0x2c4>)
 800204a:	697a      	ldr	r2, [r7, #20]
 800204c:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	3301      	adds	r3, #1
 8002052:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	40da      	lsrs	r2, r3
 800205c:	1e13      	subs	r3, r2, #0
 800205e:	d000      	beq.n	8002062 <HAL_GPIO_Init+0x2ba>
 8002060:	e6aa      	b.n	8001db8 <HAL_GPIO_Init+0x10>
  }
}
 8002062:	46c0      	nop			@ (mov r8, r8)
 8002064:	46c0      	nop			@ (mov r8, r8)
 8002066:	46bd      	mov	sp, r7
 8002068:	b006      	add	sp, #24
 800206a:	bd80      	pop	{r7, pc}
 800206c:	40021800 	.word	0x40021800
 8002070:	50000400 	.word	0x50000400
 8002074:	50000800 	.word	0x50000800
 8002078:	50001400 	.word	0x50001400

0800207c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b082      	sub	sp, #8
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
 8002084:	0008      	movs	r0, r1
 8002086:	0011      	movs	r1, r2
 8002088:	1cbb      	adds	r3, r7, #2
 800208a:	1c02      	adds	r2, r0, #0
 800208c:	801a      	strh	r2, [r3, #0]
 800208e:	1c7b      	adds	r3, r7, #1
 8002090:	1c0a      	adds	r2, r1, #0
 8002092:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002094:	1c7b      	adds	r3, r7, #1
 8002096:	781b      	ldrb	r3, [r3, #0]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d004      	beq.n	80020a6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800209c:	1cbb      	adds	r3, r7, #2
 800209e:	881a      	ldrh	r2, [r3, #0]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80020a4:	e003      	b.n	80020ae <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80020a6:	1cbb      	adds	r3, r7, #2
 80020a8:	881a      	ldrh	r2, [r3, #0]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80020ae:	46c0      	nop			@ (mov r8, r8)
 80020b0:	46bd      	mov	sp, r7
 80020b2:	b002      	add	sp, #8
 80020b4:	bd80      	pop	{r7, pc}

080020b6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for STM32C0 family
  * @param  GPIO_Pin: specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80020b6:	b580      	push	{r7, lr}
 80020b8:	b084      	sub	sp, #16
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	6078      	str	r0, [r7, #4]
 80020be:	000a      	movs	r2, r1
 80020c0:	1cbb      	adds	r3, r7, #2
 80020c2:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	695b      	ldr	r3, [r3, #20]
 80020c8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80020ca:	1cbb      	adds	r3, r7, #2
 80020cc:	881b      	ldrh	r3, [r3, #0]
 80020ce:	68fa      	ldr	r2, [r7, #12]
 80020d0:	4013      	ands	r3, r2
 80020d2:	041a      	lsls	r2, r3, #16
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	43db      	mvns	r3, r3
 80020d8:	1cb9      	adds	r1, r7, #2
 80020da:	8809      	ldrh	r1, [r1, #0]
 80020dc:	400b      	ands	r3, r1
 80020de:	431a      	orrs	r2, r3
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	619a      	str	r2, [r3, #24]
}
 80020e4:	46c0      	nop			@ (mov r8, r8)
 80020e6:	46bd      	mov	sp, r7
 80020e8:	b004      	add	sp, #16
 80020ea:	bd80      	pop	{r7, pc}

080020ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d101      	bne.n	80020fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e08f      	b.n	800221e <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2241      	movs	r2, #65	@ 0x41
 8002102:	5c9b      	ldrb	r3, [r3, r2]
 8002104:	b2db      	uxtb	r3, r3
 8002106:	2b00      	cmp	r3, #0
 8002108:	d107      	bne.n	800211a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2240      	movs	r2, #64	@ 0x40
 800210e:	2100      	movs	r1, #0
 8002110:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	0018      	movs	r0, r3
 8002116:	f7ff fbbf 	bl	8001898 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2241      	movs	r2, #65	@ 0x41
 800211e:	2124      	movs	r1, #36	@ 0x24
 8002120:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	2101      	movs	r1, #1
 800212e:	438a      	bics	r2, r1
 8002130:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	685a      	ldr	r2, [r3, #4]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	493b      	ldr	r1, [pc, #236]	@ (8002228 <HAL_I2C_Init+0x13c>)
 800213c:	400a      	ands	r2, r1
 800213e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	689a      	ldr	r2, [r3, #8]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4938      	ldr	r1, [pc, #224]	@ (800222c <HAL_I2C_Init+0x140>)
 800214c:	400a      	ands	r2, r1
 800214e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	2b01      	cmp	r3, #1
 8002156:	d108      	bne.n	800216a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	689a      	ldr	r2, [r3, #8]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	2180      	movs	r1, #128	@ 0x80
 8002162:	0209      	lsls	r1, r1, #8
 8002164:	430a      	orrs	r2, r1
 8002166:	609a      	str	r2, [r3, #8]
 8002168:	e007      	b.n	800217a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	689a      	ldr	r2, [r3, #8]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	2184      	movs	r1, #132	@ 0x84
 8002174:	0209      	lsls	r1, r1, #8
 8002176:	430a      	orrs	r2, r1
 8002178:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	68db      	ldr	r3, [r3, #12]
 800217e:	2b02      	cmp	r3, #2
 8002180:	d109      	bne.n	8002196 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	685a      	ldr	r2, [r3, #4]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	2180      	movs	r1, #128	@ 0x80
 800218e:	0109      	lsls	r1, r1, #4
 8002190:	430a      	orrs	r2, r1
 8002192:	605a      	str	r2, [r3, #4]
 8002194:	e007      	b.n	80021a6 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	685a      	ldr	r2, [r3, #4]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4923      	ldr	r1, [pc, #140]	@ (8002230 <HAL_I2C_Init+0x144>)
 80021a2:	400a      	ands	r2, r1
 80021a4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	685a      	ldr	r2, [r3, #4]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4920      	ldr	r1, [pc, #128]	@ (8002234 <HAL_I2C_Init+0x148>)
 80021b2:	430a      	orrs	r2, r1
 80021b4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	68da      	ldr	r2, [r3, #12]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	491a      	ldr	r1, [pc, #104]	@ (800222c <HAL_I2C_Init+0x140>)
 80021c2:	400a      	ands	r2, r1
 80021c4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	691a      	ldr	r2, [r3, #16]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	695b      	ldr	r3, [r3, #20]
 80021ce:	431a      	orrs	r2, r3
 80021d0:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	699b      	ldr	r3, [r3, #24]
 80021d6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	430a      	orrs	r2, r1
 80021de:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	69d9      	ldr	r1, [r3, #28]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6a1a      	ldr	r2, [r3, #32]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	430a      	orrs	r2, r1
 80021ee:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	2101      	movs	r1, #1
 80021fc:	430a      	orrs	r2, r1
 80021fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2200      	movs	r2, #0
 8002204:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2241      	movs	r2, #65	@ 0x41
 800220a:	2120      	movs	r1, #32
 800220c:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2200      	movs	r2, #0
 8002212:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2242      	movs	r2, #66	@ 0x42
 8002218:	2100      	movs	r1, #0
 800221a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800221c:	2300      	movs	r3, #0
}
 800221e:	0018      	movs	r0, r3
 8002220:	46bd      	mov	sp, r7
 8002222:	b002      	add	sp, #8
 8002224:	bd80      	pop	{r7, pc}
 8002226:	46c0      	nop			@ (mov r8, r8)
 8002228:	f0ffffff 	.word	0xf0ffffff
 800222c:	ffff7fff 	.word	0xffff7fff
 8002230:	fffff7ff 	.word	0xfffff7ff
 8002234:	02008000 	.word	0x02008000

08002238 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002238:	b590      	push	{r4, r7, lr}
 800223a:	b089      	sub	sp, #36	@ 0x24
 800223c:	af02      	add	r7, sp, #8
 800223e:	60f8      	str	r0, [r7, #12]
 8002240:	0008      	movs	r0, r1
 8002242:	607a      	str	r2, [r7, #4]
 8002244:	0019      	movs	r1, r3
 8002246:	230a      	movs	r3, #10
 8002248:	18fb      	adds	r3, r7, r3
 800224a:	1c02      	adds	r2, r0, #0
 800224c:	801a      	strh	r2, [r3, #0]
 800224e:	2308      	movs	r3, #8
 8002250:	18fb      	adds	r3, r7, r3
 8002252:	1c0a      	adds	r2, r1, #0
 8002254:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	2241      	movs	r2, #65	@ 0x41
 800225a:	5c9b      	ldrb	r3, [r3, r2]
 800225c:	b2db      	uxtb	r3, r3
 800225e:	2b20      	cmp	r3, #32
 8002260:	d000      	beq.n	8002264 <HAL_I2C_Master_Transmit+0x2c>
 8002262:	e10a      	b.n	800247a <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	2240      	movs	r2, #64	@ 0x40
 8002268:	5c9b      	ldrb	r3, [r3, r2]
 800226a:	2b01      	cmp	r3, #1
 800226c:	d101      	bne.n	8002272 <HAL_I2C_Master_Transmit+0x3a>
 800226e:	2302      	movs	r3, #2
 8002270:	e104      	b.n	800247c <HAL_I2C_Master_Transmit+0x244>
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	2240      	movs	r2, #64	@ 0x40
 8002276:	2101      	movs	r1, #1
 8002278:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800227a:	f7ff fcad 	bl	8001bd8 <HAL_GetTick>
 800227e:	0003      	movs	r3, r0
 8002280:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002282:	2380      	movs	r3, #128	@ 0x80
 8002284:	0219      	lsls	r1, r3, #8
 8002286:	68f8      	ldr	r0, [r7, #12]
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	9300      	str	r3, [sp, #0]
 800228c:	2319      	movs	r3, #25
 800228e:	2201      	movs	r2, #1
 8002290:	f000 fa26 	bl	80026e0 <I2C_WaitOnFlagUntilTimeout>
 8002294:	1e03      	subs	r3, r0, #0
 8002296:	d001      	beq.n	800229c <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8002298:	2301      	movs	r3, #1
 800229a:	e0ef      	b.n	800247c <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	2241      	movs	r2, #65	@ 0x41
 80022a0:	2121      	movs	r1, #33	@ 0x21
 80022a2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	2242      	movs	r2, #66	@ 0x42
 80022a8:	2110      	movs	r1, #16
 80022aa:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	2200      	movs	r2, #0
 80022b0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	687a      	ldr	r2, [r7, #4]
 80022b6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	2208      	movs	r2, #8
 80022bc:	18ba      	adds	r2, r7, r2
 80022be:	8812      	ldrh	r2, [r2, #0]
 80022c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	2200      	movs	r2, #0
 80022c6:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022cc:	b29b      	uxth	r3, r3
 80022ce:	2bff      	cmp	r3, #255	@ 0xff
 80022d0:	d906      	bls.n	80022e0 <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	22ff      	movs	r2, #255	@ 0xff
 80022d6:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80022d8:	2380      	movs	r3, #128	@ 0x80
 80022da:	045b      	lsls	r3, r3, #17
 80022dc:	617b      	str	r3, [r7, #20]
 80022de:	e007      	b.n	80022f0 <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022e4:	b29a      	uxth	r2, r3
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80022ea:	2380      	movs	r3, #128	@ 0x80
 80022ec:	049b      	lsls	r3, r3, #18
 80022ee:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d027      	beq.n	8002348 <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022fc:	781a      	ldrb	r2, [r3, #0]
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002308:	1c5a      	adds	r2, r3, #1
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002312:	b29b      	uxth	r3, r3
 8002314:	3b01      	subs	r3, #1
 8002316:	b29a      	uxth	r2, r3
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002320:	3b01      	subs	r3, #1
 8002322:	b29a      	uxth	r2, r3
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800232c:	b2db      	uxtb	r3, r3
 800232e:	3301      	adds	r3, #1
 8002330:	b2da      	uxtb	r2, r3
 8002332:	697c      	ldr	r4, [r7, #20]
 8002334:	230a      	movs	r3, #10
 8002336:	18fb      	adds	r3, r7, r3
 8002338:	8819      	ldrh	r1, [r3, #0]
 800233a:	68f8      	ldr	r0, [r7, #12]
 800233c:	4b51      	ldr	r3, [pc, #324]	@ (8002484 <HAL_I2C_Master_Transmit+0x24c>)
 800233e:	9300      	str	r3, [sp, #0]
 8002340:	0023      	movs	r3, r4
 8002342:	f000 fc1f 	bl	8002b84 <I2C_TransferConfig>
 8002346:	e06f      	b.n	8002428 <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800234c:	b2da      	uxtb	r2, r3
 800234e:	697c      	ldr	r4, [r7, #20]
 8002350:	230a      	movs	r3, #10
 8002352:	18fb      	adds	r3, r7, r3
 8002354:	8819      	ldrh	r1, [r3, #0]
 8002356:	68f8      	ldr	r0, [r7, #12]
 8002358:	4b4a      	ldr	r3, [pc, #296]	@ (8002484 <HAL_I2C_Master_Transmit+0x24c>)
 800235a:	9300      	str	r3, [sp, #0]
 800235c:	0023      	movs	r3, r4
 800235e:	f000 fc11 	bl	8002b84 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002362:	e061      	b.n	8002428 <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002364:	693a      	ldr	r2, [r7, #16]
 8002366:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	0018      	movs	r0, r3
 800236c:	f000 fa06 	bl	800277c <I2C_WaitOnTXISFlagUntilTimeout>
 8002370:	1e03      	subs	r3, r0, #0
 8002372:	d001      	beq.n	8002378 <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	e081      	b.n	800247c <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800237c:	781a      	ldrb	r2, [r3, #0]
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002388:	1c5a      	adds	r2, r3, #1
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002392:	b29b      	uxth	r3, r3
 8002394:	3b01      	subs	r3, #1
 8002396:	b29a      	uxth	r2, r3
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023a0:	3b01      	subs	r3, #1
 80023a2:	b29a      	uxth	r2, r3
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023ac:	b29b      	uxth	r3, r3
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d03a      	beq.n	8002428 <HAL_I2C_Master_Transmit+0x1f0>
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d136      	bne.n	8002428 <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80023ba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80023bc:	68f8      	ldr	r0, [r7, #12]
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	9300      	str	r3, [sp, #0]
 80023c2:	0013      	movs	r3, r2
 80023c4:	2200      	movs	r2, #0
 80023c6:	2180      	movs	r1, #128	@ 0x80
 80023c8:	f000 f98a 	bl	80026e0 <I2C_WaitOnFlagUntilTimeout>
 80023cc:	1e03      	subs	r3, r0, #0
 80023ce:	d001      	beq.n	80023d4 <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	e053      	b.n	800247c <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023d8:	b29b      	uxth	r3, r3
 80023da:	2bff      	cmp	r3, #255	@ 0xff
 80023dc:	d911      	bls.n	8002402 <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	22ff      	movs	r2, #255	@ 0xff
 80023e2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023e8:	b2da      	uxtb	r2, r3
 80023ea:	2380      	movs	r3, #128	@ 0x80
 80023ec:	045c      	lsls	r4, r3, #17
 80023ee:	230a      	movs	r3, #10
 80023f0:	18fb      	adds	r3, r7, r3
 80023f2:	8819      	ldrh	r1, [r3, #0]
 80023f4:	68f8      	ldr	r0, [r7, #12]
 80023f6:	2300      	movs	r3, #0
 80023f8:	9300      	str	r3, [sp, #0]
 80023fa:	0023      	movs	r3, r4
 80023fc:	f000 fbc2 	bl	8002b84 <I2C_TransferConfig>
 8002400:	e012      	b.n	8002428 <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002406:	b29a      	uxth	r2, r3
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002410:	b2da      	uxtb	r2, r3
 8002412:	2380      	movs	r3, #128	@ 0x80
 8002414:	049c      	lsls	r4, r3, #18
 8002416:	230a      	movs	r3, #10
 8002418:	18fb      	adds	r3, r7, r3
 800241a:	8819      	ldrh	r1, [r3, #0]
 800241c:	68f8      	ldr	r0, [r7, #12]
 800241e:	2300      	movs	r3, #0
 8002420:	9300      	str	r3, [sp, #0]
 8002422:	0023      	movs	r3, r4
 8002424:	f000 fbae 	bl	8002b84 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800242c:	b29b      	uxth	r3, r3
 800242e:	2b00      	cmp	r3, #0
 8002430:	d198      	bne.n	8002364 <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002432:	693a      	ldr	r2, [r7, #16]
 8002434:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	0018      	movs	r0, r3
 800243a:	f000 f9e5 	bl	8002808 <I2C_WaitOnSTOPFlagUntilTimeout>
 800243e:	1e03      	subs	r3, r0, #0
 8002440:	d001      	beq.n	8002446 <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	e01a      	b.n	800247c <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	2220      	movs	r2, #32
 800244c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	685a      	ldr	r2, [r3, #4]
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	490b      	ldr	r1, [pc, #44]	@ (8002488 <HAL_I2C_Master_Transmit+0x250>)
 800245a:	400a      	ands	r2, r1
 800245c:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	2241      	movs	r2, #65	@ 0x41
 8002462:	2120      	movs	r1, #32
 8002464:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	2242      	movs	r2, #66	@ 0x42
 800246a:	2100      	movs	r1, #0
 800246c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	2240      	movs	r2, #64	@ 0x40
 8002472:	2100      	movs	r1, #0
 8002474:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002476:	2300      	movs	r3, #0
 8002478:	e000      	b.n	800247c <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 800247a:	2302      	movs	r3, #2
  }
}
 800247c:	0018      	movs	r0, r3
 800247e:	46bd      	mov	sp, r7
 8002480:	b007      	add	sp, #28
 8002482:	bd90      	pop	{r4, r7, pc}
 8002484:	80002000 	.word	0x80002000
 8002488:	fe00e800 	.word	0xfe00e800

0800248c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800248c:	b590      	push	{r4, r7, lr}
 800248e:	b089      	sub	sp, #36	@ 0x24
 8002490:	af02      	add	r7, sp, #8
 8002492:	60f8      	str	r0, [r7, #12]
 8002494:	0008      	movs	r0, r1
 8002496:	607a      	str	r2, [r7, #4]
 8002498:	0019      	movs	r1, r3
 800249a:	230a      	movs	r3, #10
 800249c:	18fb      	adds	r3, r7, r3
 800249e:	1c02      	adds	r2, r0, #0
 80024a0:	801a      	strh	r2, [r3, #0]
 80024a2:	2308      	movs	r3, #8
 80024a4:	18fb      	adds	r3, r7, r3
 80024a6:	1c0a      	adds	r2, r1, #0
 80024a8:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	2241      	movs	r2, #65	@ 0x41
 80024ae:	5c9b      	ldrb	r3, [r3, r2]
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	2b20      	cmp	r3, #32
 80024b4:	d000      	beq.n	80024b8 <HAL_I2C_Master_Receive+0x2c>
 80024b6:	e0e8      	b.n	800268a <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	2240      	movs	r2, #64	@ 0x40
 80024bc:	5c9b      	ldrb	r3, [r3, r2]
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d101      	bne.n	80024c6 <HAL_I2C_Master_Receive+0x3a>
 80024c2:	2302      	movs	r3, #2
 80024c4:	e0e2      	b.n	800268c <HAL_I2C_Master_Receive+0x200>
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	2240      	movs	r2, #64	@ 0x40
 80024ca:	2101      	movs	r1, #1
 80024cc:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80024ce:	f7ff fb83 	bl	8001bd8 <HAL_GetTick>
 80024d2:	0003      	movs	r3, r0
 80024d4:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80024d6:	2380      	movs	r3, #128	@ 0x80
 80024d8:	0219      	lsls	r1, r3, #8
 80024da:	68f8      	ldr	r0, [r7, #12]
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	9300      	str	r3, [sp, #0]
 80024e0:	2319      	movs	r3, #25
 80024e2:	2201      	movs	r2, #1
 80024e4:	f000 f8fc 	bl	80026e0 <I2C_WaitOnFlagUntilTimeout>
 80024e8:	1e03      	subs	r3, r0, #0
 80024ea:	d001      	beq.n	80024f0 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	e0cd      	b.n	800268c <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	2241      	movs	r2, #65	@ 0x41
 80024f4:	2122      	movs	r1, #34	@ 0x22
 80024f6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	2242      	movs	r2, #66	@ 0x42
 80024fc:	2110      	movs	r1, #16
 80024fe:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	2200      	movs	r2, #0
 8002504:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	687a      	ldr	r2, [r7, #4]
 800250a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	2208      	movs	r2, #8
 8002510:	18ba      	adds	r2, r7, r2
 8002512:	8812      	ldrh	r2, [r2, #0]
 8002514:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	2200      	movs	r2, #0
 800251a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002520:	b29b      	uxth	r3, r3
 8002522:	2bff      	cmp	r3, #255	@ 0xff
 8002524:	d911      	bls.n	800254a <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	22ff      	movs	r2, #255	@ 0xff
 800252a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002530:	b2da      	uxtb	r2, r3
 8002532:	2380      	movs	r3, #128	@ 0x80
 8002534:	045c      	lsls	r4, r3, #17
 8002536:	230a      	movs	r3, #10
 8002538:	18fb      	adds	r3, r7, r3
 800253a:	8819      	ldrh	r1, [r3, #0]
 800253c:	68f8      	ldr	r0, [r7, #12]
 800253e:	4b55      	ldr	r3, [pc, #340]	@ (8002694 <HAL_I2C_Master_Receive+0x208>)
 8002540:	9300      	str	r3, [sp, #0]
 8002542:	0023      	movs	r3, r4
 8002544:	f000 fb1e 	bl	8002b84 <I2C_TransferConfig>
 8002548:	e076      	b.n	8002638 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800254e:	b29a      	uxth	r2, r3
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002558:	b2da      	uxtb	r2, r3
 800255a:	2380      	movs	r3, #128	@ 0x80
 800255c:	049c      	lsls	r4, r3, #18
 800255e:	230a      	movs	r3, #10
 8002560:	18fb      	adds	r3, r7, r3
 8002562:	8819      	ldrh	r1, [r3, #0]
 8002564:	68f8      	ldr	r0, [r7, #12]
 8002566:	4b4b      	ldr	r3, [pc, #300]	@ (8002694 <HAL_I2C_Master_Receive+0x208>)
 8002568:	9300      	str	r3, [sp, #0]
 800256a:	0023      	movs	r3, r4
 800256c:	f000 fb0a 	bl	8002b84 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002570:	e062      	b.n	8002638 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002572:	697a      	ldr	r2, [r7, #20]
 8002574:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	0018      	movs	r0, r3
 800257a:	f000 f989 	bl	8002890 <I2C_WaitOnRXNEFlagUntilTimeout>
 800257e:	1e03      	subs	r3, r0, #0
 8002580:	d001      	beq.n	8002586 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	e082      	b.n	800268c <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002590:	b2d2      	uxtb	r2, r2
 8002592:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002598:	1c5a      	adds	r2, r3, #1
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025a2:	3b01      	subs	r3, #1
 80025a4:	b29a      	uxth	r2, r3
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025ae:	b29b      	uxth	r3, r3
 80025b0:	3b01      	subs	r3, #1
 80025b2:	b29a      	uxth	r2, r3
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025bc:	b29b      	uxth	r3, r3
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d03a      	beq.n	8002638 <HAL_I2C_Master_Receive+0x1ac>
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d136      	bne.n	8002638 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80025ca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80025cc:	68f8      	ldr	r0, [r7, #12]
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	9300      	str	r3, [sp, #0]
 80025d2:	0013      	movs	r3, r2
 80025d4:	2200      	movs	r2, #0
 80025d6:	2180      	movs	r1, #128	@ 0x80
 80025d8:	f000 f882 	bl	80026e0 <I2C_WaitOnFlagUntilTimeout>
 80025dc:	1e03      	subs	r3, r0, #0
 80025de:	d001      	beq.n	80025e4 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	e053      	b.n	800268c <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025e8:	b29b      	uxth	r3, r3
 80025ea:	2bff      	cmp	r3, #255	@ 0xff
 80025ec:	d911      	bls.n	8002612 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	22ff      	movs	r2, #255	@ 0xff
 80025f2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025f8:	b2da      	uxtb	r2, r3
 80025fa:	2380      	movs	r3, #128	@ 0x80
 80025fc:	045c      	lsls	r4, r3, #17
 80025fe:	230a      	movs	r3, #10
 8002600:	18fb      	adds	r3, r7, r3
 8002602:	8819      	ldrh	r1, [r3, #0]
 8002604:	68f8      	ldr	r0, [r7, #12]
 8002606:	2300      	movs	r3, #0
 8002608:	9300      	str	r3, [sp, #0]
 800260a:	0023      	movs	r3, r4
 800260c:	f000 faba 	bl	8002b84 <I2C_TransferConfig>
 8002610:	e012      	b.n	8002638 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002616:	b29a      	uxth	r2, r3
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002620:	b2da      	uxtb	r2, r3
 8002622:	2380      	movs	r3, #128	@ 0x80
 8002624:	049c      	lsls	r4, r3, #18
 8002626:	230a      	movs	r3, #10
 8002628:	18fb      	adds	r3, r7, r3
 800262a:	8819      	ldrh	r1, [r3, #0]
 800262c:	68f8      	ldr	r0, [r7, #12]
 800262e:	2300      	movs	r3, #0
 8002630:	9300      	str	r3, [sp, #0]
 8002632:	0023      	movs	r3, r4
 8002634:	f000 faa6 	bl	8002b84 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800263c:	b29b      	uxth	r3, r3
 800263e:	2b00      	cmp	r3, #0
 8002640:	d197      	bne.n	8002572 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002642:	697a      	ldr	r2, [r7, #20]
 8002644:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	0018      	movs	r0, r3
 800264a:	f000 f8dd 	bl	8002808 <I2C_WaitOnSTOPFlagUntilTimeout>
 800264e:	1e03      	subs	r3, r0, #0
 8002650:	d001      	beq.n	8002656 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e01a      	b.n	800268c <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	2220      	movs	r2, #32
 800265c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	685a      	ldr	r2, [r3, #4]
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	490b      	ldr	r1, [pc, #44]	@ (8002698 <HAL_I2C_Master_Receive+0x20c>)
 800266a:	400a      	ands	r2, r1
 800266c:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	2241      	movs	r2, #65	@ 0x41
 8002672:	2120      	movs	r1, #32
 8002674:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	2242      	movs	r2, #66	@ 0x42
 800267a:	2100      	movs	r1, #0
 800267c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2240      	movs	r2, #64	@ 0x40
 8002682:	2100      	movs	r1, #0
 8002684:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002686:	2300      	movs	r3, #0
 8002688:	e000      	b.n	800268c <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 800268a:	2302      	movs	r3, #2
  }
}
 800268c:	0018      	movs	r0, r3
 800268e:	46bd      	mov	sp, r7
 8002690:	b007      	add	sp, #28
 8002692:	bd90      	pop	{r4, r7, pc}
 8002694:	80002400 	.word	0x80002400
 8002698:	fe00e800 	.word	0xfe00e800

0800269c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b082      	sub	sp, #8
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	699b      	ldr	r3, [r3, #24]
 80026aa:	2202      	movs	r2, #2
 80026ac:	4013      	ands	r3, r2
 80026ae:	2b02      	cmp	r3, #2
 80026b0:	d103      	bne.n	80026ba <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	2200      	movs	r2, #0
 80026b8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	699b      	ldr	r3, [r3, #24]
 80026c0:	2201      	movs	r2, #1
 80026c2:	4013      	ands	r3, r2
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d007      	beq.n	80026d8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	699a      	ldr	r2, [r3, #24]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	2101      	movs	r1, #1
 80026d4:	430a      	orrs	r2, r1
 80026d6:	619a      	str	r2, [r3, #24]
  }
}
 80026d8:	46c0      	nop			@ (mov r8, r8)
 80026da:	46bd      	mov	sp, r7
 80026dc:	b002      	add	sp, #8
 80026de:	bd80      	pop	{r7, pc}

080026e0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b084      	sub	sp, #16
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	60f8      	str	r0, [r7, #12]
 80026e8:	60b9      	str	r1, [r7, #8]
 80026ea:	603b      	str	r3, [r7, #0]
 80026ec:	1dfb      	adds	r3, r7, #7
 80026ee:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80026f0:	e030      	b.n	8002754 <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	3301      	adds	r3, #1
 80026f6:	d02d      	beq.n	8002754 <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026f8:	f7ff fa6e 	bl	8001bd8 <HAL_GetTick>
 80026fc:	0002      	movs	r2, r0
 80026fe:	69bb      	ldr	r3, [r7, #24]
 8002700:	1ad3      	subs	r3, r2, r3
 8002702:	683a      	ldr	r2, [r7, #0]
 8002704:	429a      	cmp	r2, r3
 8002706:	d302      	bcc.n	800270e <I2C_WaitOnFlagUntilTimeout+0x2e>
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d122      	bne.n	8002754 <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	699b      	ldr	r3, [r3, #24]
 8002714:	68ba      	ldr	r2, [r7, #8]
 8002716:	4013      	ands	r3, r2
 8002718:	68ba      	ldr	r2, [r7, #8]
 800271a:	1ad3      	subs	r3, r2, r3
 800271c:	425a      	negs	r2, r3
 800271e:	4153      	adcs	r3, r2
 8002720:	b2db      	uxtb	r3, r3
 8002722:	001a      	movs	r2, r3
 8002724:	1dfb      	adds	r3, r7, #7
 8002726:	781b      	ldrb	r3, [r3, #0]
 8002728:	429a      	cmp	r2, r3
 800272a:	d113      	bne.n	8002754 <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002730:	2220      	movs	r2, #32
 8002732:	431a      	orrs	r2, r3
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2241      	movs	r2, #65	@ 0x41
 800273c:	2120      	movs	r1, #32
 800273e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	2242      	movs	r2, #66	@ 0x42
 8002744:	2100      	movs	r1, #0
 8002746:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	2240      	movs	r2, #64	@ 0x40
 800274c:	2100      	movs	r1, #0
 800274e:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	e00f      	b.n	8002774 <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	699b      	ldr	r3, [r3, #24]
 800275a:	68ba      	ldr	r2, [r7, #8]
 800275c:	4013      	ands	r3, r2
 800275e:	68ba      	ldr	r2, [r7, #8]
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	425a      	negs	r2, r3
 8002764:	4153      	adcs	r3, r2
 8002766:	b2db      	uxtb	r3, r3
 8002768:	001a      	movs	r2, r3
 800276a:	1dfb      	adds	r3, r7, #7
 800276c:	781b      	ldrb	r3, [r3, #0]
 800276e:	429a      	cmp	r2, r3
 8002770:	d0bf      	beq.n	80026f2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002772:	2300      	movs	r3, #0
}
 8002774:	0018      	movs	r0, r3
 8002776:	46bd      	mov	sp, r7
 8002778:	b004      	add	sp, #16
 800277a:	bd80      	pop	{r7, pc}

0800277c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b084      	sub	sp, #16
 8002780:	af00      	add	r7, sp, #0
 8002782:	60f8      	str	r0, [r7, #12]
 8002784:	60b9      	str	r1, [r7, #8]
 8002786:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002788:	e032      	b.n	80027f0 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800278a:	687a      	ldr	r2, [r7, #4]
 800278c:	68b9      	ldr	r1, [r7, #8]
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	0018      	movs	r0, r3
 8002792:	f000 f8ff 	bl	8002994 <I2C_IsErrorOccurred>
 8002796:	1e03      	subs	r3, r0, #0
 8002798:	d001      	beq.n	800279e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	e030      	b.n	8002800 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	3301      	adds	r3, #1
 80027a2:	d025      	beq.n	80027f0 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027a4:	f7ff fa18 	bl	8001bd8 <HAL_GetTick>
 80027a8:	0002      	movs	r2, r0
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	1ad3      	subs	r3, r2, r3
 80027ae:	68ba      	ldr	r2, [r7, #8]
 80027b0:	429a      	cmp	r2, r3
 80027b2:	d302      	bcc.n	80027ba <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d11a      	bne.n	80027f0 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	699b      	ldr	r3, [r3, #24]
 80027c0:	2202      	movs	r2, #2
 80027c2:	4013      	ands	r3, r2
 80027c4:	2b02      	cmp	r3, #2
 80027c6:	d013      	beq.n	80027f0 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027cc:	2220      	movs	r2, #32
 80027ce:	431a      	orrs	r2, r3
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2241      	movs	r2, #65	@ 0x41
 80027d8:	2120      	movs	r1, #32
 80027da:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2242      	movs	r2, #66	@ 0x42
 80027e0:	2100      	movs	r1, #0
 80027e2:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	2240      	movs	r2, #64	@ 0x40
 80027e8:	2100      	movs	r1, #0
 80027ea:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	e007      	b.n	8002800 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	699b      	ldr	r3, [r3, #24]
 80027f6:	2202      	movs	r2, #2
 80027f8:	4013      	ands	r3, r2
 80027fa:	2b02      	cmp	r3, #2
 80027fc:	d1c5      	bne.n	800278a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80027fe:	2300      	movs	r3, #0
}
 8002800:	0018      	movs	r0, r3
 8002802:	46bd      	mov	sp, r7
 8002804:	b004      	add	sp, #16
 8002806:	bd80      	pop	{r7, pc}

08002808 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b084      	sub	sp, #16
 800280c:	af00      	add	r7, sp, #0
 800280e:	60f8      	str	r0, [r7, #12]
 8002810:	60b9      	str	r1, [r7, #8]
 8002812:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002814:	e02f      	b.n	8002876 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002816:	687a      	ldr	r2, [r7, #4]
 8002818:	68b9      	ldr	r1, [r7, #8]
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	0018      	movs	r0, r3
 800281e:	f000 f8b9 	bl	8002994 <I2C_IsErrorOccurred>
 8002822:	1e03      	subs	r3, r0, #0
 8002824:	d001      	beq.n	800282a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e02d      	b.n	8002886 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800282a:	f7ff f9d5 	bl	8001bd8 <HAL_GetTick>
 800282e:	0002      	movs	r2, r0
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	1ad3      	subs	r3, r2, r3
 8002834:	68ba      	ldr	r2, [r7, #8]
 8002836:	429a      	cmp	r2, r3
 8002838:	d302      	bcc.n	8002840 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d11a      	bne.n	8002876 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	699b      	ldr	r3, [r3, #24]
 8002846:	2220      	movs	r2, #32
 8002848:	4013      	ands	r3, r2
 800284a:	2b20      	cmp	r3, #32
 800284c:	d013      	beq.n	8002876 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002852:	2220      	movs	r2, #32
 8002854:	431a      	orrs	r2, r3
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	2241      	movs	r2, #65	@ 0x41
 800285e:	2120      	movs	r1, #32
 8002860:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	2242      	movs	r2, #66	@ 0x42
 8002866:	2100      	movs	r1, #0
 8002868:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	2240      	movs	r2, #64	@ 0x40
 800286e:	2100      	movs	r1, #0
 8002870:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e007      	b.n	8002886 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	699b      	ldr	r3, [r3, #24]
 800287c:	2220      	movs	r2, #32
 800287e:	4013      	ands	r3, r2
 8002880:	2b20      	cmp	r3, #32
 8002882:	d1c8      	bne.n	8002816 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002884:	2300      	movs	r3, #0
}
 8002886:	0018      	movs	r0, r3
 8002888:	46bd      	mov	sp, r7
 800288a:	b004      	add	sp, #16
 800288c:	bd80      	pop	{r7, pc}
	...

08002890 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b084      	sub	sp, #16
 8002894:	af00      	add	r7, sp, #0
 8002896:	60f8      	str	r0, [r7, #12]
 8002898:	60b9      	str	r1, [r7, #8]
 800289a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800289c:	e06b      	b.n	8002976 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800289e:	687a      	ldr	r2, [r7, #4]
 80028a0:	68b9      	ldr	r1, [r7, #8]
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	0018      	movs	r0, r3
 80028a6:	f000 f875 	bl	8002994 <I2C_IsErrorOccurred>
 80028aa:	1e03      	subs	r3, r0, #0
 80028ac:	d001      	beq.n	80028b2 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e069      	b.n	8002986 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	699b      	ldr	r3, [r3, #24]
 80028b8:	2220      	movs	r2, #32
 80028ba:	4013      	ands	r3, r2
 80028bc:	2b20      	cmp	r3, #32
 80028be:	d138      	bne.n	8002932 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	699b      	ldr	r3, [r3, #24]
 80028c6:	2204      	movs	r2, #4
 80028c8:	4013      	ands	r3, r2
 80028ca:	2b04      	cmp	r3, #4
 80028cc:	d105      	bne.n	80028da <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d001      	beq.n	80028da <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80028d6:	2300      	movs	r3, #0
 80028d8:	e055      	b.n	8002986 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	699b      	ldr	r3, [r3, #24]
 80028e0:	2210      	movs	r2, #16
 80028e2:	4013      	ands	r3, r2
 80028e4:	2b10      	cmp	r3, #16
 80028e6:	d107      	bne.n	80028f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	2210      	movs	r2, #16
 80028ee:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	2204      	movs	r2, #4
 80028f4:	645a      	str	r2, [r3, #68]	@ 0x44
 80028f6:	e002      	b.n	80028fe <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	2200      	movs	r2, #0
 80028fc:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	2220      	movs	r2, #32
 8002904:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	685a      	ldr	r2, [r3, #4]
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	491f      	ldr	r1, [pc, #124]	@ (8002990 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8002912:	400a      	ands	r2, r1
 8002914:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	2241      	movs	r2, #65	@ 0x41
 800291a:	2120      	movs	r1, #32
 800291c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	2242      	movs	r2, #66	@ 0x42
 8002922:	2100      	movs	r1, #0
 8002924:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	2240      	movs	r2, #64	@ 0x40
 800292a:	2100      	movs	r1, #0
 800292c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e029      	b.n	8002986 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002932:	f7ff f951 	bl	8001bd8 <HAL_GetTick>
 8002936:	0002      	movs	r2, r0
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	1ad3      	subs	r3, r2, r3
 800293c:	68ba      	ldr	r2, [r7, #8]
 800293e:	429a      	cmp	r2, r3
 8002940:	d302      	bcc.n	8002948 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d116      	bne.n	8002976 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	699b      	ldr	r3, [r3, #24]
 800294e:	2204      	movs	r2, #4
 8002950:	4013      	ands	r3, r2
 8002952:	2b04      	cmp	r3, #4
 8002954:	d00f      	beq.n	8002976 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800295a:	2220      	movs	r2, #32
 800295c:	431a      	orrs	r2, r3
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	2241      	movs	r2, #65	@ 0x41
 8002966:	2120      	movs	r1, #32
 8002968:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	2240      	movs	r2, #64	@ 0x40
 800296e:	2100      	movs	r1, #0
 8002970:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	e007      	b.n	8002986 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	699b      	ldr	r3, [r3, #24]
 800297c:	2204      	movs	r2, #4
 800297e:	4013      	ands	r3, r2
 8002980:	2b04      	cmp	r3, #4
 8002982:	d18c      	bne.n	800289e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002984:	2300      	movs	r3, #0
}
 8002986:	0018      	movs	r0, r3
 8002988:	46bd      	mov	sp, r7
 800298a:	b004      	add	sp, #16
 800298c:	bd80      	pop	{r7, pc}
 800298e:	46c0      	nop			@ (mov r8, r8)
 8002990:	fe00e800 	.word	0xfe00e800

08002994 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b08a      	sub	sp, #40	@ 0x28
 8002998:	af00      	add	r7, sp, #0
 800299a:	60f8      	str	r0, [r7, #12]
 800299c:	60b9      	str	r1, [r7, #8]
 800299e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029a0:	2327      	movs	r3, #39	@ 0x27
 80029a2:	18fb      	adds	r3, r7, r3
 80029a4:	2200      	movs	r2, #0
 80029a6:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	699b      	ldr	r3, [r3, #24]
 80029ae:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80029b0:	2300      	movs	r3, #0
 80029b2:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80029b8:	69bb      	ldr	r3, [r7, #24]
 80029ba:	2210      	movs	r2, #16
 80029bc:	4013      	ands	r3, r2
 80029be:	d100      	bne.n	80029c2 <I2C_IsErrorOccurred+0x2e>
 80029c0:	e079      	b.n	8002ab6 <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	2210      	movs	r2, #16
 80029c8:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80029ca:	e057      	b.n	8002a7c <I2C_IsErrorOccurred+0xe8>
 80029cc:	2227      	movs	r2, #39	@ 0x27
 80029ce:	18bb      	adds	r3, r7, r2
 80029d0:	18ba      	adds	r2, r7, r2
 80029d2:	7812      	ldrb	r2, [r2, #0]
 80029d4:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	3301      	adds	r3, #1
 80029da:	d04f      	beq.n	8002a7c <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80029dc:	f7ff f8fc 	bl	8001bd8 <HAL_GetTick>
 80029e0:	0002      	movs	r2, r0
 80029e2:	69fb      	ldr	r3, [r7, #28]
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	68ba      	ldr	r2, [r7, #8]
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d302      	bcc.n	80029f2 <I2C_IsErrorOccurred+0x5e>
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d144      	bne.n	8002a7c <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	685a      	ldr	r2, [r3, #4]
 80029f8:	2380      	movs	r3, #128	@ 0x80
 80029fa:	01db      	lsls	r3, r3, #7
 80029fc:	4013      	ands	r3, r2
 80029fe:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002a00:	2013      	movs	r0, #19
 8002a02:	183b      	adds	r3, r7, r0
 8002a04:	68fa      	ldr	r2, [r7, #12]
 8002a06:	2142      	movs	r1, #66	@ 0x42
 8002a08:	5c52      	ldrb	r2, [r2, r1]
 8002a0a:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	699a      	ldr	r2, [r3, #24]
 8002a12:	2380      	movs	r3, #128	@ 0x80
 8002a14:	021b      	lsls	r3, r3, #8
 8002a16:	401a      	ands	r2, r3
 8002a18:	2380      	movs	r3, #128	@ 0x80
 8002a1a:	021b      	lsls	r3, r3, #8
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d126      	bne.n	8002a6e <I2C_IsErrorOccurred+0xda>
 8002a20:	697a      	ldr	r2, [r7, #20]
 8002a22:	2380      	movs	r3, #128	@ 0x80
 8002a24:	01db      	lsls	r3, r3, #7
 8002a26:	429a      	cmp	r2, r3
 8002a28:	d021      	beq.n	8002a6e <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8002a2a:	183b      	adds	r3, r7, r0
 8002a2c:	781b      	ldrb	r3, [r3, #0]
 8002a2e:	2b20      	cmp	r3, #32
 8002a30:	d01d      	beq.n	8002a6e <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	685a      	ldr	r2, [r3, #4]
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	2180      	movs	r1, #128	@ 0x80
 8002a3e:	01c9      	lsls	r1, r1, #7
 8002a40:	430a      	orrs	r2, r1
 8002a42:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002a44:	f7ff f8c8 	bl	8001bd8 <HAL_GetTick>
 8002a48:	0003      	movs	r3, r0
 8002a4a:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a4c:	e00f      	b.n	8002a6e <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002a4e:	f7ff f8c3 	bl	8001bd8 <HAL_GetTick>
 8002a52:	0002      	movs	r2, r0
 8002a54:	69fb      	ldr	r3, [r7, #28]
 8002a56:	1ad3      	subs	r3, r2, r3
 8002a58:	2b19      	cmp	r3, #25
 8002a5a:	d908      	bls.n	8002a6e <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002a5c:	6a3b      	ldr	r3, [r7, #32]
 8002a5e:	2220      	movs	r2, #32
 8002a60:	4313      	orrs	r3, r2
 8002a62:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002a64:	2327      	movs	r3, #39	@ 0x27
 8002a66:	18fb      	adds	r3, r7, r3
 8002a68:	2201      	movs	r2, #1
 8002a6a:	701a      	strb	r2, [r3, #0]

              break;
 8002a6c:	e006      	b.n	8002a7c <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	699b      	ldr	r3, [r3, #24]
 8002a74:	2220      	movs	r2, #32
 8002a76:	4013      	ands	r3, r2
 8002a78:	2b20      	cmp	r3, #32
 8002a7a:	d1e8      	bne.n	8002a4e <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	699b      	ldr	r3, [r3, #24]
 8002a82:	2220      	movs	r2, #32
 8002a84:	4013      	ands	r3, r2
 8002a86:	2b20      	cmp	r3, #32
 8002a88:	d004      	beq.n	8002a94 <I2C_IsErrorOccurred+0x100>
 8002a8a:	2327      	movs	r3, #39	@ 0x27
 8002a8c:	18fb      	adds	r3, r7, r3
 8002a8e:	781b      	ldrb	r3, [r3, #0]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d09b      	beq.n	80029cc <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002a94:	2327      	movs	r3, #39	@ 0x27
 8002a96:	18fb      	adds	r3, r7, r3
 8002a98:	781b      	ldrb	r3, [r3, #0]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d103      	bne.n	8002aa6 <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	2220      	movs	r2, #32
 8002aa4:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002aa6:	6a3b      	ldr	r3, [r7, #32]
 8002aa8:	2204      	movs	r2, #4
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002aae:	2327      	movs	r3, #39	@ 0x27
 8002ab0:	18fb      	adds	r3, r7, r3
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	699b      	ldr	r3, [r3, #24]
 8002abc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002abe:	69ba      	ldr	r2, [r7, #24]
 8002ac0:	2380      	movs	r3, #128	@ 0x80
 8002ac2:	005b      	lsls	r3, r3, #1
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	d00c      	beq.n	8002ae2 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002ac8:	6a3b      	ldr	r3, [r7, #32]
 8002aca:	2201      	movs	r2, #1
 8002acc:	4313      	orrs	r3, r2
 8002ace:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	2280      	movs	r2, #128	@ 0x80
 8002ad6:	0052      	lsls	r2, r2, #1
 8002ad8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002ada:	2327      	movs	r3, #39	@ 0x27
 8002adc:	18fb      	adds	r3, r7, r3
 8002ade:	2201      	movs	r2, #1
 8002ae0:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002ae2:	69ba      	ldr	r2, [r7, #24]
 8002ae4:	2380      	movs	r3, #128	@ 0x80
 8002ae6:	00db      	lsls	r3, r3, #3
 8002ae8:	4013      	ands	r3, r2
 8002aea:	d00c      	beq.n	8002b06 <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002aec:	6a3b      	ldr	r3, [r7, #32]
 8002aee:	2208      	movs	r2, #8
 8002af0:	4313      	orrs	r3, r2
 8002af2:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	2280      	movs	r2, #128	@ 0x80
 8002afa:	00d2      	lsls	r2, r2, #3
 8002afc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002afe:	2327      	movs	r3, #39	@ 0x27
 8002b00:	18fb      	adds	r3, r7, r3
 8002b02:	2201      	movs	r2, #1
 8002b04:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002b06:	69ba      	ldr	r2, [r7, #24]
 8002b08:	2380      	movs	r3, #128	@ 0x80
 8002b0a:	009b      	lsls	r3, r3, #2
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	d00c      	beq.n	8002b2a <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002b10:	6a3b      	ldr	r3, [r7, #32]
 8002b12:	2202      	movs	r2, #2
 8002b14:	4313      	orrs	r3, r2
 8002b16:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	2280      	movs	r2, #128	@ 0x80
 8002b1e:	0092      	lsls	r2, r2, #2
 8002b20:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002b22:	2327      	movs	r3, #39	@ 0x27
 8002b24:	18fb      	adds	r3, r7, r3
 8002b26:	2201      	movs	r2, #1
 8002b28:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8002b2a:	2327      	movs	r3, #39	@ 0x27
 8002b2c:	18fb      	adds	r3, r7, r3
 8002b2e:	781b      	ldrb	r3, [r3, #0]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d01d      	beq.n	8002b70 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	0018      	movs	r0, r3
 8002b38:	f7ff fdb0 	bl	800269c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	685a      	ldr	r2, [r3, #4]
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	490e      	ldr	r1, [pc, #56]	@ (8002b80 <I2C_IsErrorOccurred+0x1ec>)
 8002b48:	400a      	ands	r2, r1
 8002b4a:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002b50:	6a3b      	ldr	r3, [r7, #32]
 8002b52:	431a      	orrs	r2, r3
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	2241      	movs	r2, #65	@ 0x41
 8002b5c:	2120      	movs	r1, #32
 8002b5e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2242      	movs	r2, #66	@ 0x42
 8002b64:	2100      	movs	r1, #0
 8002b66:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2240      	movs	r2, #64	@ 0x40
 8002b6c:	2100      	movs	r1, #0
 8002b6e:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8002b70:	2327      	movs	r3, #39	@ 0x27
 8002b72:	18fb      	adds	r3, r7, r3
 8002b74:	781b      	ldrb	r3, [r3, #0]
}
 8002b76:	0018      	movs	r0, r3
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	b00a      	add	sp, #40	@ 0x28
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	46c0      	nop			@ (mov r8, r8)
 8002b80:	fe00e800 	.word	0xfe00e800

08002b84 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002b84:	b590      	push	{r4, r7, lr}
 8002b86:	b087      	sub	sp, #28
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	60f8      	str	r0, [r7, #12]
 8002b8c:	0008      	movs	r0, r1
 8002b8e:	0011      	movs	r1, r2
 8002b90:	607b      	str	r3, [r7, #4]
 8002b92:	240a      	movs	r4, #10
 8002b94:	193b      	adds	r3, r7, r4
 8002b96:	1c02      	adds	r2, r0, #0
 8002b98:	801a      	strh	r2, [r3, #0]
 8002b9a:	2009      	movs	r0, #9
 8002b9c:	183b      	adds	r3, r7, r0
 8002b9e:	1c0a      	adds	r2, r1, #0
 8002ba0:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002ba2:	193b      	adds	r3, r7, r4
 8002ba4:	881b      	ldrh	r3, [r3, #0]
 8002ba6:	059b      	lsls	r3, r3, #22
 8002ba8:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002baa:	183b      	adds	r3, r7, r0
 8002bac:	781b      	ldrb	r3, [r3, #0]
 8002bae:	0419      	lsls	r1, r3, #16
 8002bb0:	23ff      	movs	r3, #255	@ 0xff
 8002bb2:	041b      	lsls	r3, r3, #16
 8002bb4:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002bb6:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002bbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	005b      	lsls	r3, r3, #1
 8002bc2:	085b      	lsrs	r3, r3, #1
 8002bc4:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002bce:	0d51      	lsrs	r1, r2, #21
 8002bd0:	2280      	movs	r2, #128	@ 0x80
 8002bd2:	00d2      	lsls	r2, r2, #3
 8002bd4:	400a      	ands	r2, r1
 8002bd6:	4907      	ldr	r1, [pc, #28]	@ (8002bf4 <I2C_TransferConfig+0x70>)
 8002bd8:	430a      	orrs	r2, r1
 8002bda:	43d2      	mvns	r2, r2
 8002bdc:	401a      	ands	r2, r3
 8002bde:	0011      	movs	r1, r2
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	697a      	ldr	r2, [r7, #20]
 8002be6:	430a      	orrs	r2, r1
 8002be8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002bea:	46c0      	nop			@ (mov r8, r8)
 8002bec:	46bd      	mov	sp, r7
 8002bee:	b007      	add	sp, #28
 8002bf0:	bd90      	pop	{r4, r7, pc}
 8002bf2:	46c0      	nop			@ (mov r8, r8)
 8002bf4:	03ff63ff 	.word	0x03ff63ff

08002bf8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b082      	sub	sp, #8
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
 8002c00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2241      	movs	r2, #65	@ 0x41
 8002c06:	5c9b      	ldrb	r3, [r3, r2]
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	2b20      	cmp	r3, #32
 8002c0c:	d138      	bne.n	8002c80 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2240      	movs	r2, #64	@ 0x40
 8002c12:	5c9b      	ldrb	r3, [r3, r2]
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	d101      	bne.n	8002c1c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002c18:	2302      	movs	r3, #2
 8002c1a:	e032      	b.n	8002c82 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2240      	movs	r2, #64	@ 0x40
 8002c20:	2101      	movs	r1, #1
 8002c22:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2241      	movs	r2, #65	@ 0x41
 8002c28:	2124      	movs	r1, #36	@ 0x24
 8002c2a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	2101      	movs	r1, #1
 8002c38:	438a      	bics	r2, r1
 8002c3a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4911      	ldr	r1, [pc, #68]	@ (8002c8c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002c48:	400a      	ands	r2, r1
 8002c4a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	6819      	ldr	r1, [r3, #0]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	683a      	ldr	r2, [r7, #0]
 8002c58:	430a      	orrs	r2, r1
 8002c5a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	2101      	movs	r1, #1
 8002c68:	430a      	orrs	r2, r1
 8002c6a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2241      	movs	r2, #65	@ 0x41
 8002c70:	2120      	movs	r1, #32
 8002c72:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2240      	movs	r2, #64	@ 0x40
 8002c78:	2100      	movs	r1, #0
 8002c7a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	e000      	b.n	8002c82 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002c80:	2302      	movs	r3, #2
  }
}
 8002c82:	0018      	movs	r0, r3
 8002c84:	46bd      	mov	sp, r7
 8002c86:	b002      	add	sp, #8
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	46c0      	nop			@ (mov r8, r8)
 8002c8c:	ffffefff 	.word	0xffffefff

08002c90 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b084      	sub	sp, #16
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
 8002c98:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2241      	movs	r2, #65	@ 0x41
 8002c9e:	5c9b      	ldrb	r3, [r3, r2]
 8002ca0:	b2db      	uxtb	r3, r3
 8002ca2:	2b20      	cmp	r3, #32
 8002ca4:	d139      	bne.n	8002d1a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2240      	movs	r2, #64	@ 0x40
 8002caa:	5c9b      	ldrb	r3, [r3, r2]
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d101      	bne.n	8002cb4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002cb0:	2302      	movs	r3, #2
 8002cb2:	e033      	b.n	8002d1c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2240      	movs	r2, #64	@ 0x40
 8002cb8:	2101      	movs	r1, #1
 8002cba:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2241      	movs	r2, #65	@ 0x41
 8002cc0:	2124      	movs	r1, #36	@ 0x24
 8002cc2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	2101      	movs	r1, #1
 8002cd0:	438a      	bics	r2, r1
 8002cd2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	4a11      	ldr	r2, [pc, #68]	@ (8002d24 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	021b      	lsls	r3, r3, #8
 8002ce8:	68fa      	ldr	r2, [r7, #12]
 8002cea:	4313      	orrs	r3, r2
 8002cec:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	68fa      	ldr	r2, [r7, #12]
 8002cf4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	2101      	movs	r1, #1
 8002d02:	430a      	orrs	r2, r1
 8002d04:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2241      	movs	r2, #65	@ 0x41
 8002d0a:	2120      	movs	r1, #32
 8002d0c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2240      	movs	r2, #64	@ 0x40
 8002d12:	2100      	movs	r1, #0
 8002d14:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002d16:	2300      	movs	r3, #0
 8002d18:	e000      	b.n	8002d1c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002d1a:	2302      	movs	r3, #2
  }
}
 8002d1c:	0018      	movs	r0, r3
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	b004      	add	sp, #16
 8002d22:	bd80      	pop	{r7, pc}
 8002d24:	fffff0ff 	.word	0xfffff0ff

08002d28 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b086      	sub	sp, #24
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d101      	bne.n	8002d3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e1d0      	b.n	80030dc <HAL_RCC_OscConfig+0x3b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	2201      	movs	r2, #1
 8002d40:	4013      	ands	r3, r2
 8002d42:	d100      	bne.n	8002d46 <HAL_RCC_OscConfig+0x1e>
 8002d44:	e069      	b.n	8002e1a <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d46:	4bc8      	ldr	r3, [pc, #800]	@ (8003068 <HAL_RCC_OscConfig+0x340>)
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	2238      	movs	r2, #56	@ 0x38
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	2b08      	cmp	r3, #8
 8002d54:	d105      	bne.n	8002d62 <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d15d      	bne.n	8002e1a <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e1bc      	b.n	80030dc <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	685a      	ldr	r2, [r3, #4]
 8002d66:	2380      	movs	r3, #128	@ 0x80
 8002d68:	025b      	lsls	r3, r3, #9
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	d107      	bne.n	8002d7e <HAL_RCC_OscConfig+0x56>
 8002d6e:	4bbe      	ldr	r3, [pc, #760]	@ (8003068 <HAL_RCC_OscConfig+0x340>)
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	4bbd      	ldr	r3, [pc, #756]	@ (8003068 <HAL_RCC_OscConfig+0x340>)
 8002d74:	2180      	movs	r1, #128	@ 0x80
 8002d76:	0249      	lsls	r1, r1, #9
 8002d78:	430a      	orrs	r2, r1
 8002d7a:	601a      	str	r2, [r3, #0]
 8002d7c:	e020      	b.n	8002dc0 <HAL_RCC_OscConfig+0x98>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	685a      	ldr	r2, [r3, #4]
 8002d82:	23a0      	movs	r3, #160	@ 0xa0
 8002d84:	02db      	lsls	r3, r3, #11
 8002d86:	429a      	cmp	r2, r3
 8002d88:	d10e      	bne.n	8002da8 <HAL_RCC_OscConfig+0x80>
 8002d8a:	4bb7      	ldr	r3, [pc, #732]	@ (8003068 <HAL_RCC_OscConfig+0x340>)
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	4bb6      	ldr	r3, [pc, #728]	@ (8003068 <HAL_RCC_OscConfig+0x340>)
 8002d90:	2180      	movs	r1, #128	@ 0x80
 8002d92:	02c9      	lsls	r1, r1, #11
 8002d94:	430a      	orrs	r2, r1
 8002d96:	601a      	str	r2, [r3, #0]
 8002d98:	4bb3      	ldr	r3, [pc, #716]	@ (8003068 <HAL_RCC_OscConfig+0x340>)
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	4bb2      	ldr	r3, [pc, #712]	@ (8003068 <HAL_RCC_OscConfig+0x340>)
 8002d9e:	2180      	movs	r1, #128	@ 0x80
 8002da0:	0249      	lsls	r1, r1, #9
 8002da2:	430a      	orrs	r2, r1
 8002da4:	601a      	str	r2, [r3, #0]
 8002da6:	e00b      	b.n	8002dc0 <HAL_RCC_OscConfig+0x98>
 8002da8:	4baf      	ldr	r3, [pc, #700]	@ (8003068 <HAL_RCC_OscConfig+0x340>)
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	4bae      	ldr	r3, [pc, #696]	@ (8003068 <HAL_RCC_OscConfig+0x340>)
 8002dae:	49af      	ldr	r1, [pc, #700]	@ (800306c <HAL_RCC_OscConfig+0x344>)
 8002db0:	400a      	ands	r2, r1
 8002db2:	601a      	str	r2, [r3, #0]
 8002db4:	4bac      	ldr	r3, [pc, #688]	@ (8003068 <HAL_RCC_OscConfig+0x340>)
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	4bab      	ldr	r3, [pc, #684]	@ (8003068 <HAL_RCC_OscConfig+0x340>)
 8002dba:	49ad      	ldr	r1, [pc, #692]	@ (8003070 <HAL_RCC_OscConfig+0x348>)
 8002dbc:	400a      	ands	r2, r1
 8002dbe:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d014      	beq.n	8002df2 <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dc8:	f7fe ff06 	bl	8001bd8 <HAL_GetTick>
 8002dcc:	0003      	movs	r3, r0
 8002dce:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002dd0:	e008      	b.n	8002de4 <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8002dd2:	f7fe ff01 	bl	8001bd8 <HAL_GetTick>
 8002dd6:	0002      	movs	r2, r0
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	1ad3      	subs	r3, r2, r3
 8002ddc:	2b64      	cmp	r3, #100	@ 0x64
 8002dde:	d901      	bls.n	8002de4 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8002de0:	2303      	movs	r3, #3
 8002de2:	e17b      	b.n	80030dc <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002de4:	4ba0      	ldr	r3, [pc, #640]	@ (8003068 <HAL_RCC_OscConfig+0x340>)
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	2380      	movs	r3, #128	@ 0x80
 8002dea:	029b      	lsls	r3, r3, #10
 8002dec:	4013      	ands	r3, r2
 8002dee:	d0f0      	beq.n	8002dd2 <HAL_RCC_OscConfig+0xaa>
 8002df0:	e013      	b.n	8002e1a <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002df2:	f7fe fef1 	bl	8001bd8 <HAL_GetTick>
 8002df6:	0003      	movs	r3, r0
 8002df8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002dfa:	e008      	b.n	8002e0e <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8002dfc:	f7fe feec 	bl	8001bd8 <HAL_GetTick>
 8002e00:	0002      	movs	r2, r0
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	1ad3      	subs	r3, r2, r3
 8002e06:	2b64      	cmp	r3, #100	@ 0x64
 8002e08:	d901      	bls.n	8002e0e <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 8002e0a:	2303      	movs	r3, #3
 8002e0c:	e166      	b.n	80030dc <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e0e:	4b96      	ldr	r3, [pc, #600]	@ (8003068 <HAL_RCC_OscConfig+0x340>)
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	2380      	movs	r3, #128	@ 0x80
 8002e14:	029b      	lsls	r3, r3, #10
 8002e16:	4013      	ands	r3, r2
 8002e18:	d1f0      	bne.n	8002dfc <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	2202      	movs	r2, #2
 8002e20:	4013      	ands	r3, r2
 8002e22:	d100      	bne.n	8002e26 <HAL_RCC_OscConfig+0xfe>
 8002e24:	e086      	b.n	8002f34 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e26:	4b90      	ldr	r3, [pc, #576]	@ (8003068 <HAL_RCC_OscConfig+0x340>)
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	2238      	movs	r2, #56	@ 0x38
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d12f      	bne.n	8002e96 <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	68db      	ldr	r3, [r3, #12]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d101      	bne.n	8002e42 <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e14c      	b.n	80030dc <HAL_RCC_OscConfig+0x3b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e42:	4b89      	ldr	r3, [pc, #548]	@ (8003068 <HAL_RCC_OscConfig+0x340>)
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	4a8b      	ldr	r2, [pc, #556]	@ (8003074 <HAL_RCC_OscConfig+0x34c>)
 8002e48:	4013      	ands	r3, r2
 8002e4a:	0019      	movs	r1, r3
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	695b      	ldr	r3, [r3, #20]
 8002e50:	021a      	lsls	r2, r3, #8
 8002e52:	4b85      	ldr	r3, [pc, #532]	@ (8003068 <HAL_RCC_OscConfig+0x340>)
 8002e54:	430a      	orrs	r2, r1
 8002e56:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d112      	bne.n	8002e84 <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002e5e:	4b82      	ldr	r3, [pc, #520]	@ (8003068 <HAL_RCC_OscConfig+0x340>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a85      	ldr	r2, [pc, #532]	@ (8003078 <HAL_RCC_OscConfig+0x350>)
 8002e64:	4013      	ands	r3, r2
 8002e66:	0019      	movs	r1, r3
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	691a      	ldr	r2, [r3, #16]
 8002e6c:	4b7e      	ldr	r3, [pc, #504]	@ (8003068 <HAL_RCC_OscConfig+0x340>)
 8002e6e:	430a      	orrs	r2, r1
 8002e70:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002e72:	4b7d      	ldr	r3, [pc, #500]	@ (8003068 <HAL_RCC_OscConfig+0x340>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	0adb      	lsrs	r3, r3, #11
 8002e78:	2207      	movs	r2, #7
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	4a7f      	ldr	r2, [pc, #508]	@ (800307c <HAL_RCC_OscConfig+0x354>)
 8002e7e:	40da      	lsrs	r2, r3
 8002e80:	4b7f      	ldr	r3, [pc, #508]	@ (8003080 <HAL_RCC_OscConfig+0x358>)
 8002e82:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002e84:	4b7f      	ldr	r3, [pc, #508]	@ (8003084 <HAL_RCC_OscConfig+0x35c>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	0018      	movs	r0, r3
 8002e8a:	f7fe fe49 	bl	8001b20 <HAL_InitTick>
 8002e8e:	1e03      	subs	r3, r0, #0
 8002e90:	d050      	beq.n	8002f34 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e122      	b.n	80030dc <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	68db      	ldr	r3, [r3, #12]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d030      	beq.n	8002f00 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002e9e:	4b72      	ldr	r3, [pc, #456]	@ (8003068 <HAL_RCC_OscConfig+0x340>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a75      	ldr	r2, [pc, #468]	@ (8003078 <HAL_RCC_OscConfig+0x350>)
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	0019      	movs	r1, r3
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	691a      	ldr	r2, [r3, #16]
 8002eac:	4b6e      	ldr	r3, [pc, #440]	@ (8003068 <HAL_RCC_OscConfig+0x340>)
 8002eae:	430a      	orrs	r2, r1
 8002eb0:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 8002eb2:	4b6d      	ldr	r3, [pc, #436]	@ (8003068 <HAL_RCC_OscConfig+0x340>)
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	4b6c      	ldr	r3, [pc, #432]	@ (8003068 <HAL_RCC_OscConfig+0x340>)
 8002eb8:	2180      	movs	r1, #128	@ 0x80
 8002eba:	0049      	lsls	r1, r1, #1
 8002ebc:	430a      	orrs	r2, r1
 8002ebe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ec0:	f7fe fe8a 	bl	8001bd8 <HAL_GetTick>
 8002ec4:	0003      	movs	r3, r0
 8002ec6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ec8:	e008      	b.n	8002edc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002eca:	f7fe fe85 	bl	8001bd8 <HAL_GetTick>
 8002ece:	0002      	movs	r2, r0
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	1ad3      	subs	r3, r2, r3
 8002ed4:	2b02      	cmp	r3, #2
 8002ed6:	d901      	bls.n	8002edc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002ed8:	2303      	movs	r3, #3
 8002eda:	e0ff      	b.n	80030dc <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002edc:	4b62      	ldr	r3, [pc, #392]	@ (8003068 <HAL_RCC_OscConfig+0x340>)
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	2380      	movs	r3, #128	@ 0x80
 8002ee2:	00db      	lsls	r3, r3, #3
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	d0f0      	beq.n	8002eca <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ee8:	4b5f      	ldr	r3, [pc, #380]	@ (8003068 <HAL_RCC_OscConfig+0x340>)
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	4a61      	ldr	r2, [pc, #388]	@ (8003074 <HAL_RCC_OscConfig+0x34c>)
 8002eee:	4013      	ands	r3, r2
 8002ef0:	0019      	movs	r1, r3
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	695b      	ldr	r3, [r3, #20]
 8002ef6:	021a      	lsls	r2, r3, #8
 8002ef8:	4b5b      	ldr	r3, [pc, #364]	@ (8003068 <HAL_RCC_OscConfig+0x340>)
 8002efa:	430a      	orrs	r2, r1
 8002efc:	605a      	str	r2, [r3, #4]
 8002efe:	e019      	b.n	8002f34 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 8002f00:	4b59      	ldr	r3, [pc, #356]	@ (8003068 <HAL_RCC_OscConfig+0x340>)
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	4b58      	ldr	r3, [pc, #352]	@ (8003068 <HAL_RCC_OscConfig+0x340>)
 8002f06:	4960      	ldr	r1, [pc, #384]	@ (8003088 <HAL_RCC_OscConfig+0x360>)
 8002f08:	400a      	ands	r2, r1
 8002f0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f0c:	f7fe fe64 	bl	8001bd8 <HAL_GetTick>
 8002f10:	0003      	movs	r3, r0
 8002f12:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f14:	e008      	b.n	8002f28 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002f16:	f7fe fe5f 	bl	8001bd8 <HAL_GetTick>
 8002f1a:	0002      	movs	r2, r0
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	1ad3      	subs	r3, r2, r3
 8002f20:	2b02      	cmp	r3, #2
 8002f22:	d901      	bls.n	8002f28 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8002f24:	2303      	movs	r3, #3
 8002f26:	e0d9      	b.n	80030dc <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f28:	4b4f      	ldr	r3, [pc, #316]	@ (8003068 <HAL_RCC_OscConfig+0x340>)
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	2380      	movs	r3, #128	@ 0x80
 8002f2e:	00db      	lsls	r3, r3, #3
 8002f30:	4013      	ands	r3, r2
 8002f32:	d1f0      	bne.n	8002f16 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	2208      	movs	r2, #8
 8002f3a:	4013      	ands	r3, r2
 8002f3c:	d042      	beq.n	8002fc4 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8002f3e:	4b4a      	ldr	r3, [pc, #296]	@ (8003068 <HAL_RCC_OscConfig+0x340>)
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	2238      	movs	r2, #56	@ 0x38
 8002f44:	4013      	ands	r3, r2
 8002f46:	2b18      	cmp	r3, #24
 8002f48:	d105      	bne.n	8002f56 <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	699b      	ldr	r3, [r3, #24]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d138      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e0c2      	b.n	80030dc <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	699b      	ldr	r3, [r3, #24]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d019      	beq.n	8002f92 <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002f5e:	4b42      	ldr	r3, [pc, #264]	@ (8003068 <HAL_RCC_OscConfig+0x340>)
 8002f60:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002f62:	4b41      	ldr	r3, [pc, #260]	@ (8003068 <HAL_RCC_OscConfig+0x340>)
 8002f64:	2101      	movs	r1, #1
 8002f66:	430a      	orrs	r2, r1
 8002f68:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f6a:	f7fe fe35 	bl	8001bd8 <HAL_GetTick>
 8002f6e:	0003      	movs	r3, r0
 8002f70:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8002f72:	e008      	b.n	8002f86 <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8002f74:	f7fe fe30 	bl	8001bd8 <HAL_GetTick>
 8002f78:	0002      	movs	r2, r0
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	1ad3      	subs	r3, r2, r3
 8002f7e:	2b02      	cmp	r3, #2
 8002f80:	d901      	bls.n	8002f86 <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 8002f82:	2303      	movs	r3, #3
 8002f84:	e0aa      	b.n	80030dc <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8002f86:	4b38      	ldr	r3, [pc, #224]	@ (8003068 <HAL_RCC_OscConfig+0x340>)
 8002f88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f8a:	2202      	movs	r2, #2
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	d0f1      	beq.n	8002f74 <HAL_RCC_OscConfig+0x24c>
 8002f90:	e018      	b.n	8002fc4 <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002f92:	4b35      	ldr	r3, [pc, #212]	@ (8003068 <HAL_RCC_OscConfig+0x340>)
 8002f94:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002f96:	4b34      	ldr	r3, [pc, #208]	@ (8003068 <HAL_RCC_OscConfig+0x340>)
 8002f98:	2101      	movs	r1, #1
 8002f9a:	438a      	bics	r2, r1
 8002f9c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f9e:	f7fe fe1b 	bl	8001bd8 <HAL_GetTick>
 8002fa2:	0003      	movs	r3, r0
 8002fa4:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8002fa6:	e008      	b.n	8002fba <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8002fa8:	f7fe fe16 	bl	8001bd8 <HAL_GetTick>
 8002fac:	0002      	movs	r2, r0
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	2b02      	cmp	r3, #2
 8002fb4:	d901      	bls.n	8002fba <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	e090      	b.n	80030dc <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8002fba:	4b2b      	ldr	r3, [pc, #172]	@ (8003068 <HAL_RCC_OscConfig+0x340>)
 8002fbc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fbe:	2202      	movs	r2, #2
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	d1f1      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	2204      	movs	r2, #4
 8002fca:	4013      	ands	r3, r2
 8002fcc:	d100      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x2a8>
 8002fce:	e084      	b.n	80030da <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fd0:	230f      	movs	r3, #15
 8002fd2:	18fb      	adds	r3, r7, r3
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8002fd8:	4b23      	ldr	r3, [pc, #140]	@ (8003068 <HAL_RCC_OscConfig+0x340>)
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	2238      	movs	r2, #56	@ 0x38
 8002fde:	4013      	ands	r3, r2
 8002fe0:	2b20      	cmp	r3, #32
 8002fe2:	d106      	bne.n	8002ff2 <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d000      	beq.n	8002fee <HAL_RCC_OscConfig+0x2c6>
 8002fec:	e075      	b.n	80030da <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e074      	b.n	80030dc <HAL_RCC_OscConfig+0x3b4>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	d106      	bne.n	8003008 <HAL_RCC_OscConfig+0x2e0>
 8002ffa:	4b1b      	ldr	r3, [pc, #108]	@ (8003068 <HAL_RCC_OscConfig+0x340>)
 8002ffc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002ffe:	4b1a      	ldr	r3, [pc, #104]	@ (8003068 <HAL_RCC_OscConfig+0x340>)
 8003000:	2101      	movs	r1, #1
 8003002:	430a      	orrs	r2, r1
 8003004:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003006:	e01c      	b.n	8003042 <HAL_RCC_OscConfig+0x31a>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	2b05      	cmp	r3, #5
 800300e:	d10c      	bne.n	800302a <HAL_RCC_OscConfig+0x302>
 8003010:	4b15      	ldr	r3, [pc, #84]	@ (8003068 <HAL_RCC_OscConfig+0x340>)
 8003012:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003014:	4b14      	ldr	r3, [pc, #80]	@ (8003068 <HAL_RCC_OscConfig+0x340>)
 8003016:	2104      	movs	r1, #4
 8003018:	430a      	orrs	r2, r1
 800301a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800301c:	4b12      	ldr	r3, [pc, #72]	@ (8003068 <HAL_RCC_OscConfig+0x340>)
 800301e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003020:	4b11      	ldr	r3, [pc, #68]	@ (8003068 <HAL_RCC_OscConfig+0x340>)
 8003022:	2101      	movs	r1, #1
 8003024:	430a      	orrs	r2, r1
 8003026:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003028:	e00b      	b.n	8003042 <HAL_RCC_OscConfig+0x31a>
 800302a:	4b0f      	ldr	r3, [pc, #60]	@ (8003068 <HAL_RCC_OscConfig+0x340>)
 800302c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800302e:	4b0e      	ldr	r3, [pc, #56]	@ (8003068 <HAL_RCC_OscConfig+0x340>)
 8003030:	2101      	movs	r1, #1
 8003032:	438a      	bics	r2, r1
 8003034:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003036:	4b0c      	ldr	r3, [pc, #48]	@ (8003068 <HAL_RCC_OscConfig+0x340>)
 8003038:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800303a:	4b0b      	ldr	r3, [pc, #44]	@ (8003068 <HAL_RCC_OscConfig+0x340>)
 800303c:	2104      	movs	r1, #4
 800303e:	438a      	bics	r2, r1
 8003040:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d028      	beq.n	800309c <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800304a:	f7fe fdc5 	bl	8001bd8 <HAL_GetTick>
 800304e:	0003      	movs	r3, r0
 8003050:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8003052:	e01d      	b.n	8003090 <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003054:	f7fe fdc0 	bl	8001bd8 <HAL_GetTick>
 8003058:	0002      	movs	r2, r0
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	1ad3      	subs	r3, r2, r3
 800305e:	4a0b      	ldr	r2, [pc, #44]	@ (800308c <HAL_RCC_OscConfig+0x364>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d915      	bls.n	8003090 <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 8003064:	2303      	movs	r3, #3
 8003066:	e039      	b.n	80030dc <HAL_RCC_OscConfig+0x3b4>
 8003068:	40021000 	.word	0x40021000
 800306c:	fffeffff 	.word	0xfffeffff
 8003070:	fffbffff 	.word	0xfffbffff
 8003074:	ffff80ff 	.word	0xffff80ff
 8003078:	ffffc7ff 	.word	0xffffc7ff
 800307c:	02dc6c00 	.word	0x02dc6c00
 8003080:	20000000 	.word	0x20000000
 8003084:	20000004 	.word	0x20000004
 8003088:	fffffeff 	.word	0xfffffeff
 800308c:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8003090:	4b14      	ldr	r3, [pc, #80]	@ (80030e4 <HAL_RCC_OscConfig+0x3bc>)
 8003092:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003094:	2202      	movs	r2, #2
 8003096:	4013      	ands	r3, r2
 8003098:	d0dc      	beq.n	8003054 <HAL_RCC_OscConfig+0x32c>
 800309a:	e013      	b.n	80030c4 <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800309c:	f7fe fd9c 	bl	8001bd8 <HAL_GetTick>
 80030a0:	0003      	movs	r3, r0
 80030a2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 80030a4:	e009      	b.n	80030ba <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030a6:	f7fe fd97 	bl	8001bd8 <HAL_GetTick>
 80030aa:	0002      	movs	r2, r0
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	1ad3      	subs	r3, r2, r3
 80030b0:	4a0d      	ldr	r2, [pc, #52]	@ (80030e8 <HAL_RCC_OscConfig+0x3c0>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d901      	bls.n	80030ba <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 80030b6:	2303      	movs	r3, #3
 80030b8:	e010      	b.n	80030dc <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 80030ba:	4b0a      	ldr	r3, [pc, #40]	@ (80030e4 <HAL_RCC_OscConfig+0x3bc>)
 80030bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030be:	2202      	movs	r2, #2
 80030c0:	4013      	ands	r3, r2
 80030c2:	d1f0      	bne.n	80030a6 <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80030c4:	230f      	movs	r3, #15
 80030c6:	18fb      	adds	r3, r7, r3
 80030c8:	781b      	ldrb	r3, [r3, #0]
 80030ca:	2b01      	cmp	r3, #1
 80030cc:	d105      	bne.n	80030da <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80030ce:	4b05      	ldr	r3, [pc, #20]	@ (80030e4 <HAL_RCC_OscConfig+0x3bc>)
 80030d0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80030d2:	4b04      	ldr	r3, [pc, #16]	@ (80030e4 <HAL_RCC_OscConfig+0x3bc>)
 80030d4:	4905      	ldr	r1, [pc, #20]	@ (80030ec <HAL_RCC_OscConfig+0x3c4>)
 80030d6:	400a      	ands	r2, r1
 80030d8:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
  }
  return HAL_OK;
 80030da:	2300      	movs	r3, #0
}
 80030dc:	0018      	movs	r0, r3
 80030de:	46bd      	mov	sp, r7
 80030e0:	b006      	add	sp, #24
 80030e2:	bd80      	pop	{r7, pc}
 80030e4:	40021000 	.word	0x40021000
 80030e8:	00001388 	.word	0x00001388
 80030ec:	efffffff 	.word	0xefffffff

080030f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b084      	sub	sp, #16
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
 80030f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d101      	bne.n	8003104 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	e0e9      	b.n	80032d8 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003104:	4b76      	ldr	r3, [pc, #472]	@ (80032e0 <HAL_RCC_ClockConfig+0x1f0>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	2207      	movs	r2, #7
 800310a:	4013      	ands	r3, r2
 800310c:	683a      	ldr	r2, [r7, #0]
 800310e:	429a      	cmp	r2, r3
 8003110:	d91e      	bls.n	8003150 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003112:	4b73      	ldr	r3, [pc, #460]	@ (80032e0 <HAL_RCC_ClockConfig+0x1f0>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	2207      	movs	r2, #7
 8003118:	4393      	bics	r3, r2
 800311a:	0019      	movs	r1, r3
 800311c:	4b70      	ldr	r3, [pc, #448]	@ (80032e0 <HAL_RCC_ClockConfig+0x1f0>)
 800311e:	683a      	ldr	r2, [r7, #0]
 8003120:	430a      	orrs	r2, r1
 8003122:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003124:	f7fe fd58 	bl	8001bd8 <HAL_GetTick>
 8003128:	0003      	movs	r3, r0
 800312a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800312c:	e009      	b.n	8003142 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800312e:	f7fe fd53 	bl	8001bd8 <HAL_GetTick>
 8003132:	0002      	movs	r2, r0
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	1ad3      	subs	r3, r2, r3
 8003138:	4a6a      	ldr	r2, [pc, #424]	@ (80032e4 <HAL_RCC_ClockConfig+0x1f4>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d901      	bls.n	8003142 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800313e:	2303      	movs	r3, #3
 8003140:	e0ca      	b.n	80032d8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003142:	4b67      	ldr	r3, [pc, #412]	@ (80032e0 <HAL_RCC_ClockConfig+0x1f0>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	2207      	movs	r2, #7
 8003148:	4013      	ands	r3, r2
 800314a:	683a      	ldr	r2, [r7, #0]
 800314c:	429a      	cmp	r2, r3
 800314e:	d1ee      	bne.n	800312e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	2202      	movs	r2, #2
 8003156:	4013      	ands	r3, r2
 8003158:	d017      	beq.n	800318a <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	2204      	movs	r2, #4
 8003160:	4013      	ands	r3, r2
 8003162:	d008      	beq.n	8003176 <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003164:	4b60      	ldr	r3, [pc, #384]	@ (80032e8 <HAL_RCC_ClockConfig+0x1f8>)
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	4a60      	ldr	r2, [pc, #384]	@ (80032ec <HAL_RCC_ClockConfig+0x1fc>)
 800316a:	401a      	ands	r2, r3
 800316c:	4b5e      	ldr	r3, [pc, #376]	@ (80032e8 <HAL_RCC_ClockConfig+0x1f8>)
 800316e:	21b0      	movs	r1, #176	@ 0xb0
 8003170:	0109      	lsls	r1, r1, #4
 8003172:	430a      	orrs	r2, r1
 8003174:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003176:	4b5c      	ldr	r3, [pc, #368]	@ (80032e8 <HAL_RCC_ClockConfig+0x1f8>)
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	4a5d      	ldr	r2, [pc, #372]	@ (80032f0 <HAL_RCC_ClockConfig+0x200>)
 800317c:	4013      	ands	r3, r2
 800317e:	0019      	movs	r1, r3
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	68da      	ldr	r2, [r3, #12]
 8003184:	4b58      	ldr	r3, [pc, #352]	@ (80032e8 <HAL_RCC_ClockConfig+0x1f8>)
 8003186:	430a      	orrs	r2, r1
 8003188:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	2201      	movs	r2, #1
 8003190:	4013      	ands	r3, r2
 8003192:	d055      	beq.n	8003240 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 8003194:	4b54      	ldr	r3, [pc, #336]	@ (80032e8 <HAL_RCC_ClockConfig+0x1f8>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	221c      	movs	r2, #28
 800319a:	4393      	bics	r3, r2
 800319c:	0019      	movs	r1, r3
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	689a      	ldr	r2, [r3, #8]
 80031a2:	4b51      	ldr	r3, [pc, #324]	@ (80032e8 <HAL_RCC_ClockConfig+0x1f8>)
 80031a4:	430a      	orrs	r2, r1
 80031a6:	601a      	str	r2, [r3, #0]

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	d107      	bne.n	80031c0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031b0:	4b4d      	ldr	r3, [pc, #308]	@ (80032e8 <HAL_RCC_ClockConfig+0x1f8>)
 80031b2:	681a      	ldr	r2, [r3, #0]
 80031b4:	2380      	movs	r3, #128	@ 0x80
 80031b6:	029b      	lsls	r3, r3, #10
 80031b8:	4013      	ands	r3, r2
 80031ba:	d11f      	bne.n	80031fc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80031bc:	2301      	movs	r3, #1
 80031be:	e08b      	b.n	80032d8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d107      	bne.n	80031d8 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80031c8:	4b47      	ldr	r3, [pc, #284]	@ (80032e8 <HAL_RCC_ClockConfig+0x1f8>)
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	2380      	movs	r3, #128	@ 0x80
 80031ce:	00db      	lsls	r3, r3, #3
 80031d0:	4013      	ands	r3, r2
 80031d2:	d113      	bne.n	80031fc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	e07f      	b.n	80032d8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	2b03      	cmp	r3, #3
 80031de:	d106      	bne.n	80031ee <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 80031e0:	4b41      	ldr	r3, [pc, #260]	@ (80032e8 <HAL_RCC_ClockConfig+0x1f8>)
 80031e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031e4:	2202      	movs	r2, #2
 80031e6:	4013      	ands	r3, r2
 80031e8:	d108      	bne.n	80031fc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	e074      	b.n	80032d8 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80031ee:	4b3e      	ldr	r3, [pc, #248]	@ (80032e8 <HAL_RCC_ClockConfig+0x1f8>)
 80031f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031f2:	2202      	movs	r2, #2
 80031f4:	4013      	ands	r3, r2
 80031f6:	d101      	bne.n	80031fc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	e06d      	b.n	80032d8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80031fc:	4b3a      	ldr	r3, [pc, #232]	@ (80032e8 <HAL_RCC_ClockConfig+0x1f8>)
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	2207      	movs	r2, #7
 8003202:	4393      	bics	r3, r2
 8003204:	0019      	movs	r1, r3
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	685a      	ldr	r2, [r3, #4]
 800320a:	4b37      	ldr	r3, [pc, #220]	@ (80032e8 <HAL_RCC_ClockConfig+0x1f8>)
 800320c:	430a      	orrs	r2, r1
 800320e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003210:	f7fe fce2 	bl	8001bd8 <HAL_GetTick>
 8003214:	0003      	movs	r3, r0
 8003216:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003218:	e009      	b.n	800322e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800321a:	f7fe fcdd 	bl	8001bd8 <HAL_GetTick>
 800321e:	0002      	movs	r2, r0
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	1ad3      	subs	r3, r2, r3
 8003224:	4a2f      	ldr	r2, [pc, #188]	@ (80032e4 <HAL_RCC_ClockConfig+0x1f4>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d901      	bls.n	800322e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800322a:	2303      	movs	r3, #3
 800322c:	e054      	b.n	80032d8 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800322e:	4b2e      	ldr	r3, [pc, #184]	@ (80032e8 <HAL_RCC_ClockConfig+0x1f8>)
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	2238      	movs	r2, #56	@ 0x38
 8003234:	401a      	ands	r2, r3
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	00db      	lsls	r3, r3, #3
 800323c:	429a      	cmp	r2, r3
 800323e:	d1ec      	bne.n	800321a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003240:	4b27      	ldr	r3, [pc, #156]	@ (80032e0 <HAL_RCC_ClockConfig+0x1f0>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	2207      	movs	r2, #7
 8003246:	4013      	ands	r3, r2
 8003248:	683a      	ldr	r2, [r7, #0]
 800324a:	429a      	cmp	r2, r3
 800324c:	d21e      	bcs.n	800328c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800324e:	4b24      	ldr	r3, [pc, #144]	@ (80032e0 <HAL_RCC_ClockConfig+0x1f0>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	2207      	movs	r2, #7
 8003254:	4393      	bics	r3, r2
 8003256:	0019      	movs	r1, r3
 8003258:	4b21      	ldr	r3, [pc, #132]	@ (80032e0 <HAL_RCC_ClockConfig+0x1f0>)
 800325a:	683a      	ldr	r2, [r7, #0]
 800325c:	430a      	orrs	r2, r1
 800325e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003260:	f7fe fcba 	bl	8001bd8 <HAL_GetTick>
 8003264:	0003      	movs	r3, r0
 8003266:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003268:	e009      	b.n	800327e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800326a:	f7fe fcb5 	bl	8001bd8 <HAL_GetTick>
 800326e:	0002      	movs	r2, r0
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	1ad3      	subs	r3, r2, r3
 8003274:	4a1b      	ldr	r2, [pc, #108]	@ (80032e4 <HAL_RCC_ClockConfig+0x1f4>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d901      	bls.n	800327e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800327a:	2303      	movs	r3, #3
 800327c:	e02c      	b.n	80032d8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800327e:	4b18      	ldr	r3, [pc, #96]	@ (80032e0 <HAL_RCC_ClockConfig+0x1f0>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	2207      	movs	r2, #7
 8003284:	4013      	ands	r3, r2
 8003286:	683a      	ldr	r2, [r7, #0]
 8003288:	429a      	cmp	r2, r3
 800328a:	d1ee      	bne.n	800326a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	2204      	movs	r2, #4
 8003292:	4013      	ands	r3, r2
 8003294:	d009      	beq.n	80032aa <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003296:	4b14      	ldr	r3, [pc, #80]	@ (80032e8 <HAL_RCC_ClockConfig+0x1f8>)
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	4a16      	ldr	r2, [pc, #88]	@ (80032f4 <HAL_RCC_ClockConfig+0x204>)
 800329c:	4013      	ands	r3, r2
 800329e:	0019      	movs	r1, r3
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	691a      	ldr	r2, [r3, #16]
 80032a4:	4b10      	ldr	r3, [pc, #64]	@ (80032e8 <HAL_RCC_ClockConfig+0x1f8>)
 80032a6:	430a      	orrs	r2, r1
 80032a8:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80032aa:	f000 f82b 	bl	8003304 <HAL_RCC_GetSysClockFreq>
 80032ae:	0001      	movs	r1, r0
 80032b0:	4b0d      	ldr	r3, [pc, #52]	@ (80032e8 <HAL_RCC_ClockConfig+0x1f8>)
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	0a1b      	lsrs	r3, r3, #8
 80032b6:	220f      	movs	r2, #15
 80032b8:	401a      	ands	r2, r3
 80032ba:	4b0f      	ldr	r3, [pc, #60]	@ (80032f8 <HAL_RCC_ClockConfig+0x208>)
 80032bc:	0092      	lsls	r2, r2, #2
 80032be:	58d3      	ldr	r3, [r2, r3]
 80032c0:	221f      	movs	r2, #31
 80032c2:	4013      	ands	r3, r2
 80032c4:	000a      	movs	r2, r1
 80032c6:	40da      	lsrs	r2, r3
 80032c8:	4b0c      	ldr	r3, [pc, #48]	@ (80032fc <HAL_RCC_ClockConfig+0x20c>)
 80032ca:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80032cc:	4b0c      	ldr	r3, [pc, #48]	@ (8003300 <HAL_RCC_ClockConfig+0x210>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	0018      	movs	r0, r3
 80032d2:	f7fe fc25 	bl	8001b20 <HAL_InitTick>
 80032d6:	0003      	movs	r3, r0
}
 80032d8:	0018      	movs	r0, r3
 80032da:	46bd      	mov	sp, r7
 80032dc:	b004      	add	sp, #16
 80032de:	bd80      	pop	{r7, pc}
 80032e0:	40022000 	.word	0x40022000
 80032e4:	00001388 	.word	0x00001388
 80032e8:	40021000 	.word	0x40021000
 80032ec:	ffff84ff 	.word	0xffff84ff
 80032f0:	fffff0ff 	.word	0xfffff0ff
 80032f4:	ffff8fff 	.word	0xffff8fff
 80032f8:	080047a4 	.word	0x080047a4
 80032fc:	20000000 	.word	0x20000000
 8003300:	20000004 	.word	0x20000004

08003304 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b082      	sub	sp, #8
 8003308:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800330a:	4b1c      	ldr	r3, [pc, #112]	@ (800337c <HAL_RCC_GetSysClockFreq+0x78>)
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	2238      	movs	r2, #56	@ 0x38
 8003310:	4013      	ands	r3, r2
 8003312:	d10f      	bne.n	8003334 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003314:	4b19      	ldr	r3, [pc, #100]	@ (800337c <HAL_RCC_GetSysClockFreq+0x78>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	0adb      	lsrs	r3, r3, #11
 800331a:	2207      	movs	r2, #7
 800331c:	4013      	ands	r3, r2
 800331e:	2201      	movs	r2, #1
 8003320:	409a      	lsls	r2, r3
 8003322:	0013      	movs	r3, r2
 8003324:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8003326:	6839      	ldr	r1, [r7, #0]
 8003328:	4815      	ldr	r0, [pc, #84]	@ (8003380 <HAL_RCC_GetSysClockFreq+0x7c>)
 800332a:	f7fc feed 	bl	8000108 <__udivsi3>
 800332e:	0003      	movs	r3, r0
 8003330:	607b      	str	r3, [r7, #4]
 8003332:	e01e      	b.n	8003372 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003334:	4b11      	ldr	r3, [pc, #68]	@ (800337c <HAL_RCC_GetSysClockFreq+0x78>)
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	2238      	movs	r2, #56	@ 0x38
 800333a:	4013      	ands	r3, r2
 800333c:	2b08      	cmp	r3, #8
 800333e:	d102      	bne.n	8003346 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003340:	4b10      	ldr	r3, [pc, #64]	@ (8003384 <HAL_RCC_GetSysClockFreq+0x80>)
 8003342:	607b      	str	r3, [r7, #4]
 8003344:	e015      	b.n	8003372 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8003346:	4b0d      	ldr	r3, [pc, #52]	@ (800337c <HAL_RCC_GetSysClockFreq+0x78>)
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	2238      	movs	r2, #56	@ 0x38
 800334c:	4013      	ands	r3, r2
 800334e:	2b20      	cmp	r3, #32
 8003350:	d103      	bne.n	800335a <HAL_RCC_GetSysClockFreq+0x56>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8003352:	2380      	movs	r3, #128	@ 0x80
 8003354:	021b      	lsls	r3, r3, #8
 8003356:	607b      	str	r3, [r7, #4]
 8003358:	e00b      	b.n	8003372 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 800335a:	4b08      	ldr	r3, [pc, #32]	@ (800337c <HAL_RCC_GetSysClockFreq+0x78>)
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	2238      	movs	r2, #56	@ 0x38
 8003360:	4013      	ands	r3, r2
 8003362:	2b18      	cmp	r3, #24
 8003364:	d103      	bne.n	800336e <HAL_RCC_GetSysClockFreq+0x6a>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8003366:	23fa      	movs	r3, #250	@ 0xfa
 8003368:	01db      	lsls	r3, r3, #7
 800336a:	607b      	str	r3, [r7, #4]
 800336c:	e001      	b.n	8003372 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else
  {
    sysclockfreq = 0U;
 800336e:	2300      	movs	r3, #0
 8003370:	607b      	str	r3, [r7, #4]
  }

  return sysclockfreq;
 8003372:	687b      	ldr	r3, [r7, #4]
}
 8003374:	0018      	movs	r0, r3
 8003376:	46bd      	mov	sp, r7
 8003378:	b002      	add	sp, #8
 800337a:	bd80      	pop	{r7, pc}
 800337c:	40021000 	.word	0x40021000
 8003380:	02dc6c00 	.word	0x02dc6c00
 8003384:	00f42400 	.word	0x00f42400

08003388 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800338c:	4b02      	ldr	r3, [pc, #8]	@ (8003398 <HAL_RCC_GetHCLKFreq+0x10>)
 800338e:	681b      	ldr	r3, [r3, #0]
}
 8003390:	0018      	movs	r0, r3
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}
 8003396:	46c0      	nop			@ (mov r8, r8)
 8003398:	20000000 	.word	0x20000000

0800339c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 80033a0:	f7ff fff2 	bl	8003388 <HAL_RCC_GetHCLKFreq>
 80033a4:	0001      	movs	r1, r0
 80033a6:	4b07      	ldr	r3, [pc, #28]	@ (80033c4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	0b1b      	lsrs	r3, r3, #12
 80033ac:	2207      	movs	r2, #7
 80033ae:	401a      	ands	r2, r3
 80033b0:	4b05      	ldr	r3, [pc, #20]	@ (80033c8 <HAL_RCC_GetPCLK1Freq+0x2c>)
 80033b2:	0092      	lsls	r2, r2, #2
 80033b4:	58d3      	ldr	r3, [r2, r3]
 80033b6:	221f      	movs	r2, #31
 80033b8:	4013      	ands	r3, r2
 80033ba:	40d9      	lsrs	r1, r3
 80033bc:	000b      	movs	r3, r1
}
 80033be:	0018      	movs	r0, r3
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bd80      	pop	{r7, pc}
 80033c4:	40021000 	.word	0x40021000
 80033c8:	080047e4 	.word	0x080047e4

080033cc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to RTC domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b086      	sub	sp, #24
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80033d4:	2313      	movs	r3, #19
 80033d6:	18fb      	adds	r3, r7, r3
 80033d8:	2200      	movs	r2, #0
 80033da:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80033dc:	2312      	movs	r3, #18
 80033de:	18fb      	adds	r3, r7, r3
 80033e0:	2200      	movs	r2, #0
 80033e2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	2380      	movs	r3, #128	@ 0x80
 80033ea:	029b      	lsls	r3, r3, #10
 80033ec:	4013      	ands	r3, r2
 80033ee:	d100      	bne.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x26>
 80033f0:	e079      	b.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0x11a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033f2:	2011      	movs	r0, #17
 80033f4:	183b      	adds	r3, r7, r0
 80033f6:	2200      	movs	r2, #0
 80033f8:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033fa:	4b64      	ldr	r3, [pc, #400]	@ (800358c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80033fc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80033fe:	2380      	movs	r3, #128	@ 0x80
 8003400:	055b      	lsls	r3, r3, #21
 8003402:	4013      	ands	r3, r2
 8003404:	d110      	bne.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003406:	4b61      	ldr	r3, [pc, #388]	@ (800358c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003408:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800340a:	4b60      	ldr	r3, [pc, #384]	@ (800358c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800340c:	2180      	movs	r1, #128	@ 0x80
 800340e:	0549      	lsls	r1, r1, #21
 8003410:	430a      	orrs	r2, r1
 8003412:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003414:	4b5d      	ldr	r3, [pc, #372]	@ (800358c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003416:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003418:	2380      	movs	r3, #128	@ 0x80
 800341a:	055b      	lsls	r3, r3, #21
 800341c:	4013      	ands	r3, r2
 800341e:	60bb      	str	r3, [r7, #8]
 8003420:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003422:	183b      	adds	r3, r7, r0
 8003424:	2201      	movs	r2, #1
 8003426:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 8003428:	4b58      	ldr	r3, [pc, #352]	@ (800358c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800342a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800342c:	23c0      	movs	r3, #192	@ 0xc0
 800342e:	009b      	lsls	r3, r3, #2
 8003430:	4013      	ands	r3, r2
 8003432:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d019      	beq.n	800346e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	699b      	ldr	r3, [r3, #24]
 800343e:	697a      	ldr	r2, [r7, #20]
 8003440:	429a      	cmp	r2, r3
 8003442:	d014      	beq.n	800346e <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 8003444:	4b51      	ldr	r3, [pc, #324]	@ (800358c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003446:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003448:	4a51      	ldr	r2, [pc, #324]	@ (8003590 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800344a:	4013      	ands	r3, r2
 800344c:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800344e:	4b4f      	ldr	r3, [pc, #316]	@ (800358c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003450:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003452:	4b4e      	ldr	r3, [pc, #312]	@ (800358c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003454:	2180      	movs	r1, #128	@ 0x80
 8003456:	0249      	lsls	r1, r1, #9
 8003458:	430a      	orrs	r2, r1
 800345a:	65da      	str	r2, [r3, #92]	@ 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 800345c:	4b4b      	ldr	r3, [pc, #300]	@ (800358c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800345e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003460:	4b4a      	ldr	r3, [pc, #296]	@ (800358c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003462:	494c      	ldr	r1, [pc, #304]	@ (8003594 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8003464:	400a      	ands	r2, r1
 8003466:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 8003468:	4b48      	ldr	r3, [pc, #288]	@ (800358c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800346a:	697a      	ldr	r2, [r7, #20]
 800346c:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	2201      	movs	r2, #1
 8003472:	4013      	ands	r3, r2
 8003474:	d016      	beq.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003476:	f7fe fbaf 	bl	8001bd8 <HAL_GetTick>
 800347a:	0003      	movs	r3, r0
 800347c:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800347e:	e00c      	b.n	800349a <HAL_RCCEx_PeriphCLKConfig+0xce>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003480:	f7fe fbaa 	bl	8001bd8 <HAL_GetTick>
 8003484:	0002      	movs	r2, r0
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	1ad3      	subs	r3, r2, r3
 800348a:	4a43      	ldr	r2, [pc, #268]	@ (8003598 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d904      	bls.n	800349a <HAL_RCCEx_PeriphCLKConfig+0xce>
        {
          ret = HAL_TIMEOUT;
 8003490:	2313      	movs	r3, #19
 8003492:	18fb      	adds	r3, r7, r3
 8003494:	2203      	movs	r2, #3
 8003496:	701a      	strb	r2, [r3, #0]
          break;
 8003498:	e004      	b.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800349a:	4b3c      	ldr	r3, [pc, #240]	@ (800358c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800349c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800349e:	2202      	movs	r2, #2
 80034a0:	4013      	ands	r3, r2
 80034a2:	d0ed      	beq.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0xb4>
        }
      }
    }

    if (ret == HAL_OK)
 80034a4:	2313      	movs	r3, #19
 80034a6:	18fb      	adds	r3, r7, r3
 80034a8:	781b      	ldrb	r3, [r3, #0]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d10a      	bne.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80034ae:	4b37      	ldr	r3, [pc, #220]	@ (800358c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80034b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034b2:	4a37      	ldr	r2, [pc, #220]	@ (8003590 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80034b4:	4013      	ands	r3, r2
 80034b6:	0019      	movs	r1, r3
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	699a      	ldr	r2, [r3, #24]
 80034bc:	4b33      	ldr	r3, [pc, #204]	@ (800358c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80034be:	430a      	orrs	r2, r1
 80034c0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80034c2:	e005      	b.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x104>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034c4:	2312      	movs	r3, #18
 80034c6:	18fb      	adds	r3, r7, r3
 80034c8:	2213      	movs	r2, #19
 80034ca:	18ba      	adds	r2, r7, r2
 80034cc:	7812      	ldrb	r2, [r2, #0]
 80034ce:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80034d0:	2311      	movs	r3, #17
 80034d2:	18fb      	adds	r3, r7, r3
 80034d4:	781b      	ldrb	r3, [r3, #0]
 80034d6:	2b01      	cmp	r3, #1
 80034d8:	d105      	bne.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034da:	4b2c      	ldr	r3, [pc, #176]	@ (800358c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80034dc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80034de:	4b2b      	ldr	r3, [pc, #172]	@ (800358c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80034e0:	492e      	ldr	r1, [pc, #184]	@ (800359c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034e2:	400a      	ands	r2, r1
 80034e4:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	2201      	movs	r2, #1
 80034ec:	4013      	ands	r3, r2
 80034ee:	d009      	beq.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x138>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80034f0:	4b26      	ldr	r3, [pc, #152]	@ (800358c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80034f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034f4:	2203      	movs	r2, #3
 80034f6:	4393      	bics	r3, r2
 80034f8:	0019      	movs	r1, r3
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	689a      	ldr	r2, [r3, #8]
 80034fe:	4b23      	ldr	r3, [pc, #140]	@ (800358c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003500:	430a      	orrs	r2, r1
 8003502:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	2240      	movs	r2, #64	@ 0x40
 800350a:	4013      	ands	r3, r2
 800350c:	d009      	beq.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800350e:	4b1f      	ldr	r3, [pc, #124]	@ (800358c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003510:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003512:	4a23      	ldr	r2, [pc, #140]	@ (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003514:	4013      	ands	r3, r2
 8003516:	0019      	movs	r1, r3
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	68da      	ldr	r2, [r3, #12]
 800351c:	4b1b      	ldr	r3, [pc, #108]	@ (800358c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800351e:	430a      	orrs	r2, r1
 8003520:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	2380      	movs	r3, #128	@ 0x80
 8003528:	01db      	lsls	r3, r3, #7
 800352a:	4013      	ands	r3, r2
 800352c:	d008      	beq.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x174>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800352e:	4b17      	ldr	r3, [pc, #92]	@ (800358c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003530:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	0899      	lsrs	r1, r3, #2
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	695a      	ldr	r2, [r3, #20]
 800353a:	4b14      	ldr	r3, [pc, #80]	@ (800358c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800353c:	430a      	orrs	r2, r1
 800353e:	655a      	str	r2, [r3, #84]	@ 0x54

  }

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	2380      	movs	r3, #128	@ 0x80
 8003546:	011b      	lsls	r3, r3, #4
 8003548:	4013      	ands	r3, r2
 800354a:	d009      	beq.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x194>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800354c:	4b0f      	ldr	r3, [pc, #60]	@ (800358c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800354e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003550:	4a14      	ldr	r2, [pc, #80]	@ (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003552:	4013      	ands	r3, r2
 8003554:	0019      	movs	r1, r3
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	691a      	ldr	r2, [r3, #16]
 800355a:	4b0c      	ldr	r3, [pc, #48]	@ (800358c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800355c:	430a      	orrs	r2, r1
 800355e:	655a      	str	r2, [r3, #84]	@ 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	2b00      	cmp	r3, #0
 8003566:	da09      	bge.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x1b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 8003568:	4b08      	ldr	r3, [pc, #32]	@ (800358c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	22e0      	movs	r2, #224	@ 0xe0
 800356e:	4393      	bics	r3, r2
 8003570:	0019      	movs	r1, r3
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	685a      	ldr	r2, [r3, #4]
 8003576:	4b05      	ldr	r3, [pc, #20]	@ (800358c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003578:	430a      	orrs	r2, r1
 800357a:	601a      	str	r2, [r3, #0]
  }
  return status;
 800357c:	2312      	movs	r3, #18
 800357e:	18fb      	adds	r3, r7, r3
 8003580:	781b      	ldrb	r3, [r3, #0]
}
 8003582:	0018      	movs	r0, r3
 8003584:	46bd      	mov	sp, r7
 8003586:	b006      	add	sp, #24
 8003588:	bd80      	pop	{r7, pc}
 800358a:	46c0      	nop			@ (mov r8, r8)
 800358c:	40021000 	.word	0x40021000
 8003590:	fffffcff 	.word	0xfffffcff
 8003594:	fffeffff 	.word	0xfffeffff
 8003598:	00001388 	.word	0x00001388
 800359c:	efffffff 	.word	0xefffffff
 80035a0:	ffffcfff 	.word	0xffffcfff
 80035a4:	ffff3fff 	.word	0xffff3fff

080035a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b082      	sub	sp, #8
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d101      	bne.n	80035ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	e04a      	b.n	8003650 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	223d      	movs	r2, #61	@ 0x3d
 80035be:	5c9b      	ldrb	r3, [r3, r2]
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d107      	bne.n	80035d6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	223c      	movs	r2, #60	@ 0x3c
 80035ca:	2100      	movs	r1, #0
 80035cc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	0018      	movs	r0, r3
 80035d2:	f7fe f9c3 	bl	800195c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	223d      	movs	r2, #61	@ 0x3d
 80035da:	2102      	movs	r1, #2
 80035dc:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681a      	ldr	r2, [r3, #0]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	3304      	adds	r3, #4
 80035e6:	0019      	movs	r1, r3
 80035e8:	0010      	movs	r0, r2
 80035ea:	f000 fa7b 	bl	8003ae4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2248      	movs	r2, #72	@ 0x48
 80035f2:	2101      	movs	r1, #1
 80035f4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	223e      	movs	r2, #62	@ 0x3e
 80035fa:	2101      	movs	r1, #1
 80035fc:	5499      	strb	r1, [r3, r2]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	223f      	movs	r2, #63	@ 0x3f
 8003602:	2101      	movs	r1, #1
 8003604:	5499      	strb	r1, [r3, r2]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2240      	movs	r2, #64	@ 0x40
 800360a:	2101      	movs	r1, #1
 800360c:	5499      	strb	r1, [r3, r2]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2241      	movs	r2, #65	@ 0x41
 8003612:	2101      	movs	r1, #1
 8003614:	5499      	strb	r1, [r3, r2]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2242      	movs	r2, #66	@ 0x42
 800361a:	2101      	movs	r1, #1
 800361c:	5499      	strb	r1, [r3, r2]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2243      	movs	r2, #67	@ 0x43
 8003622:	2101      	movs	r1, #1
 8003624:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2244      	movs	r2, #68	@ 0x44
 800362a:	2101      	movs	r1, #1
 800362c:	5499      	strb	r1, [r3, r2]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2245      	movs	r2, #69	@ 0x45
 8003632:	2101      	movs	r1, #1
 8003634:	5499      	strb	r1, [r3, r2]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2246      	movs	r2, #70	@ 0x46
 800363a:	2101      	movs	r1, #1
 800363c:	5499      	strb	r1, [r3, r2]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2247      	movs	r2, #71	@ 0x47
 8003642:	2101      	movs	r1, #1
 8003644:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	223d      	movs	r2, #61	@ 0x3d
 800364a:	2101      	movs	r1, #1
 800364c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800364e:	2300      	movs	r3, #0
}
 8003650:	0018      	movs	r0, r3
 8003652:	46bd      	mov	sp, r7
 8003654:	b002      	add	sp, #8
 8003656:	bd80      	pop	{r7, pc}

08003658 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b084      	sub	sp, #16
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	223d      	movs	r2, #61	@ 0x3d
 8003664:	5c9b      	ldrb	r3, [r3, r2]
 8003666:	b2db      	uxtb	r3, r3
 8003668:	2b01      	cmp	r3, #1
 800366a:	d001      	beq.n	8003670 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800366c:	2301      	movs	r3, #1
 800366e:	e037      	b.n	80036e0 <HAL_TIM_Base_Start_IT+0x88>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	223d      	movs	r2, #61	@ 0x3d
 8003674:	2102      	movs	r1, #2
 8003676:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	68da      	ldr	r2, [r3, #12]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	2101      	movs	r1, #1
 8003684:	430a      	orrs	r2, r1
 8003686:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a16      	ldr	r2, [pc, #88]	@ (80036e8 <HAL_TIM_Base_Start_IT+0x90>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d004      	beq.n	800369c <HAL_TIM_Base_Start_IT+0x44>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a15      	ldr	r2, [pc, #84]	@ (80036ec <HAL_TIM_Base_Start_IT+0x94>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d116      	bne.n	80036ca <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	4a13      	ldr	r2, [pc, #76]	@ (80036f0 <HAL_TIM_Base_Start_IT+0x98>)
 80036a4:	4013      	ands	r3, r2
 80036a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2b06      	cmp	r3, #6
 80036ac:	d016      	beq.n	80036dc <HAL_TIM_Base_Start_IT+0x84>
 80036ae:	68fa      	ldr	r2, [r7, #12]
 80036b0:	2380      	movs	r3, #128	@ 0x80
 80036b2:	025b      	lsls	r3, r3, #9
 80036b4:	429a      	cmp	r2, r3
 80036b6:	d011      	beq.n	80036dc <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	2101      	movs	r1, #1
 80036c4:	430a      	orrs	r2, r1
 80036c6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036c8:	e008      	b.n	80036dc <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	2101      	movs	r1, #1
 80036d6:	430a      	orrs	r2, r1
 80036d8:	601a      	str	r2, [r3, #0]
 80036da:	e000      	b.n	80036de <HAL_TIM_Base_Start_IT+0x86>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036dc:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80036de:	2300      	movs	r3, #0
}
 80036e0:	0018      	movs	r0, r3
 80036e2:	46bd      	mov	sp, r7
 80036e4:	b004      	add	sp, #16
 80036e6:	bd80      	pop	{r7, pc}
 80036e8:	40012c00 	.word	0x40012c00
 80036ec:	40000400 	.word	0x40000400
 80036f0:	00010007 	.word	0x00010007

080036f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b084      	sub	sp, #16
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	68db      	ldr	r3, [r3, #12]
 8003702:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	691b      	ldr	r3, [r3, #16]
 800370a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	2202      	movs	r2, #2
 8003710:	4013      	ands	r3, r2
 8003712:	d021      	beq.n	8003758 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2202      	movs	r2, #2
 8003718:	4013      	ands	r3, r2
 800371a:	d01d      	beq.n	8003758 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	2203      	movs	r2, #3
 8003722:	4252      	negs	r2, r2
 8003724:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2201      	movs	r2, #1
 800372a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	699b      	ldr	r3, [r3, #24]
 8003732:	2203      	movs	r2, #3
 8003734:	4013      	ands	r3, r2
 8003736:	d004      	beq.n	8003742 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	0018      	movs	r0, r3
 800373c:	f000 f9ba 	bl	8003ab4 <HAL_TIM_IC_CaptureCallback>
 8003740:	e007      	b.n	8003752 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	0018      	movs	r0, r3
 8003746:	f000 f9ad 	bl	8003aa4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	0018      	movs	r0, r3
 800374e:	f000 f9b9 	bl	8003ac4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2200      	movs	r2, #0
 8003756:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	2204      	movs	r2, #4
 800375c:	4013      	ands	r3, r2
 800375e:	d022      	beq.n	80037a6 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2204      	movs	r2, #4
 8003764:	4013      	ands	r3, r2
 8003766:	d01e      	beq.n	80037a6 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	2205      	movs	r2, #5
 800376e:	4252      	negs	r2, r2
 8003770:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2202      	movs	r2, #2
 8003776:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	699a      	ldr	r2, [r3, #24]
 800377e:	23c0      	movs	r3, #192	@ 0xc0
 8003780:	009b      	lsls	r3, r3, #2
 8003782:	4013      	ands	r3, r2
 8003784:	d004      	beq.n	8003790 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	0018      	movs	r0, r3
 800378a:	f000 f993 	bl	8003ab4 <HAL_TIM_IC_CaptureCallback>
 800378e:	e007      	b.n	80037a0 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	0018      	movs	r0, r3
 8003794:	f000 f986 	bl	8003aa4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	0018      	movs	r0, r3
 800379c:	f000 f992 	bl	8003ac4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2200      	movs	r2, #0
 80037a4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	2208      	movs	r2, #8
 80037aa:	4013      	ands	r3, r2
 80037ac:	d021      	beq.n	80037f2 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2208      	movs	r2, #8
 80037b2:	4013      	ands	r3, r2
 80037b4:	d01d      	beq.n	80037f2 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	2209      	movs	r2, #9
 80037bc:	4252      	negs	r2, r2
 80037be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2204      	movs	r2, #4
 80037c4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	69db      	ldr	r3, [r3, #28]
 80037cc:	2203      	movs	r2, #3
 80037ce:	4013      	ands	r3, r2
 80037d0:	d004      	beq.n	80037dc <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	0018      	movs	r0, r3
 80037d6:	f000 f96d 	bl	8003ab4 <HAL_TIM_IC_CaptureCallback>
 80037da:	e007      	b.n	80037ec <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	0018      	movs	r0, r3
 80037e0:	f000 f960 	bl	8003aa4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	0018      	movs	r0, r3
 80037e8:	f000 f96c 	bl	8003ac4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2200      	movs	r2, #0
 80037f0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	2210      	movs	r2, #16
 80037f6:	4013      	ands	r3, r2
 80037f8:	d022      	beq.n	8003840 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	2210      	movs	r2, #16
 80037fe:	4013      	ands	r3, r2
 8003800:	d01e      	beq.n	8003840 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	2211      	movs	r2, #17
 8003808:	4252      	negs	r2, r2
 800380a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2208      	movs	r2, #8
 8003810:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	69da      	ldr	r2, [r3, #28]
 8003818:	23c0      	movs	r3, #192	@ 0xc0
 800381a:	009b      	lsls	r3, r3, #2
 800381c:	4013      	ands	r3, r2
 800381e:	d004      	beq.n	800382a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	0018      	movs	r0, r3
 8003824:	f000 f946 	bl	8003ab4 <HAL_TIM_IC_CaptureCallback>
 8003828:	e007      	b.n	800383a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	0018      	movs	r0, r3
 800382e:	f000 f939 	bl	8003aa4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	0018      	movs	r0, r3
 8003836:	f000 f945 	bl	8003ac4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2200      	movs	r2, #0
 800383e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	2201      	movs	r2, #1
 8003844:	4013      	ands	r3, r2
 8003846:	d00c      	beq.n	8003862 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2201      	movs	r2, #1
 800384c:	4013      	ands	r3, r2
 800384e:	d008      	beq.n	8003862 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	2202      	movs	r2, #2
 8003856:	4252      	negs	r2, r2
 8003858:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	0018      	movs	r0, r3
 800385e:	f7fd fc95 	bl	800118c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	2280      	movs	r2, #128	@ 0x80
 8003866:	4013      	ands	r3, r2
 8003868:	d00c      	beq.n	8003884 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2280      	movs	r2, #128	@ 0x80
 800386e:	4013      	ands	r3, r2
 8003870:	d008      	beq.n	8003884 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	2281      	movs	r2, #129	@ 0x81
 8003878:	4252      	negs	r2, r2
 800387a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	0018      	movs	r0, r3
 8003880:	f000 faa2 	bl	8003dc8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003884:	68ba      	ldr	r2, [r7, #8]
 8003886:	2380      	movs	r3, #128	@ 0x80
 8003888:	005b      	lsls	r3, r3, #1
 800388a:	4013      	ands	r3, r2
 800388c:	d00b      	beq.n	80038a6 <HAL_TIM_IRQHandler+0x1b2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2280      	movs	r2, #128	@ 0x80
 8003892:	4013      	ands	r3, r2
 8003894:	d007      	beq.n	80038a6 <HAL_TIM_IRQHandler+0x1b2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a16      	ldr	r2, [pc, #88]	@ (80038f4 <HAL_TIM_IRQHandler+0x200>)
 800389c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	0018      	movs	r0, r3
 80038a2:	f000 fa99 	bl	8003dd8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	2240      	movs	r2, #64	@ 0x40
 80038aa:	4013      	ands	r3, r2
 80038ac:	d00c      	beq.n	80038c8 <HAL_TIM_IRQHandler+0x1d4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2240      	movs	r2, #64	@ 0x40
 80038b2:	4013      	ands	r3, r2
 80038b4:	d008      	beq.n	80038c8 <HAL_TIM_IRQHandler+0x1d4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	2241      	movs	r2, #65	@ 0x41
 80038bc:	4252      	negs	r2, r2
 80038be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	0018      	movs	r0, r3
 80038c4:	f000 f906 	bl	8003ad4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	2220      	movs	r2, #32
 80038cc:	4013      	ands	r3, r2
 80038ce:	d00c      	beq.n	80038ea <HAL_TIM_IRQHandler+0x1f6>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2220      	movs	r2, #32
 80038d4:	4013      	ands	r3, r2
 80038d6:	d008      	beq.n	80038ea <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	2221      	movs	r2, #33	@ 0x21
 80038de:	4252      	negs	r2, r2
 80038e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	0018      	movs	r0, r3
 80038e6:	f000 fa67 	bl	8003db8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80038ea:	46c0      	nop			@ (mov r8, r8)
 80038ec:	46bd      	mov	sp, r7
 80038ee:	b004      	add	sp, #16
 80038f0:	bd80      	pop	{r7, pc}
 80038f2:	46c0      	nop			@ (mov r8, r8)
 80038f4:	fffffeff 	.word	0xfffffeff

080038f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b084      	sub	sp, #16
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
 8003900:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003902:	230f      	movs	r3, #15
 8003904:	18fb      	adds	r3, r7, r3
 8003906:	2200      	movs	r2, #0
 8003908:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	223c      	movs	r2, #60	@ 0x3c
 800390e:	5c9b      	ldrb	r3, [r3, r2]
 8003910:	2b01      	cmp	r3, #1
 8003912:	d101      	bne.n	8003918 <HAL_TIM_ConfigClockSource+0x20>
 8003914:	2302      	movs	r3, #2
 8003916:	e0bc      	b.n	8003a92 <HAL_TIM_ConfigClockSource+0x19a>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	223c      	movs	r2, #60	@ 0x3c
 800391c:	2101      	movs	r1, #1
 800391e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	223d      	movs	r2, #61	@ 0x3d
 8003924:	2102      	movs	r1, #2
 8003926:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	4a5a      	ldr	r2, [pc, #360]	@ (8003a9c <HAL_TIM_ConfigClockSource+0x1a4>)
 8003934:	4013      	ands	r3, r2
 8003936:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	4a59      	ldr	r2, [pc, #356]	@ (8003aa0 <HAL_TIM_ConfigClockSource+0x1a8>)
 800393c:	4013      	ands	r3, r2
 800393e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	68ba      	ldr	r2, [r7, #8]
 8003946:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	2280      	movs	r2, #128	@ 0x80
 800394e:	0192      	lsls	r2, r2, #6
 8003950:	4293      	cmp	r3, r2
 8003952:	d040      	beq.n	80039d6 <HAL_TIM_ConfigClockSource+0xde>
 8003954:	2280      	movs	r2, #128	@ 0x80
 8003956:	0192      	lsls	r2, r2, #6
 8003958:	4293      	cmp	r3, r2
 800395a:	d900      	bls.n	800395e <HAL_TIM_ConfigClockSource+0x66>
 800395c:	e088      	b.n	8003a70 <HAL_TIM_ConfigClockSource+0x178>
 800395e:	2280      	movs	r2, #128	@ 0x80
 8003960:	0152      	lsls	r2, r2, #5
 8003962:	4293      	cmp	r3, r2
 8003964:	d100      	bne.n	8003968 <HAL_TIM_ConfigClockSource+0x70>
 8003966:	e088      	b.n	8003a7a <HAL_TIM_ConfigClockSource+0x182>
 8003968:	2280      	movs	r2, #128	@ 0x80
 800396a:	0152      	lsls	r2, r2, #5
 800396c:	4293      	cmp	r3, r2
 800396e:	d900      	bls.n	8003972 <HAL_TIM_ConfigClockSource+0x7a>
 8003970:	e07e      	b.n	8003a70 <HAL_TIM_ConfigClockSource+0x178>
 8003972:	2b70      	cmp	r3, #112	@ 0x70
 8003974:	d018      	beq.n	80039a8 <HAL_TIM_ConfigClockSource+0xb0>
 8003976:	d900      	bls.n	800397a <HAL_TIM_ConfigClockSource+0x82>
 8003978:	e07a      	b.n	8003a70 <HAL_TIM_ConfigClockSource+0x178>
 800397a:	2b60      	cmp	r3, #96	@ 0x60
 800397c:	d04f      	beq.n	8003a1e <HAL_TIM_ConfigClockSource+0x126>
 800397e:	d900      	bls.n	8003982 <HAL_TIM_ConfigClockSource+0x8a>
 8003980:	e076      	b.n	8003a70 <HAL_TIM_ConfigClockSource+0x178>
 8003982:	2b50      	cmp	r3, #80	@ 0x50
 8003984:	d03b      	beq.n	80039fe <HAL_TIM_ConfigClockSource+0x106>
 8003986:	d900      	bls.n	800398a <HAL_TIM_ConfigClockSource+0x92>
 8003988:	e072      	b.n	8003a70 <HAL_TIM_ConfigClockSource+0x178>
 800398a:	2b40      	cmp	r3, #64	@ 0x40
 800398c:	d057      	beq.n	8003a3e <HAL_TIM_ConfigClockSource+0x146>
 800398e:	d900      	bls.n	8003992 <HAL_TIM_ConfigClockSource+0x9a>
 8003990:	e06e      	b.n	8003a70 <HAL_TIM_ConfigClockSource+0x178>
 8003992:	2b30      	cmp	r3, #48	@ 0x30
 8003994:	d063      	beq.n	8003a5e <HAL_TIM_ConfigClockSource+0x166>
 8003996:	d86b      	bhi.n	8003a70 <HAL_TIM_ConfigClockSource+0x178>
 8003998:	2b20      	cmp	r3, #32
 800399a:	d060      	beq.n	8003a5e <HAL_TIM_ConfigClockSource+0x166>
 800399c:	d868      	bhi.n	8003a70 <HAL_TIM_ConfigClockSource+0x178>
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d05d      	beq.n	8003a5e <HAL_TIM_ConfigClockSource+0x166>
 80039a2:	2b10      	cmp	r3, #16
 80039a4:	d05b      	beq.n	8003a5e <HAL_TIM_ConfigClockSource+0x166>
 80039a6:	e063      	b.n	8003a70 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80039b8:	f000 f97c 	bl	8003cb4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	2277      	movs	r2, #119	@ 0x77
 80039c8:	4313      	orrs	r3, r2
 80039ca:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	68ba      	ldr	r2, [r7, #8]
 80039d2:	609a      	str	r2, [r3, #8]
      break;
 80039d4:	e052      	b.n	8003a7c <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80039e6:	f000 f965 	bl	8003cb4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	689a      	ldr	r2, [r3, #8]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	2180      	movs	r1, #128	@ 0x80
 80039f6:	01c9      	lsls	r1, r1, #7
 80039f8:	430a      	orrs	r2, r1
 80039fa:	609a      	str	r2, [r3, #8]
      break;
 80039fc:	e03e      	b.n	8003a7c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a0a:	001a      	movs	r2, r3
 8003a0c:	f000 f8d6 	bl	8003bbc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	2150      	movs	r1, #80	@ 0x50
 8003a16:	0018      	movs	r0, r3
 8003a18:	f000 f930 	bl	8003c7c <TIM_ITRx_SetConfig>
      break;
 8003a1c:	e02e      	b.n	8003a7c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a2a:	001a      	movs	r2, r3
 8003a2c:	f000 f8f4 	bl	8003c18 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	2160      	movs	r1, #96	@ 0x60
 8003a36:	0018      	movs	r0, r3
 8003a38:	f000 f920 	bl	8003c7c <TIM_ITRx_SetConfig>
      break;
 8003a3c:	e01e      	b.n	8003a7c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a4a:	001a      	movs	r2, r3
 8003a4c:	f000 f8b6 	bl	8003bbc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	2140      	movs	r1, #64	@ 0x40
 8003a56:	0018      	movs	r0, r3
 8003a58:	f000 f910 	bl	8003c7c <TIM_ITRx_SetConfig>
      break;
 8003a5c:	e00e      	b.n	8003a7c <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681a      	ldr	r2, [r3, #0]
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	0019      	movs	r1, r3
 8003a68:	0010      	movs	r0, r2
 8003a6a:	f000 f907 	bl	8003c7c <TIM_ITRx_SetConfig>
      break;
 8003a6e:	e005      	b.n	8003a7c <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8003a70:	230f      	movs	r3, #15
 8003a72:	18fb      	adds	r3, r7, r3
 8003a74:	2201      	movs	r2, #1
 8003a76:	701a      	strb	r2, [r3, #0]
      break;
 8003a78:	e000      	b.n	8003a7c <HAL_TIM_ConfigClockSource+0x184>
      break;
 8003a7a:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	223d      	movs	r2, #61	@ 0x3d
 8003a80:	2101      	movs	r1, #1
 8003a82:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	223c      	movs	r2, #60	@ 0x3c
 8003a88:	2100      	movs	r1, #0
 8003a8a:	5499      	strb	r1, [r3, r2]

  return status;
 8003a8c:	230f      	movs	r3, #15
 8003a8e:	18fb      	adds	r3, r7, r3
 8003a90:	781b      	ldrb	r3, [r3, #0]
}
 8003a92:	0018      	movs	r0, r3
 8003a94:	46bd      	mov	sp, r7
 8003a96:	b004      	add	sp, #16
 8003a98:	bd80      	pop	{r7, pc}
 8003a9a:	46c0      	nop			@ (mov r8, r8)
 8003a9c:	ffceff88 	.word	0xffceff88
 8003aa0:	ffff00ff 	.word	0xffff00ff

08003aa4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b082      	sub	sp, #8
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003aac:	46c0      	nop			@ (mov r8, r8)
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	b002      	add	sp, #8
 8003ab2:	bd80      	pop	{r7, pc}

08003ab4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b082      	sub	sp, #8
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003abc:	46c0      	nop			@ (mov r8, r8)
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	b002      	add	sp, #8
 8003ac2:	bd80      	pop	{r7, pc}

08003ac4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b082      	sub	sp, #8
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003acc:	46c0      	nop			@ (mov r8, r8)
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	b002      	add	sp, #8
 8003ad2:	bd80      	pop	{r7, pc}

08003ad4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b082      	sub	sp, #8
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003adc:	46c0      	nop			@ (mov r8, r8)
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	b002      	add	sp, #8
 8003ae2:	bd80      	pop	{r7, pc}

08003ae4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b084      	sub	sp, #16
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
 8003aec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	4a2b      	ldr	r2, [pc, #172]	@ (8003ba4 <TIM_Base_SetConfig+0xc0>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d003      	beq.n	8003b04 <TIM_Base_SetConfig+0x20>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	4a2a      	ldr	r2, [pc, #168]	@ (8003ba8 <TIM_Base_SetConfig+0xc4>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d108      	bne.n	8003b16 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2270      	movs	r2, #112	@ 0x70
 8003b08:	4393      	bics	r3, r2
 8003b0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	68fa      	ldr	r2, [r7, #12]
 8003b12:	4313      	orrs	r3, r2
 8003b14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	4a22      	ldr	r2, [pc, #136]	@ (8003ba4 <TIM_Base_SetConfig+0xc0>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d00f      	beq.n	8003b3e <TIM_Base_SetConfig+0x5a>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	4a21      	ldr	r2, [pc, #132]	@ (8003ba8 <TIM_Base_SetConfig+0xc4>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d00b      	beq.n	8003b3e <TIM_Base_SetConfig+0x5a>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	4a20      	ldr	r2, [pc, #128]	@ (8003bac <TIM_Base_SetConfig+0xc8>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d007      	beq.n	8003b3e <TIM_Base_SetConfig+0x5a>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	4a1f      	ldr	r2, [pc, #124]	@ (8003bb0 <TIM_Base_SetConfig+0xcc>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d003      	beq.n	8003b3e <TIM_Base_SetConfig+0x5a>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	4a1e      	ldr	r2, [pc, #120]	@ (8003bb4 <TIM_Base_SetConfig+0xd0>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d108      	bne.n	8003b50 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	4a1d      	ldr	r2, [pc, #116]	@ (8003bb8 <TIM_Base_SetConfig+0xd4>)
 8003b42:	4013      	ands	r3, r2
 8003b44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	68db      	ldr	r3, [r3, #12]
 8003b4a:	68fa      	ldr	r2, [r7, #12]
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2280      	movs	r2, #128	@ 0x80
 8003b54:	4393      	bics	r3, r2
 8003b56:	001a      	movs	r2, r3
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	695b      	ldr	r3, [r3, #20]
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	68fa      	ldr	r2, [r7, #12]
 8003b64:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	689a      	ldr	r2, [r3, #8]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	4a0a      	ldr	r2, [pc, #40]	@ (8003ba4 <TIM_Base_SetConfig+0xc0>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d007      	beq.n	8003b8e <TIM_Base_SetConfig+0xaa>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	4a0b      	ldr	r2, [pc, #44]	@ (8003bb0 <TIM_Base_SetConfig+0xcc>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d003      	beq.n	8003b8e <TIM_Base_SetConfig+0xaa>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	4a0a      	ldr	r2, [pc, #40]	@ (8003bb4 <TIM_Base_SetConfig+0xd0>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d103      	bne.n	8003b96 <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	691a      	ldr	r2, [r3, #16]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2201      	movs	r2, #1
 8003b9a:	615a      	str	r2, [r3, #20]
}
 8003b9c:	46c0      	nop			@ (mov r8, r8)
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	b004      	add	sp, #16
 8003ba2:	bd80      	pop	{r7, pc}
 8003ba4:	40012c00 	.word	0x40012c00
 8003ba8:	40000400 	.word	0x40000400
 8003bac:	40002000 	.word	0x40002000
 8003bb0:	40014400 	.word	0x40014400
 8003bb4:	40014800 	.word	0x40014800
 8003bb8:	fffffcff 	.word	0xfffffcff

08003bbc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b086      	sub	sp, #24
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	60f8      	str	r0, [r7, #12]
 8003bc4:	60b9      	str	r1, [r7, #8]
 8003bc6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	6a1b      	ldr	r3, [r3, #32]
 8003bcc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	6a1b      	ldr	r3, [r3, #32]
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	4393      	bics	r3, r2
 8003bd6:	001a      	movs	r2, r3
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	699b      	ldr	r3, [r3, #24]
 8003be0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	22f0      	movs	r2, #240	@ 0xf0
 8003be6:	4393      	bics	r3, r2
 8003be8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	011b      	lsls	r3, r3, #4
 8003bee:	693a      	ldr	r2, [r7, #16]
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	220a      	movs	r2, #10
 8003bf8:	4393      	bics	r3, r2
 8003bfa:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003bfc:	697a      	ldr	r2, [r7, #20]
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	4313      	orrs	r3, r2
 8003c02:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	693a      	ldr	r2, [r7, #16]
 8003c08:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	697a      	ldr	r2, [r7, #20]
 8003c0e:	621a      	str	r2, [r3, #32]
}
 8003c10:	46c0      	nop			@ (mov r8, r8)
 8003c12:	46bd      	mov	sp, r7
 8003c14:	b006      	add	sp, #24
 8003c16:	bd80      	pop	{r7, pc}

08003c18 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b086      	sub	sp, #24
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	60f8      	str	r0, [r7, #12]
 8003c20:	60b9      	str	r1, [r7, #8]
 8003c22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	6a1b      	ldr	r3, [r3, #32]
 8003c28:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	6a1b      	ldr	r3, [r3, #32]
 8003c2e:	2210      	movs	r2, #16
 8003c30:	4393      	bics	r3, r2
 8003c32:	001a      	movs	r2, r3
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	699b      	ldr	r3, [r3, #24]
 8003c3c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	4a0d      	ldr	r2, [pc, #52]	@ (8003c78 <TIM_TI2_ConfigInputStage+0x60>)
 8003c42:	4013      	ands	r3, r2
 8003c44:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	031b      	lsls	r3, r3, #12
 8003c4a:	693a      	ldr	r2, [r7, #16]
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	22a0      	movs	r2, #160	@ 0xa0
 8003c54:	4393      	bics	r3, r2
 8003c56:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	011b      	lsls	r3, r3, #4
 8003c5c:	697a      	ldr	r2, [r7, #20]
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	693a      	ldr	r2, [r7, #16]
 8003c66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	697a      	ldr	r2, [r7, #20]
 8003c6c:	621a      	str	r2, [r3, #32]
}
 8003c6e:	46c0      	nop			@ (mov r8, r8)
 8003c70:	46bd      	mov	sp, r7
 8003c72:	b006      	add	sp, #24
 8003c74:	bd80      	pop	{r7, pc}
 8003c76:	46c0      	nop			@ (mov r8, r8)
 8003c78:	ffff0fff 	.word	0xffff0fff

08003c7c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b084      	sub	sp, #16
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
 8003c84:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	4a08      	ldr	r2, [pc, #32]	@ (8003cb0 <TIM_ITRx_SetConfig+0x34>)
 8003c90:	4013      	ands	r3, r2
 8003c92:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003c94:	683a      	ldr	r2, [r7, #0]
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	2207      	movs	r2, #7
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	68fa      	ldr	r2, [r7, #12]
 8003ca4:	609a      	str	r2, [r3, #8]
}
 8003ca6:	46c0      	nop			@ (mov r8, r8)
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	b004      	add	sp, #16
 8003cac:	bd80      	pop	{r7, pc}
 8003cae:	46c0      	nop			@ (mov r8, r8)
 8003cb0:	ffcfff8f 	.word	0xffcfff8f

08003cb4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b086      	sub	sp, #24
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	60f8      	str	r0, [r7, #12]
 8003cbc:	60b9      	str	r1, [r7, #8]
 8003cbe:	607a      	str	r2, [r7, #4]
 8003cc0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	689b      	ldr	r3, [r3, #8]
 8003cc6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	4a09      	ldr	r2, [pc, #36]	@ (8003cf0 <TIM_ETR_SetConfig+0x3c>)
 8003ccc:	4013      	ands	r3, r2
 8003cce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	021a      	lsls	r2, r3, #8
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	431a      	orrs	r2, r3
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	697a      	ldr	r2, [r7, #20]
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	697a      	ldr	r2, [r7, #20]
 8003ce6:	609a      	str	r2, [r3, #8]
}
 8003ce8:	46c0      	nop			@ (mov r8, r8)
 8003cea:	46bd      	mov	sp, r7
 8003cec:	b006      	add	sp, #24
 8003cee:	bd80      	pop	{r7, pc}
 8003cf0:	ffff00ff 	.word	0xffff00ff

08003cf4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b084      	sub	sp, #16
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
 8003cfc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	223c      	movs	r2, #60	@ 0x3c
 8003d02:	5c9b      	ldrb	r3, [r3, r2]
 8003d04:	2b01      	cmp	r3, #1
 8003d06:	d101      	bne.n	8003d0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003d08:	2302      	movs	r3, #2
 8003d0a:	e04a      	b.n	8003da2 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	223c      	movs	r2, #60	@ 0x3c
 8003d10:	2101      	movs	r1, #1
 8003d12:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	223d      	movs	r2, #61	@ 0x3d
 8003d18:	2102      	movs	r1, #2
 8003d1a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a1e      	ldr	r2, [pc, #120]	@ (8003dac <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d108      	bne.n	8003d48 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	4a1d      	ldr	r2, [pc, #116]	@ (8003db0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8003d3a:	4013      	ands	r3, r2
 8003d3c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	68fa      	ldr	r2, [r7, #12]
 8003d44:	4313      	orrs	r3, r2
 8003d46:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2270      	movs	r2, #112	@ 0x70
 8003d4c:	4393      	bics	r3, r2
 8003d4e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	68fa      	ldr	r2, [r7, #12]
 8003d56:	4313      	orrs	r3, r2
 8003d58:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	68fa      	ldr	r2, [r7, #12]
 8003d60:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a11      	ldr	r2, [pc, #68]	@ (8003dac <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d004      	beq.n	8003d76 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a10      	ldr	r2, [pc, #64]	@ (8003db4 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d10c      	bne.n	8003d90 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	2280      	movs	r2, #128	@ 0x80
 8003d7a:	4393      	bics	r3, r2
 8003d7c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	68ba      	ldr	r2, [r7, #8]
 8003d84:	4313      	orrs	r3, r2
 8003d86:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	68ba      	ldr	r2, [r7, #8]
 8003d8e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	223d      	movs	r2, #61	@ 0x3d
 8003d94:	2101      	movs	r1, #1
 8003d96:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	223c      	movs	r2, #60	@ 0x3c
 8003d9c:	2100      	movs	r1, #0
 8003d9e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003da0:	2300      	movs	r3, #0
}
 8003da2:	0018      	movs	r0, r3
 8003da4:	46bd      	mov	sp, r7
 8003da6:	b004      	add	sp, #16
 8003da8:	bd80      	pop	{r7, pc}
 8003daa:	46c0      	nop			@ (mov r8, r8)
 8003dac:	40012c00 	.word	0x40012c00
 8003db0:	ff0fffff 	.word	0xff0fffff
 8003db4:	40000400 	.word	0x40000400

08003db8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b082      	sub	sp, #8
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003dc0:	46c0      	nop			@ (mov r8, r8)
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	b002      	add	sp, #8
 8003dc6:	bd80      	pop	{r7, pc}

08003dc8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b082      	sub	sp, #8
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003dd0:	46c0      	nop			@ (mov r8, r8)
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	b002      	add	sp, #8
 8003dd6:	bd80      	pop	{r7, pc}

08003dd8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b082      	sub	sp, #8
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003de0:	46c0      	nop			@ (mov r8, r8)
 8003de2:	46bd      	mov	sp, r7
 8003de4:	b002      	add	sp, #8
 8003de6:	bd80      	pop	{r7, pc}

08003de8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b082      	sub	sp, #8
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d101      	bne.n	8003dfa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	e046      	b.n	8003e88 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2288      	movs	r2, #136	@ 0x88
 8003dfe:	589b      	ldr	r3, [r3, r2]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d107      	bne.n	8003e14 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2284      	movs	r2, #132	@ 0x84
 8003e08:	2100      	movs	r1, #0
 8003e0a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	0018      	movs	r0, r3
 8003e10:	f7fd fdca 	bl	80019a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2288      	movs	r2, #136	@ 0x88
 8003e18:	2124      	movs	r1, #36	@ 0x24
 8003e1a:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	2101      	movs	r1, #1
 8003e28:	438a      	bics	r2, r1
 8003e2a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d003      	beq.n	8003e3c <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	0018      	movs	r0, r3
 8003e38:	f000 fa4e 	bl	80042d8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	0018      	movs	r0, r3
 8003e40:	f000 f8cc 	bl	8003fdc <UART_SetConfig>
 8003e44:	0003      	movs	r3, r0
 8003e46:	2b01      	cmp	r3, #1
 8003e48:	d101      	bne.n	8003e4e <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	e01c      	b.n	8003e88 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	685a      	ldr	r2, [r3, #4]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	490d      	ldr	r1, [pc, #52]	@ (8003e90 <HAL_UART_Init+0xa8>)
 8003e5a:	400a      	ands	r2, r1
 8003e5c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	689a      	ldr	r2, [r3, #8]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	212a      	movs	r1, #42	@ 0x2a
 8003e6a:	438a      	bics	r2, r1
 8003e6c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	681a      	ldr	r2, [r3, #0]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	2101      	movs	r1, #1
 8003e7a:	430a      	orrs	r2, r1
 8003e7c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	0018      	movs	r0, r3
 8003e82:	f000 fadd 	bl	8004440 <UART_CheckIdleState>
 8003e86:	0003      	movs	r3, r0
}
 8003e88:	0018      	movs	r0, r3
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	b002      	add	sp, #8
 8003e8e:	bd80      	pop	{r7, pc}
 8003e90:	ffffb7ff 	.word	0xffffb7ff

08003e94 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b08a      	sub	sp, #40	@ 0x28
 8003e98:	af02      	add	r7, sp, #8
 8003e9a:	60f8      	str	r0, [r7, #12]
 8003e9c:	60b9      	str	r1, [r7, #8]
 8003e9e:	603b      	str	r3, [r7, #0]
 8003ea0:	1dbb      	adds	r3, r7, #6
 8003ea2:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2288      	movs	r2, #136	@ 0x88
 8003ea8:	589b      	ldr	r3, [r3, r2]
 8003eaa:	2b20      	cmp	r3, #32
 8003eac:	d000      	beq.n	8003eb0 <HAL_UART_Transmit+0x1c>
 8003eae:	e090      	b.n	8003fd2 <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d003      	beq.n	8003ebe <HAL_UART_Transmit+0x2a>
 8003eb6:	1dbb      	adds	r3, r7, #6
 8003eb8:	881b      	ldrh	r3, [r3, #0]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d101      	bne.n	8003ec2 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e088      	b.n	8003fd4 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	689a      	ldr	r2, [r3, #8]
 8003ec6:	2380      	movs	r3, #128	@ 0x80
 8003ec8:	015b      	lsls	r3, r3, #5
 8003eca:	429a      	cmp	r2, r3
 8003ecc:	d109      	bne.n	8003ee2 <HAL_UART_Transmit+0x4e>
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	691b      	ldr	r3, [r3, #16]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d105      	bne.n	8003ee2 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	2201      	movs	r2, #1
 8003eda:	4013      	ands	r3, r2
 8003edc:	d001      	beq.n	8003ee2 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	e078      	b.n	8003fd4 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	2290      	movs	r2, #144	@ 0x90
 8003ee6:	2100      	movs	r1, #0
 8003ee8:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	2288      	movs	r2, #136	@ 0x88
 8003eee:	2121      	movs	r1, #33	@ 0x21
 8003ef0:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003ef2:	f7fd fe71 	bl	8001bd8 <HAL_GetTick>
 8003ef6:	0003      	movs	r3, r0
 8003ef8:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	1dba      	adds	r2, r7, #6
 8003efe:	2154      	movs	r1, #84	@ 0x54
 8003f00:	8812      	ldrh	r2, [r2, #0]
 8003f02:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	1dba      	adds	r2, r7, #6
 8003f08:	2156      	movs	r1, #86	@ 0x56
 8003f0a:	8812      	ldrh	r2, [r2, #0]
 8003f0c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	689a      	ldr	r2, [r3, #8]
 8003f12:	2380      	movs	r3, #128	@ 0x80
 8003f14:	015b      	lsls	r3, r3, #5
 8003f16:	429a      	cmp	r2, r3
 8003f18:	d108      	bne.n	8003f2c <HAL_UART_Transmit+0x98>
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	691b      	ldr	r3, [r3, #16]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d104      	bne.n	8003f2c <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8003f22:	2300      	movs	r3, #0
 8003f24:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	61bb      	str	r3, [r7, #24]
 8003f2a:	e003      	b.n	8003f34 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003f30:	2300      	movs	r3, #0
 8003f32:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003f34:	e030      	b.n	8003f98 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003f36:	697a      	ldr	r2, [r7, #20]
 8003f38:	68f8      	ldr	r0, [r7, #12]
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	9300      	str	r3, [sp, #0]
 8003f3e:	0013      	movs	r3, r2
 8003f40:	2200      	movs	r2, #0
 8003f42:	2180      	movs	r1, #128	@ 0x80
 8003f44:	f000 fb26 	bl	8004594 <UART_WaitOnFlagUntilTimeout>
 8003f48:	1e03      	subs	r3, r0, #0
 8003f4a:	d005      	beq.n	8003f58 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2288      	movs	r2, #136	@ 0x88
 8003f50:	2120      	movs	r1, #32
 8003f52:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003f54:	2303      	movs	r3, #3
 8003f56:	e03d      	b.n	8003fd4 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8003f58:	69fb      	ldr	r3, [r7, #28]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d10b      	bne.n	8003f76 <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003f5e:	69bb      	ldr	r3, [r7, #24]
 8003f60:	881b      	ldrh	r3, [r3, #0]
 8003f62:	001a      	movs	r2, r3
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	05d2      	lsls	r2, r2, #23
 8003f6a:	0dd2      	lsrs	r2, r2, #23
 8003f6c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003f6e:	69bb      	ldr	r3, [r7, #24]
 8003f70:	3302      	adds	r3, #2
 8003f72:	61bb      	str	r3, [r7, #24]
 8003f74:	e007      	b.n	8003f86 <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003f76:	69fb      	ldr	r3, [r7, #28]
 8003f78:	781a      	ldrb	r2, [r3, #0]
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003f80:	69fb      	ldr	r3, [r7, #28]
 8003f82:	3301      	adds	r3, #1
 8003f84:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2256      	movs	r2, #86	@ 0x56
 8003f8a:	5a9b      	ldrh	r3, [r3, r2]
 8003f8c:	b29b      	uxth	r3, r3
 8003f8e:	3b01      	subs	r3, #1
 8003f90:	b299      	uxth	r1, r3
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	2256      	movs	r2, #86	@ 0x56
 8003f96:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	2256      	movs	r2, #86	@ 0x56
 8003f9c:	5a9b      	ldrh	r3, [r3, r2]
 8003f9e:	b29b      	uxth	r3, r3
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d1c8      	bne.n	8003f36 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003fa4:	697a      	ldr	r2, [r7, #20]
 8003fa6:	68f8      	ldr	r0, [r7, #12]
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	9300      	str	r3, [sp, #0]
 8003fac:	0013      	movs	r3, r2
 8003fae:	2200      	movs	r2, #0
 8003fb0:	2140      	movs	r1, #64	@ 0x40
 8003fb2:	f000 faef 	bl	8004594 <UART_WaitOnFlagUntilTimeout>
 8003fb6:	1e03      	subs	r3, r0, #0
 8003fb8:	d005      	beq.n	8003fc6 <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2288      	movs	r2, #136	@ 0x88
 8003fbe:	2120      	movs	r1, #32
 8003fc0:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8003fc2:	2303      	movs	r3, #3
 8003fc4:	e006      	b.n	8003fd4 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2288      	movs	r2, #136	@ 0x88
 8003fca:	2120      	movs	r1, #32
 8003fcc:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	e000      	b.n	8003fd4 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8003fd2:	2302      	movs	r3, #2
  }
}
 8003fd4:	0018      	movs	r0, r3
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	b008      	add	sp, #32
 8003fda:	bd80      	pop	{r7, pc}

08003fdc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b088      	sub	sp, #32
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003fe4:	231e      	movs	r3, #30
 8003fe6:	18fb      	adds	r3, r7, r3
 8003fe8:	2200      	movs	r2, #0
 8003fea:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	689a      	ldr	r2, [r3, #8]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	691b      	ldr	r3, [r3, #16]
 8003ff4:	431a      	orrs	r2, r3
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	695b      	ldr	r3, [r3, #20]
 8003ffa:	431a      	orrs	r2, r3
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	69db      	ldr	r3, [r3, #28]
 8004000:	4313      	orrs	r3, r2
 8004002:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4aab      	ldr	r2, [pc, #684]	@ (80042b8 <UART_SetConfig+0x2dc>)
 800400c:	4013      	ands	r3, r2
 800400e:	0019      	movs	r1, r3
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	697a      	ldr	r2, [r7, #20]
 8004016:	430a      	orrs	r2, r1
 8004018:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	4aa6      	ldr	r2, [pc, #664]	@ (80042bc <UART_SetConfig+0x2e0>)
 8004022:	4013      	ands	r3, r2
 8004024:	0019      	movs	r1, r3
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	68da      	ldr	r2, [r3, #12]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	430a      	orrs	r2, r1
 8004030:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	699b      	ldr	r3, [r3, #24]
 8004036:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6a1b      	ldr	r3, [r3, #32]
 800403c:	697a      	ldr	r2, [r7, #20]
 800403e:	4313      	orrs	r3, r2
 8004040:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	689b      	ldr	r3, [r3, #8]
 8004048:	4a9d      	ldr	r2, [pc, #628]	@ (80042c0 <UART_SetConfig+0x2e4>)
 800404a:	4013      	ands	r3, r2
 800404c:	0019      	movs	r1, r3
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	697a      	ldr	r2, [r7, #20]
 8004054:	430a      	orrs	r2, r1
 8004056:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800405e:	220f      	movs	r2, #15
 8004060:	4393      	bics	r3, r2
 8004062:	0019      	movs	r1, r3
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	430a      	orrs	r2, r1
 800406e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a93      	ldr	r2, [pc, #588]	@ (80042c4 <UART_SetConfig+0x2e8>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d127      	bne.n	80040ca <UART_SetConfig+0xee>
 800407a:	4b93      	ldr	r3, [pc, #588]	@ (80042c8 <UART_SetConfig+0x2ec>)
 800407c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800407e:	2203      	movs	r2, #3
 8004080:	4013      	ands	r3, r2
 8004082:	2b03      	cmp	r3, #3
 8004084:	d017      	beq.n	80040b6 <UART_SetConfig+0xda>
 8004086:	d81b      	bhi.n	80040c0 <UART_SetConfig+0xe4>
 8004088:	2b02      	cmp	r3, #2
 800408a:	d00a      	beq.n	80040a2 <UART_SetConfig+0xc6>
 800408c:	d818      	bhi.n	80040c0 <UART_SetConfig+0xe4>
 800408e:	2b00      	cmp	r3, #0
 8004090:	d002      	beq.n	8004098 <UART_SetConfig+0xbc>
 8004092:	2b01      	cmp	r3, #1
 8004094:	d00a      	beq.n	80040ac <UART_SetConfig+0xd0>
 8004096:	e013      	b.n	80040c0 <UART_SetConfig+0xe4>
 8004098:	231f      	movs	r3, #31
 800409a:	18fb      	adds	r3, r7, r3
 800409c:	2200      	movs	r2, #0
 800409e:	701a      	strb	r2, [r3, #0]
 80040a0:	e021      	b.n	80040e6 <UART_SetConfig+0x10a>
 80040a2:	231f      	movs	r3, #31
 80040a4:	18fb      	adds	r3, r7, r3
 80040a6:	2202      	movs	r2, #2
 80040a8:	701a      	strb	r2, [r3, #0]
 80040aa:	e01c      	b.n	80040e6 <UART_SetConfig+0x10a>
 80040ac:	231f      	movs	r3, #31
 80040ae:	18fb      	adds	r3, r7, r3
 80040b0:	2204      	movs	r2, #4
 80040b2:	701a      	strb	r2, [r3, #0]
 80040b4:	e017      	b.n	80040e6 <UART_SetConfig+0x10a>
 80040b6:	231f      	movs	r3, #31
 80040b8:	18fb      	adds	r3, r7, r3
 80040ba:	2208      	movs	r2, #8
 80040bc:	701a      	strb	r2, [r3, #0]
 80040be:	e012      	b.n	80040e6 <UART_SetConfig+0x10a>
 80040c0:	231f      	movs	r3, #31
 80040c2:	18fb      	adds	r3, r7, r3
 80040c4:	2210      	movs	r2, #16
 80040c6:	701a      	strb	r2, [r3, #0]
 80040c8:	e00d      	b.n	80040e6 <UART_SetConfig+0x10a>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a7f      	ldr	r2, [pc, #508]	@ (80042cc <UART_SetConfig+0x2f0>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d104      	bne.n	80040de <UART_SetConfig+0x102>
 80040d4:	231f      	movs	r3, #31
 80040d6:	18fb      	adds	r3, r7, r3
 80040d8:	2200      	movs	r2, #0
 80040da:	701a      	strb	r2, [r3, #0]
 80040dc:	e003      	b.n	80040e6 <UART_SetConfig+0x10a>
 80040de:	231f      	movs	r3, #31
 80040e0:	18fb      	adds	r3, r7, r3
 80040e2:	2210      	movs	r2, #16
 80040e4:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	69da      	ldr	r2, [r3, #28]
 80040ea:	2380      	movs	r3, #128	@ 0x80
 80040ec:	021b      	lsls	r3, r3, #8
 80040ee:	429a      	cmp	r2, r3
 80040f0:	d000      	beq.n	80040f4 <UART_SetConfig+0x118>
 80040f2:	e06f      	b.n	80041d4 <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 80040f4:	231f      	movs	r3, #31
 80040f6:	18fb      	adds	r3, r7, r3
 80040f8:	781b      	ldrb	r3, [r3, #0]
 80040fa:	2b08      	cmp	r3, #8
 80040fc:	d01f      	beq.n	800413e <UART_SetConfig+0x162>
 80040fe:	dc22      	bgt.n	8004146 <UART_SetConfig+0x16a>
 8004100:	2b04      	cmp	r3, #4
 8004102:	d017      	beq.n	8004134 <UART_SetConfig+0x158>
 8004104:	dc1f      	bgt.n	8004146 <UART_SetConfig+0x16a>
 8004106:	2b00      	cmp	r3, #0
 8004108:	d002      	beq.n	8004110 <UART_SetConfig+0x134>
 800410a:	2b02      	cmp	r3, #2
 800410c:	d005      	beq.n	800411a <UART_SetConfig+0x13e>
 800410e:	e01a      	b.n	8004146 <UART_SetConfig+0x16a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004110:	f7ff f944 	bl	800339c <HAL_RCC_GetPCLK1Freq>
 8004114:	0003      	movs	r3, r0
 8004116:	61bb      	str	r3, [r7, #24]
        break;
 8004118:	e01c      	b.n	8004154 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 800411a:	4b6b      	ldr	r3, [pc, #428]	@ (80042c8 <UART_SetConfig+0x2ec>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	095b      	lsrs	r3, r3, #5
 8004120:	2207      	movs	r2, #7
 8004122:	4013      	ands	r3, r2
 8004124:	3301      	adds	r3, #1
 8004126:	0019      	movs	r1, r3
 8004128:	4869      	ldr	r0, [pc, #420]	@ (80042d0 <UART_SetConfig+0x2f4>)
 800412a:	f7fb ffed 	bl	8000108 <__udivsi3>
 800412e:	0003      	movs	r3, r0
 8004130:	61bb      	str	r3, [r7, #24]
        break;
 8004132:	e00f      	b.n	8004154 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004134:	f7ff f8e6 	bl	8003304 <HAL_RCC_GetSysClockFreq>
 8004138:	0003      	movs	r3, r0
 800413a:	61bb      	str	r3, [r7, #24]
        break;
 800413c:	e00a      	b.n	8004154 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800413e:	2380      	movs	r3, #128	@ 0x80
 8004140:	021b      	lsls	r3, r3, #8
 8004142:	61bb      	str	r3, [r7, #24]
        break;
 8004144:	e006      	b.n	8004154 <UART_SetConfig+0x178>
      default:
        pclk = 0U;
 8004146:	2300      	movs	r3, #0
 8004148:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800414a:	231e      	movs	r3, #30
 800414c:	18fb      	adds	r3, r7, r3
 800414e:	2201      	movs	r2, #1
 8004150:	701a      	strb	r2, [r3, #0]
        break;
 8004152:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004154:	69bb      	ldr	r3, [r7, #24]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d100      	bne.n	800415c <UART_SetConfig+0x180>
 800415a:	e097      	b.n	800428c <UART_SetConfig+0x2b0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004160:	4b5c      	ldr	r3, [pc, #368]	@ (80042d4 <UART_SetConfig+0x2f8>)
 8004162:	0052      	lsls	r2, r2, #1
 8004164:	5ad3      	ldrh	r3, [r2, r3]
 8004166:	0019      	movs	r1, r3
 8004168:	69b8      	ldr	r0, [r7, #24]
 800416a:	f7fb ffcd 	bl	8000108 <__udivsi3>
 800416e:	0003      	movs	r3, r0
 8004170:	005a      	lsls	r2, r3, #1
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	085b      	lsrs	r3, r3, #1
 8004178:	18d2      	adds	r2, r2, r3
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	0019      	movs	r1, r3
 8004180:	0010      	movs	r0, r2
 8004182:	f7fb ffc1 	bl	8000108 <__udivsi3>
 8004186:	0003      	movs	r3, r0
 8004188:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	2b0f      	cmp	r3, #15
 800418e:	d91c      	bls.n	80041ca <UART_SetConfig+0x1ee>
 8004190:	693a      	ldr	r2, [r7, #16]
 8004192:	2380      	movs	r3, #128	@ 0x80
 8004194:	025b      	lsls	r3, r3, #9
 8004196:	429a      	cmp	r2, r3
 8004198:	d217      	bcs.n	80041ca <UART_SetConfig+0x1ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	b29a      	uxth	r2, r3
 800419e:	200e      	movs	r0, #14
 80041a0:	183b      	adds	r3, r7, r0
 80041a2:	210f      	movs	r1, #15
 80041a4:	438a      	bics	r2, r1
 80041a6:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	085b      	lsrs	r3, r3, #1
 80041ac:	b29b      	uxth	r3, r3
 80041ae:	2207      	movs	r2, #7
 80041b0:	4013      	ands	r3, r2
 80041b2:	b299      	uxth	r1, r3
 80041b4:	183b      	adds	r3, r7, r0
 80041b6:	183a      	adds	r2, r7, r0
 80041b8:	8812      	ldrh	r2, [r2, #0]
 80041ba:	430a      	orrs	r2, r1
 80041bc:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	183a      	adds	r2, r7, r0
 80041c4:	8812      	ldrh	r2, [r2, #0]
 80041c6:	60da      	str	r2, [r3, #12]
 80041c8:	e060      	b.n	800428c <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 80041ca:	231e      	movs	r3, #30
 80041cc:	18fb      	adds	r3, r7, r3
 80041ce:	2201      	movs	r2, #1
 80041d0:	701a      	strb	r2, [r3, #0]
 80041d2:	e05b      	b.n	800428c <UART_SetConfig+0x2b0>
      }
    }
  }
  else
  {
    switch (clocksource)
 80041d4:	231f      	movs	r3, #31
 80041d6:	18fb      	adds	r3, r7, r3
 80041d8:	781b      	ldrb	r3, [r3, #0]
 80041da:	2b08      	cmp	r3, #8
 80041dc:	d01f      	beq.n	800421e <UART_SetConfig+0x242>
 80041de:	dc22      	bgt.n	8004226 <UART_SetConfig+0x24a>
 80041e0:	2b04      	cmp	r3, #4
 80041e2:	d017      	beq.n	8004214 <UART_SetConfig+0x238>
 80041e4:	dc1f      	bgt.n	8004226 <UART_SetConfig+0x24a>
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d002      	beq.n	80041f0 <UART_SetConfig+0x214>
 80041ea:	2b02      	cmp	r3, #2
 80041ec:	d005      	beq.n	80041fa <UART_SetConfig+0x21e>
 80041ee:	e01a      	b.n	8004226 <UART_SetConfig+0x24a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80041f0:	f7ff f8d4 	bl	800339c <HAL_RCC_GetPCLK1Freq>
 80041f4:	0003      	movs	r3, r0
 80041f6:	61bb      	str	r3, [r7, #24]
        break;
 80041f8:	e01c      	b.n	8004234 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 80041fa:	4b33      	ldr	r3, [pc, #204]	@ (80042c8 <UART_SetConfig+0x2ec>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	095b      	lsrs	r3, r3, #5
 8004200:	2207      	movs	r2, #7
 8004202:	4013      	ands	r3, r2
 8004204:	3301      	adds	r3, #1
 8004206:	0019      	movs	r1, r3
 8004208:	4831      	ldr	r0, [pc, #196]	@ (80042d0 <UART_SetConfig+0x2f4>)
 800420a:	f7fb ff7d 	bl	8000108 <__udivsi3>
 800420e:	0003      	movs	r3, r0
 8004210:	61bb      	str	r3, [r7, #24]
        break;
 8004212:	e00f      	b.n	8004234 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004214:	f7ff f876 	bl	8003304 <HAL_RCC_GetSysClockFreq>
 8004218:	0003      	movs	r3, r0
 800421a:	61bb      	str	r3, [r7, #24]
        break;
 800421c:	e00a      	b.n	8004234 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800421e:	2380      	movs	r3, #128	@ 0x80
 8004220:	021b      	lsls	r3, r3, #8
 8004222:	61bb      	str	r3, [r7, #24]
        break;
 8004224:	e006      	b.n	8004234 <UART_SetConfig+0x258>
      default:
        pclk = 0U;
 8004226:	2300      	movs	r3, #0
 8004228:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800422a:	231e      	movs	r3, #30
 800422c:	18fb      	adds	r3, r7, r3
 800422e:	2201      	movs	r2, #1
 8004230:	701a      	strb	r2, [r3, #0]
        break;
 8004232:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8004234:	69bb      	ldr	r3, [r7, #24]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d028      	beq.n	800428c <UART_SetConfig+0x2b0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800423e:	4b25      	ldr	r3, [pc, #148]	@ (80042d4 <UART_SetConfig+0x2f8>)
 8004240:	0052      	lsls	r2, r2, #1
 8004242:	5ad3      	ldrh	r3, [r2, r3]
 8004244:	0019      	movs	r1, r3
 8004246:	69b8      	ldr	r0, [r7, #24]
 8004248:	f7fb ff5e 	bl	8000108 <__udivsi3>
 800424c:	0003      	movs	r3, r0
 800424e:	001a      	movs	r2, r3
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	085b      	lsrs	r3, r3, #1
 8004256:	18d2      	adds	r2, r2, r3
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	0019      	movs	r1, r3
 800425e:	0010      	movs	r0, r2
 8004260:	f7fb ff52 	bl	8000108 <__udivsi3>
 8004264:	0003      	movs	r3, r0
 8004266:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	2b0f      	cmp	r3, #15
 800426c:	d90a      	bls.n	8004284 <UART_SetConfig+0x2a8>
 800426e:	693a      	ldr	r2, [r7, #16]
 8004270:	2380      	movs	r3, #128	@ 0x80
 8004272:	025b      	lsls	r3, r3, #9
 8004274:	429a      	cmp	r2, r3
 8004276:	d205      	bcs.n	8004284 <UART_SetConfig+0x2a8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	b29a      	uxth	r2, r3
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	60da      	str	r2, [r3, #12]
 8004282:	e003      	b.n	800428c <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8004284:	231e      	movs	r3, #30
 8004286:	18fb      	adds	r3, r7, r3
 8004288:	2201      	movs	r2, #1
 800428a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	226a      	movs	r2, #106	@ 0x6a
 8004290:	2101      	movs	r1, #1
 8004292:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2268      	movs	r2, #104	@ 0x68
 8004298:	2101      	movs	r1, #1
 800429a:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2200      	movs	r2, #0
 80042a0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2200      	movs	r2, #0
 80042a6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80042a8:	231e      	movs	r3, #30
 80042aa:	18fb      	adds	r3, r7, r3
 80042ac:	781b      	ldrb	r3, [r3, #0]
}
 80042ae:	0018      	movs	r0, r3
 80042b0:	46bd      	mov	sp, r7
 80042b2:	b008      	add	sp, #32
 80042b4:	bd80      	pop	{r7, pc}
 80042b6:	46c0      	nop			@ (mov r8, r8)
 80042b8:	cfff69f3 	.word	0xcfff69f3
 80042bc:	ffffcfff 	.word	0xffffcfff
 80042c0:	11fff4ff 	.word	0x11fff4ff
 80042c4:	40013800 	.word	0x40013800
 80042c8:	40021000 	.word	0x40021000
 80042cc:	40004400 	.word	0x40004400
 80042d0:	02dc6c00 	.word	0x02dc6c00
 80042d4:	08004804 	.word	0x08004804

080042d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b082      	sub	sp, #8
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042e4:	2208      	movs	r2, #8
 80042e6:	4013      	ands	r3, r2
 80042e8:	d00b      	beq.n	8004302 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	4a4a      	ldr	r2, [pc, #296]	@ (800441c <UART_AdvFeatureConfig+0x144>)
 80042f2:	4013      	ands	r3, r2
 80042f4:	0019      	movs	r1, r3
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	430a      	orrs	r2, r1
 8004300:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004306:	2201      	movs	r2, #1
 8004308:	4013      	ands	r3, r2
 800430a:	d00b      	beq.n	8004324 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	4a43      	ldr	r2, [pc, #268]	@ (8004420 <UART_AdvFeatureConfig+0x148>)
 8004314:	4013      	ands	r3, r2
 8004316:	0019      	movs	r1, r3
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	430a      	orrs	r2, r1
 8004322:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004328:	2202      	movs	r2, #2
 800432a:	4013      	ands	r3, r2
 800432c:	d00b      	beq.n	8004346 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	4a3b      	ldr	r2, [pc, #236]	@ (8004424 <UART_AdvFeatureConfig+0x14c>)
 8004336:	4013      	ands	r3, r2
 8004338:	0019      	movs	r1, r3
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	430a      	orrs	r2, r1
 8004344:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800434a:	2204      	movs	r2, #4
 800434c:	4013      	ands	r3, r2
 800434e:	d00b      	beq.n	8004368 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	4a34      	ldr	r2, [pc, #208]	@ (8004428 <UART_AdvFeatureConfig+0x150>)
 8004358:	4013      	ands	r3, r2
 800435a:	0019      	movs	r1, r3
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	430a      	orrs	r2, r1
 8004366:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800436c:	2210      	movs	r2, #16
 800436e:	4013      	ands	r3, r2
 8004370:	d00b      	beq.n	800438a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	4a2c      	ldr	r2, [pc, #176]	@ (800442c <UART_AdvFeatureConfig+0x154>)
 800437a:	4013      	ands	r3, r2
 800437c:	0019      	movs	r1, r3
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	430a      	orrs	r2, r1
 8004388:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800438e:	2220      	movs	r2, #32
 8004390:	4013      	ands	r3, r2
 8004392:	d00b      	beq.n	80043ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	689b      	ldr	r3, [r3, #8]
 800439a:	4a25      	ldr	r2, [pc, #148]	@ (8004430 <UART_AdvFeatureConfig+0x158>)
 800439c:	4013      	ands	r3, r2
 800439e:	0019      	movs	r1, r3
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	430a      	orrs	r2, r1
 80043aa:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043b0:	2240      	movs	r2, #64	@ 0x40
 80043b2:	4013      	ands	r3, r2
 80043b4:	d01d      	beq.n	80043f2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	4a1d      	ldr	r2, [pc, #116]	@ (8004434 <UART_AdvFeatureConfig+0x15c>)
 80043be:	4013      	ands	r3, r2
 80043c0:	0019      	movs	r1, r3
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	430a      	orrs	r2, r1
 80043cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80043d2:	2380      	movs	r3, #128	@ 0x80
 80043d4:	035b      	lsls	r3, r3, #13
 80043d6:	429a      	cmp	r2, r3
 80043d8:	d10b      	bne.n	80043f2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	4a15      	ldr	r2, [pc, #84]	@ (8004438 <UART_AdvFeatureConfig+0x160>)
 80043e2:	4013      	ands	r3, r2
 80043e4:	0019      	movs	r1, r3
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	430a      	orrs	r2, r1
 80043f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043f6:	2280      	movs	r2, #128	@ 0x80
 80043f8:	4013      	ands	r3, r2
 80043fa:	d00b      	beq.n	8004414 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	4a0e      	ldr	r2, [pc, #56]	@ (800443c <UART_AdvFeatureConfig+0x164>)
 8004404:	4013      	ands	r3, r2
 8004406:	0019      	movs	r1, r3
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	430a      	orrs	r2, r1
 8004412:	605a      	str	r2, [r3, #4]
  }
}
 8004414:	46c0      	nop			@ (mov r8, r8)
 8004416:	46bd      	mov	sp, r7
 8004418:	b002      	add	sp, #8
 800441a:	bd80      	pop	{r7, pc}
 800441c:	ffff7fff 	.word	0xffff7fff
 8004420:	fffdffff 	.word	0xfffdffff
 8004424:	fffeffff 	.word	0xfffeffff
 8004428:	fffbffff 	.word	0xfffbffff
 800442c:	ffffefff 	.word	0xffffefff
 8004430:	ffffdfff 	.word	0xffffdfff
 8004434:	ffefffff 	.word	0xffefffff
 8004438:	ff9fffff 	.word	0xff9fffff
 800443c:	fff7ffff 	.word	0xfff7ffff

08004440 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b092      	sub	sp, #72	@ 0x48
 8004444:	af02      	add	r7, sp, #8
 8004446:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2290      	movs	r2, #144	@ 0x90
 800444c:	2100      	movs	r1, #0
 800444e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004450:	f7fd fbc2 	bl	8001bd8 <HAL_GetTick>
 8004454:	0003      	movs	r3, r0
 8004456:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	2208      	movs	r2, #8
 8004460:	4013      	ands	r3, r2
 8004462:	2b08      	cmp	r3, #8
 8004464:	d12d      	bne.n	80044c2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004466:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004468:	2280      	movs	r2, #128	@ 0x80
 800446a:	0391      	lsls	r1, r2, #14
 800446c:	6878      	ldr	r0, [r7, #4]
 800446e:	4a47      	ldr	r2, [pc, #284]	@ (800458c <UART_CheckIdleState+0x14c>)
 8004470:	9200      	str	r2, [sp, #0]
 8004472:	2200      	movs	r2, #0
 8004474:	f000 f88e 	bl	8004594 <UART_WaitOnFlagUntilTimeout>
 8004478:	1e03      	subs	r3, r0, #0
 800447a:	d022      	beq.n	80044c2 <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800447c:	f3ef 8310 	mrs	r3, PRIMASK
 8004480:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004484:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004486:	2301      	movs	r3, #1
 8004488:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800448a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800448c:	f383 8810 	msr	PRIMASK, r3
}
 8004490:	46c0      	nop			@ (mov r8, r8)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	681a      	ldr	r2, [r3, #0]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	2180      	movs	r1, #128	@ 0x80
 800449e:	438a      	bics	r2, r1
 80044a0:	601a      	str	r2, [r3, #0]
 80044a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044a8:	f383 8810 	msr	PRIMASK, r3
}
 80044ac:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2288      	movs	r2, #136	@ 0x88
 80044b2:	2120      	movs	r1, #32
 80044b4:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2284      	movs	r2, #132	@ 0x84
 80044ba:	2100      	movs	r1, #0
 80044bc:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80044be:	2303      	movs	r3, #3
 80044c0:	e060      	b.n	8004584 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	2204      	movs	r2, #4
 80044ca:	4013      	ands	r3, r2
 80044cc:	2b04      	cmp	r3, #4
 80044ce:	d146      	bne.n	800455e <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80044d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80044d2:	2280      	movs	r2, #128	@ 0x80
 80044d4:	03d1      	lsls	r1, r2, #15
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	4a2c      	ldr	r2, [pc, #176]	@ (800458c <UART_CheckIdleState+0x14c>)
 80044da:	9200      	str	r2, [sp, #0]
 80044dc:	2200      	movs	r2, #0
 80044de:	f000 f859 	bl	8004594 <UART_WaitOnFlagUntilTimeout>
 80044e2:	1e03      	subs	r3, r0, #0
 80044e4:	d03b      	beq.n	800455e <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80044e6:	f3ef 8310 	mrs	r3, PRIMASK
 80044ea:	60fb      	str	r3, [r7, #12]
  return(result);
 80044ec:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80044ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80044f0:	2301      	movs	r3, #1
 80044f2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	f383 8810 	msr	PRIMASK, r3
}
 80044fa:	46c0      	nop			@ (mov r8, r8)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	681a      	ldr	r2, [r3, #0]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4922      	ldr	r1, [pc, #136]	@ (8004590 <UART_CheckIdleState+0x150>)
 8004508:	400a      	ands	r2, r1
 800450a:	601a      	str	r2, [r3, #0]
 800450c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800450e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	f383 8810 	msr	PRIMASK, r3
}
 8004516:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004518:	f3ef 8310 	mrs	r3, PRIMASK
 800451c:	61bb      	str	r3, [r7, #24]
  return(result);
 800451e:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004520:	633b      	str	r3, [r7, #48]	@ 0x30
 8004522:	2301      	movs	r3, #1
 8004524:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004526:	69fb      	ldr	r3, [r7, #28]
 8004528:	f383 8810 	msr	PRIMASK, r3
}
 800452c:	46c0      	nop			@ (mov r8, r8)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	689a      	ldr	r2, [r3, #8]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	2101      	movs	r1, #1
 800453a:	438a      	bics	r2, r1
 800453c:	609a      	str	r2, [r3, #8]
 800453e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004540:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004542:	6a3b      	ldr	r3, [r7, #32]
 8004544:	f383 8810 	msr	PRIMASK, r3
}
 8004548:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	228c      	movs	r2, #140	@ 0x8c
 800454e:	2120      	movs	r1, #32
 8004550:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2284      	movs	r2, #132	@ 0x84
 8004556:	2100      	movs	r1, #0
 8004558:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800455a:	2303      	movs	r3, #3
 800455c:	e012      	b.n	8004584 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2288      	movs	r2, #136	@ 0x88
 8004562:	2120      	movs	r1, #32
 8004564:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	228c      	movs	r2, #140	@ 0x8c
 800456a:	2120      	movs	r1, #32
 800456c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2200      	movs	r2, #0
 8004572:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2200      	movs	r2, #0
 8004578:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2284      	movs	r2, #132	@ 0x84
 800457e:	2100      	movs	r1, #0
 8004580:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004582:	2300      	movs	r3, #0
}
 8004584:	0018      	movs	r0, r3
 8004586:	46bd      	mov	sp, r7
 8004588:	b010      	add	sp, #64	@ 0x40
 800458a:	bd80      	pop	{r7, pc}
 800458c:	01ffffff 	.word	0x01ffffff
 8004590:	fffffedf 	.word	0xfffffedf

08004594 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b084      	sub	sp, #16
 8004598:	af00      	add	r7, sp, #0
 800459a:	60f8      	str	r0, [r7, #12]
 800459c:	60b9      	str	r1, [r7, #8]
 800459e:	603b      	str	r3, [r7, #0]
 80045a0:	1dfb      	adds	r3, r7, #7
 80045a2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045a4:	e04b      	b.n	800463e <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045a6:	69bb      	ldr	r3, [r7, #24]
 80045a8:	3301      	adds	r3, #1
 80045aa:	d048      	beq.n	800463e <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045ac:	f7fd fb14 	bl	8001bd8 <HAL_GetTick>
 80045b0:	0002      	movs	r2, r0
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	1ad3      	subs	r3, r2, r3
 80045b6:	69ba      	ldr	r2, [r7, #24]
 80045b8:	429a      	cmp	r2, r3
 80045ba:	d302      	bcc.n	80045c2 <UART_WaitOnFlagUntilTimeout+0x2e>
 80045bc:	69bb      	ldr	r3, [r7, #24]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d101      	bne.n	80045c6 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80045c2:	2303      	movs	r3, #3
 80045c4:	e04b      	b.n	800465e <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	2204      	movs	r2, #4
 80045ce:	4013      	ands	r3, r2
 80045d0:	d035      	beq.n	800463e <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	69db      	ldr	r3, [r3, #28]
 80045d8:	2208      	movs	r2, #8
 80045da:	4013      	ands	r3, r2
 80045dc:	2b08      	cmp	r3, #8
 80045de:	d111      	bne.n	8004604 <UART_WaitOnFlagUntilTimeout+0x70>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	2208      	movs	r2, #8
 80045e6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	0018      	movs	r0, r3
 80045ec:	f000 f83c 	bl	8004668 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	2290      	movs	r2, #144	@ 0x90
 80045f4:	2108      	movs	r1, #8
 80045f6:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	2284      	movs	r2, #132	@ 0x84
 80045fc:	2100      	movs	r1, #0
 80045fe:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004600:	2301      	movs	r3, #1
 8004602:	e02c      	b.n	800465e <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	69da      	ldr	r2, [r3, #28]
 800460a:	2380      	movs	r3, #128	@ 0x80
 800460c:	011b      	lsls	r3, r3, #4
 800460e:	401a      	ands	r2, r3
 8004610:	2380      	movs	r3, #128	@ 0x80
 8004612:	011b      	lsls	r3, r3, #4
 8004614:	429a      	cmp	r2, r3
 8004616:	d112      	bne.n	800463e <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	2280      	movs	r2, #128	@ 0x80
 800461e:	0112      	lsls	r2, r2, #4
 8004620:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	0018      	movs	r0, r3
 8004626:	f000 f81f 	bl	8004668 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	2290      	movs	r2, #144	@ 0x90
 800462e:	2120      	movs	r1, #32
 8004630:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2284      	movs	r2, #132	@ 0x84
 8004636:	2100      	movs	r1, #0
 8004638:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800463a:	2303      	movs	r3, #3
 800463c:	e00f      	b.n	800465e <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	69db      	ldr	r3, [r3, #28]
 8004644:	68ba      	ldr	r2, [r7, #8]
 8004646:	4013      	ands	r3, r2
 8004648:	68ba      	ldr	r2, [r7, #8]
 800464a:	1ad3      	subs	r3, r2, r3
 800464c:	425a      	negs	r2, r3
 800464e:	4153      	adcs	r3, r2
 8004650:	b2db      	uxtb	r3, r3
 8004652:	001a      	movs	r2, r3
 8004654:	1dfb      	adds	r3, r7, #7
 8004656:	781b      	ldrb	r3, [r3, #0]
 8004658:	429a      	cmp	r2, r3
 800465a:	d0a4      	beq.n	80045a6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800465c:	2300      	movs	r3, #0
}
 800465e:	0018      	movs	r0, r3
 8004660:	46bd      	mov	sp, r7
 8004662:	b004      	add	sp, #16
 8004664:	bd80      	pop	{r7, pc}
	...

08004668 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b08e      	sub	sp, #56	@ 0x38
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004670:	f3ef 8310 	mrs	r3, PRIMASK
 8004674:	617b      	str	r3, [r7, #20]
  return(result);
 8004676:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004678:	637b      	str	r3, [r7, #52]	@ 0x34
 800467a:	2301      	movs	r3, #1
 800467c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800467e:	69bb      	ldr	r3, [r7, #24]
 8004680:	f383 8810 	msr	PRIMASK, r3
}
 8004684:	46c0      	nop			@ (mov r8, r8)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	681a      	ldr	r2, [r3, #0]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4926      	ldr	r1, [pc, #152]	@ (800472c <UART_EndRxTransfer+0xc4>)
 8004692:	400a      	ands	r2, r1
 8004694:	601a      	str	r2, [r3, #0]
 8004696:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004698:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800469a:	69fb      	ldr	r3, [r7, #28]
 800469c:	f383 8810 	msr	PRIMASK, r3
}
 80046a0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80046a2:	f3ef 8310 	mrs	r3, PRIMASK
 80046a6:	623b      	str	r3, [r7, #32]
  return(result);
 80046a8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80046aa:	633b      	str	r3, [r7, #48]	@ 0x30
 80046ac:	2301      	movs	r3, #1
 80046ae:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046b2:	f383 8810 	msr	PRIMASK, r3
}
 80046b6:	46c0      	nop			@ (mov r8, r8)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	689a      	ldr	r2, [r3, #8]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	491b      	ldr	r1, [pc, #108]	@ (8004730 <UART_EndRxTransfer+0xc8>)
 80046c4:	400a      	ands	r2, r1
 80046c6:	609a      	str	r2, [r3, #8]
 80046c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046ce:	f383 8810 	msr	PRIMASK, r3
}
 80046d2:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80046d8:	2b01      	cmp	r3, #1
 80046da:	d118      	bne.n	800470e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80046dc:	f3ef 8310 	mrs	r3, PRIMASK
 80046e0:	60bb      	str	r3, [r7, #8]
  return(result);
 80046e2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80046e6:	2301      	movs	r3, #1
 80046e8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	f383 8810 	msr	PRIMASK, r3
}
 80046f0:	46c0      	nop			@ (mov r8, r8)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	681a      	ldr	r2, [r3, #0]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	2110      	movs	r1, #16
 80046fe:	438a      	bics	r2, r1
 8004700:	601a      	str	r2, [r3, #0]
 8004702:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004704:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	f383 8810 	msr	PRIMASK, r3
}
 800470c:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	228c      	movs	r2, #140	@ 0x8c
 8004712:	2120      	movs	r1, #32
 8004714:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2200      	movs	r2, #0
 800471a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2200      	movs	r2, #0
 8004720:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004722:	46c0      	nop			@ (mov r8, r8)
 8004724:	46bd      	mov	sp, r7
 8004726:	b00e      	add	sp, #56	@ 0x38
 8004728:	bd80      	pop	{r7, pc}
 800472a:	46c0      	nop			@ (mov r8, r8)
 800472c:	fffffedf 	.word	0xfffffedf
 8004730:	effffffe 	.word	0xeffffffe

08004734 <memset>:
 8004734:	0003      	movs	r3, r0
 8004736:	1882      	adds	r2, r0, r2
 8004738:	4293      	cmp	r3, r2
 800473a:	d100      	bne.n	800473e <memset+0xa>
 800473c:	4770      	bx	lr
 800473e:	7019      	strb	r1, [r3, #0]
 8004740:	3301      	adds	r3, #1
 8004742:	e7f9      	b.n	8004738 <memset+0x4>

08004744 <__libc_init_array>:
 8004744:	b570      	push	{r4, r5, r6, lr}
 8004746:	2600      	movs	r6, #0
 8004748:	4c0c      	ldr	r4, [pc, #48]	@ (800477c <__libc_init_array+0x38>)
 800474a:	4d0d      	ldr	r5, [pc, #52]	@ (8004780 <__libc_init_array+0x3c>)
 800474c:	1b64      	subs	r4, r4, r5
 800474e:	10a4      	asrs	r4, r4, #2
 8004750:	42a6      	cmp	r6, r4
 8004752:	d109      	bne.n	8004768 <__libc_init_array+0x24>
 8004754:	2600      	movs	r6, #0
 8004756:	f000 f819 	bl	800478c <_init>
 800475a:	4c0a      	ldr	r4, [pc, #40]	@ (8004784 <__libc_init_array+0x40>)
 800475c:	4d0a      	ldr	r5, [pc, #40]	@ (8004788 <__libc_init_array+0x44>)
 800475e:	1b64      	subs	r4, r4, r5
 8004760:	10a4      	asrs	r4, r4, #2
 8004762:	42a6      	cmp	r6, r4
 8004764:	d105      	bne.n	8004772 <__libc_init_array+0x2e>
 8004766:	bd70      	pop	{r4, r5, r6, pc}
 8004768:	00b3      	lsls	r3, r6, #2
 800476a:	58eb      	ldr	r3, [r5, r3]
 800476c:	4798      	blx	r3
 800476e:	3601      	adds	r6, #1
 8004770:	e7ee      	b.n	8004750 <__libc_init_array+0xc>
 8004772:	00b3      	lsls	r3, r6, #2
 8004774:	58eb      	ldr	r3, [r5, r3]
 8004776:	4798      	blx	r3
 8004778:	3601      	adds	r6, #1
 800477a:	e7f2      	b.n	8004762 <__libc_init_array+0x1e>
 800477c:	0800481c 	.word	0x0800481c
 8004780:	0800481c 	.word	0x0800481c
 8004784:	08004820 	.word	0x08004820
 8004788:	0800481c 	.word	0x0800481c

0800478c <_init>:
 800478c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800478e:	46c0      	nop			@ (mov r8, r8)
 8004790:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004792:	bc08      	pop	{r3}
 8004794:	469e      	mov	lr, r3
 8004796:	4770      	bx	lr

08004798 <_fini>:
 8004798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800479a:	46c0      	nop			@ (mov r8, r8)
 800479c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800479e:	bc08      	pop	{r3}
 80047a0:	469e      	mov	lr, r3
 80047a2:	4770      	bx	lr
